
Nicolas_Seillier.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002ec  00800100  000019e4  00001a78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  008003ec  008003ec  00001d64  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001d64  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000278  00000000  00000000  00001dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000313e  00000000  00000000  00002038  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000cd1  00000000  00000000  00005176  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d0f  00000000  00000000  00005e47  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000638  00000000  00000000  00006b58  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000631  00000000  00000000  00007190  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000014d2  00000000  00000000  000077c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000230  00000000  00000000  00008c93  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <__vector_1>
       8:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__vector_2>
       c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	13 e0       	ldi	r17, 0x03	; 3
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	e4 ee       	ldi	r30, 0xE4	; 228
      84:	f9 e1       	ldi	r31, 0x19	; 25
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	ac 3e       	cpi	r26, 0xEC	; 236
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	23 e0       	ldi	r18, 0x03	; 3
      94:	ac ee       	ldi	r26, 0xEC	; 236
      96:	b3 e0       	ldi	r27, 0x03	; 3
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	ab 3f       	cpi	r26, 0xFB	; 251
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 95 04 	call	0x92a	; 0x92a <main>
      a6:	0c 94 f0 0c 	jmp	0x19e0	; 0x19e0 <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <ADC_Convert>:

uint8_t ADC_Convert(uint8_t channel)
{
	/* Start conversion on the selected channel: write on command pins */
	volatile char* adc = (char *) ADC;
	adc[0] = channel;
      ae:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      b2:	83 ef       	ldi	r24, 0xF3	; 243
      b4:	91 e0       	ldi	r25, 0x01	; 1
      b6:	01 97       	sbiw	r24, 0x01	; 1
      b8:	f1 f7       	brne	.-4      	; 0xb6 <ADC_Convert+0x8>
      ba:	00 c0       	rjmp	.+0      	; 0xbc <ADC_Convert+0xe>
      bc:	00 00       	nop
	/* Wait for the conversion to be performed */
	_delay_ms(2);
	/* Read the result */
	return adc[0];
      be:	80 91 00 14 	lds	r24, 0x1400
}
      c2:	08 95       	ret

000000c4 <CAN_init>:
	
	/*configuration mode*/
	data = MCP2515_READ(0x0F);
	data &= 0x1F;
	data |= (1<<7);
	MCP2515_WRITE(0x0F,data);
      c4:	cf 93       	push	r28
	
	/*set BnRTS low*/
	data = MCP2515_READ(0x0D);
      c6:	df 93       	push	r29
      c8:	1f 92       	push	r1
      ca:	cd b7       	in	r28, 0x3d	; 61
	data &= ~(1<<(buffer+3));
      cc:	de b7       	in	r29, 0x3e	; 62
      ce:	0e 94 23 02 	call	0x446	; 0x446 <MCP2515_RESET>
      d2:	8e e0       	ldi	r24, 0x0E	; 14
      d4:	0e 94 2b 02 	call	0x456	; 0x456 <MCP2515_READ>
      d8:	89 83       	std	Y+1, r24	; 0x01
      da:	40 e4       	ldi	r20, 0x40	; 64
      dc:	60 ee       	ldi	r22, 0xE0	; 224
      de:	8f e0       	ldi	r24, 0x0F	; 15
      e0:	0e 94 3d 02 	call	0x47a	; 0x47a <MCP2515_BIT_MODIFY>
	data |= (1<<(buffer+3));
      e4:	43 e0       	ldi	r20, 0x03	; 3
	MCP2515_WRITE(0x0D,data);
      e6:	63 e0       	ldi	r22, 0x03	; 3
      e8:	8b e2       	ldi	r24, 0x2B	; 43
      ea:	0e 94 3d 02 	call	0x47a	; 0x47a <MCP2515_BIT_MODIFY>
	
	/*loop back mode*/
	data = MCP2515_READ(0x0F);
      ee:	0f 90       	pop	r0
      f0:	df 91       	pop	r29
	data &= 0x1F;
      f2:	cf 91       	pop	r28
	data |= (1<<6);
      f4:	08 95       	ret

000000f6 <draw_home>:
#include "OLED.h"
#include "Framework.h"

void draw_home()
{
	OLED_Reset();
      f6:	0e 94 35 05 	call	0xa6a	; 0xa6a <OLED_Reset>
	OLED_pos(1, 4);
      fa:	64 e0       	ldi	r22, 0x04	; 4
      fc:	81 e0       	ldi	r24, 0x01	; 1
      fe:	0e 94 bc 05 	call	0xb78	; 0xb78 <OLED_pos>
	OLED_print_string("Welcome to the best ping pong");
     102:	84 e8       	ldi	r24, 0x84	; 132
     104:	92 e0       	ldi	r25, 0x02	; 2
     106:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <OLED_print_string>
	OLED_pos(3, 28);
     10a:	6c e1       	ldi	r22, 0x1C	; 28
     10c:	83 e0       	ldi	r24, 0x03	; 3
     10e:	0e 94 bc 05 	call	0xb78	; 0xb78 <OLED_pos>
	OLED_print_string("game in the world!");
     112:	82 ea       	ldi	r24, 0xA2	; 162
     114:	92 e0       	ldi	r25, 0x02	; 2
     116:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <OLED_print_string>
	OLED_pos(7, 20);
     11a:	64 e1       	ldi	r22, 0x14	; 20
     11c:	87 e0       	ldi	r24, 0x07	; 7
     11e:	0e 94 bc 05 	call	0xb78	; 0xb78 <OLED_pos>
	OLED_print_string("Touch right to start!");
     122:	85 eb       	ldi	r24, 0xB5	; 181
     124:	92 e0       	ldi	r25, 0x02	; 2
     126:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <OLED_print_string>
     12a:	08 95       	ret

0000012c <draw_main_menu>:
}

void draw_main_menu()
{
	OLED_Reset();
     12c:	0e 94 35 05 	call	0xa6a	; 0xa6a <OLED_Reset>
	OLED_pos(0, 46);
     130:	6e e2       	ldi	r22, 0x2E	; 46
     132:	80 e0       	ldi	r24, 0x00	; 0
     134:	0e 94 bc 05 	call	0xb78	; 0xb78 <OLED_pos>
	OLED_print_string("Main menu");	
     138:	8b ec       	ldi	r24, 0xCB	; 203
     13a:	92 e0       	ldi	r25, 0x02	; 2
     13c:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <OLED_print_string>
	OLED_pos(2, 8);
     140:	68 e0       	ldi	r22, 0x08	; 8
     142:	82 e0       	ldi	r24, 0x02	; 2
     144:	0e 94 bc 05 	call	0xb78	; 0xb78 <OLED_pos>
	OLED_print_arrow();
     148:	0e 94 fe 05 	call	0xbfc	; 0xbfc <OLED_print_arrow>
	OLED_pos(2, 20);
     14c:	64 e1       	ldi	r22, 0x14	; 20
     14e:	82 e0       	ldi	r24, 0x02	; 2
     150:	0e 94 bc 05 	call	0xb78	; 0xb78 <OLED_pos>
	OLED_print_string("One-player mode");
     154:	85 ed       	ldi	r24, 0xD5	; 213
     156:	92 e0       	ldi	r25, 0x02	; 2
     158:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <OLED_print_string>
	OLED_pos(3, 20);
     15c:	64 e1       	ldi	r22, 0x14	; 20
     15e:	83 e0       	ldi	r24, 0x03	; 3
     160:	0e 94 bc 05 	call	0xb78	; 0xb78 <OLED_pos>
	OLED_print_string("Two-players mode");
     164:	85 ee       	ldi	r24, 0xE5	; 229
     166:	92 e0       	ldi	r25, 0x02	; 2
     168:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <OLED_print_string>
	OLED_pos(4, 20);
     16c:	64 e1       	ldi	r22, 0x14	; 20
     16e:	84 e0       	ldi	r24, 0x04	; 4
     170:	0e 94 bc 05 	call	0xb78	; 0xb78 <OLED_pos>
	OLED_print_string("Highscores");
     174:	86 ef       	ldi	r24, 0xF6	; 246
     176:	92 e0       	ldi	r25, 0x02	; 2
     178:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <OLED_print_string>
	OLED_pos(5, 20);
     17c:	64 e1       	ldi	r22, 0x14	; 20
     17e:	85 e0       	ldi	r24, 0x05	; 5
     180:	0e 94 bc 05 	call	0xb78	; 0xb78 <OLED_pos>
	OLED_print_string("Settings");
     184:	81 e0       	ldi	r24, 0x01	; 1
     186:	93 e0       	ldi	r25, 0x03	; 3
     188:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <OLED_print_string>
	OLED_pos(7, 48);
     18c:	60 e3       	ldi	r22, 0x30	; 48
     18e:	87 e0       	ldi	r24, 0x07	; 7
     190:	0e 94 bc 05 	call	0xb78	; 0xb78 <OLED_pos>
	OLED_print_string("Touch right to enter");
     194:	8a e0       	ldi	r24, 0x0A	; 10
     196:	93 e0       	ldi	r25, 0x03	; 3
     198:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <OLED_print_string>
	OLED_pos(7,0);
     19c:	60 e0       	ldi	r22, 0x00	; 0
     19e:	87 e0       	ldi	r24, 0x07	; 7
     1a0:	0e 94 bc 05 	call	0xb78	; 0xb78 <OLED_pos>
	OLED_print_home();
     1a4:	0e 94 15 06 	call	0xc2a	; 0xc2a <OLED_print_home>
     1a8:	08 95       	ret

000001aa <draw_one_player>:
}

void draw_one_player()
{
	OLED_Reset();
     1aa:	0e 94 35 05 	call	0xa6a	; 0xa6a <OLED_Reset>
	OLED_pos(0, 32);
     1ae:	60 e2       	ldi	r22, 0x20	; 32
     1b0:	80 e0       	ldi	r24, 0x00	; 0
     1b2:	0e 94 bc 05 	call	0xb78	; 0xb78 <OLED_pos>
	OLED_print_string("One-player mode");
     1b6:	85 ed       	ldi	r24, 0xD5	; 213
     1b8:	92 e0       	ldi	r25, 0x02	; 2
     1ba:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <OLED_print_string>
	OLED_print_woman(3,58);
     1be:	6a e3       	ldi	r22, 0x3A	; 58
     1c0:	83 e0       	ldi	r24, 0x03	; 3
     1c2:	0e 94 25 06 	call	0xc4a	; 0xc4a <OLED_print_woman>
	OLED_pos(7,0);
     1c6:	60 e0       	ldi	r22, 0x00	; 0
     1c8:	87 e0       	ldi	r24, 0x07	; 7
     1ca:	0e 94 bc 05 	call	0xb78	; 0xb78 <OLED_pos>
	OLED_print_home();
     1ce:	0e 94 15 06 	call	0xc2a	; 0xc2a <OLED_print_home>
     1d2:	08 95       	ret

000001d4 <draw_two_players>:
}

void draw_two_players()
{
	OLED_Reset();
     1d4:	0e 94 35 05 	call	0xa6a	; 0xa6a <OLED_Reset>
	OLED_pos(0, 32);
     1d8:	60 e2       	ldi	r22, 0x20	; 32
     1da:	80 e0       	ldi	r24, 0x00	; 0
     1dc:	0e 94 bc 05 	call	0xb78	; 0xb78 <OLED_pos>
	OLED_print_string("Two-players mode");
     1e0:	85 ee       	ldi	r24, 0xE5	; 229
     1e2:	92 e0       	ldi	r25, 0x02	; 2
     1e4:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <OLED_print_string>
	OLED_print_woman(3,29);
     1e8:	6d e1       	ldi	r22, 0x1D	; 29
     1ea:	83 e0       	ldi	r24, 0x03	; 3
     1ec:	0e 94 25 06 	call	0xc4a	; 0xc4a <OLED_print_woman>
	OLED_print_woman(3,87);
     1f0:	67 e5       	ldi	r22, 0x57	; 87
     1f2:	83 e0       	ldi	r24, 0x03	; 3
     1f4:	0e 94 25 06 	call	0xc4a	; 0xc4a <OLED_print_woman>
	OLED_pos(7,0);
     1f8:	60 e0       	ldi	r22, 0x00	; 0
     1fa:	87 e0       	ldi	r24, 0x07	; 7
     1fc:	0e 94 bc 05 	call	0xb78	; 0xb78 <OLED_pos>
	OLED_print_home();
     200:	0e 94 15 06 	call	0xc2a	; 0xc2a <OLED_print_home>
     204:	08 95       	ret

00000206 <draw_highscores>:
}

void draw_highscores()
{
	OLED_Reset();
     206:	0e 94 35 05 	call	0xa6a	; 0xa6a <OLED_Reset>
	OLED_pos(0, 44);
     20a:	6c e2       	ldi	r22, 0x2C	; 44
     20c:	80 e0       	ldi	r24, 0x00	; 0
     20e:	0e 94 bc 05 	call	0xb78	; 0xb78 <OLED_pos>
	OLED_print_string("Highscores");
     212:	86 ef       	ldi	r24, 0xF6	; 246
     214:	92 e0       	ldi	r25, 0x02	; 2
     216:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <OLED_print_string>
	OLED_pos(2, 20);
     21a:	64 e1       	ldi	r22, 0x14	; 20
     21c:	82 e0       	ldi	r24, 0x02	; 2
     21e:	0e 94 bc 05 	call	0xb78	; 0xb78 <OLED_pos>
	OLED_print_string("1. 650 points");
     222:	8f e1       	ldi	r24, 0x1F	; 31
     224:	93 e0       	ldi	r25, 0x03	; 3
     226:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <OLED_print_string>
	OLED_pos(3, 20);
     22a:	64 e1       	ldi	r22, 0x14	; 20
     22c:	83 e0       	ldi	r24, 0x03	; 3
     22e:	0e 94 bc 05 	call	0xb78	; 0xb78 <OLED_pos>
	OLED_print_string("2. 422 points");
     232:	8d e2       	ldi	r24, 0x2D	; 45
     234:	93 e0       	ldi	r25, 0x03	; 3
     236:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <OLED_print_string>
	OLED_pos(4, 20);
     23a:	64 e1       	ldi	r22, 0x14	; 20
     23c:	84 e0       	ldi	r24, 0x04	; 4
     23e:	0e 94 bc 05 	call	0xb78	; 0xb78 <OLED_pos>
	OLED_print_string("3. 200 points");
     242:	8b e3       	ldi	r24, 0x3B	; 59
     244:	93 e0       	ldi	r25, 0x03	; 3
     246:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <OLED_print_string>
	OLED_pos(7,0);
     24a:	60 e0       	ldi	r22, 0x00	; 0
     24c:	87 e0       	ldi	r24, 0x07	; 7
     24e:	0e 94 bc 05 	call	0xb78	; 0xb78 <OLED_pos>
	OLED_print_home();
     252:	0e 94 15 06 	call	0xc2a	; 0xc2a <OLED_print_home>
     256:	08 95       	ret

00000258 <draw_settings>:
}

void draw_settings()
{
	OLED_Reset();
     258:	0e 94 35 05 	call	0xa6a	; 0xa6a <OLED_Reset>
	OLED_pos(0, 48);
     25c:	60 e3       	ldi	r22, 0x30	; 48
     25e:	80 e0       	ldi	r24, 0x00	; 0
     260:	0e 94 bc 05 	call	0xb78	; 0xb78 <OLED_pos>
	OLED_print_string("Settings");
     264:	81 e0       	ldi	r24, 0x01	; 1
     266:	93 e0       	ldi	r25, 0x03	; 3
     268:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <OLED_print_string>
	OLED_pos(2, 8);
     26c:	68 e0       	ldi	r22, 0x08	; 8
     26e:	82 e0       	ldi	r24, 0x02	; 2
     270:	0e 94 bc 05 	call	0xb78	; 0xb78 <OLED_pos>
	OLED_print_arrow();
     274:	0e 94 fe 05 	call	0xbfc	; 0xbfc <OLED_print_arrow>
	OLED_pos(2, 20);
     278:	64 e1       	ldi	r22, 0x14	; 20
     27a:	82 e0       	ldi	r24, 0x02	; 2
     27c:	0e 94 bc 05 	call	0xb78	; 0xb78 <OLED_pos>
	OLED_print_string("Brightness");
     280:	89 e4       	ldi	r24, 0x49	; 73
     282:	93 e0       	ldi	r25, 0x03	; 3
     284:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <OLED_print_string>
	OLED_pos(3, 20);
     288:	64 e1       	ldi	r22, 0x14	; 20
     28a:	83 e0       	ldi	r24, 0x03	; 3
     28c:	0e 94 bc 05 	call	0xb78	; 0xb78 <OLED_pos>
	OLED_print_string("Sound");
     290:	84 e5       	ldi	r24, 0x54	; 84
     292:	93 e0       	ldi	r25, 0x03	; 3
     294:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <OLED_print_string>
	OLED_pos(7,0);
     298:	60 e0       	ldi	r22, 0x00	; 0
     29a:	87 e0       	ldi	r24, 0x07	; 7
     29c:	0e 94 bc 05 	call	0xb78	; 0xb78 <OLED_pos>
	OLED_print_home();
     2a0:	0e 94 15 06 	call	0xc2a	; 0xc2a <OLED_print_home>
     2a4:	08 95       	ret

000002a6 <draw_brightness>:
}

void draw_brightness()
{
	OLED_Reset();
     2a6:	0e 94 35 05 	call	0xa6a	; 0xa6a <OLED_Reset>
	OLED_pos(0, 44);
     2aa:	6c e2       	ldi	r22, 0x2C	; 44
     2ac:	80 e0       	ldi	r24, 0x00	; 0
     2ae:	0e 94 bc 05 	call	0xb78	; 0xb78 <OLED_pos>
	OLED_print_string("Brightness");
     2b2:	89 e4       	ldi	r24, 0x49	; 73
     2b4:	93 e0       	ldi	r25, 0x03	; 3
     2b6:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <OLED_print_string>
	OLED_pos(5, 0);
     2ba:	60 e0       	ldi	r22, 0x00	; 0
     2bc:	85 e0       	ldi	r24, 0x05	; 5
     2be:	0e 94 bc 05 	call	0xb78	; 0xb78 <OLED_pos>
	OLED_print_string("Use left slide to set brightness");
     2c2:	8a e5       	ldi	r24, 0x5A	; 90
     2c4:	93 e0       	ldi	r25, 0x03	; 3
     2c6:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <OLED_print_string>
	OLED_pos(7,0);
     2ca:	60 e0       	ldi	r22, 0x00	; 0
     2cc:	87 e0       	ldi	r24, 0x07	; 7
     2ce:	0e 94 bc 05 	call	0xb78	; 0xb78 <OLED_pos>
	OLED_print_home();
     2d2:	0e 94 15 06 	call	0xc2a	; 0xc2a <OLED_print_home>
     2d6:	08 95       	ret

000002d8 <Joystick_Position>:

#define JOYSTICK_VERTICAL 0x4
#define JOYSTICK_HORIZONTAL 0x5

Position Joystick_Position()
{
     2d8:	0f 93       	push	r16
     2da:	1f 93       	push	r17
     2dc:	cf 93       	push	r28
     2de:	df 93       	push	r29
     2e0:	cd b7       	in	r28, 0x3d	; 61
     2e2:	de b7       	in	r29, 0x3e	; 62
     2e4:	28 97       	sbiw	r28, 0x08	; 8
     2e6:	0f b6       	in	r0, 0x3f	; 63
     2e8:	f8 94       	cli
     2ea:	de bf       	out	0x3e, r29	; 62
     2ec:	0f be       	out	0x3f, r0	; 63
     2ee:	cd bf       	out	0x3d, r28	; 61
	uint8_t joystick_horizontal = ADC_Convert(JOYSTICK_HORIZONTAL);
     2f0:	85 e0       	ldi	r24, 0x05	; 5
     2f2:	0e 94 57 00 	call	0xae	; 0xae <ADC_Convert>
     2f6:	18 2f       	mov	r17, r24
	uint8_t joystick_vertical = ADC_Convert(JOYSTICK_VERTICAL);
     2f8:	84 e0       	ldi	r24, 0x04	; 4
     2fa:	0e 94 57 00 	call	0xae	; 0xae <ADC_Convert>
     2fe:	08 2f       	mov	r16, r24
	float X = joystick_horizontal;
     300:	61 2f       	mov	r22, r17
     302:	70 e0       	ldi	r23, 0x00	; 0
     304:	80 e0       	ldi	r24, 0x00	; 0
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	0e 94 52 07 	call	0xea4	; 0xea4 <__floatunsisf>
	float Y = joystick_vertical;
	
	Position joystick;
	joystick.x = (X / 255.0) * 200.0 - 100.0;
     30c:	20 e0       	ldi	r18, 0x00	; 0
     30e:	30 e0       	ldi	r19, 0x00	; 0
     310:	4f e7       	ldi	r20, 0x7F	; 127
     312:	53 e4       	ldi	r21, 0x43	; 67
     314:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <__divsf3>
     318:	20 e0       	ldi	r18, 0x00	; 0
     31a:	30 e0       	ldi	r19, 0x00	; 0
     31c:	48 e4       	ldi	r20, 0x48	; 72
     31e:	53 e4       	ldi	r21, 0x43	; 67
     320:	0e 94 08 08 	call	0x1010	; 0x1010 <__mulsf3>
     324:	20 e0       	ldi	r18, 0x00	; 0
     326:	30 e0       	ldi	r19, 0x00	; 0
     328:	48 ec       	ldi	r20, 0xC8	; 200
     32a:	52 e4       	ldi	r21, 0x42	; 66
     32c:	0e 94 81 06 	call	0xd02	; 0xd02 <__subsf3>
     330:	48 2f       	mov	r20, r24
     332:	59 2f       	mov	r21, r25
	joystick.y = (Y / 255.0) * 200.0 - 100.0;
	return joystick;
     334:	16 2f       	mov	r17, r22
     336:	86 2f       	mov	r24, r22
     338:	97 2f       	mov	r25, r23
     33a:	a4 2f       	mov	r26, r20
     33c:	b5 2f       	mov	r27, r21
     33e:	89 83       	std	Y+1, r24	; 0x01
     340:	9a 83       	std	Y+2, r25	; 0x02
     342:	ab 83       	std	Y+3, r26	; 0x03
     344:	bc 83       	std	Y+4, r27	; 0x04
Position Joystick_Position()
{
	uint8_t joystick_horizontal = ADC_Convert(JOYSTICK_HORIZONTAL);
	uint8_t joystick_vertical = ADC_Convert(JOYSTICK_VERTICAL);
	float X = joystick_horizontal;
	float Y = joystick_vertical;
     346:	60 2f       	mov	r22, r16
     348:	70 e0       	ldi	r23, 0x00	; 0
     34a:	80 e0       	ldi	r24, 0x00	; 0
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	0e 94 52 07 	call	0xea4	; 0xea4 <__floatunsisf>
	
	Position joystick;
	joystick.x = (X / 255.0) * 200.0 - 100.0;
	joystick.y = (Y / 255.0) * 200.0 - 100.0;
     352:	20 e0       	ldi	r18, 0x00	; 0
     354:	30 e0       	ldi	r19, 0x00	; 0
     356:	4f e7       	ldi	r20, 0x7F	; 127
     358:	53 e4       	ldi	r21, 0x43	; 67
     35a:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <__divsf3>
     35e:	20 e0       	ldi	r18, 0x00	; 0
     360:	30 e0       	ldi	r19, 0x00	; 0
     362:	48 e4       	ldi	r20, 0x48	; 72
     364:	53 e4       	ldi	r21, 0x43	; 67
     366:	0e 94 08 08 	call	0x1010	; 0x1010 <__mulsf3>
     36a:	20 e0       	ldi	r18, 0x00	; 0
     36c:	30 e0       	ldi	r19, 0x00	; 0
     36e:	48 ec       	ldi	r20, 0xC8	; 200
     370:	52 e4       	ldi	r21, 0x42	; 66
     372:	0e 94 81 06 	call	0xd02	; 0xd02 <__subsf3>
     376:	e6 2f       	mov	r30, r22
	return joystick;
     378:	46 2f       	mov	r20, r22
     37a:	57 2f       	mov	r21, r23
     37c:	68 2f       	mov	r22, r24
     37e:	79 2f       	mov	r23, r25
     380:	4d 83       	std	Y+5, r20	; 0x05
     382:	5e 83       	std	Y+6, r21	; 0x06
     384:	6f 83       	std	Y+7, r22	; 0x07
     386:	78 87       	std	Y+8, r23	; 0x08
     388:	21 2f       	mov	r18, r17
     38a:	3a 81       	ldd	r19, Y+2	; 0x02
     38c:	4b 81       	ldd	r20, Y+3	; 0x03
     38e:	5c 81       	ldd	r21, Y+4	; 0x04
     390:	6e 2f       	mov	r22, r30
     392:	7e 81       	ldd	r23, Y+6	; 0x06
}
     394:	8f 81       	ldd	r24, Y+7	; 0x07
     396:	98 85       	ldd	r25, Y+8	; 0x08
     398:	28 96       	adiw	r28, 0x08	; 8
     39a:	0f b6       	in	r0, 0x3f	; 63
     39c:	f8 94       	cli
     39e:	de bf       	out	0x3e, r29	; 62
     3a0:	0f be       	out	0x3f, r0	; 63
     3a2:	cd bf       	out	0x3d, r28	; 61
     3a4:	df 91       	pop	r29
     3a6:	cf 91       	pop	r28
     3a8:	1f 91       	pop	r17
     3aa:	0f 91       	pop	r16
     3ac:	08 95       	ret

000003ae <Joystick_Direction>:

char* Joystick_Direction(Position* joystick)
{
     3ae:	cf 92       	push	r12
     3b0:	df 92       	push	r13
     3b2:	ef 92       	push	r14
     3b4:	ff 92       	push	r15
     3b6:	cf 93       	push	r28
     3b8:	df 93       	push	r29
     3ba:	ec 01       	movw	r28, r24
	if(joystick->x < -71)
     3bc:	c8 80       	ld	r12, Y
     3be:	d9 80       	ldd	r13, Y+1	; 0x01
     3c0:	ea 80       	ldd	r14, Y+2	; 0x02
     3c2:	fb 80       	ldd	r15, Y+3	; 0x03
     3c4:	20 e0       	ldi	r18, 0x00	; 0
     3c6:	30 e0       	ldi	r19, 0x00	; 0
     3c8:	4e e8       	ldi	r20, 0x8E	; 142
     3ca:	52 ec       	ldi	r21, 0xC2	; 194
     3cc:	c7 01       	movw	r24, r14
     3ce:	b6 01       	movw	r22, r12
     3d0:	0e 94 e6 06 	call	0xdcc	; 0xdcc <__cmpsf2>
     3d4:	88 23       	and	r24, r24
     3d6:	2c f1       	brlt	.+74     	; 0x422 <Joystick_Direction+0x74>
	return "LEFT";
	else if(joystick->x > 71)
     3d8:	20 e0       	ldi	r18, 0x00	; 0
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	4e e8       	ldi	r20, 0x8E	; 142
     3de:	52 e4       	ldi	r21, 0x42	; 66
     3e0:	c7 01       	movw	r24, r14
     3e2:	b6 01       	movw	r22, r12
     3e4:	0e 94 04 08 	call	0x1008	; 0x1008 <__gesf2>
     3e8:	18 16       	cp	r1, r24
     3ea:	f4 f0       	brlt	.+60     	; 0x428 <Joystick_Direction+0x7a>
	return "RIGHT";
	
	if(joystick->y < -71)
     3ec:	cc 80       	ldd	r12, Y+4	; 0x04
     3ee:	dd 80       	ldd	r13, Y+5	; 0x05
     3f0:	ee 80       	ldd	r14, Y+6	; 0x06
     3f2:	ff 80       	ldd	r15, Y+7	; 0x07
     3f4:	20 e0       	ldi	r18, 0x00	; 0
     3f6:	30 e0       	ldi	r19, 0x00	; 0
     3f8:	4e e8       	ldi	r20, 0x8E	; 142
     3fa:	52 ec       	ldi	r21, 0xC2	; 194
     3fc:	c7 01       	movw	r24, r14
     3fe:	b6 01       	movw	r22, r12
     400:	0e 94 e6 06 	call	0xdcc	; 0xdcc <__cmpsf2>
     404:	88 23       	and	r24, r24
     406:	9c f0       	brlt	.+38     	; 0x42e <Joystick_Direction+0x80>
	return "DOWN";
	else if(joystick->y > 71)
     408:	20 e0       	ldi	r18, 0x00	; 0
     40a:	30 e0       	ldi	r19, 0x00	; 0
     40c:	4e e8       	ldi	r20, 0x8E	; 142
     40e:	52 e4       	ldi	r21, 0x42	; 66
     410:	c7 01       	movw	r24, r14
     412:	b6 01       	movw	r22, r12
     414:	0e 94 04 08 	call	0x1008	; 0x1008 <__gesf2>
     418:	18 16       	cp	r1, r24
     41a:	64 f4       	brge	.+24     	; 0x434 <Joystick_Direction+0x86>
	return "UP";
     41c:	8b e8       	ldi	r24, 0x8B	; 139
     41e:	93 e0       	ldi	r25, 0x03	; 3
     420:	0b c0       	rjmp	.+22     	; 0x438 <Joystick_Direction+0x8a>
}

char* Joystick_Direction(Position* joystick)
{
	if(joystick->x < -71)
	return "LEFT";
     422:	8b e7       	ldi	r24, 0x7B	; 123
     424:	93 e0       	ldi	r25, 0x03	; 3
     426:	08 c0       	rjmp	.+16     	; 0x438 <Joystick_Direction+0x8a>
	else if(joystick->x > 71)
	return "RIGHT";
     428:	80 e8       	ldi	r24, 0x80	; 128
     42a:	93 e0       	ldi	r25, 0x03	; 3
     42c:	05 c0       	rjmp	.+10     	; 0x438 <Joystick_Direction+0x8a>
	
	if(joystick->y < -71)
	return "DOWN";
     42e:	86 e8       	ldi	r24, 0x86	; 134
     430:	93 e0       	ldi	r25, 0x03	; 3
     432:	02 c0       	rjmp	.+4      	; 0x438 <Joystick_Direction+0x8a>
	else if(joystick->y > 71)
	return "UP";
	
	return "NEUTRAL";
     434:	8e e8       	ldi	r24, 0x8E	; 142
     436:	93 e0       	ldi	r25, 0x03	; 3
     438:	df 91       	pop	r29
     43a:	cf 91       	pop	r28
     43c:	ff 90       	pop	r15
     43e:	ef 90       	pop	r14
     440:	df 90       	pop	r13
     442:	cf 90       	pop	r12
     444:	08 95       	ret

00000446 <MCP2515_RESET>:
#include "SPI.h"
#include "MCP251DEFS.h"

void MCP2515_RESET ()
{
	SPI_on();
     446:	0e 94 67 06 	call	0xcce	; 0xcce <SPI_on>
	SPI_write(0xC0);
     44a:	80 ec       	ldi	r24, 0xC0	; 192
     44c:	0e 94 5e 06 	call	0xcbc	; 0xcbc <SPI_write>
	SPI_off();
     450:	0e 94 69 06 	call	0xcd2	; 0xcd2 <SPI_off>
     454:	08 95       	ret

00000456 <MCP2515_READ>:
}

char MCP2515_READ(uint8_t address)
{
     456:	cf 93       	push	r28
     458:	c8 2f       	mov	r28, r24
	SPI_on(); 
     45a:	0e 94 67 06 	call	0xcce	; 0xcce <SPI_on>
	SPI_write(0x03);
     45e:	83 e0       	ldi	r24, 0x03	; 3
     460:	0e 94 5e 06 	call	0xcbc	; 0xcbc <SPI_write>
	SPI_write(address);
     464:	8c 2f       	mov	r24, r28
     466:	0e 94 5e 06 	call	0xcbc	; 0xcbc <SPI_write>
	char data = SPI_read();
     46a:	0e 94 62 06 	call	0xcc4	; 0xcc4 <SPI_read>
     46e:	c8 2f       	mov	r28, r24
	SPI_off();
     470:	0e 94 69 06 	call	0xcd2	; 0xcd2 <SPI_off>
	return data;
}
     474:	8c 2f       	mov	r24, r28
     476:	cf 91       	pop	r28
     478:	08 95       	ret

0000047a <MCP2515_BIT_MODIFY>:
	SPI_off();
	return data;
}

void MCP2515_BIT_MODIFY(uint8_t address, uint8_t mask, uint8_t data)
{
     47a:	1f 93       	push	r17
     47c:	cf 93       	push	r28
     47e:	df 93       	push	r29
     480:	18 2f       	mov	r17, r24
     482:	d6 2f       	mov	r29, r22
     484:	c4 2f       	mov	r28, r20
	SPI_on();
     486:	0e 94 67 06 	call	0xcce	; 0xcce <SPI_on>
	SPI_write(MCP_BITMOD);
     48a:	85 e0       	ldi	r24, 0x05	; 5
     48c:	0e 94 5e 06 	call	0xcbc	; 0xcbc <SPI_write>
	SPI_write(address);
     490:	81 2f       	mov	r24, r17
     492:	0e 94 5e 06 	call	0xcbc	; 0xcbc <SPI_write>
	SPI_write(mask);
     496:	8d 2f       	mov	r24, r29
     498:	0e 94 5e 06 	call	0xcbc	; 0xcbc <SPI_write>
	SPI_write(data);
     49c:	8c 2f       	mov	r24, r28
     49e:	0e 94 5e 06 	call	0xcbc	; 0xcbc <SPI_write>
	SPI_off();	
     4a2:	0e 94 69 06 	call	0xcd2	; 0xcd2 <SPI_off>
}
     4a6:	df 91       	pop	r29
     4a8:	cf 91       	pop	r28
     4aa:	1f 91       	pop	r17
     4ac:	08 95       	ret

000004ae <MCP2515_INIT>:

void MCP2515_INIT()
{
	SPI_Init();
     4ae:	0e 94 57 06 	call	0xcae	; 0xcae <SPI_Init>
	
	char result = MCP2515_READ(0x0E);
     4b2:	8e e0       	ldi	r24, 0x0E	; 14
     4b4:	0e 94 2b 02 	call	0x456	; 0x456 <MCP2515_READ>
	printf("MCP_CANSTAT avant reset= %c \n",result);
     4b8:	1f 92       	push	r1
     4ba:	8f 93       	push	r24
     4bc:	86 e9       	ldi	r24, 0x96	; 150
     4be:	93 e0       	ldi	r25, 0x03	; 3
     4c0:	9f 93       	push	r25
     4c2:	8f 93       	push	r24
     4c4:	0e 94 b6 08 	call	0x116c	; 0x116c <printf>
	
	MCP2515_RESET();
     4c8:	0e 94 23 02 	call	0x446	; 0x446 <MCP2515_RESET>
	
	result = MCP2515_READ(0x0E);
     4cc:	8e e0       	ldi	r24, 0x0E	; 14
     4ce:	0e 94 2b 02 	call	0x456	; 0x456 <MCP2515_READ>
	printf("MCP_CANSTAT= %c \n",result);
     4d2:	1f 92       	push	r1
     4d4:	8f 93       	push	r24
     4d6:	84 eb       	ldi	r24, 0xB4	; 180
     4d8:	93 e0       	ldi	r25, 0x03	; 3
     4da:	9f 93       	push	r25
     4dc:	8f 93       	push	r24
     4de:	0e 94 b6 08 	call	0x116c	; 0x116c <printf>
     4e2:	8d b7       	in	r24, 0x3d	; 61
     4e4:	9e b7       	in	r25, 0x3e	; 62
     4e6:	08 96       	adiw	r24, 0x08	; 8
     4e8:	0f b6       	in	r0, 0x3f	; 63
     4ea:	f8 94       	cli
     4ec:	9e bf       	out	0x3e, r25	; 62
     4ee:	0f be       	out	0x3f, r0	; 63
     4f0:	8d bf       	out	0x3d, r24	; 61
     4f2:	08 95       	ret

000004f4 <__vector_1>:
int arrow = 2 ;
int i = 0;
uint8_t slide_left;

ISR(INT0_vect)
{
     4f4:	1f 92       	push	r1
     4f6:	0f 92       	push	r0
     4f8:	0f b6       	in	r0, 0x3f	; 63
     4fa:	0f 92       	push	r0
     4fc:	11 24       	eor	r1, r1
     4fe:	2f 93       	push	r18
     500:	3f 93       	push	r19
     502:	4f 93       	push	r20
     504:	5f 93       	push	r21
     506:	6f 93       	push	r22
     508:	7f 93       	push	r23
     50a:	8f 93       	push	r24
     50c:	9f 93       	push	r25
     50e:	af 93       	push	r26
     510:	bf 93       	push	r27
     512:	ef 93       	push	r30
     514:	ff 93       	push	r31
	if(i < 3)
     516:	80 91 ec 03 	lds	r24, 0x03EC
     51a:	90 91 ed 03 	lds	r25, 0x03ED
     51e:	83 30       	cpi	r24, 0x03	; 3
     520:	91 05       	cpc	r25, r1
     522:	34 f4       	brge	.+12     	; 0x530 <__stack+0x31>
	{
		i++;
     524:	01 96       	adiw	r24, 0x01	; 1
     526:	90 93 ed 03 	sts	0x03ED, r25
     52a:	80 93 ec 03 	sts	0x03EC, r24
     52e:	64 c0       	rjmp	.+200    	; 0x5f8 <__stack+0xf9>
	}
	else
	{
		if(mode == HOME)
     530:	80 91 ee 03 	lds	r24, 0x03EE
     534:	90 91 ef 03 	lds	r25, 0x03EF
     538:	00 97       	sbiw	r24, 0x00	; 0
     53a:	79 f4       	brne	.+30     	; 0x55a <__stack+0x5b>
		{
			mode = MAIN_MENU;
     53c:	81 e0       	ldi	r24, 0x01	; 1
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	90 93 ef 03 	sts	0x03EF, r25
     544:	80 93 ee 03 	sts	0x03EE, r24
			arrow = 2;
     548:	82 e0       	ldi	r24, 0x02	; 2
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	90 93 07 01 	sts	0x0107, r25
     550:	80 93 06 01 	sts	0x0106, r24
			draw_main_menu();
     554:	0e 94 96 00 	call	0x12c	; 0x12c <draw_main_menu>
     558:	4f c0       	rjmp	.+158    	; 0x5f8 <__stack+0xf9>
		}
		else if(mode == MAIN_MENU && arrow == 2)
     55a:	81 30       	cpi	r24, 0x01	; 1
     55c:	91 05       	cpc	r25, r1
     55e:	c9 f5       	brne	.+114    	; 0x5d2 <__stack+0xd3>
     560:	80 91 06 01 	lds	r24, 0x0106
     564:	90 91 07 01 	lds	r25, 0x0107
     568:	82 30       	cpi	r24, 0x02	; 2
     56a:	91 05       	cpc	r25, r1
     56c:	49 f4       	brne	.+18     	; 0x580 <__stack+0x81>
		{
			mode = ONE_PLAYER;
     56e:	8b e0       	ldi	r24, 0x0B	; 11
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	90 93 ef 03 	sts	0x03EF, r25
     576:	80 93 ee 03 	sts	0x03EE, r24
			draw_one_player();
     57a:	0e 94 d5 00 	call	0x1aa	; 0x1aa <draw_one_player>
     57e:	3c c0       	rjmp	.+120    	; 0x5f8 <__stack+0xf9>
		}
		else if(mode == MAIN_MENU && arrow == 3)
     580:	83 30       	cpi	r24, 0x03	; 3
     582:	91 05       	cpc	r25, r1
     584:	49 f4       	brne	.+18     	; 0x598 <__stack+0x99>
		{
			mode = TWO_PLAYERS;
     586:	8c e0       	ldi	r24, 0x0C	; 12
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	90 93 ef 03 	sts	0x03EF, r25
     58e:	80 93 ee 03 	sts	0x03EE, r24
			draw_two_players();
     592:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <draw_two_players>
     596:	30 c0       	rjmp	.+96     	; 0x5f8 <__stack+0xf9>
		}
		else if(mode == MAIN_MENU && arrow == 4)
     598:	84 30       	cpi	r24, 0x04	; 4
     59a:	91 05       	cpc	r25, r1
     59c:	49 f4       	brne	.+18     	; 0x5b0 <__stack+0xb1>
		{
			mode = HIGHSCORES;
     59e:	8d e0       	ldi	r24, 0x0D	; 13
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	90 93 ef 03 	sts	0x03EF, r25
     5a6:	80 93 ee 03 	sts	0x03EE, r24
			draw_highscores();
     5aa:	0e 94 03 01 	call	0x206	; 0x206 <draw_highscores>
     5ae:	24 c0       	rjmp	.+72     	; 0x5f8 <__stack+0xf9>
		}
		else if(mode == MAIN_MENU && arrow == 5)
     5b0:	05 97       	sbiw	r24, 0x05	; 5
     5b2:	11 f5       	brne	.+68     	; 0x5f8 <__stack+0xf9>
		{
			mode = SETTINGS;
     5b4:	8e e0       	ldi	r24, 0x0E	; 14
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	90 93 ef 03 	sts	0x03EF, r25
     5bc:	80 93 ee 03 	sts	0x03EE, r24
			arrow = 2;
     5c0:	82 e0       	ldi	r24, 0x02	; 2
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	90 93 07 01 	sts	0x0107, r25
     5c8:	80 93 06 01 	sts	0x0106, r24
			draw_settings();
     5cc:	0e 94 2c 01 	call	0x258	; 0x258 <draw_settings>
     5d0:	13 c0       	rjmp	.+38     	; 0x5f8 <__stack+0xf9>
		}
		else if(mode == SETTINGS && arrow == 2)
     5d2:	0e 97       	sbiw	r24, 0x0e	; 14
     5d4:	89 f4       	brne	.+34     	; 0x5f8 <__stack+0xf9>
     5d6:	80 91 06 01 	lds	r24, 0x0106
     5da:	90 91 07 01 	lds	r25, 0x0107
     5de:	02 97       	sbiw	r24, 0x02	; 2
     5e0:	59 f4       	brne	.+22     	; 0x5f8 <__stack+0xf9>
		{
			mode = BRIGHTNESS;
     5e2:	8d e8       	ldi	r24, 0x8D	; 141
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	90 93 ef 03 	sts	0x03EF, r25
     5ea:	80 93 ee 03 	sts	0x03EE, r24
			draw_brightness(slide_left);
     5ee:	80 91 f0 03 	lds	r24, 0x03F0
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	0e 94 53 01 	call	0x2a6	; 0x2a6 <draw_brightness>
		}
	}
}
     5f8:	ff 91       	pop	r31
     5fa:	ef 91       	pop	r30
     5fc:	bf 91       	pop	r27
     5fe:	af 91       	pop	r26
     600:	9f 91       	pop	r25
     602:	8f 91       	pop	r24
     604:	7f 91       	pop	r23
     606:	6f 91       	pop	r22
     608:	5f 91       	pop	r21
     60a:	4f 91       	pop	r20
     60c:	3f 91       	pop	r19
     60e:	2f 91       	pop	r18
     610:	0f 90       	pop	r0
     612:	0f be       	out	0x3f, r0	; 63
     614:	0f 90       	pop	r0
     616:	1f 90       	pop	r1
     618:	18 95       	reti

0000061a <__vector_2>:

ISR(INT1_vect)
{
     61a:	1f 92       	push	r1
     61c:	0f 92       	push	r0
     61e:	0f b6       	in	r0, 0x3f	; 63
     620:	0f 92       	push	r0
     622:	11 24       	eor	r1, r1
     624:	2f 93       	push	r18
     626:	3f 93       	push	r19
     628:	4f 93       	push	r20
     62a:	5f 93       	push	r21
     62c:	6f 93       	push	r22
     62e:	7f 93       	push	r23
     630:	8f 93       	push	r24
     632:	9f 93       	push	r25
     634:	af 93       	push	r26
     636:	bf 93       	push	r27
     638:	ef 93       	push	r30
     63a:	ff 93       	push	r31
	if(mode == MAIN_MENU)
     63c:	80 91 ee 03 	lds	r24, 0x03EE
     640:	90 91 ef 03 	lds	r25, 0x03EF
     644:	81 30       	cpi	r24, 0x01	; 1
     646:	91 05       	cpc	r25, r1
     648:	39 f4       	brne	.+14     	; 0x658 <__vector_2+0x3e>
	{
		mode = HOME;
     64a:	10 92 ef 03 	sts	0x03EF, r1
     64e:	10 92 ee 03 	sts	0x03EE, r1
		draw_home();
     652:	0e 94 7b 00 	call	0xf6	; 0xf6 <draw_home>
     656:	26 c0       	rjmp	.+76     	; 0x6a4 <__vector_2+0x8a>
	}
	else if(mode == ONE_PLAYER || mode == TWO_PLAYERS || mode == HIGHSCORES || mode == SETTINGS)
     658:	9c 01       	movw	r18, r24
     65a:	2b 50       	subi	r18, 0x0B	; 11
     65c:	31 09       	sbc	r19, r1
     65e:	24 30       	cpi	r18, 0x04	; 4
     660:	31 05       	cpc	r19, r1
     662:	78 f4       	brcc	.+30     	; 0x682 <__vector_2+0x68>
	{
		mode = MAIN_MENU;
     664:	81 e0       	ldi	r24, 0x01	; 1
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	90 93 ef 03 	sts	0x03EF, r25
     66c:	80 93 ee 03 	sts	0x03EE, r24
		arrow = 2;
     670:	82 e0       	ldi	r24, 0x02	; 2
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	90 93 07 01 	sts	0x0107, r25
     678:	80 93 06 01 	sts	0x0106, r24
		draw_main_menu();
     67c:	0e 94 96 00 	call	0x12c	; 0x12c <draw_main_menu>
     680:	11 c0       	rjmp	.+34     	; 0x6a4 <__vector_2+0x8a>
	}
	else if(mode == BRIGHTNESS)
     682:	8d 38       	cpi	r24, 0x8D	; 141
     684:	91 05       	cpc	r25, r1
     686:	71 f4       	brne	.+28     	; 0x6a4 <__vector_2+0x8a>
	{
		mode = SETTINGS;
     688:	8e e0       	ldi	r24, 0x0E	; 14
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	90 93 ef 03 	sts	0x03EF, r25
     690:	80 93 ee 03 	sts	0x03EE, r24
		arrow = 2;
     694:	82 e0       	ldi	r24, 0x02	; 2
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	90 93 07 01 	sts	0x0107, r25
     69c:	80 93 06 01 	sts	0x0106, r24
		draw_settings();
     6a0:	0e 94 2c 01 	call	0x258	; 0x258 <draw_settings>
	}
}
     6a4:	ff 91       	pop	r31
     6a6:	ef 91       	pop	r30
     6a8:	bf 91       	pop	r27
     6aa:	af 91       	pop	r26
     6ac:	9f 91       	pop	r25
     6ae:	8f 91       	pop	r24
     6b0:	7f 91       	pop	r23
     6b2:	6f 91       	pop	r22
     6b4:	5f 91       	pop	r21
     6b6:	4f 91       	pop	r20
     6b8:	3f 91       	pop	r19
     6ba:	2f 91       	pop	r18
     6bc:	0f 90       	pop	r0
     6be:	0f be       	out	0x3f, r0	; 63
     6c0:	0f 90       	pop	r0
     6c2:	1f 90       	pop	r1
     6c4:	18 95       	reti

000006c6 <ISR_joystick_click>:
	printf("SPI\n");
}*/

void ISR_joystick_click()
{
	printf("Interrupted by joystick button!\n");
     6c6:	86 ec       	ldi	r24, 0xC6	; 198
     6c8:	93 e0       	ldi	r25, 0x03	; 3
     6ca:	0e 94 ca 08 	call	0x1194	; 0x1194 <puts>
     6ce:	08 95       	ret

000006d0 <ISR_slide_left>:
{
	//printf("Interrupted by right slide!\n");
}

void ISR_slide_left()
{
     6d0:	cf 93       	push	r28
     6d2:	df 93       	push	r29
	if(mode == BRIGHTNESS)
     6d4:	80 91 ee 03 	lds	r24, 0x03EE
     6d8:	90 91 ef 03 	lds	r25, 0x03EF
     6dc:	8d 38       	cpi	r24, 0x8D	; 141
     6de:	91 05       	cpc	r25, r1
     6e0:	39 f5       	brne	.+78     	; 0x730 <ISR_slide_left+0x60>
	{
		OLED_set_brightness(slide_left);
     6e2:	80 91 f0 03 	lds	r24, 0x03F0
     6e6:	0e 94 2f 05 	call	0xa5e	; 0xa5e <OLED_set_brightness>
		OLED_pos(3, 32);
     6ea:	60 e2       	ldi	r22, 0x20	; 32
     6ec:	83 e0       	ldi	r24, 0x03	; 3
     6ee:	0e 94 bc 05 	call	0xb78	; 0xb78 <OLED_pos>
     6f2:	c0 e4       	ldi	r28, 0x40	; 64
     6f4:	d0 e0       	ldi	r29, 0x00	; 0
		for(int i=0; i < 64; i++)
		{
			OLED_write_data(0b00000000);
     6f6:	80 e0       	ldi	r24, 0x00	; 0
     6f8:	0e 94 2c 05 	call	0xa58	; 0xa58 <OLED_write_data>
     6fc:	21 97       	sbiw	r28, 0x01	; 1
{
	if(mode == BRIGHTNESS)
	{
		OLED_set_brightness(slide_left);
		OLED_pos(3, 32);
		for(int i=0; i < 64; i++)
     6fe:	20 97       	sbiw	r28, 0x00	; 0
     700:	d1 f7       	brne	.-12     	; 0x6f6 <ISR_slide_left+0x26>
		{
			OLED_write_data(0b00000000);
		}
		OLED_pos(3, 32);
     702:	60 e2       	ldi	r22, 0x20	; 32
     704:	83 e0       	ldi	r24, 0x03	; 3
     706:	0e 94 bc 05 	call	0xb78	; 0xb78 <OLED_pos>
		for(int i=0; i < slide_left/4; i++)
     70a:	80 91 f0 03 	lds	r24, 0x03F0
     70e:	86 95       	lsr	r24
     710:	86 95       	lsr	r24
     712:	71 f0       	breq	.+28     	; 0x730 <ISR_slide_left+0x60>
     714:	c0 e0       	ldi	r28, 0x00	; 0
     716:	d0 e0       	ldi	r29, 0x00	; 0
		{
			OLED_write_data(0b11111111);
     718:	8f ef       	ldi	r24, 0xFF	; 255
     71a:	0e 94 2c 05 	call	0xa58	; 0xa58 <OLED_write_data>
		for(int i=0; i < 64; i++)
		{
			OLED_write_data(0b00000000);
		}
		OLED_pos(3, 32);
		for(int i=0; i < slide_left/4; i++)
     71e:	21 96       	adiw	r28, 0x01	; 1
     720:	80 91 f0 03 	lds	r24, 0x03F0
     724:	86 95       	lsr	r24
     726:	86 95       	lsr	r24
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	c8 17       	cp	r28, r24
     72c:	d9 07       	cpc	r29, r25
     72e:	a4 f3       	brlt	.-24     	; 0x718 <ISR_slide_left+0x48>
		{
			OLED_write_data(0b11111111);
		}
	}
}
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28
     734:	08 95       	ret

00000736 <ISR_joystick>:

void ISR_joystick(Position joystick)
{
     736:	cf 93       	push	r28
     738:	df 93       	push	r29
     73a:	cd b7       	in	r28, 0x3d	; 61
     73c:	de b7       	in	r29, 0x3e	; 62
     73e:	28 97       	sbiw	r28, 0x08	; 8
     740:	0f b6       	in	r0, 0x3f	; 63
     742:	f8 94       	cli
     744:	de bf       	out	0x3e, r29	; 62
     746:	0f be       	out	0x3f, r0	; 63
     748:	cd bf       	out	0x3d, r28	; 61
     74a:	29 83       	std	Y+1, r18	; 0x01
     74c:	3a 83       	std	Y+2, r19	; 0x02
     74e:	4b 83       	std	Y+3, r20	; 0x03
     750:	5c 83       	std	Y+4, r21	; 0x04
     752:	6d 83       	std	Y+5, r22	; 0x05
     754:	7e 83       	std	Y+6, r23	; 0x06
     756:	8f 83       	std	Y+7, r24	; 0x07
     758:	98 87       	std	Y+8, r25	; 0x08
	char* direction = Joystick_Direction(&joystick);
     75a:	ce 01       	movw	r24, r28
     75c:	01 96       	adiw	r24, 0x01	; 1
     75e:	0e 94 d7 01 	call	0x3ae	; 0x3ae <Joystick_Direction>
	if(mode == MAIN_MENU && direction == "UP"){
     762:	20 91 ee 03 	lds	r18, 0x03EE
     766:	30 91 ef 03 	lds	r19, 0x03EF
     76a:	21 30       	cpi	r18, 0x01	; 1
     76c:	31 05       	cpc	r19, r1
     76e:	09 f0       	breq	.+2      	; 0x772 <ISR_joystick+0x3c>
     770:	68 c0       	rjmp	.+208    	; 0x842 <ISR_joystick+0x10c>
     772:	23 e0       	ldi	r18, 0x03	; 3
     774:	8b 38       	cpi	r24, 0x8B	; 139
     776:	92 07       	cpc	r25, r18
     778:	81 f5       	brne	.+96     	; 0x7da <ISR_joystick+0xa4>
		if(arrow > 2)
     77a:	80 91 06 01 	lds	r24, 0x0106
     77e:	90 91 07 01 	lds	r25, 0x0107
     782:	83 30       	cpi	r24, 0x03	; 3
     784:	91 05       	cpc	r25, r1
     786:	a4 f0       	brlt	.+40     	; 0x7b0 <ISR_joystick+0x7a>
		{
			OLED_pos(arrow, 8);
     788:	68 e0       	ldi	r22, 0x08	; 8
     78a:	0e 94 bc 05 	call	0xb78	; 0xb78 <OLED_pos>
			OLED_erase_arrow();
     78e:	0e 94 0b 06 	call	0xc16	; 0xc16 <OLED_erase_arrow>
			arrow--;
     792:	80 91 06 01 	lds	r24, 0x0106
     796:	90 91 07 01 	lds	r25, 0x0107
     79a:	01 97       	sbiw	r24, 0x01	; 1
     79c:	90 93 07 01 	sts	0x0107, r25
     7a0:	80 93 06 01 	sts	0x0106, r24
			OLED_pos(arrow, 8);
     7a4:	68 e0       	ldi	r22, 0x08	; 8
     7a6:	0e 94 bc 05 	call	0xb78	; 0xb78 <OLED_pos>
			OLED_print_arrow();
     7aa:	0e 94 fe 05 	call	0xbfc	; 0xbfc <OLED_print_arrow>
     7ae:	b4 c0       	rjmp	.+360    	; 0x918 <ISR_joystick+0x1e2>
		}
		else if(arrow == 2)
     7b0:	02 97       	sbiw	r24, 0x02	; 2
     7b2:	09 f0       	breq	.+2      	; 0x7b6 <ISR_joystick+0x80>
     7b4:	b1 c0       	rjmp	.+354    	; 0x918 <ISR_joystick+0x1e2>
		{
			OLED_pos(arrow, 8);
     7b6:	68 e0       	ldi	r22, 0x08	; 8
     7b8:	82 e0       	ldi	r24, 0x02	; 2
     7ba:	0e 94 bc 05 	call	0xb78	; 0xb78 <OLED_pos>
			OLED_erase_arrow();
     7be:	0e 94 0b 06 	call	0xc16	; 0xc16 <OLED_erase_arrow>
			arrow = 5;
     7c2:	85 e0       	ldi	r24, 0x05	; 5
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	90 93 07 01 	sts	0x0107, r25
     7ca:	80 93 06 01 	sts	0x0106, r24
			OLED_pos(arrow, 8);
     7ce:	68 e0       	ldi	r22, 0x08	; 8
     7d0:	0e 94 bc 05 	call	0xb78	; 0xb78 <OLED_pos>
			OLED_print_arrow();
     7d4:	0e 94 fe 05 	call	0xbfc	; 0xbfc <OLED_print_arrow>
     7d8:	9f c0       	rjmp	.+318    	; 0x918 <ISR_joystick+0x1e2>
		}
	}
	else if(mode == MAIN_MENU && direction == "DOWN"){
     7da:	86 58       	subi	r24, 0x86	; 134
     7dc:	93 40       	sbci	r25, 0x03	; 3
     7de:	09 f0       	breq	.+2      	; 0x7e2 <ISR_joystick+0xac>
     7e0:	9b c0       	rjmp	.+310    	; 0x918 <ISR_joystick+0x1e2>
		if(arrow < 5)
     7e2:	80 91 06 01 	lds	r24, 0x0106
     7e6:	90 91 07 01 	lds	r25, 0x0107
     7ea:	85 30       	cpi	r24, 0x05	; 5
     7ec:	91 05       	cpc	r25, r1
     7ee:	a4 f4       	brge	.+40     	; 0x818 <ISR_joystick+0xe2>
		{
			OLED_pos(arrow, 8);
     7f0:	68 e0       	ldi	r22, 0x08	; 8
     7f2:	0e 94 bc 05 	call	0xb78	; 0xb78 <OLED_pos>
			OLED_erase_arrow();
     7f6:	0e 94 0b 06 	call	0xc16	; 0xc16 <OLED_erase_arrow>
			arrow++;
     7fa:	80 91 06 01 	lds	r24, 0x0106
     7fe:	90 91 07 01 	lds	r25, 0x0107
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	90 93 07 01 	sts	0x0107, r25
     808:	80 93 06 01 	sts	0x0106, r24
			OLED_pos(arrow, 8);
     80c:	68 e0       	ldi	r22, 0x08	; 8
     80e:	0e 94 bc 05 	call	0xb78	; 0xb78 <OLED_pos>
			OLED_print_arrow();
     812:	0e 94 fe 05 	call	0xbfc	; 0xbfc <OLED_print_arrow>
     816:	80 c0       	rjmp	.+256    	; 0x918 <ISR_joystick+0x1e2>
		}
		else if(arrow == 5)
     818:	05 97       	sbiw	r24, 0x05	; 5
     81a:	09 f0       	breq	.+2      	; 0x81e <ISR_joystick+0xe8>
     81c:	7d c0       	rjmp	.+250    	; 0x918 <ISR_joystick+0x1e2>
		{
			OLED_pos(arrow, 8);
     81e:	68 e0       	ldi	r22, 0x08	; 8
     820:	85 e0       	ldi	r24, 0x05	; 5
     822:	0e 94 bc 05 	call	0xb78	; 0xb78 <OLED_pos>
			OLED_erase_arrow();
     826:	0e 94 0b 06 	call	0xc16	; 0xc16 <OLED_erase_arrow>
			arrow = 2;
     82a:	82 e0       	ldi	r24, 0x02	; 2
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	90 93 07 01 	sts	0x0107, r25
     832:	80 93 06 01 	sts	0x0106, r24
			OLED_pos(arrow, 8);
     836:	68 e0       	ldi	r22, 0x08	; 8
     838:	0e 94 bc 05 	call	0xb78	; 0xb78 <OLED_pos>
			OLED_print_arrow();
     83c:	0e 94 fe 05 	call	0xbfc	; 0xbfc <OLED_print_arrow>
     840:	6b c0       	rjmp	.+214    	; 0x918 <ISR_joystick+0x1e2>
		}
	}
	else if(mode == SETTINGS && direction == "UP"){
     842:	2e 30       	cpi	r18, 0x0E	; 14
     844:	31 05       	cpc	r19, r1
     846:	09 f0       	breq	.+2      	; 0x84a <ISR_joystick+0x114>
     848:	67 c0       	rjmp	.+206    	; 0x918 <ISR_joystick+0x1e2>
     84a:	23 e0       	ldi	r18, 0x03	; 3
     84c:	8b 38       	cpi	r24, 0x8B	; 139
     84e:	92 07       	cpc	r25, r18
     850:	89 f5       	brne	.+98     	; 0x8b4 <ISR_joystick+0x17e>
		if(arrow == 3)
     852:	80 91 06 01 	lds	r24, 0x0106
     856:	90 91 07 01 	lds	r25, 0x0107
     85a:	83 30       	cpi	r24, 0x03	; 3
     85c:	91 05       	cpc	r25, r1
     85e:	a9 f4       	brne	.+42     	; 0x88a <ISR_joystick+0x154>
		{
			OLED_pos(arrow, 8);
     860:	68 e0       	ldi	r22, 0x08	; 8
     862:	83 e0       	ldi	r24, 0x03	; 3
     864:	0e 94 bc 05 	call	0xb78	; 0xb78 <OLED_pos>
			OLED_erase_arrow();
     868:	0e 94 0b 06 	call	0xc16	; 0xc16 <OLED_erase_arrow>
			arrow--;
     86c:	80 91 06 01 	lds	r24, 0x0106
     870:	90 91 07 01 	lds	r25, 0x0107
     874:	01 97       	sbiw	r24, 0x01	; 1
     876:	90 93 07 01 	sts	0x0107, r25
     87a:	80 93 06 01 	sts	0x0106, r24
			OLED_pos(arrow, 8);
     87e:	68 e0       	ldi	r22, 0x08	; 8
     880:	0e 94 bc 05 	call	0xb78	; 0xb78 <OLED_pos>
			OLED_print_arrow();
     884:	0e 94 fe 05 	call	0xbfc	; 0xbfc <OLED_print_arrow>
     888:	47 c0       	rjmp	.+142    	; 0x918 <ISR_joystick+0x1e2>
		}
		else if(arrow == 2)
     88a:	02 97       	sbiw	r24, 0x02	; 2
     88c:	09 f0       	breq	.+2      	; 0x890 <ISR_joystick+0x15a>
     88e:	44 c0       	rjmp	.+136    	; 0x918 <ISR_joystick+0x1e2>
		{
			OLED_pos(arrow, 8);
     890:	68 e0       	ldi	r22, 0x08	; 8
     892:	82 e0       	ldi	r24, 0x02	; 2
     894:	0e 94 bc 05 	call	0xb78	; 0xb78 <OLED_pos>
			OLED_erase_arrow();
     898:	0e 94 0b 06 	call	0xc16	; 0xc16 <OLED_erase_arrow>
			arrow = 3;
     89c:	83 e0       	ldi	r24, 0x03	; 3
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	90 93 07 01 	sts	0x0107, r25
     8a4:	80 93 06 01 	sts	0x0106, r24
			OLED_pos(arrow, 8);
     8a8:	68 e0       	ldi	r22, 0x08	; 8
     8aa:	0e 94 bc 05 	call	0xb78	; 0xb78 <OLED_pos>
			OLED_print_arrow();
     8ae:	0e 94 fe 05 	call	0xbfc	; 0xbfc <OLED_print_arrow>
     8b2:	32 c0       	rjmp	.+100    	; 0x918 <ISR_joystick+0x1e2>
		}
	}
	else if(mode == SETTINGS && direction == "DOWN"){
     8b4:	86 58       	subi	r24, 0x86	; 134
     8b6:	93 40       	sbci	r25, 0x03	; 3
     8b8:	79 f5       	brne	.+94     	; 0x918 <ISR_joystick+0x1e2>
		if(arrow == 2)
     8ba:	80 91 06 01 	lds	r24, 0x0106
     8be:	90 91 07 01 	lds	r25, 0x0107
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	91 05       	cpc	r25, r1
     8c6:	a9 f4       	brne	.+42     	; 0x8f2 <ISR_joystick+0x1bc>
		{
			OLED_pos(arrow, 8);
     8c8:	68 e0       	ldi	r22, 0x08	; 8
     8ca:	82 e0       	ldi	r24, 0x02	; 2
     8cc:	0e 94 bc 05 	call	0xb78	; 0xb78 <OLED_pos>
			OLED_erase_arrow();
     8d0:	0e 94 0b 06 	call	0xc16	; 0xc16 <OLED_erase_arrow>
			arrow++;
     8d4:	80 91 06 01 	lds	r24, 0x0106
     8d8:	90 91 07 01 	lds	r25, 0x0107
     8dc:	01 96       	adiw	r24, 0x01	; 1
     8de:	90 93 07 01 	sts	0x0107, r25
     8e2:	80 93 06 01 	sts	0x0106, r24
			OLED_pos(arrow, 8);
     8e6:	68 e0       	ldi	r22, 0x08	; 8
     8e8:	0e 94 bc 05 	call	0xb78	; 0xb78 <OLED_pos>
			OLED_print_arrow();
     8ec:	0e 94 fe 05 	call	0xbfc	; 0xbfc <OLED_print_arrow>
     8f0:	13 c0       	rjmp	.+38     	; 0x918 <ISR_joystick+0x1e2>
		}
		else if(arrow == 3)
     8f2:	03 97       	sbiw	r24, 0x03	; 3
     8f4:	89 f4       	brne	.+34     	; 0x918 <ISR_joystick+0x1e2>
		{
			OLED_pos(arrow, 8);
     8f6:	68 e0       	ldi	r22, 0x08	; 8
     8f8:	83 e0       	ldi	r24, 0x03	; 3
     8fa:	0e 94 bc 05 	call	0xb78	; 0xb78 <OLED_pos>
			OLED_erase_arrow();
     8fe:	0e 94 0b 06 	call	0xc16	; 0xc16 <OLED_erase_arrow>
			arrow = 2;
     902:	82 e0       	ldi	r24, 0x02	; 2
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	90 93 07 01 	sts	0x0107, r25
     90a:	80 93 06 01 	sts	0x0106, r24
			OLED_pos(arrow, 8);
     90e:	68 e0       	ldi	r22, 0x08	; 8
     910:	0e 94 bc 05 	call	0xb78	; 0xb78 <OLED_pos>
			OLED_print_arrow();
     914:	0e 94 fe 05 	call	0xbfc	; 0xbfc <OLED_print_arrow>
		}
	}
}
     918:	28 96       	adiw	r28, 0x08	; 8
     91a:	0f b6       	in	r0, 0x3f	; 63
     91c:	f8 94       	cli
     91e:	de bf       	out	0x3e, r29	; 62
     920:	0f be       	out	0x3f, r0	; 63
     922:	cd bf       	out	0x3d, r28	; 61
     924:	df 91       	pop	r29
     926:	cf 91       	pop	r28
     928:	08 95       	ret

0000092a <main>:

int main(void)
{
     92a:	cf 93       	push	r28
     92c:	df 93       	push	r29
     92e:	cd b7       	in	r28, 0x3d	; 61
     930:	de b7       	in	r29, 0x3e	; 62
     932:	29 97       	sbiw	r28, 0x09	; 9
     934:	0f b6       	in	r0, 0x3f	; 63
     936:	f8 94       	cli
     938:	de bf       	out	0x3e, r29	; 62
     93a:	0f be       	out	0x3f, r0	; 63
     93c:	cd bf       	out	0x3d, r28	; 61
	/* Initialize UART */
	UART_Init(UART_BAUD);
     93e:	8f e1       	ldi	r24, 0x1F	; 31
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	0e 94 77 06 	call	0xcee	; 0xcee <UART_Init>
	printf("Reset\n");
     946:	86 ee       	ldi	r24, 0xE6	; 230
     948:	93 e0       	ldi	r25, 0x03	; 3
     94a:	0e 94 ca 08 	call	0x1194	; 0x1194 <puts>
     94e:	2f e3       	ldi	r18, 0x3F	; 63
     950:	8d e0       	ldi	r24, 0x0D	; 13
     952:	93 e0       	ldi	r25, 0x03	; 3
     954:	21 50       	subi	r18, 0x01	; 1
     956:	80 40       	sbci	r24, 0x00	; 0
     958:	90 40       	sbci	r25, 0x00	; 0
     95a:	e1 f7       	brne	.-8      	; 0x954 <main+0x2a>
     95c:	00 c0       	rjmp	.+0      	; 0x95e <main+0x34>
     95e:	00 00       	nop
	_delay_ms(1000);
	
	/* Initialize SRAM, ADC and OLED */
	SRAM_Init();
     960:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <SRAM_Init>
	OLED_Reset();
     964:	0e 94 35 05 	call	0xa6a	; 0xa6a <OLED_Reset>
	OLED_Init();
     968:	0e 94 8e 05 	call	0xb1c	; 0xb1c <OLED_Init>
	MCP2515_INIT();
     96c:	0e 94 57 02 	call	0x4ae	; 0x4ae <MCP2515_INIT>
	CAN_init();
     970:	0e 94 62 00 	call	0xc4	; 0xc4 <CAN_init>
	
	
	/* Enable port B */
	PORTB |= 0x01;
     974:	c0 9a       	sbi	0x18, 0	; 24
	
	/* Draw something cool */
	draw_home();
     976:	0e 94 7b 00 	call	0xf6	; 0xf6 <draw_home>
	
	/* Enable interrupts */
	GICR |= (1 << INT0) | (1 << INT1); //| (1 << INT2);
     97a:	8b b7       	in	r24, 0x3b	; 59
     97c:	80 6c       	ori	r24, 0xC0	; 192
     97e:	8b bf       	out	0x3b, r24	; 59
	SREG |= (1 << 7);
     980:	8f b7       	in	r24, 0x3f	; 63
     982:	80 68       	ori	r24, 0x80	; 128
     984:	8f bf       	out	0x3f, r24	; 63
	MCUCR |= (1<< ISC00) | (1 << ISC01) | (1 << ISC10) | (1 << ISC11);
     986:	85 b7       	in	r24, 0x35	; 53
     988:	8f 60       	ori	r24, 0x0F	; 15
     98a:	85 bf       	out	0x35, r24	; 53
	//EMCUCR &= (0 << ISC2);
	sei();
     98c:	78 94       	sei
	
	/* Variables initialization */
	Position joystick = Joystick_Position();
     98e:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <Joystick_Position>
     992:	52 2e       	mov	r5, r18
     994:	63 2e       	mov	r6, r19
     996:	74 2e       	mov	r7, r20
     998:	85 2e       	mov	r8, r21
     99a:	26 2e       	mov	r2, r22
     99c:	37 2e       	mov	r3, r23
     99e:	48 2e       	mov	r4, r24
     9a0:	99 87       	std	Y+9, r25	; 0x09
	Position joystick_previous = joystick;
	slide_left = ADC_Convert(SLIDE_LEFT);
     9a2:	86 e0       	ldi	r24, 0x06	; 6
     9a4:	0e 94 57 00 	call	0xae	; 0xae <ADC_Convert>
     9a8:	98 2e       	mov	r9, r24
     9aa:	80 93 f0 03 	sts	0x03F0, r24
	uint8_t previous_slide_left = slide_left;
	uint8_t slide_right = ADC_Convert(SLIDE_RIGHT);
     9ae:	87 e0       	ldi	r24, 0x07	; 7
     9b0:	0e 94 57 00 	call	0xae	; 0xae <ADC_Convert>
	uint8_t previous_slide_right = slide_right;
	
    while(1)
    {
		joystick = Joystick_Position();
     9b4:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <Joystick_Position>
     9b8:	29 83       	std	Y+1, r18	; 0x01
     9ba:	3a 83       	std	Y+2, r19	; 0x02
     9bc:	4b 83       	std	Y+3, r20	; 0x03
     9be:	5c 83       	std	Y+4, r21	; 0x04
     9c0:	6d 83       	std	Y+5, r22	; 0x05
     9c2:	7e 83       	std	Y+6, r23	; 0x06
     9c4:	8f 83       	std	Y+7, r24	; 0x07
     9c6:	98 87       	std	Y+8, r25	; 0x08
     9c8:	e2 2e       	mov	r14, r18
     9ca:	f3 2e       	mov	r15, r19
     9cc:	04 2f       	mov	r16, r20
     9ce:	15 2f       	mov	r17, r21
     9d0:	a6 2e       	mov	r10, r22
     9d2:	b7 2e       	mov	r11, r23
     9d4:	c8 2e       	mov	r12, r24
     9d6:	d9 2e       	mov	r13, r25
		if((joystick.x != joystick_previous.x)||(joystick.y != joystick_previous.y))
     9d8:	65 2d       	mov	r22, r5
     9da:	76 2d       	mov	r23, r6
     9dc:	87 2d       	mov	r24, r7
     9de:	98 2d       	mov	r25, r8
     9e0:	0e 94 e6 06 	call	0xdcc	; 0xdcc <__cmpsf2>
     9e4:	81 11       	cpse	r24, r1
     9e6:	0c c0       	rjmp	.+24     	; 0xa00 <main+0xd6>
     9e8:	2a 2d       	mov	r18, r10
     9ea:	3b 2d       	mov	r19, r11
     9ec:	4c 2d       	mov	r20, r12
     9ee:	5d 2d       	mov	r21, r13
     9f0:	62 2d       	mov	r22, r2
     9f2:	73 2d       	mov	r23, r3
     9f4:	84 2d       	mov	r24, r4
     9f6:	99 85       	ldd	r25, Y+9	; 0x09
     9f8:	0e 94 e6 06 	call	0xdcc	; 0xdcc <__cmpsf2>
     9fc:	88 23       	and	r24, r24
     9fe:	51 f0       	breq	.+20     	; 0xa14 <main+0xea>
		{
			ISR_joystick(joystick);
     a00:	29 81       	ldd	r18, Y+1	; 0x01
     a02:	3a 81       	ldd	r19, Y+2	; 0x02
     a04:	4b 81       	ldd	r20, Y+3	; 0x03
     a06:	5c 81       	ldd	r21, Y+4	; 0x04
     a08:	6d 81       	ldd	r22, Y+5	; 0x05
     a0a:	7e 81       	ldd	r23, Y+6	; 0x06
     a0c:	8f 81       	ldd	r24, Y+7	; 0x07
     a0e:	98 85       	ldd	r25, Y+8	; 0x08
     a10:	0e 94 9b 03 	call	0x736	; 0x736 <ISR_joystick>
		}
		joystick_previous = joystick;
		
		slide_left = ADC_Convert(SLIDE_LEFT);
     a14:	86 e0       	ldi	r24, 0x06	; 6
     a16:	0e 94 57 00 	call	0xae	; 0xae <ADC_Convert>
     a1a:	80 93 f0 03 	sts	0x03F0, r24
		if(slide_left != previous_slide_left)
     a1e:	98 12       	cpse	r9, r24
		{
			ISR_slide_left();
     a20:	0e 94 68 03 	call	0x6d0	; 0x6d0 <ISR_slide_left>
		}
		previous_slide_left = slide_left;
     a24:	90 90 f0 03 	lds	r9, 0x03F0
		 
		slide_right = ADC_Convert(SLIDE_RIGHT);
     a28:	87 e0       	ldi	r24, 0x07	; 7
     a2a:	0e 94 57 00 	call	0xae	; 0xae <ADC_Convert>
		{
			ISR_slide_right();
		}
		previous_slide_right = slide_right;
		
		if(JOYSTICK_BUTTON == 1)
     a2e:	b0 9b       	sbis	0x16, 0	; 22
		{
			ISR_joystick_click();
     a30:	0e 94 63 03 	call	0x6c6	; 0x6c6 <ISR_joystick_click>
     a34:	8f ef       	ldi	r24, 0xFF	; 255
     a36:	90 e7       	ldi	r25, 0x70	; 112
     a38:	22 e0       	ldi	r18, 0x02	; 2
     a3a:	81 50       	subi	r24, 0x01	; 1
     a3c:	90 40       	sbci	r25, 0x00	; 0
     a3e:	20 40       	sbci	r18, 0x00	; 0
     a40:	e1 f7       	brne	.-8      	; 0xa3a <main+0x110>
     a42:	00 c0       	rjmp	.+0      	; 0xa44 <main+0x11a>
     a44:	00 00       	nop
		joystick = Joystick_Position();
		if((joystick.x != joystick_previous.x)||(joystick.y != joystick_previous.y))
		{
			ISR_joystick(joystick);
		}
		joystick_previous = joystick;
     a46:	5e 2c       	mov	r5, r14
     a48:	6f 2c       	mov	r6, r15
     a4a:	70 2e       	mov	r7, r16
     a4c:	81 2e       	mov	r8, r17
     a4e:	2a 2c       	mov	r2, r10
     a50:	3b 2c       	mov	r3, r11
     a52:	4c 2c       	mov	r4, r12
     a54:	d9 86       	std	Y+9, r13	; 0x09
     a56:	ae cf       	rjmp	.-164    	; 0x9b4 <main+0x8a>

00000a58 <OLED_write_data>:

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     a58:	80 93 00 12 	sts	0x1200, r24
     a5c:	08 95       	ret

00000a5e <OLED_set_brightness>:

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     a5e:	e0 e0       	ldi	r30, 0x00	; 0
     a60:	f0 e1       	ldi	r31, 0x10	; 16
     a62:	91 e8       	ldi	r25, 0x81	; 129
     a64:	90 83       	st	Z, r25
     a66:	80 83       	st	Z, r24
     a68:	08 95       	ret

00000a6a <OLED_Reset>:
     a6a:	80 eb       	ldi	r24, 0xB0	; 176
     a6c:	80 93 00 10 	sts	0x1000, r24
     a70:	80 e8       	ldi	r24, 0x80	; 128
     a72:	90 e0       	ldi	r25, 0x00	; 0

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     a74:	e0 e0       	ldi	r30, 0x00	; 0
     a76:	f2 e1       	ldi	r31, 0x12	; 18
     a78:	10 82       	st	Z, r1
     a7a:	01 97       	sbiw	r24, 0x01	; 1

/* Erase the RAM line by line */
void OLED_Reset()
{
	OLED_write_cmd(0xb0);
	for(int i=0; i<128; i++){
     a7c:	00 97       	sbiw	r24, 0x00	; 0
     a7e:	e1 f7       	brne	.-8      	; 0xa78 <OLED_Reset+0xe>

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     a80:	81 eb       	ldi	r24, 0xB1	; 177
     a82:	80 93 00 10 	sts	0x1000, r24
     a86:	80 e8       	ldi	r24, 0x80	; 128
     a88:	90 e0       	ldi	r25, 0x00	; 0

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     a8a:	e0 e0       	ldi	r30, 0x00	; 0
     a8c:	f2 e1       	ldi	r31, 0x12	; 18
     a8e:	10 82       	st	Z, r1
     a90:	01 97       	sbiw	r24, 0x01	; 1
	OLED_write_cmd(0xb0);
	for(int i=0; i<128; i++){
		OLED_write_data(0b00000000);
	}
	OLED_write_cmd(0xb1);
	for(int i=0; i<128; i++){
     a92:	00 97       	sbiw	r24, 0x00	; 0
     a94:	e1 f7       	brne	.-8      	; 0xa8e <OLED_Reset+0x24>

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     a96:	82 eb       	ldi	r24, 0xB2	; 178
     a98:	80 93 00 10 	sts	0x1000, r24
     a9c:	80 e8       	ldi	r24, 0x80	; 128
     a9e:	90 e0       	ldi	r25, 0x00	; 0

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     aa0:	e0 e0       	ldi	r30, 0x00	; 0
     aa2:	f2 e1       	ldi	r31, 0x12	; 18
     aa4:	10 82       	st	Z, r1
     aa6:	01 97       	sbiw	r24, 0x01	; 1
	OLED_write_cmd(0xb1);
	for(int i=0; i<128; i++){
		OLED_write_data(0b00000000);
	}
	OLED_write_cmd(0xb2);
	for(int i=0; i<128; i++){
     aa8:	00 97       	sbiw	r24, 0x00	; 0
     aaa:	e1 f7       	brne	.-8      	; 0xaa4 <OLED_Reset+0x3a>

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     aac:	83 eb       	ldi	r24, 0xB3	; 179
     aae:	80 93 00 10 	sts	0x1000, r24
     ab2:	80 e8       	ldi	r24, 0x80	; 128
     ab4:	90 e0       	ldi	r25, 0x00	; 0

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     ab6:	e0 e0       	ldi	r30, 0x00	; 0
     ab8:	f2 e1       	ldi	r31, 0x12	; 18
     aba:	10 82       	st	Z, r1
     abc:	01 97       	sbiw	r24, 0x01	; 1
	OLED_write_cmd(0xb2);
	for(int i=0; i<128; i++){
		OLED_write_data(0b00000000);
	}
	OLED_write_cmd(0xb3);
	for(int i=0; i<128; i++){
     abe:	00 97       	sbiw	r24, 0x00	; 0
     ac0:	e1 f7       	brne	.-8      	; 0xaba <OLED_Reset+0x50>

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     ac2:	84 eb       	ldi	r24, 0xB4	; 180
     ac4:	80 93 00 10 	sts	0x1000, r24
     ac8:	80 e8       	ldi	r24, 0x80	; 128
     aca:	90 e0       	ldi	r25, 0x00	; 0

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     acc:	e0 e0       	ldi	r30, 0x00	; 0
     ace:	f2 e1       	ldi	r31, 0x12	; 18
     ad0:	10 82       	st	Z, r1
     ad2:	01 97       	sbiw	r24, 0x01	; 1
	OLED_write_cmd(0xb3);
	for(int i=0; i<128; i++){
		OLED_write_data(0b00000000);
	}
	OLED_write_cmd(0xb4);
	for(int i=0; i<128; i++){
     ad4:	00 97       	sbiw	r24, 0x00	; 0
     ad6:	e1 f7       	brne	.-8      	; 0xad0 <OLED_Reset+0x66>

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     ad8:	85 eb       	ldi	r24, 0xB5	; 181
     ada:	80 93 00 10 	sts	0x1000, r24
     ade:	80 e8       	ldi	r24, 0x80	; 128
     ae0:	90 e0       	ldi	r25, 0x00	; 0

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     ae2:	e0 e0       	ldi	r30, 0x00	; 0
     ae4:	f2 e1       	ldi	r31, 0x12	; 18
     ae6:	10 82       	st	Z, r1
     ae8:	01 97       	sbiw	r24, 0x01	; 1
	OLED_write_cmd(0xb4);
	for(int i=0; i<128; i++){
		OLED_write_data(0b00000000);
	}
	OLED_write_cmd(0xb5);
	for(int i=0; i<128; i++){
     aea:	00 97       	sbiw	r24, 0x00	; 0
     aec:	e1 f7       	brne	.-8      	; 0xae6 <OLED_Reset+0x7c>

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     aee:	86 eb       	ldi	r24, 0xB6	; 182
     af0:	80 93 00 10 	sts	0x1000, r24
     af4:	80 e8       	ldi	r24, 0x80	; 128
     af6:	90 e0       	ldi	r25, 0x00	; 0

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     af8:	e0 e0       	ldi	r30, 0x00	; 0
     afa:	f2 e1       	ldi	r31, 0x12	; 18
     afc:	10 82       	st	Z, r1
     afe:	01 97       	sbiw	r24, 0x01	; 1
	OLED_write_cmd(0xb5);
	for(int i=0; i<128; i++){
		OLED_write_data(0b00000000);
	}
	OLED_write_cmd(0xb6);
	for(int i=0; i<128; i++){
     b00:	00 97       	sbiw	r24, 0x00	; 0
     b02:	e1 f7       	brne	.-8      	; 0xafc <OLED_Reset+0x92>

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     b04:	87 eb       	ldi	r24, 0xB7	; 183
     b06:	80 93 00 10 	sts	0x1000, r24
     b0a:	80 e8       	ldi	r24, 0x80	; 128
     b0c:	90 e0       	ldi	r25, 0x00	; 0

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     b0e:	e0 e0       	ldi	r30, 0x00	; 0
     b10:	f2 e1       	ldi	r31, 0x12	; 18
     b12:	10 82       	st	Z, r1
     b14:	01 97       	sbiw	r24, 0x01	; 1
	OLED_write_cmd(0xb6);
	for(int i=0; i<128; i++){
		OLED_write_data(0b00000000);
	}
	OLED_write_cmd(0xb7);
	for(int i=0; i<128; i++){
     b16:	00 97       	sbiw	r24, 0x00	; 0
     b18:	e1 f7       	brne	.-8      	; 0xb12 <OLED_Reset+0xa8>
		OLED_write_data(0b00000000);
	}
}
     b1a:	08 95       	ret

00000b1c <OLED_Init>:

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     b1c:	e0 e0       	ldi	r30, 0x00	; 0
     b1e:	f0 e1       	ldi	r31, 0x10	; 16
     b20:	8e ea       	ldi	r24, 0xAE	; 174
     b22:	80 83       	st	Z, r24
     b24:	81 ea       	ldi	r24, 0xA1	; 161
     b26:	80 83       	st	Z, r24
     b28:	8a ed       	ldi	r24, 0xDA	; 218
     b2a:	80 83       	st	Z, r24
     b2c:	82 e1       	ldi	r24, 0x12	; 18
     b2e:	80 83       	st	Z, r24
     b30:	88 ec       	ldi	r24, 0xC8	; 200
     b32:	80 83       	st	Z, r24
     b34:	88 ea       	ldi	r24, 0xA8	; 168
     b36:	80 83       	st	Z, r24
     b38:	8f e3       	ldi	r24, 0x3F	; 63
     b3a:	80 83       	st	Z, r24
     b3c:	85 ed       	ldi	r24, 0xD5	; 213
     b3e:	80 83       	st	Z, r24
     b40:	80 e8       	ldi	r24, 0x80	; 128
     b42:	80 83       	st	Z, r24
     b44:	81 e8       	ldi	r24, 0x81	; 129
     b46:	80 83       	st	Z, r24
     b48:	80 e5       	ldi	r24, 0x50	; 80
     b4a:	80 83       	st	Z, r24
     b4c:	89 ed       	ldi	r24, 0xD9	; 217
     b4e:	80 83       	st	Z, r24
     b50:	81 e2       	ldi	r24, 0x21	; 33
     b52:	80 83       	st	Z, r24
     b54:	80 e2       	ldi	r24, 0x20	; 32
     b56:	80 83       	st	Z, r24
     b58:	82 e0       	ldi	r24, 0x02	; 2
     b5a:	80 83       	st	Z, r24
     b5c:	8b ed       	ldi	r24, 0xDB	; 219
     b5e:	80 83       	st	Z, r24
     b60:	80 e3       	ldi	r24, 0x30	; 48
     b62:	80 83       	st	Z, r24
     b64:	8d ea       	ldi	r24, 0xAD	; 173
     b66:	80 83       	st	Z, r24
     b68:	10 82       	st	Z, r1
     b6a:	84 ea       	ldi	r24, 0xA4	; 164
     b6c:	80 83       	st	Z, r24
     b6e:	86 ea       	ldi	r24, 0xA6	; 166
     b70:	80 83       	st	Z, r24
     b72:	8f ea       	ldi	r24, 0xAF	; 175
     b74:	80 83       	st	Z, r24
     b76:	08 95       	ret

00000b78 <OLED_pos>:
}

/* Set the cursor to the given position: page is from 0 to 7, segment from 0 to 127 */
void OLED_pos(uint8_t page, uint8_t segment)
{
	OLED_write_cmd(176 + page);
     b78:	80 55       	subi	r24, 0x50	; 80

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     b7a:	e0 e0       	ldi	r30, 0x00	; 0
     b7c:	f0 e1       	ldi	r31, 0x10	; 16
     b7e:	80 83       	st	Z, r24

/* Set the cursor to the given position: page is from 0 to 7, segment from 0 to 127 */
void OLED_pos(uint8_t page, uint8_t segment)
{
	OLED_write_cmd(176 + page);
	OLED_write_cmd(segment & 0x0f);
     b80:	86 2f       	mov	r24, r22
     b82:	8f 70       	andi	r24, 0x0F	; 15

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     b84:	80 83       	st	Z, r24
/* Set the cursor to the given position: page is from 0 to 7, segment from 0 to 127 */
void OLED_pos(uint8_t page, uint8_t segment)
{
	OLED_write_cmd(176 + page);
	OLED_write_cmd(segment & 0x0f);
	OLED_write_cmd(((segment & 0x70)>>4)|0x10);
     b86:	60 77       	andi	r22, 0x70	; 112
     b88:	62 95       	swap	r22
     b8a:	6f 70       	andi	r22, 0x0F	; 15
     b8c:	60 61       	ori	r22, 0x10	; 16

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     b8e:	60 83       	st	Z, r22
     b90:	08 95       	ret

00000b92 <OLED_print>:
void OLED_print(char* a)
{
	int index = (int)a - 32;
	for(int i=0; i<4; i++)
	{
		OLED_write_data(font[index][i]);
     b92:	88 0f       	add	r24, r24
     b94:	99 1f       	adc	r25, r25
     b96:	88 0f       	add	r24, r24
     b98:	99 1f       	adc	r25, r25
     b9a:	dc 01       	movw	r26, r24
     b9c:	a8 57       	subi	r26, 0x78	; 120
     b9e:	bf 4f       	sbci	r27, 0xFF	; 255
     ba0:	8c 91       	ld	r24, X

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f2 e1       	ldi	r31, 0x12	; 18
     ba6:	80 83       	st	Z, r24
void OLED_print(char* a)
{
	int index = (int)a - 32;
	for(int i=0; i<4; i++)
	{
		OLED_write_data(font[index][i]);
     ba8:	11 96       	adiw	r26, 0x01	; 1
     baa:	8c 91       	ld	r24, X
     bac:	11 97       	sbiw	r26, 0x01	; 1

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     bae:	80 83       	st	Z, r24
void OLED_print(char* a)
{
	int index = (int)a - 32;
	for(int i=0; i<4; i++)
	{
		OLED_write_data(font[index][i]);
     bb0:	12 96       	adiw	r26, 0x02	; 2
     bb2:	8c 91       	ld	r24, X
     bb4:	12 97       	sbiw	r26, 0x02	; 2

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     bb6:	80 83       	st	Z, r24
void OLED_print(char* a)
{
	int index = (int)a - 32;
	for(int i=0; i<4; i++)
	{
		OLED_write_data(font[index][i]);
     bb8:	13 96       	adiw	r26, 0x03	; 3
     bba:	8c 91       	ld	r24, X

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     bbc:	80 83       	st	Z, r24
     bbe:	08 95       	ret

00000bc0 <OLED_print_string>:
	}
}

/* Print a string. If the string exceeds the screen size, stop printing. */
void OLED_print_string(char* string)
{
     bc0:	0f 93       	push	r16
     bc2:	1f 93       	push	r17
     bc4:	cf 93       	push	r28
     bc6:	df 93       	push	r29
     bc8:	fc 01       	movw	r30, r24
	int i=0;
	while(string[i]!='\0' && i < 32)
     bca:	80 81       	ld	r24, Z
     bcc:	88 23       	and	r24, r24
     bce:	89 f0       	breq	.+34     	; 0xbf2 <OLED_print_string+0x32>
     bd0:	8f 01       	movw	r16, r30
     bd2:	0f 5f       	subi	r16, 0xFF	; 255
     bd4:	1f 4f       	sbci	r17, 0xFF	; 255
}

/* Print a string. If the string exceeds the screen size, stop printing. */
void OLED_print_string(char* string)
{
	int i=0;
     bd6:	c0 e0       	ldi	r28, 0x00	; 0
     bd8:	d0 e0       	ldi	r29, 0x00	; 0
	while(string[i]!='\0' && i < 32)
	{
		OLED_print(string[i]);
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	0e 94 c9 05 	call	0xb92	; 0xb92 <OLED_print>
		i++;
     be0:	21 96       	adiw	r28, 0x01	; 1

/* Print a string. If the string exceeds the screen size, stop printing. */
void OLED_print_string(char* string)
{
	int i=0;
	while(string[i]!='\0' && i < 32)
     be2:	f8 01       	movw	r30, r16
     be4:	81 91       	ld	r24, Z+
     be6:	8f 01       	movw	r16, r30
     be8:	88 23       	and	r24, r24
     bea:	19 f0       	breq	.+6      	; 0xbf2 <OLED_print_string+0x32>
     bec:	c0 32       	cpi	r28, 0x20	; 32
     bee:	d1 05       	cpc	r29, r1
     bf0:	a1 f7       	brne	.-24     	; 0xbda <OLED_print_string+0x1a>
	{
		OLED_print(string[i]);
		i++;
	}
}
     bf2:	df 91       	pop	r29
     bf4:	cf 91       	pop	r28
     bf6:	1f 91       	pop	r17
     bf8:	0f 91       	pop	r16
     bfa:	08 95       	ret

00000bfc <OLED_print_arrow>:

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     bfc:	e0 e0       	ldi	r30, 0x00	; 0
     bfe:	f2 e1       	ldi	r31, 0x12	; 18
     c00:	80 e1       	ldi	r24, 0x10	; 16
     c02:	80 83       	st	Z, r24
     c04:	80 83       	st	Z, r24
     c06:	80 83       	st	Z, r24
     c08:	80 83       	st	Z, r24
     c0a:	9c e7       	ldi	r25, 0x7C	; 124
     c0c:	90 83       	st	Z, r25
     c0e:	98 e3       	ldi	r25, 0x38	; 56
     c10:	90 83       	st	Z, r25
     c12:	80 83       	st	Z, r24
     c14:	08 95       	ret

00000c16 <OLED_erase_arrow>:
     c16:	e0 e0       	ldi	r30, 0x00	; 0
     c18:	f2 e1       	ldi	r31, 0x12	; 18
     c1a:	10 82       	st	Z, r1
     c1c:	10 82       	st	Z, r1
     c1e:	10 82       	st	Z, r1
     c20:	10 82       	st	Z, r1
     c22:	10 82       	st	Z, r1
     c24:	10 82       	st	Z, r1
     c26:	10 82       	st	Z, r1
     c28:	08 95       	ret

00000c2a <OLED_print_home>:
     c2a:	e0 e0       	ldi	r30, 0x00	; 0
     c2c:	f2 e1       	ldi	r31, 0x12	; 18
     c2e:	10 82       	st	Z, r1
     c30:	88 ef       	ldi	r24, 0xF8	; 248
     c32:	80 83       	st	Z, r24
     c34:	9c ef       	ldi	r25, 0xFC	; 252
     c36:	90 83       	st	Z, r25
     c38:	26 ef       	ldi	r18, 0xF6	; 246
     c3a:	20 83       	st	Z, r18
     c3c:	3f e3       	ldi	r19, 0x3F	; 63
     c3e:	30 83       	st	Z, r19
     c40:	20 83       	st	Z, r18
     c42:	90 83       	st	Z, r25
     c44:	80 83       	st	Z, r24
     c46:	10 82       	st	Z, r1
     c48:	08 95       	ret

00000c4a <OLED_print_woman>:
	OLED_write_data(0b11111000);
	OLED_write_data(0b00000000);
}

void OLED_print_woman(uint8_t page, uint8_t segment)
{
     c4a:	0f 93       	push	r16
     c4c:	1f 93       	push	r17
     c4e:	cf 93       	push	r28
     c50:	df 93       	push	r29
     c52:	18 2f       	mov	r17, r24
     c54:	06 2f       	mov	r16, r22
	OLED_pos(page, segment);
     c56:	0e 94 bc 05 	call	0xb78	; 0xb78 <OLED_pos>

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     c5a:	c0 e0       	ldi	r28, 0x00	; 0
     c5c:	d2 e1       	ldi	r29, 0x12	; 18
     c5e:	18 82       	st	Y, r1
     c60:	18 82       	st	Y, r1
     c62:	80 e1       	ldi	r24, 0x10	; 16
     c64:	88 83       	st	Y, r24
     c66:	94 e9       	ldi	r25, 0x94	; 148
     c68:	98 83       	st	Y, r25
     c6a:	27 ed       	ldi	r18, 0xD7	; 215
     c6c:	28 83       	st	Y, r18
     c6e:	3f ef       	ldi	r19, 0xFF	; 255
     c70:	38 83       	st	Y, r19
     c72:	28 83       	st	Y, r18
     c74:	98 83       	st	Y, r25
     c76:	88 83       	st	Y, r24
     c78:	18 82       	st	Y, r1
     c7a:	18 82       	st	Y, r1
	OLED_write_data(0b11010111);
	OLED_write_data(0b10010100);
	OLED_write_data(0b00010000);
	OLED_write_data(0b00000000);
	OLED_write_data(0b00000000);
	OLED_pos(page+1, segment);
     c7c:	60 2f       	mov	r22, r16
     c7e:	81 e0       	ldi	r24, 0x01	; 1
     c80:	81 0f       	add	r24, r17
     c82:	0e 94 bc 05 	call	0xb78	; 0xb78 <OLED_pos>

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     c86:	18 82       	st	Y, r1
     c88:	92 e0       	ldi	r25, 0x02	; 2
     c8a:	98 83       	st	Y, r25
     c8c:	83 e0       	ldi	r24, 0x03	; 3
     c8e:	88 83       	st	Y, r24
     c90:	23 e2       	ldi	r18, 0x23	; 35
     c92:	28 83       	st	Y, r18
     c94:	3f e3       	ldi	r19, 0x3F	; 63
     c96:	38 83       	st	Y, r19
     c98:	88 83       	st	Y, r24
     c9a:	38 83       	st	Y, r19
     c9c:	28 83       	st	Y, r18
     c9e:	88 83       	st	Y, r24
     ca0:	98 83       	st	Y, r25
     ca2:	18 82       	st	Y, r1
	OLED_write_data(0b00111111);
	OLED_write_data(0b00100011);
	OLED_write_data(0b00000011);
	OLED_write_data(0b00000010);
	OLED_write_data(0b00000000);
}
     ca4:	df 91       	pop	r29
     ca6:	cf 91       	pop	r28
     ca8:	1f 91       	pop	r17
     caa:	0f 91       	pop	r16
     cac:	08 95       	ret

00000cae <SPI_Init>:
#include <avr/io.h>

void SPI_Init(void)
{
	/* Set MOSI and SCK output, all others input */
	DDRB |= (1<<DDB4)| (1<<DDB5)|(1<<DDB7);
     cae:	87 b3       	in	r24, 0x17	; 23
     cb0:	80 6b       	ori	r24, 0xB0	; 176
     cb2:	87 bb       	out	0x17, r24	; 23
	PORTB |= (1<<4);
     cb4:	c4 9a       	sbi	0x18, 4	; 24
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     cb6:	81 e5       	ldi	r24, 0x51	; 81
     cb8:	8d b9       	out	0x0d, r24	; 13
     cba:	08 95       	ret

00000cbc <SPI_write>:
}

void SPI_write(char cData)
{
	/* Start transmission */
	SPDR = cData;
     cbc:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while (!(SPSR & (1<<SPIF)));
     cbe:	77 9b       	sbis	0x0e, 7	; 14
     cc0:	fe cf       	rjmp	.-4      	; 0xcbe <SPI_write+0x2>
}
     cc2:	08 95       	ret

00000cc4 <SPI_read>:

char SPI_read(void)
{
	/* Start transmission */
	SPDR = 0x00;
     cc4:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while (!(SPSR & (1<<SPIF)));
     cc6:	77 9b       	sbis	0x0e, 7	; 14
     cc8:	fe cf       	rjmp	.-4      	; 0xcc6 <SPI_read+0x2>
	return SPDR;
     cca:	8f b1       	in	r24, 0x0f	; 15
}
     ccc:	08 95       	ret

00000cce <SPI_on>:

void SPI_on(void)
{
	PORTB &= 0xEF;
     cce:	c4 98       	cbi	0x18, 4	; 24
     cd0:	08 95       	ret

00000cd2 <SPI_off>:
}

void SPI_off(void)
{
	PORTB |= (1<<4);
     cd2:	c4 9a       	sbi	0x18, 4	; 24
     cd4:	08 95       	ret

00000cd6 <SRAM_Init>:
#include <avr/io.h>

void SRAM_Init(void)
{
	/* Enable external SRAM: set SRE to 1 */
	MCUCR |= (1 << SRE);
     cd6:	85 b7       	in	r24, 0x35	; 53
     cd8:	80 68       	ori	r24, 0x80	; 128
     cda:	85 bf       	out	0x35, r24	; 53
     cdc:	08 95       	ret

00000cde <UART_Transmit>:
#include <stdio.h>
#include <avr/io.h>

void UART_Transmit(unsigned char data){
	/* Wait for empty transmit buffer */
	while(!(UCSR0A&(1<<UDRE0)))
     cde:	5d 9b       	sbis	0x0b, 5	; 11
     ce0:	fe cf       	rjmp	.-4      	; 0xcde <UART_Transmit>
		;
	/* Put data into buffer */
	UDR0 = data;
     ce2:	8c b9       	out	0x0c, r24	; 12
     ce4:	08 95       	ret

00000ce6 <UART_Receive>:
}

unsigned char UART_Receive(void){
	/* Wait for data to be received */
	while(!(UCSR0A&(1<<RXC0)))
     ce6:	5f 9b       	sbis	0x0b, 7	; 11
     ce8:	fe cf       	rjmp	.-4      	; 0xce6 <UART_Receive>
		;
	/* Get and return received data from buffer */
	return UDR0;
     cea:	8c b1       	in	r24, 0x0c	; 12
}
     cec:	08 95       	ret

00000cee <UART_Init>:

void UART_Init(unsigned int ubrr){
	/* Set baud rate */
	UBRR0L = (unsigned char) ubrr;
     cee:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     cf0:	88 e1       	ldi	r24, 0x18	; 24
     cf2:	8a b9       	out	0x0a, r24	; 10
	/* Link printf to UART transmissions */	
	fdevopen(UART_Transmit,UART_Receive);
     cf4:	63 e7       	ldi	r22, 0x73	; 115
     cf6:	76 e0       	ldi	r23, 0x06	; 6
     cf8:	8f e6       	ldi	r24, 0x6F	; 111
     cfa:	96 e0       	ldi	r25, 0x06	; 6
     cfc:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <fdevopen>
     d00:	08 95       	ret

00000d02 <__subsf3>:
     d02:	50 58       	subi	r21, 0x80	; 128

00000d04 <__addsf3>:
     d04:	bb 27       	eor	r27, r27
     d06:	aa 27       	eor	r26, r26
     d08:	0e d0       	rcall	.+28     	; 0xd26 <__addsf3x>
     d0a:	44 c1       	rjmp	.+648    	; 0xf94 <__fp_round>
     d0c:	35 d1       	rcall	.+618    	; 0xf78 <__fp_pscA>
     d0e:	30 f0       	brcs	.+12     	; 0xd1c <__addsf3+0x18>
     d10:	3a d1       	rcall	.+628    	; 0xf86 <__fp_pscB>
     d12:	20 f0       	brcs	.+8      	; 0xd1c <__addsf3+0x18>
     d14:	31 f4       	brne	.+12     	; 0xd22 <__addsf3+0x1e>
     d16:	9f 3f       	cpi	r25, 0xFF	; 255
     d18:	11 f4       	brne	.+4      	; 0xd1e <__addsf3+0x1a>
     d1a:	1e f4       	brtc	.+6      	; 0xd22 <__addsf3+0x1e>
     d1c:	2a c1       	rjmp	.+596    	; 0xf72 <__fp_nan>
     d1e:	0e f4       	brtc	.+2      	; 0xd22 <__addsf3+0x1e>
     d20:	e0 95       	com	r30
     d22:	e7 fb       	bst	r30, 7
     d24:	20 c1       	rjmp	.+576    	; 0xf66 <__fp_inf>

00000d26 <__addsf3x>:
     d26:	e9 2f       	mov	r30, r25
     d28:	46 d1       	rcall	.+652    	; 0xfb6 <__fp_split3>
     d2a:	80 f3       	brcs	.-32     	; 0xd0c <__addsf3+0x8>
     d2c:	ba 17       	cp	r27, r26
     d2e:	62 07       	cpc	r22, r18
     d30:	73 07       	cpc	r23, r19
     d32:	84 07       	cpc	r24, r20
     d34:	95 07       	cpc	r25, r21
     d36:	18 f0       	brcs	.+6      	; 0xd3e <__addsf3x+0x18>
     d38:	71 f4       	brne	.+28     	; 0xd56 <__addsf3x+0x30>
     d3a:	9e f5       	brtc	.+102    	; 0xda2 <__addsf3x+0x7c>
     d3c:	5e c1       	rjmp	.+700    	; 0xffa <__fp_zero>
     d3e:	0e f4       	brtc	.+2      	; 0xd42 <__addsf3x+0x1c>
     d40:	e0 95       	com	r30
     d42:	0b 2e       	mov	r0, r27
     d44:	ba 2f       	mov	r27, r26
     d46:	a0 2d       	mov	r26, r0
     d48:	0b 01       	movw	r0, r22
     d4a:	b9 01       	movw	r22, r18
     d4c:	90 01       	movw	r18, r0
     d4e:	0c 01       	movw	r0, r24
     d50:	ca 01       	movw	r24, r20
     d52:	a0 01       	movw	r20, r0
     d54:	11 24       	eor	r1, r1
     d56:	ff 27       	eor	r31, r31
     d58:	59 1b       	sub	r21, r25
     d5a:	99 f0       	breq	.+38     	; 0xd82 <__addsf3x+0x5c>
     d5c:	59 3f       	cpi	r21, 0xF9	; 249
     d5e:	50 f4       	brcc	.+20     	; 0xd74 <__addsf3x+0x4e>
     d60:	50 3e       	cpi	r21, 0xE0	; 224
     d62:	68 f1       	brcs	.+90     	; 0xdbe <__addsf3x+0x98>
     d64:	1a 16       	cp	r1, r26
     d66:	f0 40       	sbci	r31, 0x00	; 0
     d68:	a2 2f       	mov	r26, r18
     d6a:	23 2f       	mov	r18, r19
     d6c:	34 2f       	mov	r19, r20
     d6e:	44 27       	eor	r20, r20
     d70:	58 5f       	subi	r21, 0xF8	; 248
     d72:	f3 cf       	rjmp	.-26     	; 0xd5a <__addsf3x+0x34>
     d74:	46 95       	lsr	r20
     d76:	37 95       	ror	r19
     d78:	27 95       	ror	r18
     d7a:	a7 95       	ror	r26
     d7c:	f0 40       	sbci	r31, 0x00	; 0
     d7e:	53 95       	inc	r21
     d80:	c9 f7       	brne	.-14     	; 0xd74 <__addsf3x+0x4e>
     d82:	7e f4       	brtc	.+30     	; 0xda2 <__addsf3x+0x7c>
     d84:	1f 16       	cp	r1, r31
     d86:	ba 0b       	sbc	r27, r26
     d88:	62 0b       	sbc	r22, r18
     d8a:	73 0b       	sbc	r23, r19
     d8c:	84 0b       	sbc	r24, r20
     d8e:	ba f0       	brmi	.+46     	; 0xdbe <__addsf3x+0x98>
     d90:	91 50       	subi	r25, 0x01	; 1
     d92:	a1 f0       	breq	.+40     	; 0xdbc <__addsf3x+0x96>
     d94:	ff 0f       	add	r31, r31
     d96:	bb 1f       	adc	r27, r27
     d98:	66 1f       	adc	r22, r22
     d9a:	77 1f       	adc	r23, r23
     d9c:	88 1f       	adc	r24, r24
     d9e:	c2 f7       	brpl	.-16     	; 0xd90 <__addsf3x+0x6a>
     da0:	0e c0       	rjmp	.+28     	; 0xdbe <__addsf3x+0x98>
     da2:	ba 0f       	add	r27, r26
     da4:	62 1f       	adc	r22, r18
     da6:	73 1f       	adc	r23, r19
     da8:	84 1f       	adc	r24, r20
     daa:	48 f4       	brcc	.+18     	; 0xdbe <__addsf3x+0x98>
     dac:	87 95       	ror	r24
     dae:	77 95       	ror	r23
     db0:	67 95       	ror	r22
     db2:	b7 95       	ror	r27
     db4:	f7 95       	ror	r31
     db6:	9e 3f       	cpi	r25, 0xFE	; 254
     db8:	08 f0       	brcs	.+2      	; 0xdbc <__addsf3x+0x96>
     dba:	b3 cf       	rjmp	.-154    	; 0xd22 <__addsf3+0x1e>
     dbc:	93 95       	inc	r25
     dbe:	88 0f       	add	r24, r24
     dc0:	08 f0       	brcs	.+2      	; 0xdc4 <__addsf3x+0x9e>
     dc2:	99 27       	eor	r25, r25
     dc4:	ee 0f       	add	r30, r30
     dc6:	97 95       	ror	r25
     dc8:	87 95       	ror	r24
     dca:	08 95       	ret

00000dcc <__cmpsf2>:
     dcc:	a8 d0       	rcall	.+336    	; 0xf1e <__fp_cmp>
     dce:	08 f4       	brcc	.+2      	; 0xdd2 <__cmpsf2+0x6>
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	08 95       	ret

00000dd4 <__divsf3>:
     dd4:	0c d0       	rcall	.+24     	; 0xdee <__divsf3x>
     dd6:	de c0       	rjmp	.+444    	; 0xf94 <__fp_round>
     dd8:	d6 d0       	rcall	.+428    	; 0xf86 <__fp_pscB>
     dda:	40 f0       	brcs	.+16     	; 0xdec <__divsf3+0x18>
     ddc:	cd d0       	rcall	.+410    	; 0xf78 <__fp_pscA>
     dde:	30 f0       	brcs	.+12     	; 0xdec <__divsf3+0x18>
     de0:	21 f4       	brne	.+8      	; 0xdea <__divsf3+0x16>
     de2:	5f 3f       	cpi	r21, 0xFF	; 255
     de4:	19 f0       	breq	.+6      	; 0xdec <__divsf3+0x18>
     de6:	bf c0       	rjmp	.+382    	; 0xf66 <__fp_inf>
     de8:	51 11       	cpse	r21, r1
     dea:	08 c1       	rjmp	.+528    	; 0xffc <__fp_szero>
     dec:	c2 c0       	rjmp	.+388    	; 0xf72 <__fp_nan>

00000dee <__divsf3x>:
     dee:	e3 d0       	rcall	.+454    	; 0xfb6 <__fp_split3>
     df0:	98 f3       	brcs	.-26     	; 0xdd8 <__divsf3+0x4>

00000df2 <__divsf3_pse>:
     df2:	99 23       	and	r25, r25
     df4:	c9 f3       	breq	.-14     	; 0xde8 <__divsf3+0x14>
     df6:	55 23       	and	r21, r21
     df8:	b1 f3       	breq	.-20     	; 0xde6 <__divsf3+0x12>
     dfa:	95 1b       	sub	r25, r21
     dfc:	55 0b       	sbc	r21, r21
     dfe:	bb 27       	eor	r27, r27
     e00:	aa 27       	eor	r26, r26
     e02:	62 17       	cp	r22, r18
     e04:	73 07       	cpc	r23, r19
     e06:	84 07       	cpc	r24, r20
     e08:	38 f0       	brcs	.+14     	; 0xe18 <__divsf3_pse+0x26>
     e0a:	9f 5f       	subi	r25, 0xFF	; 255
     e0c:	5f 4f       	sbci	r21, 0xFF	; 255
     e0e:	22 0f       	add	r18, r18
     e10:	33 1f       	adc	r19, r19
     e12:	44 1f       	adc	r20, r20
     e14:	aa 1f       	adc	r26, r26
     e16:	a9 f3       	breq	.-22     	; 0xe02 <__divsf3_pse+0x10>
     e18:	33 d0       	rcall	.+102    	; 0xe80 <__divsf3_pse+0x8e>
     e1a:	0e 2e       	mov	r0, r30
     e1c:	3a f0       	brmi	.+14     	; 0xe2c <__divsf3_pse+0x3a>
     e1e:	e0 e8       	ldi	r30, 0x80	; 128
     e20:	30 d0       	rcall	.+96     	; 0xe82 <__divsf3_pse+0x90>
     e22:	91 50       	subi	r25, 0x01	; 1
     e24:	50 40       	sbci	r21, 0x00	; 0
     e26:	e6 95       	lsr	r30
     e28:	00 1c       	adc	r0, r0
     e2a:	ca f7       	brpl	.-14     	; 0xe1e <__divsf3_pse+0x2c>
     e2c:	29 d0       	rcall	.+82     	; 0xe80 <__divsf3_pse+0x8e>
     e2e:	fe 2f       	mov	r31, r30
     e30:	27 d0       	rcall	.+78     	; 0xe80 <__divsf3_pse+0x8e>
     e32:	66 0f       	add	r22, r22
     e34:	77 1f       	adc	r23, r23
     e36:	88 1f       	adc	r24, r24
     e38:	bb 1f       	adc	r27, r27
     e3a:	26 17       	cp	r18, r22
     e3c:	37 07       	cpc	r19, r23
     e3e:	48 07       	cpc	r20, r24
     e40:	ab 07       	cpc	r26, r27
     e42:	b0 e8       	ldi	r27, 0x80	; 128
     e44:	09 f0       	breq	.+2      	; 0xe48 <__divsf3_pse+0x56>
     e46:	bb 0b       	sbc	r27, r27
     e48:	80 2d       	mov	r24, r0
     e4a:	bf 01       	movw	r22, r30
     e4c:	ff 27       	eor	r31, r31
     e4e:	93 58       	subi	r25, 0x83	; 131
     e50:	5f 4f       	sbci	r21, 0xFF	; 255
     e52:	2a f0       	brmi	.+10     	; 0xe5e <__divsf3_pse+0x6c>
     e54:	9e 3f       	cpi	r25, 0xFE	; 254
     e56:	51 05       	cpc	r21, r1
     e58:	68 f0       	brcs	.+26     	; 0xe74 <__divsf3_pse+0x82>
     e5a:	85 c0       	rjmp	.+266    	; 0xf66 <__fp_inf>
     e5c:	cf c0       	rjmp	.+414    	; 0xffc <__fp_szero>
     e5e:	5f 3f       	cpi	r21, 0xFF	; 255
     e60:	ec f3       	brlt	.-6      	; 0xe5c <__divsf3_pse+0x6a>
     e62:	98 3e       	cpi	r25, 0xE8	; 232
     e64:	dc f3       	brlt	.-10     	; 0xe5c <__divsf3_pse+0x6a>
     e66:	86 95       	lsr	r24
     e68:	77 95       	ror	r23
     e6a:	67 95       	ror	r22
     e6c:	b7 95       	ror	r27
     e6e:	f7 95       	ror	r31
     e70:	9f 5f       	subi	r25, 0xFF	; 255
     e72:	c9 f7       	brne	.-14     	; 0xe66 <__divsf3_pse+0x74>
     e74:	88 0f       	add	r24, r24
     e76:	91 1d       	adc	r25, r1
     e78:	96 95       	lsr	r25
     e7a:	87 95       	ror	r24
     e7c:	97 f9       	bld	r25, 7
     e7e:	08 95       	ret
     e80:	e1 e0       	ldi	r30, 0x01	; 1
     e82:	66 0f       	add	r22, r22
     e84:	77 1f       	adc	r23, r23
     e86:	88 1f       	adc	r24, r24
     e88:	bb 1f       	adc	r27, r27
     e8a:	62 17       	cp	r22, r18
     e8c:	73 07       	cpc	r23, r19
     e8e:	84 07       	cpc	r24, r20
     e90:	ba 07       	cpc	r27, r26
     e92:	20 f0       	brcs	.+8      	; 0xe9c <__divsf3_pse+0xaa>
     e94:	62 1b       	sub	r22, r18
     e96:	73 0b       	sbc	r23, r19
     e98:	84 0b       	sbc	r24, r20
     e9a:	ba 0b       	sbc	r27, r26
     e9c:	ee 1f       	adc	r30, r30
     e9e:	88 f7       	brcc	.-30     	; 0xe82 <__divsf3_pse+0x90>
     ea0:	e0 95       	com	r30
     ea2:	08 95       	ret

00000ea4 <__floatunsisf>:
     ea4:	e8 94       	clt
     ea6:	09 c0       	rjmp	.+18     	; 0xeba <__floatsisf+0x12>

00000ea8 <__floatsisf>:
     ea8:	97 fb       	bst	r25, 7
     eaa:	3e f4       	brtc	.+14     	; 0xeba <__floatsisf+0x12>
     eac:	90 95       	com	r25
     eae:	80 95       	com	r24
     eb0:	70 95       	com	r23
     eb2:	61 95       	neg	r22
     eb4:	7f 4f       	sbci	r23, 0xFF	; 255
     eb6:	8f 4f       	sbci	r24, 0xFF	; 255
     eb8:	9f 4f       	sbci	r25, 0xFF	; 255
     eba:	99 23       	and	r25, r25
     ebc:	a9 f0       	breq	.+42     	; 0xee8 <__floatsisf+0x40>
     ebe:	f9 2f       	mov	r31, r25
     ec0:	96 e9       	ldi	r25, 0x96	; 150
     ec2:	bb 27       	eor	r27, r27
     ec4:	93 95       	inc	r25
     ec6:	f6 95       	lsr	r31
     ec8:	87 95       	ror	r24
     eca:	77 95       	ror	r23
     ecc:	67 95       	ror	r22
     ece:	b7 95       	ror	r27
     ed0:	f1 11       	cpse	r31, r1
     ed2:	f8 cf       	rjmp	.-16     	; 0xec4 <__floatsisf+0x1c>
     ed4:	fa f4       	brpl	.+62     	; 0xf14 <__floatsisf+0x6c>
     ed6:	bb 0f       	add	r27, r27
     ed8:	11 f4       	brne	.+4      	; 0xede <__floatsisf+0x36>
     eda:	60 ff       	sbrs	r22, 0
     edc:	1b c0       	rjmp	.+54     	; 0xf14 <__floatsisf+0x6c>
     ede:	6f 5f       	subi	r22, 0xFF	; 255
     ee0:	7f 4f       	sbci	r23, 0xFF	; 255
     ee2:	8f 4f       	sbci	r24, 0xFF	; 255
     ee4:	9f 4f       	sbci	r25, 0xFF	; 255
     ee6:	16 c0       	rjmp	.+44     	; 0xf14 <__floatsisf+0x6c>
     ee8:	88 23       	and	r24, r24
     eea:	11 f0       	breq	.+4      	; 0xef0 <__floatsisf+0x48>
     eec:	96 e9       	ldi	r25, 0x96	; 150
     eee:	11 c0       	rjmp	.+34     	; 0xf12 <__floatsisf+0x6a>
     ef0:	77 23       	and	r23, r23
     ef2:	21 f0       	breq	.+8      	; 0xefc <__floatsisf+0x54>
     ef4:	9e e8       	ldi	r25, 0x8E	; 142
     ef6:	87 2f       	mov	r24, r23
     ef8:	76 2f       	mov	r23, r22
     efa:	05 c0       	rjmp	.+10     	; 0xf06 <__floatsisf+0x5e>
     efc:	66 23       	and	r22, r22
     efe:	71 f0       	breq	.+28     	; 0xf1c <__floatsisf+0x74>
     f00:	96 e8       	ldi	r25, 0x86	; 134
     f02:	86 2f       	mov	r24, r22
     f04:	70 e0       	ldi	r23, 0x00	; 0
     f06:	60 e0       	ldi	r22, 0x00	; 0
     f08:	2a f0       	brmi	.+10     	; 0xf14 <__floatsisf+0x6c>
     f0a:	9a 95       	dec	r25
     f0c:	66 0f       	add	r22, r22
     f0e:	77 1f       	adc	r23, r23
     f10:	88 1f       	adc	r24, r24
     f12:	da f7       	brpl	.-10     	; 0xf0a <__floatsisf+0x62>
     f14:	88 0f       	add	r24, r24
     f16:	96 95       	lsr	r25
     f18:	87 95       	ror	r24
     f1a:	97 f9       	bld	r25, 7
     f1c:	08 95       	ret

00000f1e <__fp_cmp>:
     f1e:	99 0f       	add	r25, r25
     f20:	00 08       	sbc	r0, r0
     f22:	55 0f       	add	r21, r21
     f24:	aa 0b       	sbc	r26, r26
     f26:	e0 e8       	ldi	r30, 0x80	; 128
     f28:	fe ef       	ldi	r31, 0xFE	; 254
     f2a:	16 16       	cp	r1, r22
     f2c:	17 06       	cpc	r1, r23
     f2e:	e8 07       	cpc	r30, r24
     f30:	f9 07       	cpc	r31, r25
     f32:	c0 f0       	brcs	.+48     	; 0xf64 <__fp_cmp+0x46>
     f34:	12 16       	cp	r1, r18
     f36:	13 06       	cpc	r1, r19
     f38:	e4 07       	cpc	r30, r20
     f3a:	f5 07       	cpc	r31, r21
     f3c:	98 f0       	brcs	.+38     	; 0xf64 <__fp_cmp+0x46>
     f3e:	62 1b       	sub	r22, r18
     f40:	73 0b       	sbc	r23, r19
     f42:	84 0b       	sbc	r24, r20
     f44:	95 0b       	sbc	r25, r21
     f46:	39 f4       	brne	.+14     	; 0xf56 <__fp_cmp+0x38>
     f48:	0a 26       	eor	r0, r26
     f4a:	61 f0       	breq	.+24     	; 0xf64 <__fp_cmp+0x46>
     f4c:	23 2b       	or	r18, r19
     f4e:	24 2b       	or	r18, r20
     f50:	25 2b       	or	r18, r21
     f52:	21 f4       	brne	.+8      	; 0xf5c <__fp_cmp+0x3e>
     f54:	08 95       	ret
     f56:	0a 26       	eor	r0, r26
     f58:	09 f4       	brne	.+2      	; 0xf5c <__fp_cmp+0x3e>
     f5a:	a1 40       	sbci	r26, 0x01	; 1
     f5c:	a6 95       	lsr	r26
     f5e:	8f ef       	ldi	r24, 0xFF	; 255
     f60:	81 1d       	adc	r24, r1
     f62:	81 1d       	adc	r24, r1
     f64:	08 95       	ret

00000f66 <__fp_inf>:
     f66:	97 f9       	bld	r25, 7
     f68:	9f 67       	ori	r25, 0x7F	; 127
     f6a:	80 e8       	ldi	r24, 0x80	; 128
     f6c:	70 e0       	ldi	r23, 0x00	; 0
     f6e:	60 e0       	ldi	r22, 0x00	; 0
     f70:	08 95       	ret

00000f72 <__fp_nan>:
     f72:	9f ef       	ldi	r25, 0xFF	; 255
     f74:	80 ec       	ldi	r24, 0xC0	; 192
     f76:	08 95       	ret

00000f78 <__fp_pscA>:
     f78:	00 24       	eor	r0, r0
     f7a:	0a 94       	dec	r0
     f7c:	16 16       	cp	r1, r22
     f7e:	17 06       	cpc	r1, r23
     f80:	18 06       	cpc	r1, r24
     f82:	09 06       	cpc	r0, r25
     f84:	08 95       	ret

00000f86 <__fp_pscB>:
     f86:	00 24       	eor	r0, r0
     f88:	0a 94       	dec	r0
     f8a:	12 16       	cp	r1, r18
     f8c:	13 06       	cpc	r1, r19
     f8e:	14 06       	cpc	r1, r20
     f90:	05 06       	cpc	r0, r21
     f92:	08 95       	ret

00000f94 <__fp_round>:
     f94:	09 2e       	mov	r0, r25
     f96:	03 94       	inc	r0
     f98:	00 0c       	add	r0, r0
     f9a:	11 f4       	brne	.+4      	; 0xfa0 <__fp_round+0xc>
     f9c:	88 23       	and	r24, r24
     f9e:	52 f0       	brmi	.+20     	; 0xfb4 <__fp_round+0x20>
     fa0:	bb 0f       	add	r27, r27
     fa2:	40 f4       	brcc	.+16     	; 0xfb4 <__fp_round+0x20>
     fa4:	bf 2b       	or	r27, r31
     fa6:	11 f4       	brne	.+4      	; 0xfac <__fp_round+0x18>
     fa8:	60 ff       	sbrs	r22, 0
     faa:	04 c0       	rjmp	.+8      	; 0xfb4 <__fp_round+0x20>
     fac:	6f 5f       	subi	r22, 0xFF	; 255
     fae:	7f 4f       	sbci	r23, 0xFF	; 255
     fb0:	8f 4f       	sbci	r24, 0xFF	; 255
     fb2:	9f 4f       	sbci	r25, 0xFF	; 255
     fb4:	08 95       	ret

00000fb6 <__fp_split3>:
     fb6:	57 fd       	sbrc	r21, 7
     fb8:	90 58       	subi	r25, 0x80	; 128
     fba:	44 0f       	add	r20, r20
     fbc:	55 1f       	adc	r21, r21
     fbe:	59 f0       	breq	.+22     	; 0xfd6 <__fp_splitA+0x10>
     fc0:	5f 3f       	cpi	r21, 0xFF	; 255
     fc2:	71 f0       	breq	.+28     	; 0xfe0 <__fp_splitA+0x1a>
     fc4:	47 95       	ror	r20

00000fc6 <__fp_splitA>:
     fc6:	88 0f       	add	r24, r24
     fc8:	97 fb       	bst	r25, 7
     fca:	99 1f       	adc	r25, r25
     fcc:	61 f0       	breq	.+24     	; 0xfe6 <__fp_splitA+0x20>
     fce:	9f 3f       	cpi	r25, 0xFF	; 255
     fd0:	79 f0       	breq	.+30     	; 0xff0 <__fp_splitA+0x2a>
     fd2:	87 95       	ror	r24
     fd4:	08 95       	ret
     fd6:	12 16       	cp	r1, r18
     fd8:	13 06       	cpc	r1, r19
     fda:	14 06       	cpc	r1, r20
     fdc:	55 1f       	adc	r21, r21
     fde:	f2 cf       	rjmp	.-28     	; 0xfc4 <__fp_split3+0xe>
     fe0:	46 95       	lsr	r20
     fe2:	f1 df       	rcall	.-30     	; 0xfc6 <__fp_splitA>
     fe4:	08 c0       	rjmp	.+16     	; 0xff6 <__fp_splitA+0x30>
     fe6:	16 16       	cp	r1, r22
     fe8:	17 06       	cpc	r1, r23
     fea:	18 06       	cpc	r1, r24
     fec:	99 1f       	adc	r25, r25
     fee:	f1 cf       	rjmp	.-30     	; 0xfd2 <__fp_splitA+0xc>
     ff0:	86 95       	lsr	r24
     ff2:	71 05       	cpc	r23, r1
     ff4:	61 05       	cpc	r22, r1
     ff6:	08 94       	sec
     ff8:	08 95       	ret

00000ffa <__fp_zero>:
     ffa:	e8 94       	clt

00000ffc <__fp_szero>:
     ffc:	bb 27       	eor	r27, r27
     ffe:	66 27       	eor	r22, r22
    1000:	77 27       	eor	r23, r23
    1002:	cb 01       	movw	r24, r22
    1004:	97 f9       	bld	r25, 7
    1006:	08 95       	ret

00001008 <__gesf2>:
    1008:	8a df       	rcall	.-236    	; 0xf1e <__fp_cmp>
    100a:	08 f4       	brcc	.+2      	; 0x100e <__gesf2+0x6>
    100c:	8f ef       	ldi	r24, 0xFF	; 255
    100e:	08 95       	ret

00001010 <__mulsf3>:
    1010:	0b d0       	rcall	.+22     	; 0x1028 <__mulsf3x>
    1012:	c0 cf       	rjmp	.-128    	; 0xf94 <__fp_round>
    1014:	b1 df       	rcall	.-158    	; 0xf78 <__fp_pscA>
    1016:	28 f0       	brcs	.+10     	; 0x1022 <__mulsf3+0x12>
    1018:	b6 df       	rcall	.-148    	; 0xf86 <__fp_pscB>
    101a:	18 f0       	brcs	.+6      	; 0x1022 <__mulsf3+0x12>
    101c:	95 23       	and	r25, r21
    101e:	09 f0       	breq	.+2      	; 0x1022 <__mulsf3+0x12>
    1020:	a2 cf       	rjmp	.-188    	; 0xf66 <__fp_inf>
    1022:	a7 cf       	rjmp	.-178    	; 0xf72 <__fp_nan>
    1024:	11 24       	eor	r1, r1
    1026:	ea cf       	rjmp	.-44     	; 0xffc <__fp_szero>

00001028 <__mulsf3x>:
    1028:	c6 df       	rcall	.-116    	; 0xfb6 <__fp_split3>
    102a:	a0 f3       	brcs	.-24     	; 0x1014 <__mulsf3+0x4>

0000102c <__mulsf3_pse>:
    102c:	95 9f       	mul	r25, r21
    102e:	d1 f3       	breq	.-12     	; 0x1024 <__mulsf3+0x14>
    1030:	95 0f       	add	r25, r21
    1032:	50 e0       	ldi	r21, 0x00	; 0
    1034:	55 1f       	adc	r21, r21
    1036:	62 9f       	mul	r22, r18
    1038:	f0 01       	movw	r30, r0
    103a:	72 9f       	mul	r23, r18
    103c:	bb 27       	eor	r27, r27
    103e:	f0 0d       	add	r31, r0
    1040:	b1 1d       	adc	r27, r1
    1042:	63 9f       	mul	r22, r19
    1044:	aa 27       	eor	r26, r26
    1046:	f0 0d       	add	r31, r0
    1048:	b1 1d       	adc	r27, r1
    104a:	aa 1f       	adc	r26, r26
    104c:	64 9f       	mul	r22, r20
    104e:	66 27       	eor	r22, r22
    1050:	b0 0d       	add	r27, r0
    1052:	a1 1d       	adc	r26, r1
    1054:	66 1f       	adc	r22, r22
    1056:	82 9f       	mul	r24, r18
    1058:	22 27       	eor	r18, r18
    105a:	b0 0d       	add	r27, r0
    105c:	a1 1d       	adc	r26, r1
    105e:	62 1f       	adc	r22, r18
    1060:	73 9f       	mul	r23, r19
    1062:	b0 0d       	add	r27, r0
    1064:	a1 1d       	adc	r26, r1
    1066:	62 1f       	adc	r22, r18
    1068:	83 9f       	mul	r24, r19
    106a:	a0 0d       	add	r26, r0
    106c:	61 1d       	adc	r22, r1
    106e:	22 1f       	adc	r18, r18
    1070:	74 9f       	mul	r23, r20
    1072:	33 27       	eor	r19, r19
    1074:	a0 0d       	add	r26, r0
    1076:	61 1d       	adc	r22, r1
    1078:	23 1f       	adc	r18, r19
    107a:	84 9f       	mul	r24, r20
    107c:	60 0d       	add	r22, r0
    107e:	21 1d       	adc	r18, r1
    1080:	82 2f       	mov	r24, r18
    1082:	76 2f       	mov	r23, r22
    1084:	6a 2f       	mov	r22, r26
    1086:	11 24       	eor	r1, r1
    1088:	9f 57       	subi	r25, 0x7F	; 127
    108a:	50 40       	sbci	r21, 0x00	; 0
    108c:	8a f0       	brmi	.+34     	; 0x10b0 <__mulsf3_pse+0x84>
    108e:	e1 f0       	breq	.+56     	; 0x10c8 <__mulsf3_pse+0x9c>
    1090:	88 23       	and	r24, r24
    1092:	4a f0       	brmi	.+18     	; 0x10a6 <__mulsf3_pse+0x7a>
    1094:	ee 0f       	add	r30, r30
    1096:	ff 1f       	adc	r31, r31
    1098:	bb 1f       	adc	r27, r27
    109a:	66 1f       	adc	r22, r22
    109c:	77 1f       	adc	r23, r23
    109e:	88 1f       	adc	r24, r24
    10a0:	91 50       	subi	r25, 0x01	; 1
    10a2:	50 40       	sbci	r21, 0x00	; 0
    10a4:	a9 f7       	brne	.-22     	; 0x1090 <__mulsf3_pse+0x64>
    10a6:	9e 3f       	cpi	r25, 0xFE	; 254
    10a8:	51 05       	cpc	r21, r1
    10aa:	70 f0       	brcs	.+28     	; 0x10c8 <__mulsf3_pse+0x9c>
    10ac:	5c cf       	rjmp	.-328    	; 0xf66 <__fp_inf>
    10ae:	a6 cf       	rjmp	.-180    	; 0xffc <__fp_szero>
    10b0:	5f 3f       	cpi	r21, 0xFF	; 255
    10b2:	ec f3       	brlt	.-6      	; 0x10ae <__mulsf3_pse+0x82>
    10b4:	98 3e       	cpi	r25, 0xE8	; 232
    10b6:	dc f3       	brlt	.-10     	; 0x10ae <__mulsf3_pse+0x82>
    10b8:	86 95       	lsr	r24
    10ba:	77 95       	ror	r23
    10bc:	67 95       	ror	r22
    10be:	b7 95       	ror	r27
    10c0:	f7 95       	ror	r31
    10c2:	e7 95       	ror	r30
    10c4:	9f 5f       	subi	r25, 0xFF	; 255
    10c6:	c1 f7       	brne	.-16     	; 0x10b8 <__mulsf3_pse+0x8c>
    10c8:	fe 2b       	or	r31, r30
    10ca:	88 0f       	add	r24, r24
    10cc:	91 1d       	adc	r25, r1
    10ce:	96 95       	lsr	r25
    10d0:	87 95       	ror	r24
    10d2:	97 f9       	bld	r25, 7
    10d4:	08 95       	ret

000010d6 <fdevopen>:
    10d6:	0f 93       	push	r16
    10d8:	1f 93       	push	r17
    10da:	cf 93       	push	r28
    10dc:	df 93       	push	r29
    10de:	ec 01       	movw	r28, r24
    10e0:	8b 01       	movw	r16, r22
    10e2:	00 97       	sbiw	r24, 0x00	; 0
    10e4:	31 f4       	brne	.+12     	; 0x10f2 <fdevopen+0x1c>
    10e6:	61 15       	cp	r22, r1
    10e8:	71 05       	cpc	r23, r1
    10ea:	19 f4       	brne	.+6      	; 0x10f2 <fdevopen+0x1c>
    10ec:	80 e0       	ldi	r24, 0x00	; 0
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	38 c0       	rjmp	.+112    	; 0x1162 <fdevopen+0x8c>
    10f2:	6e e0       	ldi	r22, 0x0E	; 14
    10f4:	70 e0       	ldi	r23, 0x00	; 0
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	0e 94 c9 0a 	call	0x1592	; 0x1592 <calloc>
    10fe:	fc 01       	movw	r30, r24
    1100:	00 97       	sbiw	r24, 0x00	; 0
    1102:	a1 f3       	breq	.-24     	; 0x10ec <fdevopen+0x16>
    1104:	80 e8       	ldi	r24, 0x80	; 128
    1106:	83 83       	std	Z+3, r24	; 0x03
    1108:	01 15       	cp	r16, r1
    110a:	11 05       	cpc	r17, r1
    110c:	71 f0       	breq	.+28     	; 0x112a <fdevopen+0x54>
    110e:	13 87       	std	Z+11, r17	; 0x0b
    1110:	02 87       	std	Z+10, r16	; 0x0a
    1112:	81 e8       	ldi	r24, 0x81	; 129
    1114:	83 83       	std	Z+3, r24	; 0x03
    1116:	80 91 f1 03 	lds	r24, 0x03F1
    111a:	90 91 f2 03 	lds	r25, 0x03F2
    111e:	89 2b       	or	r24, r25
    1120:	21 f4       	brne	.+8      	; 0x112a <fdevopen+0x54>
    1122:	f0 93 f2 03 	sts	0x03F2, r31
    1126:	e0 93 f1 03 	sts	0x03F1, r30
    112a:	20 97       	sbiw	r28, 0x00	; 0
    112c:	c9 f0       	breq	.+50     	; 0x1160 <fdevopen+0x8a>
    112e:	d1 87       	std	Z+9, r29	; 0x09
    1130:	c0 87       	std	Z+8, r28	; 0x08
    1132:	83 81       	ldd	r24, Z+3	; 0x03
    1134:	82 60       	ori	r24, 0x02	; 2
    1136:	83 83       	std	Z+3, r24	; 0x03
    1138:	80 91 f3 03 	lds	r24, 0x03F3
    113c:	90 91 f4 03 	lds	r25, 0x03F4
    1140:	89 2b       	or	r24, r25
    1142:	71 f4       	brne	.+28     	; 0x1160 <fdevopen+0x8a>
    1144:	f0 93 f4 03 	sts	0x03F4, r31
    1148:	e0 93 f3 03 	sts	0x03F3, r30
    114c:	80 91 f5 03 	lds	r24, 0x03F5
    1150:	90 91 f6 03 	lds	r25, 0x03F6
    1154:	89 2b       	or	r24, r25
    1156:	21 f4       	brne	.+8      	; 0x1160 <fdevopen+0x8a>
    1158:	f0 93 f6 03 	sts	0x03F6, r31
    115c:	e0 93 f5 03 	sts	0x03F5, r30
    1160:	cf 01       	movw	r24, r30
    1162:	df 91       	pop	r29
    1164:	cf 91       	pop	r28
    1166:	1f 91       	pop	r17
    1168:	0f 91       	pop	r16
    116a:	08 95       	ret

0000116c <printf>:
    116c:	a0 e0       	ldi	r26, 0x00	; 0
    116e:	b0 e0       	ldi	r27, 0x00	; 0
    1170:	ec eb       	ldi	r30, 0xBC	; 188
    1172:	f8 e0       	ldi	r31, 0x08	; 8
    1174:	0c 94 c9 0c 	jmp	0x1992	; 0x1992 <__prologue_saves__+0x20>
    1178:	fe 01       	movw	r30, r28
    117a:	35 96       	adiw	r30, 0x05	; 5
    117c:	61 91       	ld	r22, Z+
    117e:	71 91       	ld	r23, Z+
    1180:	af 01       	movw	r20, r30
    1182:	80 91 f3 03 	lds	r24, 0x03F3
    1186:	90 91 f4 03 	lds	r25, 0x03F4
    118a:	0e 94 f7 08 	call	0x11ee	; 0x11ee <vfprintf>
    118e:	e2 e0       	ldi	r30, 0x02	; 2
    1190:	0c 94 e5 0c 	jmp	0x19ca	; 0x19ca <__epilogue_restores__+0x20>

00001194 <puts>:
    1194:	0f 93       	push	r16
    1196:	1f 93       	push	r17
    1198:	cf 93       	push	r28
    119a:	df 93       	push	r29
    119c:	e0 91 f3 03 	lds	r30, 0x03F3
    11a0:	f0 91 f4 03 	lds	r31, 0x03F4
    11a4:	23 81       	ldd	r18, Z+3	; 0x03
    11a6:	21 ff       	sbrs	r18, 1
    11a8:	1b c0       	rjmp	.+54     	; 0x11e0 <puts+0x4c>
    11aa:	ec 01       	movw	r28, r24
    11ac:	00 e0       	ldi	r16, 0x00	; 0
    11ae:	10 e0       	ldi	r17, 0x00	; 0
    11b0:	89 91       	ld	r24, Y+
    11b2:	60 91 f3 03 	lds	r22, 0x03F3
    11b6:	70 91 f4 03 	lds	r23, 0x03F4
    11ba:	db 01       	movw	r26, r22
    11bc:	18 96       	adiw	r26, 0x08	; 8
    11be:	ed 91       	ld	r30, X+
    11c0:	fc 91       	ld	r31, X
    11c2:	19 97       	sbiw	r26, 0x09	; 9
    11c4:	88 23       	and	r24, r24
    11c6:	31 f0       	breq	.+12     	; 0x11d4 <puts+0x40>
    11c8:	09 95       	icall
    11ca:	89 2b       	or	r24, r25
    11cc:	89 f3       	breq	.-30     	; 0x11b0 <puts+0x1c>
    11ce:	0f ef       	ldi	r16, 0xFF	; 255
    11d0:	1f ef       	ldi	r17, 0xFF	; 255
    11d2:	ee cf       	rjmp	.-36     	; 0x11b0 <puts+0x1c>
    11d4:	8a e0       	ldi	r24, 0x0A	; 10
    11d6:	09 95       	icall
    11d8:	89 2b       	or	r24, r25
    11da:	11 f4       	brne	.+4      	; 0x11e0 <puts+0x4c>
    11dc:	c8 01       	movw	r24, r16
    11de:	02 c0       	rjmp	.+4      	; 0x11e4 <puts+0x50>
    11e0:	8f ef       	ldi	r24, 0xFF	; 255
    11e2:	9f ef       	ldi	r25, 0xFF	; 255
    11e4:	df 91       	pop	r29
    11e6:	cf 91       	pop	r28
    11e8:	1f 91       	pop	r17
    11ea:	0f 91       	pop	r16
    11ec:	08 95       	ret

000011ee <vfprintf>:
    11ee:	ac e0       	ldi	r26, 0x0C	; 12
    11f0:	b0 e0       	ldi	r27, 0x00	; 0
    11f2:	ed ef       	ldi	r30, 0xFD	; 253
    11f4:	f8 e0       	ldi	r31, 0x08	; 8
    11f6:	0c 94 b9 0c 	jmp	0x1972	; 0x1972 <__prologue_saves__>
    11fa:	7c 01       	movw	r14, r24
    11fc:	6b 01       	movw	r12, r22
    11fe:	8a 01       	movw	r16, r20
    1200:	fc 01       	movw	r30, r24
    1202:	17 82       	std	Z+7, r1	; 0x07
    1204:	16 82       	std	Z+6, r1	; 0x06
    1206:	83 81       	ldd	r24, Z+3	; 0x03
    1208:	81 ff       	sbrs	r24, 1
    120a:	bd c1       	rjmp	.+890    	; 0x1586 <vfprintf+0x398>
    120c:	ce 01       	movw	r24, r28
    120e:	01 96       	adiw	r24, 0x01	; 1
    1210:	4c 01       	movw	r8, r24
    1212:	f7 01       	movw	r30, r14
    1214:	93 81       	ldd	r25, Z+3	; 0x03
    1216:	f6 01       	movw	r30, r12
    1218:	93 fd       	sbrc	r25, 3
    121a:	85 91       	lpm	r24, Z+
    121c:	93 ff       	sbrs	r25, 3
    121e:	81 91       	ld	r24, Z+
    1220:	6f 01       	movw	r12, r30
    1222:	88 23       	and	r24, r24
    1224:	09 f4       	brne	.+2      	; 0x1228 <vfprintf+0x3a>
    1226:	ab c1       	rjmp	.+854    	; 0x157e <vfprintf+0x390>
    1228:	85 32       	cpi	r24, 0x25	; 37
    122a:	39 f4       	brne	.+14     	; 0x123a <vfprintf+0x4c>
    122c:	93 fd       	sbrc	r25, 3
    122e:	85 91       	lpm	r24, Z+
    1230:	93 ff       	sbrs	r25, 3
    1232:	81 91       	ld	r24, Z+
    1234:	6f 01       	movw	r12, r30
    1236:	85 32       	cpi	r24, 0x25	; 37
    1238:	29 f4       	brne	.+10     	; 0x1244 <vfprintf+0x56>
    123a:	b7 01       	movw	r22, r14
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	0e 94 29 0c 	call	0x1852	; 0x1852 <fputc>
    1242:	e7 cf       	rjmp	.-50     	; 0x1212 <vfprintf+0x24>
    1244:	51 2c       	mov	r5, r1
    1246:	31 2c       	mov	r3, r1
    1248:	20 e0       	ldi	r18, 0x00	; 0
    124a:	20 32       	cpi	r18, 0x20	; 32
    124c:	a0 f4       	brcc	.+40     	; 0x1276 <vfprintf+0x88>
    124e:	8b 32       	cpi	r24, 0x2B	; 43
    1250:	69 f0       	breq	.+26     	; 0x126c <vfprintf+0x7e>
    1252:	30 f4       	brcc	.+12     	; 0x1260 <vfprintf+0x72>
    1254:	80 32       	cpi	r24, 0x20	; 32
    1256:	59 f0       	breq	.+22     	; 0x126e <vfprintf+0x80>
    1258:	83 32       	cpi	r24, 0x23	; 35
    125a:	69 f4       	brne	.+26     	; 0x1276 <vfprintf+0x88>
    125c:	20 61       	ori	r18, 0x10	; 16
    125e:	2c c0       	rjmp	.+88     	; 0x12b8 <vfprintf+0xca>
    1260:	8d 32       	cpi	r24, 0x2D	; 45
    1262:	39 f0       	breq	.+14     	; 0x1272 <vfprintf+0x84>
    1264:	80 33       	cpi	r24, 0x30	; 48
    1266:	39 f4       	brne	.+14     	; 0x1276 <vfprintf+0x88>
    1268:	21 60       	ori	r18, 0x01	; 1
    126a:	26 c0       	rjmp	.+76     	; 0x12b8 <vfprintf+0xca>
    126c:	22 60       	ori	r18, 0x02	; 2
    126e:	24 60       	ori	r18, 0x04	; 4
    1270:	23 c0       	rjmp	.+70     	; 0x12b8 <vfprintf+0xca>
    1272:	28 60       	ori	r18, 0x08	; 8
    1274:	21 c0       	rjmp	.+66     	; 0x12b8 <vfprintf+0xca>
    1276:	27 fd       	sbrc	r18, 7
    1278:	27 c0       	rjmp	.+78     	; 0x12c8 <vfprintf+0xda>
    127a:	30 ed       	ldi	r19, 0xD0	; 208
    127c:	38 0f       	add	r19, r24
    127e:	3a 30       	cpi	r19, 0x0A	; 10
    1280:	78 f4       	brcc	.+30     	; 0x12a0 <vfprintf+0xb2>
    1282:	26 ff       	sbrs	r18, 6
    1284:	06 c0       	rjmp	.+12     	; 0x1292 <vfprintf+0xa4>
    1286:	fa e0       	ldi	r31, 0x0A	; 10
    1288:	5f 9e       	mul	r5, r31
    128a:	30 0d       	add	r19, r0
    128c:	11 24       	eor	r1, r1
    128e:	53 2e       	mov	r5, r19
    1290:	13 c0       	rjmp	.+38     	; 0x12b8 <vfprintf+0xca>
    1292:	8a e0       	ldi	r24, 0x0A	; 10
    1294:	38 9e       	mul	r3, r24
    1296:	30 0d       	add	r19, r0
    1298:	11 24       	eor	r1, r1
    129a:	33 2e       	mov	r3, r19
    129c:	20 62       	ori	r18, 0x20	; 32
    129e:	0c c0       	rjmp	.+24     	; 0x12b8 <vfprintf+0xca>
    12a0:	8e 32       	cpi	r24, 0x2E	; 46
    12a2:	21 f4       	brne	.+8      	; 0x12ac <vfprintf+0xbe>
    12a4:	26 fd       	sbrc	r18, 6
    12a6:	6b c1       	rjmp	.+726    	; 0x157e <vfprintf+0x390>
    12a8:	20 64       	ori	r18, 0x40	; 64
    12aa:	06 c0       	rjmp	.+12     	; 0x12b8 <vfprintf+0xca>
    12ac:	8c 36       	cpi	r24, 0x6C	; 108
    12ae:	11 f4       	brne	.+4      	; 0x12b4 <vfprintf+0xc6>
    12b0:	20 68       	ori	r18, 0x80	; 128
    12b2:	02 c0       	rjmp	.+4      	; 0x12b8 <vfprintf+0xca>
    12b4:	88 36       	cpi	r24, 0x68	; 104
    12b6:	41 f4       	brne	.+16     	; 0x12c8 <vfprintf+0xda>
    12b8:	f6 01       	movw	r30, r12
    12ba:	93 fd       	sbrc	r25, 3
    12bc:	85 91       	lpm	r24, Z+
    12be:	93 ff       	sbrs	r25, 3
    12c0:	81 91       	ld	r24, Z+
    12c2:	6f 01       	movw	r12, r30
    12c4:	81 11       	cpse	r24, r1
    12c6:	c1 cf       	rjmp	.-126    	; 0x124a <vfprintf+0x5c>
    12c8:	98 2f       	mov	r25, r24
    12ca:	9f 7d       	andi	r25, 0xDF	; 223
    12cc:	95 54       	subi	r25, 0x45	; 69
    12ce:	93 30       	cpi	r25, 0x03	; 3
    12d0:	28 f4       	brcc	.+10     	; 0x12dc <vfprintf+0xee>
    12d2:	0c 5f       	subi	r16, 0xFC	; 252
    12d4:	1f 4f       	sbci	r17, 0xFF	; 255
    12d6:	ff e3       	ldi	r31, 0x3F	; 63
    12d8:	f9 83       	std	Y+1, r31	; 0x01
    12da:	0d c0       	rjmp	.+26     	; 0x12f6 <vfprintf+0x108>
    12dc:	83 36       	cpi	r24, 0x63	; 99
    12de:	31 f0       	breq	.+12     	; 0x12ec <vfprintf+0xfe>
    12e0:	83 37       	cpi	r24, 0x73	; 115
    12e2:	71 f0       	breq	.+28     	; 0x1300 <vfprintf+0x112>
    12e4:	83 35       	cpi	r24, 0x53	; 83
    12e6:	09 f0       	breq	.+2      	; 0x12ea <vfprintf+0xfc>
    12e8:	5b c0       	rjmp	.+182    	; 0x13a0 <vfprintf+0x1b2>
    12ea:	22 c0       	rjmp	.+68     	; 0x1330 <vfprintf+0x142>
    12ec:	f8 01       	movw	r30, r16
    12ee:	80 81       	ld	r24, Z
    12f0:	89 83       	std	Y+1, r24	; 0x01
    12f2:	0e 5f       	subi	r16, 0xFE	; 254
    12f4:	1f 4f       	sbci	r17, 0xFF	; 255
    12f6:	44 24       	eor	r4, r4
    12f8:	43 94       	inc	r4
    12fa:	51 2c       	mov	r5, r1
    12fc:	54 01       	movw	r10, r8
    12fe:	15 c0       	rjmp	.+42     	; 0x132a <vfprintf+0x13c>
    1300:	38 01       	movw	r6, r16
    1302:	f2 e0       	ldi	r31, 0x02	; 2
    1304:	6f 0e       	add	r6, r31
    1306:	71 1c       	adc	r7, r1
    1308:	f8 01       	movw	r30, r16
    130a:	a0 80       	ld	r10, Z
    130c:	b1 80       	ldd	r11, Z+1	; 0x01
    130e:	26 ff       	sbrs	r18, 6
    1310:	03 c0       	rjmp	.+6      	; 0x1318 <vfprintf+0x12a>
    1312:	65 2d       	mov	r22, r5
    1314:	70 e0       	ldi	r23, 0x00	; 0
    1316:	02 c0       	rjmp	.+4      	; 0x131c <vfprintf+0x12e>
    1318:	6f ef       	ldi	r22, 0xFF	; 255
    131a:	7f ef       	ldi	r23, 0xFF	; 255
    131c:	c5 01       	movw	r24, r10
    131e:	2c 87       	std	Y+12, r18	; 0x0c
    1320:	0e 94 1e 0c 	call	0x183c	; 0x183c <strnlen>
    1324:	2c 01       	movw	r4, r24
    1326:	83 01       	movw	r16, r6
    1328:	2c 85       	ldd	r18, Y+12	; 0x0c
    132a:	2f 77       	andi	r18, 0x7F	; 127
    132c:	22 2e       	mov	r2, r18
    132e:	17 c0       	rjmp	.+46     	; 0x135e <vfprintf+0x170>
    1330:	38 01       	movw	r6, r16
    1332:	f2 e0       	ldi	r31, 0x02	; 2
    1334:	6f 0e       	add	r6, r31
    1336:	71 1c       	adc	r7, r1
    1338:	f8 01       	movw	r30, r16
    133a:	a0 80       	ld	r10, Z
    133c:	b1 80       	ldd	r11, Z+1	; 0x01
    133e:	26 ff       	sbrs	r18, 6
    1340:	03 c0       	rjmp	.+6      	; 0x1348 <vfprintf+0x15a>
    1342:	65 2d       	mov	r22, r5
    1344:	70 e0       	ldi	r23, 0x00	; 0
    1346:	02 c0       	rjmp	.+4      	; 0x134c <vfprintf+0x15e>
    1348:	6f ef       	ldi	r22, 0xFF	; 255
    134a:	7f ef       	ldi	r23, 0xFF	; 255
    134c:	c5 01       	movw	r24, r10
    134e:	2c 87       	std	Y+12, r18	; 0x0c
    1350:	0e 94 0c 0c 	call	0x1818	; 0x1818 <strnlen_P>
    1354:	2c 01       	movw	r4, r24
    1356:	2c 85       	ldd	r18, Y+12	; 0x0c
    1358:	20 68       	ori	r18, 0x80	; 128
    135a:	22 2e       	mov	r2, r18
    135c:	83 01       	movw	r16, r6
    135e:	23 fc       	sbrc	r2, 3
    1360:	1b c0       	rjmp	.+54     	; 0x1398 <vfprintf+0x1aa>
    1362:	83 2d       	mov	r24, r3
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	48 16       	cp	r4, r24
    1368:	59 06       	cpc	r5, r25
    136a:	b0 f4       	brcc	.+44     	; 0x1398 <vfprintf+0x1aa>
    136c:	b7 01       	movw	r22, r14
    136e:	80 e2       	ldi	r24, 0x20	; 32
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	0e 94 29 0c 	call	0x1852	; 0x1852 <fputc>
    1376:	3a 94       	dec	r3
    1378:	f4 cf       	rjmp	.-24     	; 0x1362 <vfprintf+0x174>
    137a:	f5 01       	movw	r30, r10
    137c:	27 fc       	sbrc	r2, 7
    137e:	85 91       	lpm	r24, Z+
    1380:	27 fe       	sbrs	r2, 7
    1382:	81 91       	ld	r24, Z+
    1384:	5f 01       	movw	r10, r30
    1386:	b7 01       	movw	r22, r14
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	0e 94 29 0c 	call	0x1852	; 0x1852 <fputc>
    138e:	31 10       	cpse	r3, r1
    1390:	3a 94       	dec	r3
    1392:	f1 e0       	ldi	r31, 0x01	; 1
    1394:	4f 1a       	sub	r4, r31
    1396:	51 08       	sbc	r5, r1
    1398:	41 14       	cp	r4, r1
    139a:	51 04       	cpc	r5, r1
    139c:	71 f7       	brne	.-36     	; 0x137a <vfprintf+0x18c>
    139e:	e5 c0       	rjmp	.+458    	; 0x156a <vfprintf+0x37c>
    13a0:	84 36       	cpi	r24, 0x64	; 100
    13a2:	11 f0       	breq	.+4      	; 0x13a8 <vfprintf+0x1ba>
    13a4:	89 36       	cpi	r24, 0x69	; 105
    13a6:	39 f5       	brne	.+78     	; 0x13f6 <vfprintf+0x208>
    13a8:	f8 01       	movw	r30, r16
    13aa:	27 ff       	sbrs	r18, 7
    13ac:	07 c0       	rjmp	.+14     	; 0x13bc <vfprintf+0x1ce>
    13ae:	60 81       	ld	r22, Z
    13b0:	71 81       	ldd	r23, Z+1	; 0x01
    13b2:	82 81       	ldd	r24, Z+2	; 0x02
    13b4:	93 81       	ldd	r25, Z+3	; 0x03
    13b6:	0c 5f       	subi	r16, 0xFC	; 252
    13b8:	1f 4f       	sbci	r17, 0xFF	; 255
    13ba:	08 c0       	rjmp	.+16     	; 0x13cc <vfprintf+0x1de>
    13bc:	60 81       	ld	r22, Z
    13be:	71 81       	ldd	r23, Z+1	; 0x01
    13c0:	88 27       	eor	r24, r24
    13c2:	77 fd       	sbrc	r23, 7
    13c4:	80 95       	com	r24
    13c6:	98 2f       	mov	r25, r24
    13c8:	0e 5f       	subi	r16, 0xFE	; 254
    13ca:	1f 4f       	sbci	r17, 0xFF	; 255
    13cc:	2f 76       	andi	r18, 0x6F	; 111
    13ce:	b2 2e       	mov	r11, r18
    13d0:	97 ff       	sbrs	r25, 7
    13d2:	09 c0       	rjmp	.+18     	; 0x13e6 <vfprintf+0x1f8>
    13d4:	90 95       	com	r25
    13d6:	80 95       	com	r24
    13d8:	70 95       	com	r23
    13da:	61 95       	neg	r22
    13dc:	7f 4f       	sbci	r23, 0xFF	; 255
    13de:	8f 4f       	sbci	r24, 0xFF	; 255
    13e0:	9f 4f       	sbci	r25, 0xFF	; 255
    13e2:	20 68       	ori	r18, 0x80	; 128
    13e4:	b2 2e       	mov	r11, r18
    13e6:	2a e0       	ldi	r18, 0x0A	; 10
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	a4 01       	movw	r20, r8
    13ec:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <__ultoa_invert>
    13f0:	a8 2e       	mov	r10, r24
    13f2:	a8 18       	sub	r10, r8
    13f4:	44 c0       	rjmp	.+136    	; 0x147e <vfprintf+0x290>
    13f6:	85 37       	cpi	r24, 0x75	; 117
    13f8:	29 f4       	brne	.+10     	; 0x1404 <vfprintf+0x216>
    13fa:	2f 7e       	andi	r18, 0xEF	; 239
    13fc:	b2 2e       	mov	r11, r18
    13fe:	2a e0       	ldi	r18, 0x0A	; 10
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	25 c0       	rjmp	.+74     	; 0x144e <vfprintf+0x260>
    1404:	f2 2f       	mov	r31, r18
    1406:	f9 7f       	andi	r31, 0xF9	; 249
    1408:	bf 2e       	mov	r11, r31
    140a:	8f 36       	cpi	r24, 0x6F	; 111
    140c:	c1 f0       	breq	.+48     	; 0x143e <vfprintf+0x250>
    140e:	18 f4       	brcc	.+6      	; 0x1416 <vfprintf+0x228>
    1410:	88 35       	cpi	r24, 0x58	; 88
    1412:	79 f0       	breq	.+30     	; 0x1432 <vfprintf+0x244>
    1414:	b4 c0       	rjmp	.+360    	; 0x157e <vfprintf+0x390>
    1416:	80 37       	cpi	r24, 0x70	; 112
    1418:	19 f0       	breq	.+6      	; 0x1420 <vfprintf+0x232>
    141a:	88 37       	cpi	r24, 0x78	; 120
    141c:	21 f0       	breq	.+8      	; 0x1426 <vfprintf+0x238>
    141e:	af c0       	rjmp	.+350    	; 0x157e <vfprintf+0x390>
    1420:	2f 2f       	mov	r18, r31
    1422:	20 61       	ori	r18, 0x10	; 16
    1424:	b2 2e       	mov	r11, r18
    1426:	b4 fe       	sbrs	r11, 4
    1428:	0d c0       	rjmp	.+26     	; 0x1444 <vfprintf+0x256>
    142a:	8b 2d       	mov	r24, r11
    142c:	84 60       	ori	r24, 0x04	; 4
    142e:	b8 2e       	mov	r11, r24
    1430:	09 c0       	rjmp	.+18     	; 0x1444 <vfprintf+0x256>
    1432:	24 ff       	sbrs	r18, 4
    1434:	0a c0       	rjmp	.+20     	; 0x144a <vfprintf+0x25c>
    1436:	9f 2f       	mov	r25, r31
    1438:	96 60       	ori	r25, 0x06	; 6
    143a:	b9 2e       	mov	r11, r25
    143c:	06 c0       	rjmp	.+12     	; 0x144a <vfprintf+0x25c>
    143e:	28 e0       	ldi	r18, 0x08	; 8
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	05 c0       	rjmp	.+10     	; 0x144e <vfprintf+0x260>
    1444:	20 e1       	ldi	r18, 0x10	; 16
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	02 c0       	rjmp	.+4      	; 0x144e <vfprintf+0x260>
    144a:	20 e1       	ldi	r18, 0x10	; 16
    144c:	32 e0       	ldi	r19, 0x02	; 2
    144e:	f8 01       	movw	r30, r16
    1450:	b7 fe       	sbrs	r11, 7
    1452:	07 c0       	rjmp	.+14     	; 0x1462 <vfprintf+0x274>
    1454:	60 81       	ld	r22, Z
    1456:	71 81       	ldd	r23, Z+1	; 0x01
    1458:	82 81       	ldd	r24, Z+2	; 0x02
    145a:	93 81       	ldd	r25, Z+3	; 0x03
    145c:	0c 5f       	subi	r16, 0xFC	; 252
    145e:	1f 4f       	sbci	r17, 0xFF	; 255
    1460:	06 c0       	rjmp	.+12     	; 0x146e <vfprintf+0x280>
    1462:	60 81       	ld	r22, Z
    1464:	71 81       	ldd	r23, Z+1	; 0x01
    1466:	80 e0       	ldi	r24, 0x00	; 0
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	0e 5f       	subi	r16, 0xFE	; 254
    146c:	1f 4f       	sbci	r17, 0xFF	; 255
    146e:	a4 01       	movw	r20, r8
    1470:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <__ultoa_invert>
    1474:	a8 2e       	mov	r10, r24
    1476:	a8 18       	sub	r10, r8
    1478:	fb 2d       	mov	r31, r11
    147a:	ff 77       	andi	r31, 0x7F	; 127
    147c:	bf 2e       	mov	r11, r31
    147e:	b6 fe       	sbrs	r11, 6
    1480:	0b c0       	rjmp	.+22     	; 0x1498 <vfprintf+0x2aa>
    1482:	2b 2d       	mov	r18, r11
    1484:	2e 7f       	andi	r18, 0xFE	; 254
    1486:	a5 14       	cp	r10, r5
    1488:	50 f4       	brcc	.+20     	; 0x149e <vfprintf+0x2b0>
    148a:	b4 fe       	sbrs	r11, 4
    148c:	0a c0       	rjmp	.+20     	; 0x14a2 <vfprintf+0x2b4>
    148e:	b2 fc       	sbrc	r11, 2
    1490:	08 c0       	rjmp	.+16     	; 0x14a2 <vfprintf+0x2b4>
    1492:	2b 2d       	mov	r18, r11
    1494:	2e 7e       	andi	r18, 0xEE	; 238
    1496:	05 c0       	rjmp	.+10     	; 0x14a2 <vfprintf+0x2b4>
    1498:	7a 2c       	mov	r7, r10
    149a:	2b 2d       	mov	r18, r11
    149c:	03 c0       	rjmp	.+6      	; 0x14a4 <vfprintf+0x2b6>
    149e:	7a 2c       	mov	r7, r10
    14a0:	01 c0       	rjmp	.+2      	; 0x14a4 <vfprintf+0x2b6>
    14a2:	75 2c       	mov	r7, r5
    14a4:	24 ff       	sbrs	r18, 4
    14a6:	0d c0       	rjmp	.+26     	; 0x14c2 <vfprintf+0x2d4>
    14a8:	fe 01       	movw	r30, r28
    14aa:	ea 0d       	add	r30, r10
    14ac:	f1 1d       	adc	r31, r1
    14ae:	80 81       	ld	r24, Z
    14b0:	80 33       	cpi	r24, 0x30	; 48
    14b2:	11 f4       	brne	.+4      	; 0x14b8 <vfprintf+0x2ca>
    14b4:	29 7e       	andi	r18, 0xE9	; 233
    14b6:	09 c0       	rjmp	.+18     	; 0x14ca <vfprintf+0x2dc>
    14b8:	22 ff       	sbrs	r18, 2
    14ba:	06 c0       	rjmp	.+12     	; 0x14c8 <vfprintf+0x2da>
    14bc:	73 94       	inc	r7
    14be:	73 94       	inc	r7
    14c0:	04 c0       	rjmp	.+8      	; 0x14ca <vfprintf+0x2dc>
    14c2:	82 2f       	mov	r24, r18
    14c4:	86 78       	andi	r24, 0x86	; 134
    14c6:	09 f0       	breq	.+2      	; 0x14ca <vfprintf+0x2dc>
    14c8:	73 94       	inc	r7
    14ca:	23 fd       	sbrc	r18, 3
    14cc:	13 c0       	rjmp	.+38     	; 0x14f4 <vfprintf+0x306>
    14ce:	20 ff       	sbrs	r18, 0
    14d0:	06 c0       	rjmp	.+12     	; 0x14de <vfprintf+0x2f0>
    14d2:	5a 2c       	mov	r5, r10
    14d4:	73 14       	cp	r7, r3
    14d6:	18 f4       	brcc	.+6      	; 0x14de <vfprintf+0x2f0>
    14d8:	53 0c       	add	r5, r3
    14da:	57 18       	sub	r5, r7
    14dc:	73 2c       	mov	r7, r3
    14de:	73 14       	cp	r7, r3
    14e0:	68 f4       	brcc	.+26     	; 0x14fc <vfprintf+0x30e>
    14e2:	b7 01       	movw	r22, r14
    14e4:	80 e2       	ldi	r24, 0x20	; 32
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	2c 87       	std	Y+12, r18	; 0x0c
    14ea:	0e 94 29 0c 	call	0x1852	; 0x1852 <fputc>
    14ee:	73 94       	inc	r7
    14f0:	2c 85       	ldd	r18, Y+12	; 0x0c
    14f2:	f5 cf       	rjmp	.-22     	; 0x14de <vfprintf+0x2f0>
    14f4:	73 14       	cp	r7, r3
    14f6:	10 f4       	brcc	.+4      	; 0x14fc <vfprintf+0x30e>
    14f8:	37 18       	sub	r3, r7
    14fa:	01 c0       	rjmp	.+2      	; 0x14fe <vfprintf+0x310>
    14fc:	31 2c       	mov	r3, r1
    14fe:	24 ff       	sbrs	r18, 4
    1500:	12 c0       	rjmp	.+36     	; 0x1526 <vfprintf+0x338>
    1502:	b7 01       	movw	r22, r14
    1504:	80 e3       	ldi	r24, 0x30	; 48
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	2c 87       	std	Y+12, r18	; 0x0c
    150a:	0e 94 29 0c 	call	0x1852	; 0x1852 <fputc>
    150e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1510:	22 ff       	sbrs	r18, 2
    1512:	17 c0       	rjmp	.+46     	; 0x1542 <vfprintf+0x354>
    1514:	21 ff       	sbrs	r18, 1
    1516:	03 c0       	rjmp	.+6      	; 0x151e <vfprintf+0x330>
    1518:	88 e5       	ldi	r24, 0x58	; 88
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	02 c0       	rjmp	.+4      	; 0x1522 <vfprintf+0x334>
    151e:	88 e7       	ldi	r24, 0x78	; 120
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	b7 01       	movw	r22, r14
    1524:	0c c0       	rjmp	.+24     	; 0x153e <vfprintf+0x350>
    1526:	82 2f       	mov	r24, r18
    1528:	86 78       	andi	r24, 0x86	; 134
    152a:	59 f0       	breq	.+22     	; 0x1542 <vfprintf+0x354>
    152c:	21 fd       	sbrc	r18, 1
    152e:	02 c0       	rjmp	.+4      	; 0x1534 <vfprintf+0x346>
    1530:	80 e2       	ldi	r24, 0x20	; 32
    1532:	01 c0       	rjmp	.+2      	; 0x1536 <vfprintf+0x348>
    1534:	8b e2       	ldi	r24, 0x2B	; 43
    1536:	27 fd       	sbrc	r18, 7
    1538:	8d e2       	ldi	r24, 0x2D	; 45
    153a:	b7 01       	movw	r22, r14
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	0e 94 29 0c 	call	0x1852	; 0x1852 <fputc>
    1542:	a5 14       	cp	r10, r5
    1544:	38 f4       	brcc	.+14     	; 0x1554 <vfprintf+0x366>
    1546:	b7 01       	movw	r22, r14
    1548:	80 e3       	ldi	r24, 0x30	; 48
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	0e 94 29 0c 	call	0x1852	; 0x1852 <fputc>
    1550:	5a 94       	dec	r5
    1552:	f7 cf       	rjmp	.-18     	; 0x1542 <vfprintf+0x354>
    1554:	aa 94       	dec	r10
    1556:	f4 01       	movw	r30, r8
    1558:	ea 0d       	add	r30, r10
    155a:	f1 1d       	adc	r31, r1
    155c:	80 81       	ld	r24, Z
    155e:	b7 01       	movw	r22, r14
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	0e 94 29 0c 	call	0x1852	; 0x1852 <fputc>
    1566:	a1 10       	cpse	r10, r1
    1568:	f5 cf       	rjmp	.-22     	; 0x1554 <vfprintf+0x366>
    156a:	33 20       	and	r3, r3
    156c:	09 f4       	brne	.+2      	; 0x1570 <vfprintf+0x382>
    156e:	51 ce       	rjmp	.-862    	; 0x1212 <vfprintf+0x24>
    1570:	b7 01       	movw	r22, r14
    1572:	80 e2       	ldi	r24, 0x20	; 32
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	0e 94 29 0c 	call	0x1852	; 0x1852 <fputc>
    157a:	3a 94       	dec	r3
    157c:	f6 cf       	rjmp	.-20     	; 0x156a <vfprintf+0x37c>
    157e:	f7 01       	movw	r30, r14
    1580:	86 81       	ldd	r24, Z+6	; 0x06
    1582:	97 81       	ldd	r25, Z+7	; 0x07
    1584:	02 c0       	rjmp	.+4      	; 0x158a <vfprintf+0x39c>
    1586:	8f ef       	ldi	r24, 0xFF	; 255
    1588:	9f ef       	ldi	r25, 0xFF	; 255
    158a:	2c 96       	adiw	r28, 0x0c	; 12
    158c:	e2 e1       	ldi	r30, 0x12	; 18
    158e:	0c 94 d5 0c 	jmp	0x19aa	; 0x19aa <__epilogue_restores__>

00001592 <calloc>:
    1592:	0f 93       	push	r16
    1594:	1f 93       	push	r17
    1596:	cf 93       	push	r28
    1598:	df 93       	push	r29
    159a:	86 9f       	mul	r24, r22
    159c:	80 01       	movw	r16, r0
    159e:	87 9f       	mul	r24, r23
    15a0:	10 0d       	add	r17, r0
    15a2:	96 9f       	mul	r25, r22
    15a4:	10 0d       	add	r17, r0
    15a6:	11 24       	eor	r1, r1
    15a8:	c8 01       	movw	r24, r16
    15aa:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <malloc>
    15ae:	ec 01       	movw	r28, r24
    15b0:	00 97       	sbiw	r24, 0x00	; 0
    15b2:	29 f0       	breq	.+10     	; 0x15be <calloc+0x2c>
    15b4:	a8 01       	movw	r20, r16
    15b6:	60 e0       	ldi	r22, 0x00	; 0
    15b8:	70 e0       	ldi	r23, 0x00	; 0
    15ba:	0e 94 17 0c 	call	0x182e	; 0x182e <memset>
    15be:	ce 01       	movw	r24, r28
    15c0:	df 91       	pop	r29
    15c2:	cf 91       	pop	r28
    15c4:	1f 91       	pop	r17
    15c6:	0f 91       	pop	r16
    15c8:	08 95       	ret

000015ca <malloc>:
    15ca:	cf 93       	push	r28
    15cc:	df 93       	push	r29
    15ce:	82 30       	cpi	r24, 0x02	; 2
    15d0:	91 05       	cpc	r25, r1
    15d2:	10 f4       	brcc	.+4      	; 0x15d8 <malloc+0xe>
    15d4:	82 e0       	ldi	r24, 0x02	; 2
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	e0 91 f9 03 	lds	r30, 0x03F9
    15dc:	f0 91 fa 03 	lds	r31, 0x03FA
    15e0:	20 e0       	ldi	r18, 0x00	; 0
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	a0 e0       	ldi	r26, 0x00	; 0
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	30 97       	sbiw	r30, 0x00	; 0
    15ea:	39 f1       	breq	.+78     	; 0x163a <malloc+0x70>
    15ec:	40 81       	ld	r20, Z
    15ee:	51 81       	ldd	r21, Z+1	; 0x01
    15f0:	48 17       	cp	r20, r24
    15f2:	59 07       	cpc	r21, r25
    15f4:	b8 f0       	brcs	.+46     	; 0x1624 <malloc+0x5a>
    15f6:	48 17       	cp	r20, r24
    15f8:	59 07       	cpc	r21, r25
    15fa:	71 f4       	brne	.+28     	; 0x1618 <malloc+0x4e>
    15fc:	82 81       	ldd	r24, Z+2	; 0x02
    15fe:	93 81       	ldd	r25, Z+3	; 0x03
    1600:	10 97       	sbiw	r26, 0x00	; 0
    1602:	29 f0       	breq	.+10     	; 0x160e <malloc+0x44>
    1604:	13 96       	adiw	r26, 0x03	; 3
    1606:	9c 93       	st	X, r25
    1608:	8e 93       	st	-X, r24
    160a:	12 97       	sbiw	r26, 0x02	; 2
    160c:	2c c0       	rjmp	.+88     	; 0x1666 <malloc+0x9c>
    160e:	90 93 fa 03 	sts	0x03FA, r25
    1612:	80 93 f9 03 	sts	0x03F9, r24
    1616:	27 c0       	rjmp	.+78     	; 0x1666 <malloc+0x9c>
    1618:	21 15       	cp	r18, r1
    161a:	31 05       	cpc	r19, r1
    161c:	31 f0       	breq	.+12     	; 0x162a <malloc+0x60>
    161e:	42 17       	cp	r20, r18
    1620:	53 07       	cpc	r21, r19
    1622:	18 f0       	brcs	.+6      	; 0x162a <malloc+0x60>
    1624:	a9 01       	movw	r20, r18
    1626:	db 01       	movw	r26, r22
    1628:	01 c0       	rjmp	.+2      	; 0x162c <malloc+0x62>
    162a:	ef 01       	movw	r28, r30
    162c:	9a 01       	movw	r18, r20
    162e:	bd 01       	movw	r22, r26
    1630:	df 01       	movw	r26, r30
    1632:	02 80       	ldd	r0, Z+2	; 0x02
    1634:	f3 81       	ldd	r31, Z+3	; 0x03
    1636:	e0 2d       	mov	r30, r0
    1638:	d7 cf       	rjmp	.-82     	; 0x15e8 <malloc+0x1e>
    163a:	21 15       	cp	r18, r1
    163c:	31 05       	cpc	r19, r1
    163e:	f9 f0       	breq	.+62     	; 0x167e <malloc+0xb4>
    1640:	28 1b       	sub	r18, r24
    1642:	39 0b       	sbc	r19, r25
    1644:	24 30       	cpi	r18, 0x04	; 4
    1646:	31 05       	cpc	r19, r1
    1648:	80 f4       	brcc	.+32     	; 0x166a <malloc+0xa0>
    164a:	8a 81       	ldd	r24, Y+2	; 0x02
    164c:	9b 81       	ldd	r25, Y+3	; 0x03
    164e:	61 15       	cp	r22, r1
    1650:	71 05       	cpc	r23, r1
    1652:	21 f0       	breq	.+8      	; 0x165c <malloc+0x92>
    1654:	fb 01       	movw	r30, r22
    1656:	93 83       	std	Z+3, r25	; 0x03
    1658:	82 83       	std	Z+2, r24	; 0x02
    165a:	04 c0       	rjmp	.+8      	; 0x1664 <malloc+0x9a>
    165c:	90 93 fa 03 	sts	0x03FA, r25
    1660:	80 93 f9 03 	sts	0x03F9, r24
    1664:	fe 01       	movw	r30, r28
    1666:	32 96       	adiw	r30, 0x02	; 2
    1668:	44 c0       	rjmp	.+136    	; 0x16f2 <malloc+0x128>
    166a:	fe 01       	movw	r30, r28
    166c:	e2 0f       	add	r30, r18
    166e:	f3 1f       	adc	r31, r19
    1670:	81 93       	st	Z+, r24
    1672:	91 93       	st	Z+, r25
    1674:	22 50       	subi	r18, 0x02	; 2
    1676:	31 09       	sbc	r19, r1
    1678:	39 83       	std	Y+1, r19	; 0x01
    167a:	28 83       	st	Y, r18
    167c:	3a c0       	rjmp	.+116    	; 0x16f2 <malloc+0x128>
    167e:	20 91 f7 03 	lds	r18, 0x03F7
    1682:	30 91 f8 03 	lds	r19, 0x03F8
    1686:	23 2b       	or	r18, r19
    1688:	41 f4       	brne	.+16     	; 0x169a <malloc+0xd0>
    168a:	20 91 02 01 	lds	r18, 0x0102
    168e:	30 91 03 01 	lds	r19, 0x0103
    1692:	30 93 f8 03 	sts	0x03F8, r19
    1696:	20 93 f7 03 	sts	0x03F7, r18
    169a:	20 91 00 01 	lds	r18, 0x0100
    169e:	30 91 01 01 	lds	r19, 0x0101
    16a2:	21 15       	cp	r18, r1
    16a4:	31 05       	cpc	r19, r1
    16a6:	41 f4       	brne	.+16     	; 0x16b8 <malloc+0xee>
    16a8:	2d b7       	in	r18, 0x3d	; 61
    16aa:	3e b7       	in	r19, 0x3e	; 62
    16ac:	40 91 04 01 	lds	r20, 0x0104
    16b0:	50 91 05 01 	lds	r21, 0x0105
    16b4:	24 1b       	sub	r18, r20
    16b6:	35 0b       	sbc	r19, r21
    16b8:	e0 91 f7 03 	lds	r30, 0x03F7
    16bc:	f0 91 f8 03 	lds	r31, 0x03F8
    16c0:	e2 17       	cp	r30, r18
    16c2:	f3 07       	cpc	r31, r19
    16c4:	a0 f4       	brcc	.+40     	; 0x16ee <malloc+0x124>
    16c6:	2e 1b       	sub	r18, r30
    16c8:	3f 0b       	sbc	r19, r31
    16ca:	28 17       	cp	r18, r24
    16cc:	39 07       	cpc	r19, r25
    16ce:	78 f0       	brcs	.+30     	; 0x16ee <malloc+0x124>
    16d0:	ac 01       	movw	r20, r24
    16d2:	4e 5f       	subi	r20, 0xFE	; 254
    16d4:	5f 4f       	sbci	r21, 0xFF	; 255
    16d6:	24 17       	cp	r18, r20
    16d8:	35 07       	cpc	r19, r21
    16da:	48 f0       	brcs	.+18     	; 0x16ee <malloc+0x124>
    16dc:	4e 0f       	add	r20, r30
    16de:	5f 1f       	adc	r21, r31
    16e0:	50 93 f8 03 	sts	0x03F8, r21
    16e4:	40 93 f7 03 	sts	0x03F7, r20
    16e8:	81 93       	st	Z+, r24
    16ea:	91 93       	st	Z+, r25
    16ec:	02 c0       	rjmp	.+4      	; 0x16f2 <malloc+0x128>
    16ee:	e0 e0       	ldi	r30, 0x00	; 0
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	cf 01       	movw	r24, r30
    16f4:	df 91       	pop	r29
    16f6:	cf 91       	pop	r28
    16f8:	08 95       	ret

000016fa <free>:
    16fa:	cf 93       	push	r28
    16fc:	df 93       	push	r29
    16fe:	00 97       	sbiw	r24, 0x00	; 0
    1700:	09 f4       	brne	.+2      	; 0x1704 <free+0xa>
    1702:	87 c0       	rjmp	.+270    	; 0x1812 <free+0x118>
    1704:	fc 01       	movw	r30, r24
    1706:	32 97       	sbiw	r30, 0x02	; 2
    1708:	13 82       	std	Z+3, r1	; 0x03
    170a:	12 82       	std	Z+2, r1	; 0x02
    170c:	c0 91 f9 03 	lds	r28, 0x03F9
    1710:	d0 91 fa 03 	lds	r29, 0x03FA
    1714:	20 97       	sbiw	r28, 0x00	; 0
    1716:	81 f4       	brne	.+32     	; 0x1738 <free+0x3e>
    1718:	20 81       	ld	r18, Z
    171a:	31 81       	ldd	r19, Z+1	; 0x01
    171c:	28 0f       	add	r18, r24
    171e:	39 1f       	adc	r19, r25
    1720:	80 91 f7 03 	lds	r24, 0x03F7
    1724:	90 91 f8 03 	lds	r25, 0x03F8
    1728:	82 17       	cp	r24, r18
    172a:	93 07       	cpc	r25, r19
    172c:	79 f5       	brne	.+94     	; 0x178c <free+0x92>
    172e:	f0 93 f8 03 	sts	0x03F8, r31
    1732:	e0 93 f7 03 	sts	0x03F7, r30
    1736:	6d c0       	rjmp	.+218    	; 0x1812 <free+0x118>
    1738:	de 01       	movw	r26, r28
    173a:	20 e0       	ldi	r18, 0x00	; 0
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	ae 17       	cp	r26, r30
    1740:	bf 07       	cpc	r27, r31
    1742:	50 f4       	brcc	.+20     	; 0x1758 <free+0x5e>
    1744:	12 96       	adiw	r26, 0x02	; 2
    1746:	4d 91       	ld	r20, X+
    1748:	5c 91       	ld	r21, X
    174a:	13 97       	sbiw	r26, 0x03	; 3
    174c:	9d 01       	movw	r18, r26
    174e:	41 15       	cp	r20, r1
    1750:	51 05       	cpc	r21, r1
    1752:	09 f1       	breq	.+66     	; 0x1796 <free+0x9c>
    1754:	da 01       	movw	r26, r20
    1756:	f3 cf       	rjmp	.-26     	; 0x173e <free+0x44>
    1758:	b3 83       	std	Z+3, r27	; 0x03
    175a:	a2 83       	std	Z+2, r26	; 0x02
    175c:	40 81       	ld	r20, Z
    175e:	51 81       	ldd	r21, Z+1	; 0x01
    1760:	84 0f       	add	r24, r20
    1762:	95 1f       	adc	r25, r21
    1764:	8a 17       	cp	r24, r26
    1766:	9b 07       	cpc	r25, r27
    1768:	71 f4       	brne	.+28     	; 0x1786 <free+0x8c>
    176a:	8d 91       	ld	r24, X+
    176c:	9c 91       	ld	r25, X
    176e:	11 97       	sbiw	r26, 0x01	; 1
    1770:	84 0f       	add	r24, r20
    1772:	95 1f       	adc	r25, r21
    1774:	02 96       	adiw	r24, 0x02	; 2
    1776:	91 83       	std	Z+1, r25	; 0x01
    1778:	80 83       	st	Z, r24
    177a:	12 96       	adiw	r26, 0x02	; 2
    177c:	8d 91       	ld	r24, X+
    177e:	9c 91       	ld	r25, X
    1780:	13 97       	sbiw	r26, 0x03	; 3
    1782:	93 83       	std	Z+3, r25	; 0x03
    1784:	82 83       	std	Z+2, r24	; 0x02
    1786:	21 15       	cp	r18, r1
    1788:	31 05       	cpc	r19, r1
    178a:	29 f4       	brne	.+10     	; 0x1796 <free+0x9c>
    178c:	f0 93 fa 03 	sts	0x03FA, r31
    1790:	e0 93 f9 03 	sts	0x03F9, r30
    1794:	3e c0       	rjmp	.+124    	; 0x1812 <free+0x118>
    1796:	d9 01       	movw	r26, r18
    1798:	13 96       	adiw	r26, 0x03	; 3
    179a:	fc 93       	st	X, r31
    179c:	ee 93       	st	-X, r30
    179e:	12 97       	sbiw	r26, 0x02	; 2
    17a0:	4d 91       	ld	r20, X+
    17a2:	5d 91       	ld	r21, X+
    17a4:	a4 0f       	add	r26, r20
    17a6:	b5 1f       	adc	r27, r21
    17a8:	ea 17       	cp	r30, r26
    17aa:	fb 07       	cpc	r31, r27
    17ac:	79 f4       	brne	.+30     	; 0x17cc <free+0xd2>
    17ae:	80 81       	ld	r24, Z
    17b0:	91 81       	ldd	r25, Z+1	; 0x01
    17b2:	84 0f       	add	r24, r20
    17b4:	95 1f       	adc	r25, r21
    17b6:	02 96       	adiw	r24, 0x02	; 2
    17b8:	d9 01       	movw	r26, r18
    17ba:	11 96       	adiw	r26, 0x01	; 1
    17bc:	9c 93       	st	X, r25
    17be:	8e 93       	st	-X, r24
    17c0:	82 81       	ldd	r24, Z+2	; 0x02
    17c2:	93 81       	ldd	r25, Z+3	; 0x03
    17c4:	13 96       	adiw	r26, 0x03	; 3
    17c6:	9c 93       	st	X, r25
    17c8:	8e 93       	st	-X, r24
    17ca:	12 97       	sbiw	r26, 0x02	; 2
    17cc:	e0 e0       	ldi	r30, 0x00	; 0
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	8a 81       	ldd	r24, Y+2	; 0x02
    17d2:	9b 81       	ldd	r25, Y+3	; 0x03
    17d4:	00 97       	sbiw	r24, 0x00	; 0
    17d6:	19 f0       	breq	.+6      	; 0x17de <free+0xe4>
    17d8:	fe 01       	movw	r30, r28
    17da:	ec 01       	movw	r28, r24
    17dc:	f9 cf       	rjmp	.-14     	; 0x17d0 <free+0xd6>
    17de:	ce 01       	movw	r24, r28
    17e0:	02 96       	adiw	r24, 0x02	; 2
    17e2:	28 81       	ld	r18, Y
    17e4:	39 81       	ldd	r19, Y+1	; 0x01
    17e6:	82 0f       	add	r24, r18
    17e8:	93 1f       	adc	r25, r19
    17ea:	20 91 f7 03 	lds	r18, 0x03F7
    17ee:	30 91 f8 03 	lds	r19, 0x03F8
    17f2:	28 17       	cp	r18, r24
    17f4:	39 07       	cpc	r19, r25
    17f6:	69 f4       	brne	.+26     	; 0x1812 <free+0x118>
    17f8:	30 97       	sbiw	r30, 0x00	; 0
    17fa:	29 f4       	brne	.+10     	; 0x1806 <free+0x10c>
    17fc:	10 92 fa 03 	sts	0x03FA, r1
    1800:	10 92 f9 03 	sts	0x03F9, r1
    1804:	02 c0       	rjmp	.+4      	; 0x180a <free+0x110>
    1806:	13 82       	std	Z+3, r1	; 0x03
    1808:	12 82       	std	Z+2, r1	; 0x02
    180a:	d0 93 f8 03 	sts	0x03F8, r29
    180e:	c0 93 f7 03 	sts	0x03F7, r28
    1812:	df 91       	pop	r29
    1814:	cf 91       	pop	r28
    1816:	08 95       	ret

00001818 <strnlen_P>:
    1818:	fc 01       	movw	r30, r24
    181a:	05 90       	lpm	r0, Z+
    181c:	61 50       	subi	r22, 0x01	; 1
    181e:	70 40       	sbci	r23, 0x00	; 0
    1820:	01 10       	cpse	r0, r1
    1822:	d8 f7       	brcc	.-10     	; 0x181a <strnlen_P+0x2>
    1824:	80 95       	com	r24
    1826:	90 95       	com	r25
    1828:	8e 0f       	add	r24, r30
    182a:	9f 1f       	adc	r25, r31
    182c:	08 95       	ret

0000182e <memset>:
    182e:	dc 01       	movw	r26, r24
    1830:	01 c0       	rjmp	.+2      	; 0x1834 <memset+0x6>
    1832:	6d 93       	st	X+, r22
    1834:	41 50       	subi	r20, 0x01	; 1
    1836:	50 40       	sbci	r21, 0x00	; 0
    1838:	e0 f7       	brcc	.-8      	; 0x1832 <memset+0x4>
    183a:	08 95       	ret

0000183c <strnlen>:
    183c:	fc 01       	movw	r30, r24
    183e:	61 50       	subi	r22, 0x01	; 1
    1840:	70 40       	sbci	r23, 0x00	; 0
    1842:	01 90       	ld	r0, Z+
    1844:	01 10       	cpse	r0, r1
    1846:	d8 f7       	brcc	.-10     	; 0x183e <strnlen+0x2>
    1848:	80 95       	com	r24
    184a:	90 95       	com	r25
    184c:	8e 0f       	add	r24, r30
    184e:	9f 1f       	adc	r25, r31
    1850:	08 95       	ret

00001852 <fputc>:
    1852:	0f 93       	push	r16
    1854:	1f 93       	push	r17
    1856:	cf 93       	push	r28
    1858:	df 93       	push	r29
    185a:	18 2f       	mov	r17, r24
    185c:	09 2f       	mov	r16, r25
    185e:	eb 01       	movw	r28, r22
    1860:	8b 81       	ldd	r24, Y+3	; 0x03
    1862:	81 fd       	sbrc	r24, 1
    1864:	03 c0       	rjmp	.+6      	; 0x186c <fputc+0x1a>
    1866:	8f ef       	ldi	r24, 0xFF	; 255
    1868:	9f ef       	ldi	r25, 0xFF	; 255
    186a:	20 c0       	rjmp	.+64     	; 0x18ac <fputc+0x5a>
    186c:	82 ff       	sbrs	r24, 2
    186e:	10 c0       	rjmp	.+32     	; 0x1890 <fputc+0x3e>
    1870:	4e 81       	ldd	r20, Y+6	; 0x06
    1872:	5f 81       	ldd	r21, Y+7	; 0x07
    1874:	2c 81       	ldd	r18, Y+4	; 0x04
    1876:	3d 81       	ldd	r19, Y+5	; 0x05
    1878:	42 17       	cp	r20, r18
    187a:	53 07       	cpc	r21, r19
    187c:	7c f4       	brge	.+30     	; 0x189c <fputc+0x4a>
    187e:	e8 81       	ld	r30, Y
    1880:	f9 81       	ldd	r31, Y+1	; 0x01
    1882:	9f 01       	movw	r18, r30
    1884:	2f 5f       	subi	r18, 0xFF	; 255
    1886:	3f 4f       	sbci	r19, 0xFF	; 255
    1888:	39 83       	std	Y+1, r19	; 0x01
    188a:	28 83       	st	Y, r18
    188c:	10 83       	st	Z, r17
    188e:	06 c0       	rjmp	.+12     	; 0x189c <fputc+0x4a>
    1890:	e8 85       	ldd	r30, Y+8	; 0x08
    1892:	f9 85       	ldd	r31, Y+9	; 0x09
    1894:	81 2f       	mov	r24, r17
    1896:	09 95       	icall
    1898:	89 2b       	or	r24, r25
    189a:	29 f7       	brne	.-54     	; 0x1866 <fputc+0x14>
    189c:	2e 81       	ldd	r18, Y+6	; 0x06
    189e:	3f 81       	ldd	r19, Y+7	; 0x07
    18a0:	2f 5f       	subi	r18, 0xFF	; 255
    18a2:	3f 4f       	sbci	r19, 0xFF	; 255
    18a4:	3f 83       	std	Y+7, r19	; 0x07
    18a6:	2e 83       	std	Y+6, r18	; 0x06
    18a8:	81 2f       	mov	r24, r17
    18aa:	90 2f       	mov	r25, r16
    18ac:	df 91       	pop	r29
    18ae:	cf 91       	pop	r28
    18b0:	1f 91       	pop	r17
    18b2:	0f 91       	pop	r16
    18b4:	08 95       	ret

000018b6 <__ultoa_invert>:
    18b6:	fa 01       	movw	r30, r20
    18b8:	aa 27       	eor	r26, r26
    18ba:	28 30       	cpi	r18, 0x08	; 8
    18bc:	51 f1       	breq	.+84     	; 0x1912 <__ultoa_invert+0x5c>
    18be:	20 31       	cpi	r18, 0x10	; 16
    18c0:	81 f1       	breq	.+96     	; 0x1922 <__ultoa_invert+0x6c>
    18c2:	e8 94       	clt
    18c4:	6f 93       	push	r22
    18c6:	6e 7f       	andi	r22, 0xFE	; 254
    18c8:	6e 5f       	subi	r22, 0xFE	; 254
    18ca:	7f 4f       	sbci	r23, 0xFF	; 255
    18cc:	8f 4f       	sbci	r24, 0xFF	; 255
    18ce:	9f 4f       	sbci	r25, 0xFF	; 255
    18d0:	af 4f       	sbci	r26, 0xFF	; 255
    18d2:	b1 e0       	ldi	r27, 0x01	; 1
    18d4:	3e d0       	rcall	.+124    	; 0x1952 <__ultoa_invert+0x9c>
    18d6:	b4 e0       	ldi	r27, 0x04	; 4
    18d8:	3c d0       	rcall	.+120    	; 0x1952 <__ultoa_invert+0x9c>
    18da:	67 0f       	add	r22, r23
    18dc:	78 1f       	adc	r23, r24
    18de:	89 1f       	adc	r24, r25
    18e0:	9a 1f       	adc	r25, r26
    18e2:	a1 1d       	adc	r26, r1
    18e4:	68 0f       	add	r22, r24
    18e6:	79 1f       	adc	r23, r25
    18e8:	8a 1f       	adc	r24, r26
    18ea:	91 1d       	adc	r25, r1
    18ec:	a1 1d       	adc	r26, r1
    18ee:	6a 0f       	add	r22, r26
    18f0:	71 1d       	adc	r23, r1
    18f2:	81 1d       	adc	r24, r1
    18f4:	91 1d       	adc	r25, r1
    18f6:	a1 1d       	adc	r26, r1
    18f8:	20 d0       	rcall	.+64     	; 0x193a <__ultoa_invert+0x84>
    18fa:	09 f4       	brne	.+2      	; 0x18fe <__ultoa_invert+0x48>
    18fc:	68 94       	set
    18fe:	3f 91       	pop	r19
    1900:	2a e0       	ldi	r18, 0x0A	; 10
    1902:	26 9f       	mul	r18, r22
    1904:	11 24       	eor	r1, r1
    1906:	30 19       	sub	r19, r0
    1908:	30 5d       	subi	r19, 0xD0	; 208
    190a:	31 93       	st	Z+, r19
    190c:	de f6       	brtc	.-74     	; 0x18c4 <__ultoa_invert+0xe>
    190e:	cf 01       	movw	r24, r30
    1910:	08 95       	ret
    1912:	46 2f       	mov	r20, r22
    1914:	47 70       	andi	r20, 0x07	; 7
    1916:	40 5d       	subi	r20, 0xD0	; 208
    1918:	41 93       	st	Z+, r20
    191a:	b3 e0       	ldi	r27, 0x03	; 3
    191c:	0f d0       	rcall	.+30     	; 0x193c <__ultoa_invert+0x86>
    191e:	c9 f7       	brne	.-14     	; 0x1912 <__ultoa_invert+0x5c>
    1920:	f6 cf       	rjmp	.-20     	; 0x190e <__ultoa_invert+0x58>
    1922:	46 2f       	mov	r20, r22
    1924:	4f 70       	andi	r20, 0x0F	; 15
    1926:	40 5d       	subi	r20, 0xD0	; 208
    1928:	4a 33       	cpi	r20, 0x3A	; 58
    192a:	18 f0       	brcs	.+6      	; 0x1932 <__ultoa_invert+0x7c>
    192c:	49 5d       	subi	r20, 0xD9	; 217
    192e:	31 fd       	sbrc	r19, 1
    1930:	40 52       	subi	r20, 0x20	; 32
    1932:	41 93       	st	Z+, r20
    1934:	02 d0       	rcall	.+4      	; 0x193a <__ultoa_invert+0x84>
    1936:	a9 f7       	brne	.-22     	; 0x1922 <__ultoa_invert+0x6c>
    1938:	ea cf       	rjmp	.-44     	; 0x190e <__ultoa_invert+0x58>
    193a:	b4 e0       	ldi	r27, 0x04	; 4
    193c:	a6 95       	lsr	r26
    193e:	97 95       	ror	r25
    1940:	87 95       	ror	r24
    1942:	77 95       	ror	r23
    1944:	67 95       	ror	r22
    1946:	ba 95       	dec	r27
    1948:	c9 f7       	brne	.-14     	; 0x193c <__ultoa_invert+0x86>
    194a:	00 97       	sbiw	r24, 0x00	; 0
    194c:	61 05       	cpc	r22, r1
    194e:	71 05       	cpc	r23, r1
    1950:	08 95       	ret
    1952:	9b 01       	movw	r18, r22
    1954:	ac 01       	movw	r20, r24
    1956:	0a 2e       	mov	r0, r26
    1958:	06 94       	lsr	r0
    195a:	57 95       	ror	r21
    195c:	47 95       	ror	r20
    195e:	37 95       	ror	r19
    1960:	27 95       	ror	r18
    1962:	ba 95       	dec	r27
    1964:	c9 f7       	brne	.-14     	; 0x1958 <__ultoa_invert+0xa2>
    1966:	62 0f       	add	r22, r18
    1968:	73 1f       	adc	r23, r19
    196a:	84 1f       	adc	r24, r20
    196c:	95 1f       	adc	r25, r21
    196e:	a0 1d       	adc	r26, r0
    1970:	08 95       	ret

00001972 <__prologue_saves__>:
    1972:	2f 92       	push	r2
    1974:	3f 92       	push	r3
    1976:	4f 92       	push	r4
    1978:	5f 92       	push	r5
    197a:	6f 92       	push	r6
    197c:	7f 92       	push	r7
    197e:	8f 92       	push	r8
    1980:	9f 92       	push	r9
    1982:	af 92       	push	r10
    1984:	bf 92       	push	r11
    1986:	cf 92       	push	r12
    1988:	df 92       	push	r13
    198a:	ef 92       	push	r14
    198c:	ff 92       	push	r15
    198e:	0f 93       	push	r16
    1990:	1f 93       	push	r17
    1992:	cf 93       	push	r28
    1994:	df 93       	push	r29
    1996:	cd b7       	in	r28, 0x3d	; 61
    1998:	de b7       	in	r29, 0x3e	; 62
    199a:	ca 1b       	sub	r28, r26
    199c:	db 0b       	sbc	r29, r27
    199e:	0f b6       	in	r0, 0x3f	; 63
    19a0:	f8 94       	cli
    19a2:	de bf       	out	0x3e, r29	; 62
    19a4:	0f be       	out	0x3f, r0	; 63
    19a6:	cd bf       	out	0x3d, r28	; 61
    19a8:	09 94       	ijmp

000019aa <__epilogue_restores__>:
    19aa:	2a 88       	ldd	r2, Y+18	; 0x12
    19ac:	39 88       	ldd	r3, Y+17	; 0x11
    19ae:	48 88       	ldd	r4, Y+16	; 0x10
    19b0:	5f 84       	ldd	r5, Y+15	; 0x0f
    19b2:	6e 84       	ldd	r6, Y+14	; 0x0e
    19b4:	7d 84       	ldd	r7, Y+13	; 0x0d
    19b6:	8c 84       	ldd	r8, Y+12	; 0x0c
    19b8:	9b 84       	ldd	r9, Y+11	; 0x0b
    19ba:	aa 84       	ldd	r10, Y+10	; 0x0a
    19bc:	b9 84       	ldd	r11, Y+9	; 0x09
    19be:	c8 84       	ldd	r12, Y+8	; 0x08
    19c0:	df 80       	ldd	r13, Y+7	; 0x07
    19c2:	ee 80       	ldd	r14, Y+6	; 0x06
    19c4:	fd 80       	ldd	r15, Y+5	; 0x05
    19c6:	0c 81       	ldd	r16, Y+4	; 0x04
    19c8:	1b 81       	ldd	r17, Y+3	; 0x03
    19ca:	aa 81       	ldd	r26, Y+2	; 0x02
    19cc:	b9 81       	ldd	r27, Y+1	; 0x01
    19ce:	ce 0f       	add	r28, r30
    19d0:	d1 1d       	adc	r29, r1
    19d2:	0f b6       	in	r0, 0x3f	; 63
    19d4:	f8 94       	cli
    19d6:	de bf       	out	0x3e, r29	; 62
    19d8:	0f be       	out	0x3f, r0	; 63
    19da:	cd bf       	out	0x3d, r28	; 61
    19dc:	ed 01       	movw	r28, r26
    19de:	08 95       	ret

000019e0 <_exit>:
    19e0:	f8 94       	cli

000019e2 <__stop_program>:
    19e2:	ff cf       	rjmp	.-2      	; 0x19e2 <__stop_program>
