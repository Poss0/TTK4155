
Nicolas_Seillier.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000254  00800100  000012ca  0000135e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800354  00800354  000015b2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000015b2  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000130  00000000  00000000  0000160e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001c49  00000000  00000000  0000173e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000780  00000000  00000000  00003387  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000077c  00000000  00000000  00003b07  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000028c  00000000  00000000  00004284  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000407  00000000  00000000  00004510  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000894  00000000  00000000  00004917  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000128  00000000  00000000  000051ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
       8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
       c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	13 e0       	ldi	r17, 0x03	; 3
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	ea ec       	ldi	r30, 0xCA	; 202
      84:	f2 e1       	ldi	r31, 0x12	; 18
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	a4 35       	cpi	r26, 0x54	; 84
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	23 e0       	ldi	r18, 0x03	; 3
      94:	a4 e5       	ldi	r26, 0x54	; 84
      96:	b3 e0       	ldi	r27, 0x03	; 3
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	ae 35       	cpi	r26, 0x5E	; 94
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 19 01 	call	0x232	; 0x232 <main>
      a6:	0c 94 63 09 	jmp	0x12c6	; 0x12c6 <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <ADC_Convert>:

uint8_t ADC_Convert(uint8_t channel)
{
	/* Start conversion on the selected channel: write on command pins */
	volatile char* adc = (char *) ADC;
	adc[0] = channel;
      ae:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      b2:	83 ef       	ldi	r24, 0xF3	; 243
      b4:	91 e0       	ldi	r25, 0x01	; 1
      b6:	01 97       	sbiw	r24, 0x01	; 1
      b8:	f1 f7       	brne	.-4      	; 0xb6 <ADC_Convert+0x8>
      ba:	00 c0       	rjmp	.+0      	; 0xbc <ADC_Convert+0xe>
      bc:	00 00       	nop
	/* Wait for the conversion to be performed */
	_delay_ms(2);
	/* Read the result */
	return adc[0];
      be:	80 91 00 14 	lds	r24, 0x1400
}
      c2:	08 95       	ret

000000c4 <Joystick_Position>:

#define JOYSTICK_VERTICAL 0x4
#define JOYSTICK_HORIZONTAL 0x5

Position Joystick_Position()
{
      c4:	0f 93       	push	r16
      c6:	1f 93       	push	r17
      c8:	cf 93       	push	r28
      ca:	df 93       	push	r29
      cc:	cd b7       	in	r28, 0x3d	; 61
      ce:	de b7       	in	r29, 0x3e	; 62
      d0:	28 97       	sbiw	r28, 0x08	; 8
      d2:	0f b6       	in	r0, 0x3f	; 63
      d4:	f8 94       	cli
      d6:	de bf       	out	0x3e, r29	; 62
      d8:	0f be       	out	0x3f, r0	; 63
      da:	cd bf       	out	0x3d, r28	; 61
	uint8_t joystick_horizontal = ADC_Convert(JOYSTICK_HORIZONTAL);
      dc:	85 e0       	ldi	r24, 0x05	; 5
      de:	0e 94 57 00 	call	0xae	; 0xae <ADC_Convert>
      e2:	18 2f       	mov	r17, r24
	uint8_t joystick_vertical = ADC_Convert(JOYSTICK_VERTICAL);
      e4:	84 e0       	ldi	r24, 0x04	; 4
      e6:	0e 94 57 00 	call	0xae	; 0xae <ADC_Convert>
      ea:	08 2f       	mov	r16, r24
	float X = joystick_horizontal;
      ec:	61 2f       	mov	r22, r17
      ee:	70 e0       	ldi	r23, 0x00	; 0
      f0:	80 e0       	ldi	r24, 0x00	; 0
      f2:	90 e0       	ldi	r25, 0x00	; 0
      f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__floatunsisf>
	float Y = joystick_vertical;
	
	Position joystick;
	joystick.x = (X / 255.0) * 200.0 - 100.0;
      f8:	20 e0       	ldi	r18, 0x00	; 0
      fa:	30 e0       	ldi	r19, 0x00	; 0
      fc:	4f e7       	ldi	r20, 0x7F	; 127
      fe:	53 e4       	ldi	r21, 0x43	; 67
     100:	0e 94 5d 03 	call	0x6ba	; 0x6ba <__divsf3>
     104:	20 e0       	ldi	r18, 0x00	; 0
     106:	30 e0       	ldi	r19, 0x00	; 0
     108:	48 e4       	ldi	r20, 0x48	; 72
     10a:	53 e4       	ldi	r21, 0x43	; 67
     10c:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <__mulsf3>
     110:	20 e0       	ldi	r18, 0x00	; 0
     112:	30 e0       	ldi	r19, 0x00	; 0
     114:	48 ec       	ldi	r20, 0xC8	; 200
     116:	52 e4       	ldi	r21, 0x42	; 66
     118:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <__subsf3>
     11c:	48 2f       	mov	r20, r24
     11e:	59 2f       	mov	r21, r25
	joystick.y = (Y / 255.0) * 200.0 - 100.0;
	return joystick;
     120:	16 2f       	mov	r17, r22
     122:	86 2f       	mov	r24, r22
     124:	97 2f       	mov	r25, r23
     126:	a4 2f       	mov	r26, r20
     128:	b5 2f       	mov	r27, r21
     12a:	89 83       	std	Y+1, r24	; 0x01
     12c:	9a 83       	std	Y+2, r25	; 0x02
     12e:	ab 83       	std	Y+3, r26	; 0x03
     130:	bc 83       	std	Y+4, r27	; 0x04
Position Joystick_Position()
{
	uint8_t joystick_horizontal = ADC_Convert(JOYSTICK_HORIZONTAL);
	uint8_t joystick_vertical = ADC_Convert(JOYSTICK_VERTICAL);
	float X = joystick_horizontal;
	float Y = joystick_vertical;
     132:	60 2f       	mov	r22, r16
     134:	70 e0       	ldi	r23, 0x00	; 0
     136:	80 e0       	ldi	r24, 0x00	; 0
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	0e 94 c5 03 	call	0x78a	; 0x78a <__floatunsisf>
	
	Position joystick;
	joystick.x = (X / 255.0) * 200.0 - 100.0;
	joystick.y = (Y / 255.0) * 200.0 - 100.0;
     13e:	20 e0       	ldi	r18, 0x00	; 0
     140:	30 e0       	ldi	r19, 0x00	; 0
     142:	4f e7       	ldi	r20, 0x7F	; 127
     144:	53 e4       	ldi	r21, 0x43	; 67
     146:	0e 94 5d 03 	call	0x6ba	; 0x6ba <__divsf3>
     14a:	20 e0       	ldi	r18, 0x00	; 0
     14c:	30 e0       	ldi	r19, 0x00	; 0
     14e:	48 e4       	ldi	r20, 0x48	; 72
     150:	53 e4       	ldi	r21, 0x43	; 67
     152:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <__mulsf3>
     156:	20 e0       	ldi	r18, 0x00	; 0
     158:	30 e0       	ldi	r19, 0x00	; 0
     15a:	48 ec       	ldi	r20, 0xC8	; 200
     15c:	52 e4       	ldi	r21, 0x42	; 66
     15e:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <__subsf3>
     162:	e6 2f       	mov	r30, r22
	return joystick;
     164:	46 2f       	mov	r20, r22
     166:	57 2f       	mov	r21, r23
     168:	68 2f       	mov	r22, r24
     16a:	79 2f       	mov	r23, r25
     16c:	4d 83       	std	Y+5, r20	; 0x05
     16e:	5e 83       	std	Y+6, r21	; 0x06
     170:	6f 83       	std	Y+7, r22	; 0x07
     172:	78 87       	std	Y+8, r23	; 0x08
     174:	21 2f       	mov	r18, r17
     176:	3a 81       	ldd	r19, Y+2	; 0x02
     178:	4b 81       	ldd	r20, Y+3	; 0x03
     17a:	5c 81       	ldd	r21, Y+4	; 0x04
     17c:	6e 2f       	mov	r22, r30
     17e:	7e 81       	ldd	r23, Y+6	; 0x06
}
     180:	8f 81       	ldd	r24, Y+7	; 0x07
     182:	98 85       	ldd	r25, Y+8	; 0x08
     184:	28 96       	adiw	r28, 0x08	; 8
     186:	0f b6       	in	r0, 0x3f	; 63
     188:	f8 94       	cli
     18a:	de bf       	out	0x3e, r29	; 62
     18c:	0f be       	out	0x3f, r0	; 63
     18e:	cd bf       	out	0x3d, r28	; 61
     190:	df 91       	pop	r29
     192:	cf 91       	pop	r28
     194:	1f 91       	pop	r17
     196:	0f 91       	pop	r16
     198:	08 95       	ret

0000019a <Joystick_Direction>:

char* Joystick_Direction(Position* joystick)
{
     19a:	cf 92       	push	r12
     19c:	df 92       	push	r13
     19e:	ef 92       	push	r14
     1a0:	ff 92       	push	r15
     1a2:	cf 93       	push	r28
     1a4:	df 93       	push	r29
     1a6:	ec 01       	movw	r28, r24
	if(joystick->x < -71)
     1a8:	c8 80       	ld	r12, Y
     1aa:	d9 80       	ldd	r13, Y+1	; 0x01
     1ac:	ea 80       	ldd	r14, Y+2	; 0x02
     1ae:	fb 80       	ldd	r15, Y+3	; 0x03
     1b0:	20 e0       	ldi	r18, 0x00	; 0
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	4e e8       	ldi	r20, 0x8E	; 142
     1b6:	52 ec       	ldi	r21, 0xC2	; 194
     1b8:	c7 01       	movw	r24, r14
     1ba:	b6 01       	movw	r22, r12
     1bc:	0e 94 59 03 	call	0x6b2	; 0x6b2 <__cmpsf2>
     1c0:	88 23       	and	r24, r24
     1c2:	2c f1       	brlt	.+74     	; 0x20e <Joystick_Direction+0x74>
	return "LEFT";
	else if(joystick->x > 71)
     1c4:	20 e0       	ldi	r18, 0x00	; 0
     1c6:	30 e0       	ldi	r19, 0x00	; 0
     1c8:	4e e8       	ldi	r20, 0x8E	; 142
     1ca:	52 e4       	ldi	r21, 0x42	; 66
     1cc:	c7 01       	movw	r24, r14
     1ce:	b6 01       	movw	r22, r12
     1d0:	0e 94 77 04 	call	0x8ee	; 0x8ee <__gesf2>
     1d4:	18 16       	cp	r1, r24
     1d6:	f4 f0       	brlt	.+60     	; 0x214 <Joystick_Direction+0x7a>
	return "RIGHT";
	
	if(joystick->y < -71)
     1d8:	cc 80       	ldd	r12, Y+4	; 0x04
     1da:	dd 80       	ldd	r13, Y+5	; 0x05
     1dc:	ee 80       	ldd	r14, Y+6	; 0x06
     1de:	ff 80       	ldd	r15, Y+7	; 0x07
     1e0:	20 e0       	ldi	r18, 0x00	; 0
     1e2:	30 e0       	ldi	r19, 0x00	; 0
     1e4:	4e e8       	ldi	r20, 0x8E	; 142
     1e6:	52 ec       	ldi	r21, 0xC2	; 194
     1e8:	c7 01       	movw	r24, r14
     1ea:	b6 01       	movw	r22, r12
     1ec:	0e 94 59 03 	call	0x6b2	; 0x6b2 <__cmpsf2>
     1f0:	88 23       	and	r24, r24
     1f2:	9c f0       	brlt	.+38     	; 0x21a <Joystick_Direction+0x80>
	return "DOWN";
	else if(joystick->y > 71)
     1f4:	20 e0       	ldi	r18, 0x00	; 0
     1f6:	30 e0       	ldi	r19, 0x00	; 0
     1f8:	4e e8       	ldi	r20, 0x8E	; 142
     1fa:	52 e4       	ldi	r21, 0x42	; 66
     1fc:	c7 01       	movw	r24, r14
     1fe:	b6 01       	movw	r22, r12
     200:	0e 94 77 04 	call	0x8ee	; 0x8ee <__gesf2>
     204:	18 16       	cp	r1, r24
     206:	64 f4       	brge	.+24     	; 0x220 <Joystick_Direction+0x86>
	return "UP";
     208:	82 e9       	ldi	r24, 0x92	; 146
     20a:	92 e0       	ldi	r25, 0x02	; 2
     20c:	0b c0       	rjmp	.+22     	; 0x224 <Joystick_Direction+0x8a>
}

char* Joystick_Direction(Position* joystick)
{
	if(joystick->x < -71)
	return "LEFT";
     20e:	82 e8       	ldi	r24, 0x82	; 130
     210:	92 e0       	ldi	r25, 0x02	; 2
     212:	08 c0       	rjmp	.+16     	; 0x224 <Joystick_Direction+0x8a>
	else if(joystick->x > 71)
	return "RIGHT";
     214:	87 e8       	ldi	r24, 0x87	; 135
     216:	92 e0       	ldi	r25, 0x02	; 2
     218:	05 c0       	rjmp	.+10     	; 0x224 <Joystick_Direction+0x8a>
	
	if(joystick->y < -71)
	return "DOWN";
     21a:	8d e8       	ldi	r24, 0x8D	; 141
     21c:	92 e0       	ldi	r25, 0x02	; 2
     21e:	02 c0       	rjmp	.+4      	; 0x224 <Joystick_Direction+0x8a>
	else if(joystick->y > 71)
	return "UP";
	
	return "NEUTRAL";
     220:	85 e9       	ldi	r24, 0x95	; 149
     222:	92 e0       	ldi	r25, 0x02	; 2
     224:	df 91       	pop	r29
     226:	cf 91       	pop	r28
     228:	ff 90       	pop	r15
     22a:	ef 90       	pop	r14
     22c:	df 90       	pop	r13
     22e:	cf 90       	pop	r12
     230:	08 95       	ret

00000232 <main>:
#define TOUCH_LEFT (PINB & 0x4)>>2
#define TOUCH_RIGHT (PINB & 0x2)>>1
#define JOYSTICK_BUTTON ~PINB & 0x1

int main(void)
{
     232:	cf 93       	push	r28
     234:	df 93       	push	r29
     236:	cd b7       	in	r28, 0x3d	; 61
     238:	de b7       	in	r29, 0x3e	; 62
     23a:	28 97       	sbiw	r28, 0x08	; 8
     23c:	0f b6       	in	r0, 0x3f	; 63
     23e:	f8 94       	cli
     240:	de bf       	out	0x3e, r29	; 62
     242:	0f be       	out	0x3f, r0	; 63
     244:	cd bf       	out	0x3d, r28	; 61
	/* Initialize UART */
	UART_Init(UART_BAUD);
     246:	8f e1       	ldi	r24, 0x1F	; 31
     248:	90 e0       	ldi	r25, 0x00	; 0
     24a:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <UART_Init>
	printf("Reset\n");
     24e:	8d e9       	ldi	r24, 0x9D	; 157
     250:	92 e0       	ldi	r25, 0x02	; 2
     252:	0e 94 3d 05 	call	0xa7a	; 0xa7a <puts>
     256:	2f e3       	ldi	r18, 0x3F	; 63
     258:	8d e0       	ldi	r24, 0x0D	; 13
     25a:	93 e0       	ldi	r25, 0x03	; 3
     25c:	21 50       	subi	r18, 0x01	; 1
     25e:	80 40       	sbci	r24, 0x00	; 0
     260:	90 40       	sbci	r25, 0x00	; 0
     262:	e1 f7       	brne	.-8      	; 0x25c <main+0x2a>
     264:	00 c0       	rjmp	.+0      	; 0x266 <main+0x34>
     266:	00 00       	nop
	_delay_ms(1000);
	
	/* Initialize SRAM, ADC and OLED */
	SRAM_Init();
     268:	0e 94 de 02 	call	0x5bc	; 0x5bc <SRAM_Init>
	OLED_Reset();
     26c:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <OLED_Reset>
	OLED_Init();
     270:	0e 94 29 02 	call	0x452	; 0x452 <OLED_Init>
	
	/* Enable port B: the three buttons are inputs */
	PORTB |= 0x07;
     274:	88 b3       	in	r24, 0x18	; 24
     276:	87 60       	ori	r24, 0x07	; 7
     278:	88 bb       	out	0x18, r24	; 24
	
	/* Draw something cool */
	OLED_print_arrow(0x00, 0x00);
     27a:	60 e0       	ldi	r22, 0x00	; 0
     27c:	80 e0       	ldi	r24, 0x00	; 0
     27e:	0e 94 99 02 	call	0x532	; 0x532 <OLED_print_arrow>
	OLED_print_house(0x00, 0x00);
     282:	60 e0       	ldi	r22, 0x00	; 0
     284:	80 e0       	ldi	r24, 0x00	; 0
     286:	0e 94 ad 02 	call	0x55a	; 0x55a <OLED_print_house>
	OLED_print_bus(0x00, 0x00);
     28a:	60 e0       	ldi	r22, 0x00	; 0
     28c:	80 e0       	ldi	r24, 0x00	; 0
     28e:	0e 94 c5 02 	call	0x58a	; 0x58a <OLED_print_bus>
	OLED_pos(6, 0);
     292:	60 e0       	ldi	r22, 0x00	; 0
     294:	86 e0       	ldi	r24, 0x06	; 6
     296:	0e 94 57 02 	call	0x4ae	; 0x4ae <OLED_pos>
	OLED_print_string("Welcome to the best ping pong game in the world!");
     29a:	83 ea       	ldi	r24, 0xA3	; 163
     29c:	92 e0       	ldi	r25, 0x02	; 2
     29e:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <OLED_print_string>
	OLED_pos(7, 0);
     2a2:	60 e0       	ldi	r22, 0x00	; 0
     2a4:	87 e0       	ldi	r24, 0x07	; 7
     2a6:	0e 94 57 02 	call	0x4ae	; 0x4ae <OLED_pos>
	OLED_print_string("Welcome!");
     2aa:	84 ed       	ldi	r24, 0xD4	; 212
     2ac:	92 e0       	ldi	r25, 0x02	; 2
     2ae:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <OLED_print_string>
	OLED_pos(7, 50);
     2b2:	62 e3       	ldi	r22, 0x32	; 50
     2b4:	87 e0       	ldi	r24, 0x07	; 7
     2b6:	0e 94 57 02 	call	0x4ae	; 0x4ae <OLED_pos>
	OLED_print_string("Goodbye!");
     2ba:	8d ed       	ldi	r24, 0xDD	; 221
     2bc:	92 e0       	ldi	r25, 0x02	; 2
     2be:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <OLED_print_string>
	
    while(1)
    {
		Position joystick = Joystick_Position();
		char* direction = Joystick_Direction(&joystick);
		printf("Joystick is %s: x %3.f, y %3.f\n", direction, joystick.x, joystick.y);
     2c2:	0f 2e       	mov	r0, r31
     2c4:	f6 ee       	ldi	r31, 0xE6	; 230
     2c6:	cf 2e       	mov	r12, r31
     2c8:	f2 e0       	ldi	r31, 0x02	; 2
     2ca:	df 2e       	mov	r13, r31
     2cc:	f0 2d       	mov	r31, r0
		
		uint8_t slide_left = ADC_Convert(SLIDE_LEFT); 
		uint8_t slide_right = ADC_Convert(SLIDE_RIGHT);
		printf("Sliders are: left %d, right %d\n", slide_left, slide_right);
     2ce:	0f 2e       	mov	r0, r31
     2d0:	f6 e0       	ldi	r31, 0x06	; 6
     2d2:	ef 2e       	mov	r14, r31
     2d4:	f3 e0       	ldi	r31, 0x03	; 3
     2d6:	ff 2e       	mov	r15, r31
     2d8:	f0 2d       	mov	r31, r0
		
		printf("Buttons are: left %u, joystick %u, right %u\n", TOUCH_LEFT, JOYSTICK_BUTTON, TOUCH_RIGHT);
     2da:	aa 24       	eor	r10, r10
     2dc:	a3 94       	inc	r10
     2de:	06 e2       	ldi	r16, 0x26	; 38
     2e0:	13 e0       	ldi	r17, 0x03	; 3
	OLED_pos(7, 50);
	OLED_print_string("Goodbye!");
	
    while(1)
    {
		Position joystick = Joystick_Position();
     2e2:	0e 94 62 00 	call	0xc4	; 0xc4 <Joystick_Position>
     2e6:	29 83       	std	Y+1, r18	; 0x01
     2e8:	3a 83       	std	Y+2, r19	; 0x02
     2ea:	4b 83       	std	Y+3, r20	; 0x03
     2ec:	5c 83       	std	Y+4, r21	; 0x04
     2ee:	6d 83       	std	Y+5, r22	; 0x05
     2f0:	7e 83       	std	Y+6, r23	; 0x06
     2f2:	8f 83       	std	Y+7, r24	; 0x07
     2f4:	98 87       	std	Y+8, r25	; 0x08
		char* direction = Joystick_Direction(&joystick);
     2f6:	ce 01       	movw	r24, r28
     2f8:	01 96       	adiw	r24, 0x01	; 1
     2fa:	0e 94 cd 00 	call	0x19a	; 0x19a <Joystick_Direction>
		printf("Joystick is %s: x %3.f, y %3.f\n", direction, joystick.x, joystick.y);
     2fe:	28 85       	ldd	r18, Y+8	; 0x08
     300:	2f 93       	push	r18
     302:	2f 81       	ldd	r18, Y+7	; 0x07
     304:	2f 93       	push	r18
     306:	2e 81       	ldd	r18, Y+6	; 0x06
     308:	2f 93       	push	r18
     30a:	2d 81       	ldd	r18, Y+5	; 0x05
     30c:	2f 93       	push	r18
     30e:	2c 81       	ldd	r18, Y+4	; 0x04
     310:	2f 93       	push	r18
     312:	2b 81       	ldd	r18, Y+3	; 0x03
     314:	2f 93       	push	r18
     316:	2a 81       	ldd	r18, Y+2	; 0x02
     318:	2f 93       	push	r18
     31a:	29 81       	ldd	r18, Y+1	; 0x01
     31c:	2f 93       	push	r18
     31e:	9f 93       	push	r25
     320:	8f 93       	push	r24
     322:	df 92       	push	r13
     324:	cf 92       	push	r12
     326:	0e 94 29 05 	call	0xa52	; 0xa52 <printf>
		
		uint8_t slide_left = ADC_Convert(SLIDE_LEFT); 
     32a:	86 e0       	ldi	r24, 0x06	; 6
     32c:	0e 94 57 00 	call	0xae	; 0xae <ADC_Convert>
     330:	b8 2e       	mov	r11, r24
		uint8_t slide_right = ADC_Convert(SLIDE_RIGHT);
     332:	87 e0       	ldi	r24, 0x07	; 7
     334:	0e 94 57 00 	call	0xae	; 0xae <ADC_Convert>
		printf("Sliders are: left %d, right %d\n", slide_left, slide_right);
     338:	1f 92       	push	r1
     33a:	8f 93       	push	r24
     33c:	1f 92       	push	r1
     33e:	bf 92       	push	r11
     340:	ff 92       	push	r15
     342:	ef 92       	push	r14
     344:	0e 94 29 05 	call	0xa52	; 0xa52 <printf>
		
		printf("Buttons are: left %u, joystick %u, right %u\n", TOUCH_LEFT, JOYSTICK_BUTTON, TOUCH_RIGHT);
     348:	26 b3       	in	r18, 0x16	; 22
     34a:	96 b3       	in	r25, 0x16	; 22
     34c:	86 b3       	in	r24, 0x16	; 22
     34e:	26 95       	lsr	r18
     350:	21 70       	andi	r18, 0x01	; 1
     352:	1f 92       	push	r1
     354:	2f 93       	push	r18
     356:	9a 25       	eor	r25, r10
     358:	91 70       	andi	r25, 0x01	; 1
     35a:	1f 92       	push	r1
     35c:	9f 93       	push	r25
     35e:	82 fb       	bst	r24, 2
     360:	88 27       	eor	r24, r24
     362:	80 f9       	bld	r24, 0
     364:	1f 92       	push	r1
     366:	8f 93       	push	r24
     368:	1f 93       	push	r17
     36a:	0f 93       	push	r16
     36c:	0e 94 29 05 	call	0xa52	; 0xa52 <printf>
     370:	2f eb       	ldi	r18, 0xBF	; 191
     372:	87 e2       	ldi	r24, 0x27	; 39
     374:	99 e0       	ldi	r25, 0x09	; 9
     376:	21 50       	subi	r18, 0x01	; 1
     378:	80 40       	sbci	r24, 0x00	; 0
     37a:	90 40       	sbci	r25, 0x00	; 0
     37c:	e1 f7       	brne	.-8      	; 0x376 <main+0x144>
     37e:	00 c0       	rjmp	.+0      	; 0x380 <main+0x14e>
     380:	00 00       	nop
		
		_delay_ms(3000);
		
		OLED_set_brightness(slide_left);
     382:	8b 2d       	mov	r24, r11
     384:	0e 94 ca 01 	call	0x394	; 0x394 <OLED_set_brightness>
     388:	0f b6       	in	r0, 0x3f	; 63
     38a:	f8 94       	cli
     38c:	de bf       	out	0x3e, r29	; 62
     38e:	0f be       	out	0x3f, r0	; 63
     390:	cd bf       	out	0x3d, r28	; 61
     392:	a7 cf       	rjmp	.-178    	; 0x2e2 <main+0xb0>

00000394 <OLED_set_brightness>:

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     394:	e0 e0       	ldi	r30, 0x00	; 0
     396:	f0 e1       	ldi	r31, 0x10	; 16
     398:	91 e8       	ldi	r25, 0x81	; 129
     39a:	90 83       	st	Z, r25
     39c:	80 83       	st	Z, r24
     39e:	08 95       	ret

000003a0 <OLED_Reset>:
     3a0:	80 eb       	ldi	r24, 0xB0	; 176
     3a2:	80 93 00 10 	sts	0x1000, r24
     3a6:	80 e8       	ldi	r24, 0x80	; 128
     3a8:	90 e0       	ldi	r25, 0x00	; 0

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     3aa:	e0 e0       	ldi	r30, 0x00	; 0
     3ac:	f2 e1       	ldi	r31, 0x12	; 18
     3ae:	10 82       	st	Z, r1
     3b0:	01 97       	sbiw	r24, 0x01	; 1

/* Erase the RAM line by line */
void OLED_Reset()
{
	OLED_write_cmd(0xb0);
	for(int i=0; i<128; i++){
     3b2:	00 97       	sbiw	r24, 0x00	; 0
     3b4:	e1 f7       	brne	.-8      	; 0x3ae <OLED_Reset+0xe>

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     3b6:	81 eb       	ldi	r24, 0xB1	; 177
     3b8:	80 93 00 10 	sts	0x1000, r24
     3bc:	80 e8       	ldi	r24, 0x80	; 128
     3be:	90 e0       	ldi	r25, 0x00	; 0

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     3c0:	e0 e0       	ldi	r30, 0x00	; 0
     3c2:	f2 e1       	ldi	r31, 0x12	; 18
     3c4:	10 82       	st	Z, r1
     3c6:	01 97       	sbiw	r24, 0x01	; 1
	OLED_write_cmd(0xb0);
	for(int i=0; i<128; i++){
		OLED_write_data(0b00000000);
	}
	OLED_write_cmd(0xb1);
	for(int i=0; i<128; i++){
     3c8:	00 97       	sbiw	r24, 0x00	; 0
     3ca:	e1 f7       	brne	.-8      	; 0x3c4 <OLED_Reset+0x24>

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     3cc:	82 eb       	ldi	r24, 0xB2	; 178
     3ce:	80 93 00 10 	sts	0x1000, r24
     3d2:	80 e8       	ldi	r24, 0x80	; 128
     3d4:	90 e0       	ldi	r25, 0x00	; 0

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     3d6:	e0 e0       	ldi	r30, 0x00	; 0
     3d8:	f2 e1       	ldi	r31, 0x12	; 18
     3da:	10 82       	st	Z, r1
     3dc:	01 97       	sbiw	r24, 0x01	; 1
	OLED_write_cmd(0xb1);
	for(int i=0; i<128; i++){
		OLED_write_data(0b00000000);
	}
	OLED_write_cmd(0xb2);
	for(int i=0; i<128; i++){
     3de:	00 97       	sbiw	r24, 0x00	; 0
     3e0:	e1 f7       	brne	.-8      	; 0x3da <OLED_Reset+0x3a>

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     3e2:	83 eb       	ldi	r24, 0xB3	; 179
     3e4:	80 93 00 10 	sts	0x1000, r24
     3e8:	80 e8       	ldi	r24, 0x80	; 128
     3ea:	90 e0       	ldi	r25, 0x00	; 0

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     3ec:	e0 e0       	ldi	r30, 0x00	; 0
     3ee:	f2 e1       	ldi	r31, 0x12	; 18
     3f0:	10 82       	st	Z, r1
     3f2:	01 97       	sbiw	r24, 0x01	; 1
	OLED_write_cmd(0xb2);
	for(int i=0; i<128; i++){
		OLED_write_data(0b00000000);
	}
	OLED_write_cmd(0xb3);
	for(int i=0; i<128; i++){
     3f4:	00 97       	sbiw	r24, 0x00	; 0
     3f6:	e1 f7       	brne	.-8      	; 0x3f0 <OLED_Reset+0x50>

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     3f8:	84 eb       	ldi	r24, 0xB4	; 180
     3fa:	80 93 00 10 	sts	0x1000, r24
     3fe:	80 e8       	ldi	r24, 0x80	; 128
     400:	90 e0       	ldi	r25, 0x00	; 0

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     402:	e0 e0       	ldi	r30, 0x00	; 0
     404:	f2 e1       	ldi	r31, 0x12	; 18
     406:	10 82       	st	Z, r1
     408:	01 97       	sbiw	r24, 0x01	; 1
	OLED_write_cmd(0xb3);
	for(int i=0; i<128; i++){
		OLED_write_data(0b00000000);
	}
	OLED_write_cmd(0xb4);
	for(int i=0; i<128; i++){
     40a:	00 97       	sbiw	r24, 0x00	; 0
     40c:	e1 f7       	brne	.-8      	; 0x406 <OLED_Reset+0x66>

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     40e:	85 eb       	ldi	r24, 0xB5	; 181
     410:	80 93 00 10 	sts	0x1000, r24
     414:	80 e8       	ldi	r24, 0x80	; 128
     416:	90 e0       	ldi	r25, 0x00	; 0

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     418:	e0 e0       	ldi	r30, 0x00	; 0
     41a:	f2 e1       	ldi	r31, 0x12	; 18
     41c:	10 82       	st	Z, r1
     41e:	01 97       	sbiw	r24, 0x01	; 1
	OLED_write_cmd(0xb4);
	for(int i=0; i<128; i++){
		OLED_write_data(0b00000000);
	}
	OLED_write_cmd(0xb5);
	for(int i=0; i<128; i++){
     420:	00 97       	sbiw	r24, 0x00	; 0
     422:	e1 f7       	brne	.-8      	; 0x41c <OLED_Reset+0x7c>

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     424:	86 eb       	ldi	r24, 0xB6	; 182
     426:	80 93 00 10 	sts	0x1000, r24
     42a:	80 e8       	ldi	r24, 0x80	; 128
     42c:	90 e0       	ldi	r25, 0x00	; 0

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     42e:	e0 e0       	ldi	r30, 0x00	; 0
     430:	f2 e1       	ldi	r31, 0x12	; 18
     432:	10 82       	st	Z, r1
     434:	01 97       	sbiw	r24, 0x01	; 1
	OLED_write_cmd(0xb5);
	for(int i=0; i<128; i++){
		OLED_write_data(0b00000000);
	}
	OLED_write_cmd(0xb6);
	for(int i=0; i<128; i++){
     436:	00 97       	sbiw	r24, 0x00	; 0
     438:	e1 f7       	brne	.-8      	; 0x432 <OLED_Reset+0x92>

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     43a:	87 eb       	ldi	r24, 0xB7	; 183
     43c:	80 93 00 10 	sts	0x1000, r24
     440:	80 e8       	ldi	r24, 0x80	; 128
     442:	90 e0       	ldi	r25, 0x00	; 0

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     444:	e0 e0       	ldi	r30, 0x00	; 0
     446:	f2 e1       	ldi	r31, 0x12	; 18
     448:	10 82       	st	Z, r1
     44a:	01 97       	sbiw	r24, 0x01	; 1
	OLED_write_cmd(0xb6);
	for(int i=0; i<128; i++){
		OLED_write_data(0b00000000);
	}
	OLED_write_cmd(0xb7);
	for(int i=0; i<128; i++){
     44c:	00 97       	sbiw	r24, 0x00	; 0
     44e:	e1 f7       	brne	.-8      	; 0x448 <OLED_Reset+0xa8>
		OLED_write_data(0b00000000);
	}
}
     450:	08 95       	ret

00000452 <OLED_Init>:

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     452:	e0 e0       	ldi	r30, 0x00	; 0
     454:	f0 e1       	ldi	r31, 0x10	; 16
     456:	8e ea       	ldi	r24, 0xAE	; 174
     458:	80 83       	st	Z, r24
     45a:	81 ea       	ldi	r24, 0xA1	; 161
     45c:	80 83       	st	Z, r24
     45e:	8a ed       	ldi	r24, 0xDA	; 218
     460:	80 83       	st	Z, r24
     462:	82 e1       	ldi	r24, 0x12	; 18
     464:	80 83       	st	Z, r24
     466:	88 ec       	ldi	r24, 0xC8	; 200
     468:	80 83       	st	Z, r24
     46a:	88 ea       	ldi	r24, 0xA8	; 168
     46c:	80 83       	st	Z, r24
     46e:	8f e3       	ldi	r24, 0x3F	; 63
     470:	80 83       	st	Z, r24
     472:	85 ed       	ldi	r24, 0xD5	; 213
     474:	80 83       	st	Z, r24
     476:	80 e8       	ldi	r24, 0x80	; 128
     478:	80 83       	st	Z, r24
     47a:	81 e8       	ldi	r24, 0x81	; 129
     47c:	80 83       	st	Z, r24
     47e:	80 e5       	ldi	r24, 0x50	; 80
     480:	80 83       	st	Z, r24
     482:	89 ed       	ldi	r24, 0xD9	; 217
     484:	80 83       	st	Z, r24
     486:	81 e2       	ldi	r24, 0x21	; 33
     488:	80 83       	st	Z, r24
     48a:	80 e2       	ldi	r24, 0x20	; 32
     48c:	80 83       	st	Z, r24
     48e:	82 e0       	ldi	r24, 0x02	; 2
     490:	80 83       	st	Z, r24
     492:	8b ed       	ldi	r24, 0xDB	; 219
     494:	80 83       	st	Z, r24
     496:	80 e3       	ldi	r24, 0x30	; 48
     498:	80 83       	st	Z, r24
     49a:	8d ea       	ldi	r24, 0xAD	; 173
     49c:	80 83       	st	Z, r24
     49e:	10 82       	st	Z, r1
     4a0:	84 ea       	ldi	r24, 0xA4	; 164
     4a2:	80 83       	st	Z, r24
     4a4:	86 ea       	ldi	r24, 0xA6	; 166
     4a6:	80 83       	st	Z, r24
     4a8:	8f ea       	ldi	r24, 0xAF	; 175
     4aa:	80 83       	st	Z, r24
     4ac:	08 95       	ret

000004ae <OLED_pos>:
}

/* Set the cursor to the given position: page is from 0 to 7, segment from 0 to 127 */
void OLED_pos(uint8_t page, uint8_t segment)
{
	OLED_write_cmd(176 + page);
     4ae:	80 55       	subi	r24, 0x50	; 80

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     4b0:	e0 e0       	ldi	r30, 0x00	; 0
     4b2:	f0 e1       	ldi	r31, 0x10	; 16
     4b4:	80 83       	st	Z, r24

/* Set the cursor to the given position: page is from 0 to 7, segment from 0 to 127 */
void OLED_pos(uint8_t page, uint8_t segment)
{
	OLED_write_cmd(176 + page);
	OLED_write_cmd(segment & 0x0f);
     4b6:	86 2f       	mov	r24, r22
     4b8:	8f 70       	andi	r24, 0x0F	; 15

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     4ba:	80 83       	st	Z, r24
/* Set the cursor to the given position: page is from 0 to 7, segment from 0 to 127 */
void OLED_pos(uint8_t page, uint8_t segment)
{
	OLED_write_cmd(176 + page);
	OLED_write_cmd(segment & 0x0f);
	OLED_write_cmd(((segment & 0x70)>>4)|0x10);
     4bc:	60 77       	andi	r22, 0x70	; 112
     4be:	62 95       	swap	r22
     4c0:	6f 70       	andi	r22, 0x0F	; 15
     4c2:	60 61       	ori	r22, 0x10	; 16

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     4c4:	60 83       	st	Z, r22
     4c6:	08 95       	ret

000004c8 <OLED_print>:
void OLED_print(char* a)
{
	int index = (int)a - 32;
	for(int i=0; i<4; i++)
	{
		OLED_write_data(font[index][i]);
     4c8:	88 0f       	add	r24, r24
     4ca:	99 1f       	adc	r25, r25
     4cc:	88 0f       	add	r24, r24
     4ce:	99 1f       	adc	r25, r25
     4d0:	dc 01       	movw	r26, r24
     4d2:	aa 57       	subi	r26, 0x7A	; 122
     4d4:	bf 4f       	sbci	r27, 0xFF	; 255
     4d6:	8c 91       	ld	r24, X

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     4d8:	e0 e0       	ldi	r30, 0x00	; 0
     4da:	f2 e1       	ldi	r31, 0x12	; 18
     4dc:	80 83       	st	Z, r24
void OLED_print(char* a)
{
	int index = (int)a - 32;
	for(int i=0; i<4; i++)
	{
		OLED_write_data(font[index][i]);
     4de:	11 96       	adiw	r26, 0x01	; 1
     4e0:	8c 91       	ld	r24, X
     4e2:	11 97       	sbiw	r26, 0x01	; 1

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     4e4:	80 83       	st	Z, r24
void OLED_print(char* a)
{
	int index = (int)a - 32;
	for(int i=0; i<4; i++)
	{
		OLED_write_data(font[index][i]);
     4e6:	12 96       	adiw	r26, 0x02	; 2
     4e8:	8c 91       	ld	r24, X
     4ea:	12 97       	sbiw	r26, 0x02	; 2

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     4ec:	80 83       	st	Z, r24
void OLED_print(char* a)
{
	int index = (int)a - 32;
	for(int i=0; i<4; i++)
	{
		OLED_write_data(font[index][i]);
     4ee:	13 96       	adiw	r26, 0x03	; 3
     4f0:	8c 91       	ld	r24, X

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     4f2:	80 83       	st	Z, r24
     4f4:	08 95       	ret

000004f6 <OLED_print_string>:
		OLED_write_data(font[index][i]);
	}
}

void OLED_print_string(char* string)
{
     4f6:	0f 93       	push	r16
     4f8:	1f 93       	push	r17
     4fa:	cf 93       	push	r28
     4fc:	df 93       	push	r29
     4fe:	fc 01       	movw	r30, r24
	int i=0;
	while(string[i]!='\0' && i < 32)
     500:	80 81       	ld	r24, Z
     502:	88 23       	and	r24, r24
     504:	89 f0       	breq	.+34     	; 0x528 <__stack+0x29>
     506:	8f 01       	movw	r16, r30
     508:	0f 5f       	subi	r16, 0xFF	; 255
     50a:	1f 4f       	sbci	r17, 0xFF	; 255
	}
}

void OLED_print_string(char* string)
{
	int i=0;
     50c:	c0 e0       	ldi	r28, 0x00	; 0
     50e:	d0 e0       	ldi	r29, 0x00	; 0
	while(string[i]!='\0' && i < 32)
	{
		OLED_print(string[i]);
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	0e 94 64 02 	call	0x4c8	; 0x4c8 <OLED_print>
		i++;
     516:	21 96       	adiw	r28, 0x01	; 1
}

void OLED_print_string(char* string)
{
	int i=0;
	while(string[i]!='\0' && i < 32)
     518:	f8 01       	movw	r30, r16
     51a:	81 91       	ld	r24, Z+
     51c:	8f 01       	movw	r16, r30
     51e:	88 23       	and	r24, r24
     520:	19 f0       	breq	.+6      	; 0x528 <__stack+0x29>
     522:	c0 32       	cpi	r28, 0x20	; 32
     524:	d1 05       	cpc	r29, r1
     526:	a1 f7       	brne	.-24     	; 0x510 <__stack+0x11>
	{
		OLED_print(string[i]);
		i++;
	}
}
     528:	df 91       	pop	r29
     52a:	cf 91       	pop	r28
     52c:	1f 91       	pop	r17
     52e:	0f 91       	pop	r16
     530:	08 95       	ret

00000532 <OLED_print_arrow>:

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     532:	e0 e0       	ldi	r30, 0x00	; 0
     534:	f0 e1       	ldi	r31, 0x10	; 16
     536:	80 eb       	ldi	r24, 0xB0	; 176
     538:	80 83       	st	Z, r24
     53a:	10 82       	st	Z, r1
     53c:	80 e1       	ldi	r24, 0x10	; 16
     53e:	80 83       	st	Z, r24

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     540:	e0 e0       	ldi	r30, 0x00	; 0
     542:	f2 e1       	ldi	r31, 0x12	; 18
     544:	88 e0       	ldi	r24, 0x08	; 8
     546:	80 83       	st	Z, r24
     548:	80 83       	st	Z, r24
     54a:	80 83       	st	Z, r24
     54c:	80 83       	st	Z, r24
     54e:	9e e3       	ldi	r25, 0x3E	; 62
     550:	90 83       	st	Z, r25
     552:	9c e1       	ldi	r25, 0x1C	; 28
     554:	90 83       	st	Z, r25
     556:	80 83       	st	Z, r24
     558:	08 95       	ret

0000055a <OLED_print_house>:

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     55a:	e0 e0       	ldi	r30, 0x00	; 0
     55c:	f0 e1       	ldi	r31, 0x10	; 16
     55e:	85 eb       	ldi	r24, 0xB5	; 181
     560:	80 83       	st	Z, r24
     562:	10 82       	st	Z, r1
     564:	84 e1       	ldi	r24, 0x14	; 20
     566:	80 83       	st	Z, r24

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     568:	e0 e0       	ldi	r30, 0x00	; 0
     56a:	f2 e1       	ldi	r31, 0x12	; 18
     56c:	10 82       	st	Z, r1
     56e:	88 ef       	ldi	r24, 0xF8	; 248
     570:	80 83       	st	Z, r24
     572:	9c ef       	ldi	r25, 0xFC	; 252
     574:	90 83       	st	Z, r25
     576:	96 ef       	ldi	r25, 0xF6	; 246
     578:	90 83       	st	Z, r25
     57a:	2f e3       	ldi	r18, 0x3F	; 63
     57c:	20 83       	st	Z, r18
     57e:	90 83       	st	Z, r25
     580:	9f ef       	ldi	r25, 0xFF	; 255
     582:	90 83       	st	Z, r25
     584:	80 83       	st	Z, r24
     586:	10 82       	st	Z, r1
     588:	08 95       	ret

0000058a <OLED_print_bus>:

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     58a:	e0 e0       	ldi	r30, 0x00	; 0
     58c:	f0 e1       	ldi	r31, 0x10	; 16
     58e:	83 eb       	ldi	r24, 0xB3	; 179
     590:	80 83       	st	Z, r24
     592:	8e e0       	ldi	r24, 0x0E	; 14
     594:	80 83       	st	Z, r24
     596:	87 e1       	ldi	r24, 0x17	; 23
     598:	80 83       	st	Z, r24

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     59a:	e0 e0       	ldi	r30, 0x00	; 0
     59c:	f2 e1       	ldi	r31, 0x12	; 18
     59e:	10 82       	st	Z, r1
     5a0:	8f e7       	ldi	r24, 0x7F	; 127
     5a2:	80 83       	st	Z, r24
     5a4:	93 ef       	ldi	r25, 0xF3	; 243
     5a6:	90 83       	st	Z, r25
     5a8:	80 83       	st	Z, r24
     5aa:	23 e7       	ldi	r18, 0x73	; 115
     5ac:	20 83       	st	Z, r18
     5ae:	80 83       	st	Z, r24
     5b0:	90 83       	st	Z, r25
     5b2:	80 83       	st	Z, r24
     5b4:	81 ee       	ldi	r24, 0xE1	; 225
     5b6:	80 83       	st	Z, r24
     5b8:	10 82       	st	Z, r1
     5ba:	08 95       	ret

000005bc <SRAM_Init>:
#include <avr/io.h>

void SRAM_Init(void)
{
	/* Enable external SRAM: set SRE to 1 */
	MCUCR |= (1 << SRE);
     5bc:	85 b7       	in	r24, 0x35	; 53
     5be:	80 68       	ori	r24, 0x80	; 128
     5c0:	85 bf       	out	0x35, r24	; 53
     5c2:	08 95       	ret

000005c4 <UART_Transmit>:
#include <stdio.h>
#include <avr/io.h>

void UART_Transmit(unsigned char data){
	/* Wait for empty transmit buffer */
	while(!(UCSR0A&(1<<UDRE0)))
     5c4:	5d 9b       	sbis	0x0b, 5	; 11
     5c6:	fe cf       	rjmp	.-4      	; 0x5c4 <UART_Transmit>
		;
	/* Put data into buffer */
	UDR0 = data;
     5c8:	8c b9       	out	0x0c, r24	; 12
     5ca:	08 95       	ret

000005cc <UART_Receive>:
}

unsigned char UART_Receive(void){
	/* Wait for data to be received */
	while(!(UCSR0A&(1<<RXC0)))
     5cc:	5f 9b       	sbis	0x0b, 7	; 11
     5ce:	fe cf       	rjmp	.-4      	; 0x5cc <UART_Receive>
		;
	/* Get and return received data from buffer */
	return UDR0;
     5d0:	8c b1       	in	r24, 0x0c	; 12
}
     5d2:	08 95       	ret

000005d4 <UART_Init>:

void UART_Init(unsigned int ubrr){
	/* Set baud rate */
	UBRR0L = (unsigned char) ubrr;
     5d4:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     5d6:	88 e1       	ldi	r24, 0x18	; 24
     5d8:	8a b9       	out	0x0a, r24	; 10
	/* Link printf to UART transmissions */	
	fdevopen(UART_Transmit,UART_Receive);
     5da:	66 ee       	ldi	r22, 0xE6	; 230
     5dc:	72 e0       	ldi	r23, 0x02	; 2
     5de:	82 ee       	ldi	r24, 0xE2	; 226
     5e0:	92 e0       	ldi	r25, 0x02	; 2
     5e2:	0e 94 de 04 	call	0x9bc	; 0x9bc <fdevopen>
     5e6:	08 95       	ret

000005e8 <__subsf3>:
     5e8:	50 58       	subi	r21, 0x80	; 128

000005ea <__addsf3>:
     5ea:	bb 27       	eor	r27, r27
     5ec:	aa 27       	eor	r26, r26
     5ee:	0e d0       	rcall	.+28     	; 0x60c <__addsf3x>
     5f0:	44 c1       	rjmp	.+648    	; 0x87a <__fp_round>
     5f2:	35 d1       	rcall	.+618    	; 0x85e <__fp_pscA>
     5f4:	30 f0       	brcs	.+12     	; 0x602 <__addsf3+0x18>
     5f6:	3a d1       	rcall	.+628    	; 0x86c <__fp_pscB>
     5f8:	20 f0       	brcs	.+8      	; 0x602 <__addsf3+0x18>
     5fa:	31 f4       	brne	.+12     	; 0x608 <__addsf3+0x1e>
     5fc:	9f 3f       	cpi	r25, 0xFF	; 255
     5fe:	11 f4       	brne	.+4      	; 0x604 <__addsf3+0x1a>
     600:	1e f4       	brtc	.+6      	; 0x608 <__addsf3+0x1e>
     602:	2a c1       	rjmp	.+596    	; 0x858 <__fp_nan>
     604:	0e f4       	brtc	.+2      	; 0x608 <__addsf3+0x1e>
     606:	e0 95       	com	r30
     608:	e7 fb       	bst	r30, 7
     60a:	20 c1       	rjmp	.+576    	; 0x84c <__fp_inf>

0000060c <__addsf3x>:
     60c:	e9 2f       	mov	r30, r25
     60e:	46 d1       	rcall	.+652    	; 0x89c <__fp_split3>
     610:	80 f3       	brcs	.-32     	; 0x5f2 <__addsf3+0x8>
     612:	ba 17       	cp	r27, r26
     614:	62 07       	cpc	r22, r18
     616:	73 07       	cpc	r23, r19
     618:	84 07       	cpc	r24, r20
     61a:	95 07       	cpc	r25, r21
     61c:	18 f0       	brcs	.+6      	; 0x624 <__addsf3x+0x18>
     61e:	71 f4       	brne	.+28     	; 0x63c <__addsf3x+0x30>
     620:	9e f5       	brtc	.+102    	; 0x688 <__addsf3x+0x7c>
     622:	5e c1       	rjmp	.+700    	; 0x8e0 <__fp_zero>
     624:	0e f4       	brtc	.+2      	; 0x628 <__addsf3x+0x1c>
     626:	e0 95       	com	r30
     628:	0b 2e       	mov	r0, r27
     62a:	ba 2f       	mov	r27, r26
     62c:	a0 2d       	mov	r26, r0
     62e:	0b 01       	movw	r0, r22
     630:	b9 01       	movw	r22, r18
     632:	90 01       	movw	r18, r0
     634:	0c 01       	movw	r0, r24
     636:	ca 01       	movw	r24, r20
     638:	a0 01       	movw	r20, r0
     63a:	11 24       	eor	r1, r1
     63c:	ff 27       	eor	r31, r31
     63e:	59 1b       	sub	r21, r25
     640:	99 f0       	breq	.+38     	; 0x668 <__addsf3x+0x5c>
     642:	59 3f       	cpi	r21, 0xF9	; 249
     644:	50 f4       	brcc	.+20     	; 0x65a <__addsf3x+0x4e>
     646:	50 3e       	cpi	r21, 0xE0	; 224
     648:	68 f1       	brcs	.+90     	; 0x6a4 <__addsf3x+0x98>
     64a:	1a 16       	cp	r1, r26
     64c:	f0 40       	sbci	r31, 0x00	; 0
     64e:	a2 2f       	mov	r26, r18
     650:	23 2f       	mov	r18, r19
     652:	34 2f       	mov	r19, r20
     654:	44 27       	eor	r20, r20
     656:	58 5f       	subi	r21, 0xF8	; 248
     658:	f3 cf       	rjmp	.-26     	; 0x640 <__addsf3x+0x34>
     65a:	46 95       	lsr	r20
     65c:	37 95       	ror	r19
     65e:	27 95       	ror	r18
     660:	a7 95       	ror	r26
     662:	f0 40       	sbci	r31, 0x00	; 0
     664:	53 95       	inc	r21
     666:	c9 f7       	brne	.-14     	; 0x65a <__addsf3x+0x4e>
     668:	7e f4       	brtc	.+30     	; 0x688 <__addsf3x+0x7c>
     66a:	1f 16       	cp	r1, r31
     66c:	ba 0b       	sbc	r27, r26
     66e:	62 0b       	sbc	r22, r18
     670:	73 0b       	sbc	r23, r19
     672:	84 0b       	sbc	r24, r20
     674:	ba f0       	brmi	.+46     	; 0x6a4 <__addsf3x+0x98>
     676:	91 50       	subi	r25, 0x01	; 1
     678:	a1 f0       	breq	.+40     	; 0x6a2 <__addsf3x+0x96>
     67a:	ff 0f       	add	r31, r31
     67c:	bb 1f       	adc	r27, r27
     67e:	66 1f       	adc	r22, r22
     680:	77 1f       	adc	r23, r23
     682:	88 1f       	adc	r24, r24
     684:	c2 f7       	brpl	.-16     	; 0x676 <__addsf3x+0x6a>
     686:	0e c0       	rjmp	.+28     	; 0x6a4 <__addsf3x+0x98>
     688:	ba 0f       	add	r27, r26
     68a:	62 1f       	adc	r22, r18
     68c:	73 1f       	adc	r23, r19
     68e:	84 1f       	adc	r24, r20
     690:	48 f4       	brcc	.+18     	; 0x6a4 <__addsf3x+0x98>
     692:	87 95       	ror	r24
     694:	77 95       	ror	r23
     696:	67 95       	ror	r22
     698:	b7 95       	ror	r27
     69a:	f7 95       	ror	r31
     69c:	9e 3f       	cpi	r25, 0xFE	; 254
     69e:	08 f0       	brcs	.+2      	; 0x6a2 <__addsf3x+0x96>
     6a0:	b3 cf       	rjmp	.-154    	; 0x608 <__addsf3+0x1e>
     6a2:	93 95       	inc	r25
     6a4:	88 0f       	add	r24, r24
     6a6:	08 f0       	brcs	.+2      	; 0x6aa <__addsf3x+0x9e>
     6a8:	99 27       	eor	r25, r25
     6aa:	ee 0f       	add	r30, r30
     6ac:	97 95       	ror	r25
     6ae:	87 95       	ror	r24
     6b0:	08 95       	ret

000006b2 <__cmpsf2>:
     6b2:	a8 d0       	rcall	.+336    	; 0x804 <__fp_cmp>
     6b4:	08 f4       	brcc	.+2      	; 0x6b8 <__cmpsf2+0x6>
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	08 95       	ret

000006ba <__divsf3>:
     6ba:	0c d0       	rcall	.+24     	; 0x6d4 <__divsf3x>
     6bc:	de c0       	rjmp	.+444    	; 0x87a <__fp_round>
     6be:	d6 d0       	rcall	.+428    	; 0x86c <__fp_pscB>
     6c0:	40 f0       	brcs	.+16     	; 0x6d2 <__divsf3+0x18>
     6c2:	cd d0       	rcall	.+410    	; 0x85e <__fp_pscA>
     6c4:	30 f0       	brcs	.+12     	; 0x6d2 <__divsf3+0x18>
     6c6:	21 f4       	brne	.+8      	; 0x6d0 <__divsf3+0x16>
     6c8:	5f 3f       	cpi	r21, 0xFF	; 255
     6ca:	19 f0       	breq	.+6      	; 0x6d2 <__divsf3+0x18>
     6cc:	bf c0       	rjmp	.+382    	; 0x84c <__fp_inf>
     6ce:	51 11       	cpse	r21, r1
     6d0:	08 c1       	rjmp	.+528    	; 0x8e2 <__fp_szero>
     6d2:	c2 c0       	rjmp	.+388    	; 0x858 <__fp_nan>

000006d4 <__divsf3x>:
     6d4:	e3 d0       	rcall	.+454    	; 0x89c <__fp_split3>
     6d6:	98 f3       	brcs	.-26     	; 0x6be <__divsf3+0x4>

000006d8 <__divsf3_pse>:
     6d8:	99 23       	and	r25, r25
     6da:	c9 f3       	breq	.-14     	; 0x6ce <__divsf3+0x14>
     6dc:	55 23       	and	r21, r21
     6de:	b1 f3       	breq	.-20     	; 0x6cc <__divsf3+0x12>
     6e0:	95 1b       	sub	r25, r21
     6e2:	55 0b       	sbc	r21, r21
     6e4:	bb 27       	eor	r27, r27
     6e6:	aa 27       	eor	r26, r26
     6e8:	62 17       	cp	r22, r18
     6ea:	73 07       	cpc	r23, r19
     6ec:	84 07       	cpc	r24, r20
     6ee:	38 f0       	brcs	.+14     	; 0x6fe <__divsf3_pse+0x26>
     6f0:	9f 5f       	subi	r25, 0xFF	; 255
     6f2:	5f 4f       	sbci	r21, 0xFF	; 255
     6f4:	22 0f       	add	r18, r18
     6f6:	33 1f       	adc	r19, r19
     6f8:	44 1f       	adc	r20, r20
     6fa:	aa 1f       	adc	r26, r26
     6fc:	a9 f3       	breq	.-22     	; 0x6e8 <__divsf3_pse+0x10>
     6fe:	33 d0       	rcall	.+102    	; 0x766 <__divsf3_pse+0x8e>
     700:	0e 2e       	mov	r0, r30
     702:	3a f0       	brmi	.+14     	; 0x712 <__divsf3_pse+0x3a>
     704:	e0 e8       	ldi	r30, 0x80	; 128
     706:	30 d0       	rcall	.+96     	; 0x768 <__divsf3_pse+0x90>
     708:	91 50       	subi	r25, 0x01	; 1
     70a:	50 40       	sbci	r21, 0x00	; 0
     70c:	e6 95       	lsr	r30
     70e:	00 1c       	adc	r0, r0
     710:	ca f7       	brpl	.-14     	; 0x704 <__divsf3_pse+0x2c>
     712:	29 d0       	rcall	.+82     	; 0x766 <__divsf3_pse+0x8e>
     714:	fe 2f       	mov	r31, r30
     716:	27 d0       	rcall	.+78     	; 0x766 <__divsf3_pse+0x8e>
     718:	66 0f       	add	r22, r22
     71a:	77 1f       	adc	r23, r23
     71c:	88 1f       	adc	r24, r24
     71e:	bb 1f       	adc	r27, r27
     720:	26 17       	cp	r18, r22
     722:	37 07       	cpc	r19, r23
     724:	48 07       	cpc	r20, r24
     726:	ab 07       	cpc	r26, r27
     728:	b0 e8       	ldi	r27, 0x80	; 128
     72a:	09 f0       	breq	.+2      	; 0x72e <__divsf3_pse+0x56>
     72c:	bb 0b       	sbc	r27, r27
     72e:	80 2d       	mov	r24, r0
     730:	bf 01       	movw	r22, r30
     732:	ff 27       	eor	r31, r31
     734:	93 58       	subi	r25, 0x83	; 131
     736:	5f 4f       	sbci	r21, 0xFF	; 255
     738:	2a f0       	brmi	.+10     	; 0x744 <__divsf3_pse+0x6c>
     73a:	9e 3f       	cpi	r25, 0xFE	; 254
     73c:	51 05       	cpc	r21, r1
     73e:	68 f0       	brcs	.+26     	; 0x75a <__divsf3_pse+0x82>
     740:	85 c0       	rjmp	.+266    	; 0x84c <__fp_inf>
     742:	cf c0       	rjmp	.+414    	; 0x8e2 <__fp_szero>
     744:	5f 3f       	cpi	r21, 0xFF	; 255
     746:	ec f3       	brlt	.-6      	; 0x742 <__divsf3_pse+0x6a>
     748:	98 3e       	cpi	r25, 0xE8	; 232
     74a:	dc f3       	brlt	.-10     	; 0x742 <__divsf3_pse+0x6a>
     74c:	86 95       	lsr	r24
     74e:	77 95       	ror	r23
     750:	67 95       	ror	r22
     752:	b7 95       	ror	r27
     754:	f7 95       	ror	r31
     756:	9f 5f       	subi	r25, 0xFF	; 255
     758:	c9 f7       	brne	.-14     	; 0x74c <__divsf3_pse+0x74>
     75a:	88 0f       	add	r24, r24
     75c:	91 1d       	adc	r25, r1
     75e:	96 95       	lsr	r25
     760:	87 95       	ror	r24
     762:	97 f9       	bld	r25, 7
     764:	08 95       	ret
     766:	e1 e0       	ldi	r30, 0x01	; 1
     768:	66 0f       	add	r22, r22
     76a:	77 1f       	adc	r23, r23
     76c:	88 1f       	adc	r24, r24
     76e:	bb 1f       	adc	r27, r27
     770:	62 17       	cp	r22, r18
     772:	73 07       	cpc	r23, r19
     774:	84 07       	cpc	r24, r20
     776:	ba 07       	cpc	r27, r26
     778:	20 f0       	brcs	.+8      	; 0x782 <__divsf3_pse+0xaa>
     77a:	62 1b       	sub	r22, r18
     77c:	73 0b       	sbc	r23, r19
     77e:	84 0b       	sbc	r24, r20
     780:	ba 0b       	sbc	r27, r26
     782:	ee 1f       	adc	r30, r30
     784:	88 f7       	brcc	.-30     	; 0x768 <__divsf3_pse+0x90>
     786:	e0 95       	com	r30
     788:	08 95       	ret

0000078a <__floatunsisf>:
     78a:	e8 94       	clt
     78c:	09 c0       	rjmp	.+18     	; 0x7a0 <__floatsisf+0x12>

0000078e <__floatsisf>:
     78e:	97 fb       	bst	r25, 7
     790:	3e f4       	brtc	.+14     	; 0x7a0 <__floatsisf+0x12>
     792:	90 95       	com	r25
     794:	80 95       	com	r24
     796:	70 95       	com	r23
     798:	61 95       	neg	r22
     79a:	7f 4f       	sbci	r23, 0xFF	; 255
     79c:	8f 4f       	sbci	r24, 0xFF	; 255
     79e:	9f 4f       	sbci	r25, 0xFF	; 255
     7a0:	99 23       	and	r25, r25
     7a2:	a9 f0       	breq	.+42     	; 0x7ce <__floatsisf+0x40>
     7a4:	f9 2f       	mov	r31, r25
     7a6:	96 e9       	ldi	r25, 0x96	; 150
     7a8:	bb 27       	eor	r27, r27
     7aa:	93 95       	inc	r25
     7ac:	f6 95       	lsr	r31
     7ae:	87 95       	ror	r24
     7b0:	77 95       	ror	r23
     7b2:	67 95       	ror	r22
     7b4:	b7 95       	ror	r27
     7b6:	f1 11       	cpse	r31, r1
     7b8:	f8 cf       	rjmp	.-16     	; 0x7aa <__floatsisf+0x1c>
     7ba:	fa f4       	brpl	.+62     	; 0x7fa <__floatsisf+0x6c>
     7bc:	bb 0f       	add	r27, r27
     7be:	11 f4       	brne	.+4      	; 0x7c4 <__floatsisf+0x36>
     7c0:	60 ff       	sbrs	r22, 0
     7c2:	1b c0       	rjmp	.+54     	; 0x7fa <__floatsisf+0x6c>
     7c4:	6f 5f       	subi	r22, 0xFF	; 255
     7c6:	7f 4f       	sbci	r23, 0xFF	; 255
     7c8:	8f 4f       	sbci	r24, 0xFF	; 255
     7ca:	9f 4f       	sbci	r25, 0xFF	; 255
     7cc:	16 c0       	rjmp	.+44     	; 0x7fa <__floatsisf+0x6c>
     7ce:	88 23       	and	r24, r24
     7d0:	11 f0       	breq	.+4      	; 0x7d6 <__floatsisf+0x48>
     7d2:	96 e9       	ldi	r25, 0x96	; 150
     7d4:	11 c0       	rjmp	.+34     	; 0x7f8 <__floatsisf+0x6a>
     7d6:	77 23       	and	r23, r23
     7d8:	21 f0       	breq	.+8      	; 0x7e2 <__floatsisf+0x54>
     7da:	9e e8       	ldi	r25, 0x8E	; 142
     7dc:	87 2f       	mov	r24, r23
     7de:	76 2f       	mov	r23, r22
     7e0:	05 c0       	rjmp	.+10     	; 0x7ec <__floatsisf+0x5e>
     7e2:	66 23       	and	r22, r22
     7e4:	71 f0       	breq	.+28     	; 0x802 <__floatsisf+0x74>
     7e6:	96 e8       	ldi	r25, 0x86	; 134
     7e8:	86 2f       	mov	r24, r22
     7ea:	70 e0       	ldi	r23, 0x00	; 0
     7ec:	60 e0       	ldi	r22, 0x00	; 0
     7ee:	2a f0       	brmi	.+10     	; 0x7fa <__floatsisf+0x6c>
     7f0:	9a 95       	dec	r25
     7f2:	66 0f       	add	r22, r22
     7f4:	77 1f       	adc	r23, r23
     7f6:	88 1f       	adc	r24, r24
     7f8:	da f7       	brpl	.-10     	; 0x7f0 <__floatsisf+0x62>
     7fa:	88 0f       	add	r24, r24
     7fc:	96 95       	lsr	r25
     7fe:	87 95       	ror	r24
     800:	97 f9       	bld	r25, 7
     802:	08 95       	ret

00000804 <__fp_cmp>:
     804:	99 0f       	add	r25, r25
     806:	00 08       	sbc	r0, r0
     808:	55 0f       	add	r21, r21
     80a:	aa 0b       	sbc	r26, r26
     80c:	e0 e8       	ldi	r30, 0x80	; 128
     80e:	fe ef       	ldi	r31, 0xFE	; 254
     810:	16 16       	cp	r1, r22
     812:	17 06       	cpc	r1, r23
     814:	e8 07       	cpc	r30, r24
     816:	f9 07       	cpc	r31, r25
     818:	c0 f0       	brcs	.+48     	; 0x84a <__fp_cmp+0x46>
     81a:	12 16       	cp	r1, r18
     81c:	13 06       	cpc	r1, r19
     81e:	e4 07       	cpc	r30, r20
     820:	f5 07       	cpc	r31, r21
     822:	98 f0       	brcs	.+38     	; 0x84a <__fp_cmp+0x46>
     824:	62 1b       	sub	r22, r18
     826:	73 0b       	sbc	r23, r19
     828:	84 0b       	sbc	r24, r20
     82a:	95 0b       	sbc	r25, r21
     82c:	39 f4       	brne	.+14     	; 0x83c <__fp_cmp+0x38>
     82e:	0a 26       	eor	r0, r26
     830:	61 f0       	breq	.+24     	; 0x84a <__fp_cmp+0x46>
     832:	23 2b       	or	r18, r19
     834:	24 2b       	or	r18, r20
     836:	25 2b       	or	r18, r21
     838:	21 f4       	brne	.+8      	; 0x842 <__fp_cmp+0x3e>
     83a:	08 95       	ret
     83c:	0a 26       	eor	r0, r26
     83e:	09 f4       	brne	.+2      	; 0x842 <__fp_cmp+0x3e>
     840:	a1 40       	sbci	r26, 0x01	; 1
     842:	a6 95       	lsr	r26
     844:	8f ef       	ldi	r24, 0xFF	; 255
     846:	81 1d       	adc	r24, r1
     848:	81 1d       	adc	r24, r1
     84a:	08 95       	ret

0000084c <__fp_inf>:
     84c:	97 f9       	bld	r25, 7
     84e:	9f 67       	ori	r25, 0x7F	; 127
     850:	80 e8       	ldi	r24, 0x80	; 128
     852:	70 e0       	ldi	r23, 0x00	; 0
     854:	60 e0       	ldi	r22, 0x00	; 0
     856:	08 95       	ret

00000858 <__fp_nan>:
     858:	9f ef       	ldi	r25, 0xFF	; 255
     85a:	80 ec       	ldi	r24, 0xC0	; 192
     85c:	08 95       	ret

0000085e <__fp_pscA>:
     85e:	00 24       	eor	r0, r0
     860:	0a 94       	dec	r0
     862:	16 16       	cp	r1, r22
     864:	17 06       	cpc	r1, r23
     866:	18 06       	cpc	r1, r24
     868:	09 06       	cpc	r0, r25
     86a:	08 95       	ret

0000086c <__fp_pscB>:
     86c:	00 24       	eor	r0, r0
     86e:	0a 94       	dec	r0
     870:	12 16       	cp	r1, r18
     872:	13 06       	cpc	r1, r19
     874:	14 06       	cpc	r1, r20
     876:	05 06       	cpc	r0, r21
     878:	08 95       	ret

0000087a <__fp_round>:
     87a:	09 2e       	mov	r0, r25
     87c:	03 94       	inc	r0
     87e:	00 0c       	add	r0, r0
     880:	11 f4       	brne	.+4      	; 0x886 <__fp_round+0xc>
     882:	88 23       	and	r24, r24
     884:	52 f0       	brmi	.+20     	; 0x89a <__fp_round+0x20>
     886:	bb 0f       	add	r27, r27
     888:	40 f4       	brcc	.+16     	; 0x89a <__fp_round+0x20>
     88a:	bf 2b       	or	r27, r31
     88c:	11 f4       	brne	.+4      	; 0x892 <__fp_round+0x18>
     88e:	60 ff       	sbrs	r22, 0
     890:	04 c0       	rjmp	.+8      	; 0x89a <__fp_round+0x20>
     892:	6f 5f       	subi	r22, 0xFF	; 255
     894:	7f 4f       	sbci	r23, 0xFF	; 255
     896:	8f 4f       	sbci	r24, 0xFF	; 255
     898:	9f 4f       	sbci	r25, 0xFF	; 255
     89a:	08 95       	ret

0000089c <__fp_split3>:
     89c:	57 fd       	sbrc	r21, 7
     89e:	90 58       	subi	r25, 0x80	; 128
     8a0:	44 0f       	add	r20, r20
     8a2:	55 1f       	adc	r21, r21
     8a4:	59 f0       	breq	.+22     	; 0x8bc <__fp_splitA+0x10>
     8a6:	5f 3f       	cpi	r21, 0xFF	; 255
     8a8:	71 f0       	breq	.+28     	; 0x8c6 <__fp_splitA+0x1a>
     8aa:	47 95       	ror	r20

000008ac <__fp_splitA>:
     8ac:	88 0f       	add	r24, r24
     8ae:	97 fb       	bst	r25, 7
     8b0:	99 1f       	adc	r25, r25
     8b2:	61 f0       	breq	.+24     	; 0x8cc <__fp_splitA+0x20>
     8b4:	9f 3f       	cpi	r25, 0xFF	; 255
     8b6:	79 f0       	breq	.+30     	; 0x8d6 <__fp_splitA+0x2a>
     8b8:	87 95       	ror	r24
     8ba:	08 95       	ret
     8bc:	12 16       	cp	r1, r18
     8be:	13 06       	cpc	r1, r19
     8c0:	14 06       	cpc	r1, r20
     8c2:	55 1f       	adc	r21, r21
     8c4:	f2 cf       	rjmp	.-28     	; 0x8aa <__fp_split3+0xe>
     8c6:	46 95       	lsr	r20
     8c8:	f1 df       	rcall	.-30     	; 0x8ac <__fp_splitA>
     8ca:	08 c0       	rjmp	.+16     	; 0x8dc <__fp_splitA+0x30>
     8cc:	16 16       	cp	r1, r22
     8ce:	17 06       	cpc	r1, r23
     8d0:	18 06       	cpc	r1, r24
     8d2:	99 1f       	adc	r25, r25
     8d4:	f1 cf       	rjmp	.-30     	; 0x8b8 <__fp_splitA+0xc>
     8d6:	86 95       	lsr	r24
     8d8:	71 05       	cpc	r23, r1
     8da:	61 05       	cpc	r22, r1
     8dc:	08 94       	sec
     8de:	08 95       	ret

000008e0 <__fp_zero>:
     8e0:	e8 94       	clt

000008e2 <__fp_szero>:
     8e2:	bb 27       	eor	r27, r27
     8e4:	66 27       	eor	r22, r22
     8e6:	77 27       	eor	r23, r23
     8e8:	cb 01       	movw	r24, r22
     8ea:	97 f9       	bld	r25, 7
     8ec:	08 95       	ret

000008ee <__gesf2>:
     8ee:	8a df       	rcall	.-236    	; 0x804 <__fp_cmp>
     8f0:	08 f4       	brcc	.+2      	; 0x8f4 <__gesf2+0x6>
     8f2:	8f ef       	ldi	r24, 0xFF	; 255
     8f4:	08 95       	ret

000008f6 <__mulsf3>:
     8f6:	0b d0       	rcall	.+22     	; 0x90e <__mulsf3x>
     8f8:	c0 cf       	rjmp	.-128    	; 0x87a <__fp_round>
     8fa:	b1 df       	rcall	.-158    	; 0x85e <__fp_pscA>
     8fc:	28 f0       	brcs	.+10     	; 0x908 <__mulsf3+0x12>
     8fe:	b6 df       	rcall	.-148    	; 0x86c <__fp_pscB>
     900:	18 f0       	brcs	.+6      	; 0x908 <__mulsf3+0x12>
     902:	95 23       	and	r25, r21
     904:	09 f0       	breq	.+2      	; 0x908 <__mulsf3+0x12>
     906:	a2 cf       	rjmp	.-188    	; 0x84c <__fp_inf>
     908:	a7 cf       	rjmp	.-178    	; 0x858 <__fp_nan>
     90a:	11 24       	eor	r1, r1
     90c:	ea cf       	rjmp	.-44     	; 0x8e2 <__fp_szero>

0000090e <__mulsf3x>:
     90e:	c6 df       	rcall	.-116    	; 0x89c <__fp_split3>
     910:	a0 f3       	brcs	.-24     	; 0x8fa <__mulsf3+0x4>

00000912 <__mulsf3_pse>:
     912:	95 9f       	mul	r25, r21
     914:	d1 f3       	breq	.-12     	; 0x90a <__mulsf3+0x14>
     916:	95 0f       	add	r25, r21
     918:	50 e0       	ldi	r21, 0x00	; 0
     91a:	55 1f       	adc	r21, r21
     91c:	62 9f       	mul	r22, r18
     91e:	f0 01       	movw	r30, r0
     920:	72 9f       	mul	r23, r18
     922:	bb 27       	eor	r27, r27
     924:	f0 0d       	add	r31, r0
     926:	b1 1d       	adc	r27, r1
     928:	63 9f       	mul	r22, r19
     92a:	aa 27       	eor	r26, r26
     92c:	f0 0d       	add	r31, r0
     92e:	b1 1d       	adc	r27, r1
     930:	aa 1f       	adc	r26, r26
     932:	64 9f       	mul	r22, r20
     934:	66 27       	eor	r22, r22
     936:	b0 0d       	add	r27, r0
     938:	a1 1d       	adc	r26, r1
     93a:	66 1f       	adc	r22, r22
     93c:	82 9f       	mul	r24, r18
     93e:	22 27       	eor	r18, r18
     940:	b0 0d       	add	r27, r0
     942:	a1 1d       	adc	r26, r1
     944:	62 1f       	adc	r22, r18
     946:	73 9f       	mul	r23, r19
     948:	b0 0d       	add	r27, r0
     94a:	a1 1d       	adc	r26, r1
     94c:	62 1f       	adc	r22, r18
     94e:	83 9f       	mul	r24, r19
     950:	a0 0d       	add	r26, r0
     952:	61 1d       	adc	r22, r1
     954:	22 1f       	adc	r18, r18
     956:	74 9f       	mul	r23, r20
     958:	33 27       	eor	r19, r19
     95a:	a0 0d       	add	r26, r0
     95c:	61 1d       	adc	r22, r1
     95e:	23 1f       	adc	r18, r19
     960:	84 9f       	mul	r24, r20
     962:	60 0d       	add	r22, r0
     964:	21 1d       	adc	r18, r1
     966:	82 2f       	mov	r24, r18
     968:	76 2f       	mov	r23, r22
     96a:	6a 2f       	mov	r22, r26
     96c:	11 24       	eor	r1, r1
     96e:	9f 57       	subi	r25, 0x7F	; 127
     970:	50 40       	sbci	r21, 0x00	; 0
     972:	8a f0       	brmi	.+34     	; 0x996 <__mulsf3_pse+0x84>
     974:	e1 f0       	breq	.+56     	; 0x9ae <__mulsf3_pse+0x9c>
     976:	88 23       	and	r24, r24
     978:	4a f0       	brmi	.+18     	; 0x98c <__mulsf3_pse+0x7a>
     97a:	ee 0f       	add	r30, r30
     97c:	ff 1f       	adc	r31, r31
     97e:	bb 1f       	adc	r27, r27
     980:	66 1f       	adc	r22, r22
     982:	77 1f       	adc	r23, r23
     984:	88 1f       	adc	r24, r24
     986:	91 50       	subi	r25, 0x01	; 1
     988:	50 40       	sbci	r21, 0x00	; 0
     98a:	a9 f7       	brne	.-22     	; 0x976 <__mulsf3_pse+0x64>
     98c:	9e 3f       	cpi	r25, 0xFE	; 254
     98e:	51 05       	cpc	r21, r1
     990:	70 f0       	brcs	.+28     	; 0x9ae <__mulsf3_pse+0x9c>
     992:	5c cf       	rjmp	.-328    	; 0x84c <__fp_inf>
     994:	a6 cf       	rjmp	.-180    	; 0x8e2 <__fp_szero>
     996:	5f 3f       	cpi	r21, 0xFF	; 255
     998:	ec f3       	brlt	.-6      	; 0x994 <__mulsf3_pse+0x82>
     99a:	98 3e       	cpi	r25, 0xE8	; 232
     99c:	dc f3       	brlt	.-10     	; 0x994 <__mulsf3_pse+0x82>
     99e:	86 95       	lsr	r24
     9a0:	77 95       	ror	r23
     9a2:	67 95       	ror	r22
     9a4:	b7 95       	ror	r27
     9a6:	f7 95       	ror	r31
     9a8:	e7 95       	ror	r30
     9aa:	9f 5f       	subi	r25, 0xFF	; 255
     9ac:	c1 f7       	brne	.-16     	; 0x99e <__mulsf3_pse+0x8c>
     9ae:	fe 2b       	or	r31, r30
     9b0:	88 0f       	add	r24, r24
     9b2:	91 1d       	adc	r25, r1
     9b4:	96 95       	lsr	r25
     9b6:	87 95       	ror	r24
     9b8:	97 f9       	bld	r25, 7
     9ba:	08 95       	ret

000009bc <fdevopen>:
     9bc:	0f 93       	push	r16
     9be:	1f 93       	push	r17
     9c0:	cf 93       	push	r28
     9c2:	df 93       	push	r29
     9c4:	ec 01       	movw	r28, r24
     9c6:	8b 01       	movw	r16, r22
     9c8:	00 97       	sbiw	r24, 0x00	; 0
     9ca:	31 f4       	brne	.+12     	; 0x9d8 <fdevopen+0x1c>
     9cc:	61 15       	cp	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	19 f4       	brne	.+6      	; 0x9d8 <fdevopen+0x1c>
     9d2:	80 e0       	ldi	r24, 0x00	; 0
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	38 c0       	rjmp	.+112    	; 0xa48 <fdevopen+0x8c>
     9d8:	6e e0       	ldi	r22, 0x0E	; 14
     9da:	70 e0       	ldi	r23, 0x00	; 0
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	0e 94 3c 07 	call	0xe78	; 0xe78 <calloc>
     9e4:	fc 01       	movw	r30, r24
     9e6:	00 97       	sbiw	r24, 0x00	; 0
     9e8:	a1 f3       	breq	.-24     	; 0x9d2 <fdevopen+0x16>
     9ea:	80 e8       	ldi	r24, 0x80	; 128
     9ec:	83 83       	std	Z+3, r24	; 0x03
     9ee:	01 15       	cp	r16, r1
     9f0:	11 05       	cpc	r17, r1
     9f2:	71 f0       	breq	.+28     	; 0xa10 <fdevopen+0x54>
     9f4:	13 87       	std	Z+11, r17	; 0x0b
     9f6:	02 87       	std	Z+10, r16	; 0x0a
     9f8:	81 e8       	ldi	r24, 0x81	; 129
     9fa:	83 83       	std	Z+3, r24	; 0x03
     9fc:	80 91 54 03 	lds	r24, 0x0354
     a00:	90 91 55 03 	lds	r25, 0x0355
     a04:	89 2b       	or	r24, r25
     a06:	21 f4       	brne	.+8      	; 0xa10 <fdevopen+0x54>
     a08:	f0 93 55 03 	sts	0x0355, r31
     a0c:	e0 93 54 03 	sts	0x0354, r30
     a10:	20 97       	sbiw	r28, 0x00	; 0
     a12:	c9 f0       	breq	.+50     	; 0xa46 <fdevopen+0x8a>
     a14:	d1 87       	std	Z+9, r29	; 0x09
     a16:	c0 87       	std	Z+8, r28	; 0x08
     a18:	83 81       	ldd	r24, Z+3	; 0x03
     a1a:	82 60       	ori	r24, 0x02	; 2
     a1c:	83 83       	std	Z+3, r24	; 0x03
     a1e:	80 91 56 03 	lds	r24, 0x0356
     a22:	90 91 57 03 	lds	r25, 0x0357
     a26:	89 2b       	or	r24, r25
     a28:	71 f4       	brne	.+28     	; 0xa46 <fdevopen+0x8a>
     a2a:	f0 93 57 03 	sts	0x0357, r31
     a2e:	e0 93 56 03 	sts	0x0356, r30
     a32:	80 91 58 03 	lds	r24, 0x0358
     a36:	90 91 59 03 	lds	r25, 0x0359
     a3a:	89 2b       	or	r24, r25
     a3c:	21 f4       	brne	.+8      	; 0xa46 <fdevopen+0x8a>
     a3e:	f0 93 59 03 	sts	0x0359, r31
     a42:	e0 93 58 03 	sts	0x0358, r30
     a46:	cf 01       	movw	r24, r30
     a48:	df 91       	pop	r29
     a4a:	cf 91       	pop	r28
     a4c:	1f 91       	pop	r17
     a4e:	0f 91       	pop	r16
     a50:	08 95       	ret

00000a52 <printf>:
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	b0 e0       	ldi	r27, 0x00	; 0
     a56:	ef e2       	ldi	r30, 0x2F	; 47
     a58:	f5 e0       	ldi	r31, 0x05	; 5
     a5a:	0c 94 3c 09 	jmp	0x1278	; 0x1278 <__prologue_saves__+0x20>
     a5e:	fe 01       	movw	r30, r28
     a60:	35 96       	adiw	r30, 0x05	; 5
     a62:	61 91       	ld	r22, Z+
     a64:	71 91       	ld	r23, Z+
     a66:	af 01       	movw	r20, r30
     a68:	80 91 56 03 	lds	r24, 0x0356
     a6c:	90 91 57 03 	lds	r25, 0x0357
     a70:	0e 94 6a 05 	call	0xad4	; 0xad4 <vfprintf>
     a74:	e2 e0       	ldi	r30, 0x02	; 2
     a76:	0c 94 58 09 	jmp	0x12b0	; 0x12b0 <__epilogue_restores__+0x20>

00000a7a <puts>:
     a7a:	0f 93       	push	r16
     a7c:	1f 93       	push	r17
     a7e:	cf 93       	push	r28
     a80:	df 93       	push	r29
     a82:	e0 91 56 03 	lds	r30, 0x0356
     a86:	f0 91 57 03 	lds	r31, 0x0357
     a8a:	23 81       	ldd	r18, Z+3	; 0x03
     a8c:	21 ff       	sbrs	r18, 1
     a8e:	1b c0       	rjmp	.+54     	; 0xac6 <puts+0x4c>
     a90:	ec 01       	movw	r28, r24
     a92:	00 e0       	ldi	r16, 0x00	; 0
     a94:	10 e0       	ldi	r17, 0x00	; 0
     a96:	89 91       	ld	r24, Y+
     a98:	60 91 56 03 	lds	r22, 0x0356
     a9c:	70 91 57 03 	lds	r23, 0x0357
     aa0:	db 01       	movw	r26, r22
     aa2:	18 96       	adiw	r26, 0x08	; 8
     aa4:	ed 91       	ld	r30, X+
     aa6:	fc 91       	ld	r31, X
     aa8:	19 97       	sbiw	r26, 0x09	; 9
     aaa:	88 23       	and	r24, r24
     aac:	31 f0       	breq	.+12     	; 0xaba <puts+0x40>
     aae:	09 95       	icall
     ab0:	89 2b       	or	r24, r25
     ab2:	89 f3       	breq	.-30     	; 0xa96 <puts+0x1c>
     ab4:	0f ef       	ldi	r16, 0xFF	; 255
     ab6:	1f ef       	ldi	r17, 0xFF	; 255
     ab8:	ee cf       	rjmp	.-36     	; 0xa96 <puts+0x1c>
     aba:	8a e0       	ldi	r24, 0x0A	; 10
     abc:	09 95       	icall
     abe:	89 2b       	or	r24, r25
     ac0:	11 f4       	brne	.+4      	; 0xac6 <puts+0x4c>
     ac2:	c8 01       	movw	r24, r16
     ac4:	02 c0       	rjmp	.+4      	; 0xaca <puts+0x50>
     ac6:	8f ef       	ldi	r24, 0xFF	; 255
     ac8:	9f ef       	ldi	r25, 0xFF	; 255
     aca:	df 91       	pop	r29
     acc:	cf 91       	pop	r28
     ace:	1f 91       	pop	r17
     ad0:	0f 91       	pop	r16
     ad2:	08 95       	ret

00000ad4 <vfprintf>:
     ad4:	ac e0       	ldi	r26, 0x0C	; 12
     ad6:	b0 e0       	ldi	r27, 0x00	; 0
     ad8:	e0 e7       	ldi	r30, 0x70	; 112
     ada:	f5 e0       	ldi	r31, 0x05	; 5
     adc:	0c 94 2c 09 	jmp	0x1258	; 0x1258 <__prologue_saves__>
     ae0:	7c 01       	movw	r14, r24
     ae2:	6b 01       	movw	r12, r22
     ae4:	8a 01       	movw	r16, r20
     ae6:	fc 01       	movw	r30, r24
     ae8:	17 82       	std	Z+7, r1	; 0x07
     aea:	16 82       	std	Z+6, r1	; 0x06
     aec:	83 81       	ldd	r24, Z+3	; 0x03
     aee:	81 ff       	sbrs	r24, 1
     af0:	bd c1       	rjmp	.+890    	; 0xe6c <vfprintf+0x398>
     af2:	ce 01       	movw	r24, r28
     af4:	01 96       	adiw	r24, 0x01	; 1
     af6:	4c 01       	movw	r8, r24
     af8:	f7 01       	movw	r30, r14
     afa:	93 81       	ldd	r25, Z+3	; 0x03
     afc:	f6 01       	movw	r30, r12
     afe:	93 fd       	sbrc	r25, 3
     b00:	85 91       	lpm	r24, Z+
     b02:	93 ff       	sbrs	r25, 3
     b04:	81 91       	ld	r24, Z+
     b06:	6f 01       	movw	r12, r30
     b08:	88 23       	and	r24, r24
     b0a:	09 f4       	brne	.+2      	; 0xb0e <vfprintf+0x3a>
     b0c:	ab c1       	rjmp	.+854    	; 0xe64 <vfprintf+0x390>
     b0e:	85 32       	cpi	r24, 0x25	; 37
     b10:	39 f4       	brne	.+14     	; 0xb20 <vfprintf+0x4c>
     b12:	93 fd       	sbrc	r25, 3
     b14:	85 91       	lpm	r24, Z+
     b16:	93 ff       	sbrs	r25, 3
     b18:	81 91       	ld	r24, Z+
     b1a:	6f 01       	movw	r12, r30
     b1c:	85 32       	cpi	r24, 0x25	; 37
     b1e:	29 f4       	brne	.+10     	; 0xb2a <vfprintf+0x56>
     b20:	b7 01       	movw	r22, r14
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	0e 94 9c 08 	call	0x1138	; 0x1138 <fputc>
     b28:	e7 cf       	rjmp	.-50     	; 0xaf8 <vfprintf+0x24>
     b2a:	51 2c       	mov	r5, r1
     b2c:	31 2c       	mov	r3, r1
     b2e:	20 e0       	ldi	r18, 0x00	; 0
     b30:	20 32       	cpi	r18, 0x20	; 32
     b32:	a0 f4       	brcc	.+40     	; 0xb5c <vfprintf+0x88>
     b34:	8b 32       	cpi	r24, 0x2B	; 43
     b36:	69 f0       	breq	.+26     	; 0xb52 <vfprintf+0x7e>
     b38:	30 f4       	brcc	.+12     	; 0xb46 <vfprintf+0x72>
     b3a:	80 32       	cpi	r24, 0x20	; 32
     b3c:	59 f0       	breq	.+22     	; 0xb54 <vfprintf+0x80>
     b3e:	83 32       	cpi	r24, 0x23	; 35
     b40:	69 f4       	brne	.+26     	; 0xb5c <vfprintf+0x88>
     b42:	20 61       	ori	r18, 0x10	; 16
     b44:	2c c0       	rjmp	.+88     	; 0xb9e <vfprintf+0xca>
     b46:	8d 32       	cpi	r24, 0x2D	; 45
     b48:	39 f0       	breq	.+14     	; 0xb58 <vfprintf+0x84>
     b4a:	80 33       	cpi	r24, 0x30	; 48
     b4c:	39 f4       	brne	.+14     	; 0xb5c <vfprintf+0x88>
     b4e:	21 60       	ori	r18, 0x01	; 1
     b50:	26 c0       	rjmp	.+76     	; 0xb9e <vfprintf+0xca>
     b52:	22 60       	ori	r18, 0x02	; 2
     b54:	24 60       	ori	r18, 0x04	; 4
     b56:	23 c0       	rjmp	.+70     	; 0xb9e <vfprintf+0xca>
     b58:	28 60       	ori	r18, 0x08	; 8
     b5a:	21 c0       	rjmp	.+66     	; 0xb9e <vfprintf+0xca>
     b5c:	27 fd       	sbrc	r18, 7
     b5e:	27 c0       	rjmp	.+78     	; 0xbae <vfprintf+0xda>
     b60:	30 ed       	ldi	r19, 0xD0	; 208
     b62:	38 0f       	add	r19, r24
     b64:	3a 30       	cpi	r19, 0x0A	; 10
     b66:	78 f4       	brcc	.+30     	; 0xb86 <vfprintf+0xb2>
     b68:	26 ff       	sbrs	r18, 6
     b6a:	06 c0       	rjmp	.+12     	; 0xb78 <vfprintf+0xa4>
     b6c:	fa e0       	ldi	r31, 0x0A	; 10
     b6e:	5f 9e       	mul	r5, r31
     b70:	30 0d       	add	r19, r0
     b72:	11 24       	eor	r1, r1
     b74:	53 2e       	mov	r5, r19
     b76:	13 c0       	rjmp	.+38     	; 0xb9e <vfprintf+0xca>
     b78:	8a e0       	ldi	r24, 0x0A	; 10
     b7a:	38 9e       	mul	r3, r24
     b7c:	30 0d       	add	r19, r0
     b7e:	11 24       	eor	r1, r1
     b80:	33 2e       	mov	r3, r19
     b82:	20 62       	ori	r18, 0x20	; 32
     b84:	0c c0       	rjmp	.+24     	; 0xb9e <vfprintf+0xca>
     b86:	8e 32       	cpi	r24, 0x2E	; 46
     b88:	21 f4       	brne	.+8      	; 0xb92 <vfprintf+0xbe>
     b8a:	26 fd       	sbrc	r18, 6
     b8c:	6b c1       	rjmp	.+726    	; 0xe64 <vfprintf+0x390>
     b8e:	20 64       	ori	r18, 0x40	; 64
     b90:	06 c0       	rjmp	.+12     	; 0xb9e <vfprintf+0xca>
     b92:	8c 36       	cpi	r24, 0x6C	; 108
     b94:	11 f4       	brne	.+4      	; 0xb9a <vfprintf+0xc6>
     b96:	20 68       	ori	r18, 0x80	; 128
     b98:	02 c0       	rjmp	.+4      	; 0xb9e <vfprintf+0xca>
     b9a:	88 36       	cpi	r24, 0x68	; 104
     b9c:	41 f4       	brne	.+16     	; 0xbae <vfprintf+0xda>
     b9e:	f6 01       	movw	r30, r12
     ba0:	93 fd       	sbrc	r25, 3
     ba2:	85 91       	lpm	r24, Z+
     ba4:	93 ff       	sbrs	r25, 3
     ba6:	81 91       	ld	r24, Z+
     ba8:	6f 01       	movw	r12, r30
     baa:	81 11       	cpse	r24, r1
     bac:	c1 cf       	rjmp	.-126    	; 0xb30 <vfprintf+0x5c>
     bae:	98 2f       	mov	r25, r24
     bb0:	9f 7d       	andi	r25, 0xDF	; 223
     bb2:	95 54       	subi	r25, 0x45	; 69
     bb4:	93 30       	cpi	r25, 0x03	; 3
     bb6:	28 f4       	brcc	.+10     	; 0xbc2 <vfprintf+0xee>
     bb8:	0c 5f       	subi	r16, 0xFC	; 252
     bba:	1f 4f       	sbci	r17, 0xFF	; 255
     bbc:	ff e3       	ldi	r31, 0x3F	; 63
     bbe:	f9 83       	std	Y+1, r31	; 0x01
     bc0:	0d c0       	rjmp	.+26     	; 0xbdc <vfprintf+0x108>
     bc2:	83 36       	cpi	r24, 0x63	; 99
     bc4:	31 f0       	breq	.+12     	; 0xbd2 <vfprintf+0xfe>
     bc6:	83 37       	cpi	r24, 0x73	; 115
     bc8:	71 f0       	breq	.+28     	; 0xbe6 <vfprintf+0x112>
     bca:	83 35       	cpi	r24, 0x53	; 83
     bcc:	09 f0       	breq	.+2      	; 0xbd0 <vfprintf+0xfc>
     bce:	5b c0       	rjmp	.+182    	; 0xc86 <vfprintf+0x1b2>
     bd0:	22 c0       	rjmp	.+68     	; 0xc16 <vfprintf+0x142>
     bd2:	f8 01       	movw	r30, r16
     bd4:	80 81       	ld	r24, Z
     bd6:	89 83       	std	Y+1, r24	; 0x01
     bd8:	0e 5f       	subi	r16, 0xFE	; 254
     bda:	1f 4f       	sbci	r17, 0xFF	; 255
     bdc:	44 24       	eor	r4, r4
     bde:	43 94       	inc	r4
     be0:	51 2c       	mov	r5, r1
     be2:	54 01       	movw	r10, r8
     be4:	15 c0       	rjmp	.+42     	; 0xc10 <vfprintf+0x13c>
     be6:	38 01       	movw	r6, r16
     be8:	f2 e0       	ldi	r31, 0x02	; 2
     bea:	6f 0e       	add	r6, r31
     bec:	71 1c       	adc	r7, r1
     bee:	f8 01       	movw	r30, r16
     bf0:	a0 80       	ld	r10, Z
     bf2:	b1 80       	ldd	r11, Z+1	; 0x01
     bf4:	26 ff       	sbrs	r18, 6
     bf6:	03 c0       	rjmp	.+6      	; 0xbfe <vfprintf+0x12a>
     bf8:	65 2d       	mov	r22, r5
     bfa:	70 e0       	ldi	r23, 0x00	; 0
     bfc:	02 c0       	rjmp	.+4      	; 0xc02 <vfprintf+0x12e>
     bfe:	6f ef       	ldi	r22, 0xFF	; 255
     c00:	7f ef       	ldi	r23, 0xFF	; 255
     c02:	c5 01       	movw	r24, r10
     c04:	2c 87       	std	Y+12, r18	; 0x0c
     c06:	0e 94 91 08 	call	0x1122	; 0x1122 <strnlen>
     c0a:	2c 01       	movw	r4, r24
     c0c:	83 01       	movw	r16, r6
     c0e:	2c 85       	ldd	r18, Y+12	; 0x0c
     c10:	2f 77       	andi	r18, 0x7F	; 127
     c12:	22 2e       	mov	r2, r18
     c14:	17 c0       	rjmp	.+46     	; 0xc44 <vfprintf+0x170>
     c16:	38 01       	movw	r6, r16
     c18:	f2 e0       	ldi	r31, 0x02	; 2
     c1a:	6f 0e       	add	r6, r31
     c1c:	71 1c       	adc	r7, r1
     c1e:	f8 01       	movw	r30, r16
     c20:	a0 80       	ld	r10, Z
     c22:	b1 80       	ldd	r11, Z+1	; 0x01
     c24:	26 ff       	sbrs	r18, 6
     c26:	03 c0       	rjmp	.+6      	; 0xc2e <vfprintf+0x15a>
     c28:	65 2d       	mov	r22, r5
     c2a:	70 e0       	ldi	r23, 0x00	; 0
     c2c:	02 c0       	rjmp	.+4      	; 0xc32 <vfprintf+0x15e>
     c2e:	6f ef       	ldi	r22, 0xFF	; 255
     c30:	7f ef       	ldi	r23, 0xFF	; 255
     c32:	c5 01       	movw	r24, r10
     c34:	2c 87       	std	Y+12, r18	; 0x0c
     c36:	0e 94 7f 08 	call	0x10fe	; 0x10fe <strnlen_P>
     c3a:	2c 01       	movw	r4, r24
     c3c:	2c 85       	ldd	r18, Y+12	; 0x0c
     c3e:	20 68       	ori	r18, 0x80	; 128
     c40:	22 2e       	mov	r2, r18
     c42:	83 01       	movw	r16, r6
     c44:	23 fc       	sbrc	r2, 3
     c46:	1b c0       	rjmp	.+54     	; 0xc7e <vfprintf+0x1aa>
     c48:	83 2d       	mov	r24, r3
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	48 16       	cp	r4, r24
     c4e:	59 06       	cpc	r5, r25
     c50:	b0 f4       	brcc	.+44     	; 0xc7e <vfprintf+0x1aa>
     c52:	b7 01       	movw	r22, r14
     c54:	80 e2       	ldi	r24, 0x20	; 32
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	0e 94 9c 08 	call	0x1138	; 0x1138 <fputc>
     c5c:	3a 94       	dec	r3
     c5e:	f4 cf       	rjmp	.-24     	; 0xc48 <vfprintf+0x174>
     c60:	f5 01       	movw	r30, r10
     c62:	27 fc       	sbrc	r2, 7
     c64:	85 91       	lpm	r24, Z+
     c66:	27 fe       	sbrs	r2, 7
     c68:	81 91       	ld	r24, Z+
     c6a:	5f 01       	movw	r10, r30
     c6c:	b7 01       	movw	r22, r14
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	0e 94 9c 08 	call	0x1138	; 0x1138 <fputc>
     c74:	31 10       	cpse	r3, r1
     c76:	3a 94       	dec	r3
     c78:	f1 e0       	ldi	r31, 0x01	; 1
     c7a:	4f 1a       	sub	r4, r31
     c7c:	51 08       	sbc	r5, r1
     c7e:	41 14       	cp	r4, r1
     c80:	51 04       	cpc	r5, r1
     c82:	71 f7       	brne	.-36     	; 0xc60 <vfprintf+0x18c>
     c84:	e5 c0       	rjmp	.+458    	; 0xe50 <vfprintf+0x37c>
     c86:	84 36       	cpi	r24, 0x64	; 100
     c88:	11 f0       	breq	.+4      	; 0xc8e <vfprintf+0x1ba>
     c8a:	89 36       	cpi	r24, 0x69	; 105
     c8c:	39 f5       	brne	.+78     	; 0xcdc <vfprintf+0x208>
     c8e:	f8 01       	movw	r30, r16
     c90:	27 ff       	sbrs	r18, 7
     c92:	07 c0       	rjmp	.+14     	; 0xca2 <vfprintf+0x1ce>
     c94:	60 81       	ld	r22, Z
     c96:	71 81       	ldd	r23, Z+1	; 0x01
     c98:	82 81       	ldd	r24, Z+2	; 0x02
     c9a:	93 81       	ldd	r25, Z+3	; 0x03
     c9c:	0c 5f       	subi	r16, 0xFC	; 252
     c9e:	1f 4f       	sbci	r17, 0xFF	; 255
     ca0:	08 c0       	rjmp	.+16     	; 0xcb2 <vfprintf+0x1de>
     ca2:	60 81       	ld	r22, Z
     ca4:	71 81       	ldd	r23, Z+1	; 0x01
     ca6:	88 27       	eor	r24, r24
     ca8:	77 fd       	sbrc	r23, 7
     caa:	80 95       	com	r24
     cac:	98 2f       	mov	r25, r24
     cae:	0e 5f       	subi	r16, 0xFE	; 254
     cb0:	1f 4f       	sbci	r17, 0xFF	; 255
     cb2:	2f 76       	andi	r18, 0x6F	; 111
     cb4:	b2 2e       	mov	r11, r18
     cb6:	97 ff       	sbrs	r25, 7
     cb8:	09 c0       	rjmp	.+18     	; 0xccc <vfprintf+0x1f8>
     cba:	90 95       	com	r25
     cbc:	80 95       	com	r24
     cbe:	70 95       	com	r23
     cc0:	61 95       	neg	r22
     cc2:	7f 4f       	sbci	r23, 0xFF	; 255
     cc4:	8f 4f       	sbci	r24, 0xFF	; 255
     cc6:	9f 4f       	sbci	r25, 0xFF	; 255
     cc8:	20 68       	ori	r18, 0x80	; 128
     cca:	b2 2e       	mov	r11, r18
     ccc:	2a e0       	ldi	r18, 0x0A	; 10
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	a4 01       	movw	r20, r8
     cd2:	0e 94 ce 08 	call	0x119c	; 0x119c <__ultoa_invert>
     cd6:	a8 2e       	mov	r10, r24
     cd8:	a8 18       	sub	r10, r8
     cda:	44 c0       	rjmp	.+136    	; 0xd64 <vfprintf+0x290>
     cdc:	85 37       	cpi	r24, 0x75	; 117
     cde:	29 f4       	brne	.+10     	; 0xcea <vfprintf+0x216>
     ce0:	2f 7e       	andi	r18, 0xEF	; 239
     ce2:	b2 2e       	mov	r11, r18
     ce4:	2a e0       	ldi	r18, 0x0A	; 10
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	25 c0       	rjmp	.+74     	; 0xd34 <vfprintf+0x260>
     cea:	f2 2f       	mov	r31, r18
     cec:	f9 7f       	andi	r31, 0xF9	; 249
     cee:	bf 2e       	mov	r11, r31
     cf0:	8f 36       	cpi	r24, 0x6F	; 111
     cf2:	c1 f0       	breq	.+48     	; 0xd24 <vfprintf+0x250>
     cf4:	18 f4       	brcc	.+6      	; 0xcfc <vfprintf+0x228>
     cf6:	88 35       	cpi	r24, 0x58	; 88
     cf8:	79 f0       	breq	.+30     	; 0xd18 <vfprintf+0x244>
     cfa:	b4 c0       	rjmp	.+360    	; 0xe64 <vfprintf+0x390>
     cfc:	80 37       	cpi	r24, 0x70	; 112
     cfe:	19 f0       	breq	.+6      	; 0xd06 <vfprintf+0x232>
     d00:	88 37       	cpi	r24, 0x78	; 120
     d02:	21 f0       	breq	.+8      	; 0xd0c <vfprintf+0x238>
     d04:	af c0       	rjmp	.+350    	; 0xe64 <vfprintf+0x390>
     d06:	2f 2f       	mov	r18, r31
     d08:	20 61       	ori	r18, 0x10	; 16
     d0a:	b2 2e       	mov	r11, r18
     d0c:	b4 fe       	sbrs	r11, 4
     d0e:	0d c0       	rjmp	.+26     	; 0xd2a <vfprintf+0x256>
     d10:	8b 2d       	mov	r24, r11
     d12:	84 60       	ori	r24, 0x04	; 4
     d14:	b8 2e       	mov	r11, r24
     d16:	09 c0       	rjmp	.+18     	; 0xd2a <vfprintf+0x256>
     d18:	24 ff       	sbrs	r18, 4
     d1a:	0a c0       	rjmp	.+20     	; 0xd30 <vfprintf+0x25c>
     d1c:	9f 2f       	mov	r25, r31
     d1e:	96 60       	ori	r25, 0x06	; 6
     d20:	b9 2e       	mov	r11, r25
     d22:	06 c0       	rjmp	.+12     	; 0xd30 <vfprintf+0x25c>
     d24:	28 e0       	ldi	r18, 0x08	; 8
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	05 c0       	rjmp	.+10     	; 0xd34 <vfprintf+0x260>
     d2a:	20 e1       	ldi	r18, 0x10	; 16
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	02 c0       	rjmp	.+4      	; 0xd34 <vfprintf+0x260>
     d30:	20 e1       	ldi	r18, 0x10	; 16
     d32:	32 e0       	ldi	r19, 0x02	; 2
     d34:	f8 01       	movw	r30, r16
     d36:	b7 fe       	sbrs	r11, 7
     d38:	07 c0       	rjmp	.+14     	; 0xd48 <vfprintf+0x274>
     d3a:	60 81       	ld	r22, Z
     d3c:	71 81       	ldd	r23, Z+1	; 0x01
     d3e:	82 81       	ldd	r24, Z+2	; 0x02
     d40:	93 81       	ldd	r25, Z+3	; 0x03
     d42:	0c 5f       	subi	r16, 0xFC	; 252
     d44:	1f 4f       	sbci	r17, 0xFF	; 255
     d46:	06 c0       	rjmp	.+12     	; 0xd54 <vfprintf+0x280>
     d48:	60 81       	ld	r22, Z
     d4a:	71 81       	ldd	r23, Z+1	; 0x01
     d4c:	80 e0       	ldi	r24, 0x00	; 0
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	0e 5f       	subi	r16, 0xFE	; 254
     d52:	1f 4f       	sbci	r17, 0xFF	; 255
     d54:	a4 01       	movw	r20, r8
     d56:	0e 94 ce 08 	call	0x119c	; 0x119c <__ultoa_invert>
     d5a:	a8 2e       	mov	r10, r24
     d5c:	a8 18       	sub	r10, r8
     d5e:	fb 2d       	mov	r31, r11
     d60:	ff 77       	andi	r31, 0x7F	; 127
     d62:	bf 2e       	mov	r11, r31
     d64:	b6 fe       	sbrs	r11, 6
     d66:	0b c0       	rjmp	.+22     	; 0xd7e <vfprintf+0x2aa>
     d68:	2b 2d       	mov	r18, r11
     d6a:	2e 7f       	andi	r18, 0xFE	; 254
     d6c:	a5 14       	cp	r10, r5
     d6e:	50 f4       	brcc	.+20     	; 0xd84 <vfprintf+0x2b0>
     d70:	b4 fe       	sbrs	r11, 4
     d72:	0a c0       	rjmp	.+20     	; 0xd88 <vfprintf+0x2b4>
     d74:	b2 fc       	sbrc	r11, 2
     d76:	08 c0       	rjmp	.+16     	; 0xd88 <vfprintf+0x2b4>
     d78:	2b 2d       	mov	r18, r11
     d7a:	2e 7e       	andi	r18, 0xEE	; 238
     d7c:	05 c0       	rjmp	.+10     	; 0xd88 <vfprintf+0x2b4>
     d7e:	7a 2c       	mov	r7, r10
     d80:	2b 2d       	mov	r18, r11
     d82:	03 c0       	rjmp	.+6      	; 0xd8a <vfprintf+0x2b6>
     d84:	7a 2c       	mov	r7, r10
     d86:	01 c0       	rjmp	.+2      	; 0xd8a <vfprintf+0x2b6>
     d88:	75 2c       	mov	r7, r5
     d8a:	24 ff       	sbrs	r18, 4
     d8c:	0d c0       	rjmp	.+26     	; 0xda8 <vfprintf+0x2d4>
     d8e:	fe 01       	movw	r30, r28
     d90:	ea 0d       	add	r30, r10
     d92:	f1 1d       	adc	r31, r1
     d94:	80 81       	ld	r24, Z
     d96:	80 33       	cpi	r24, 0x30	; 48
     d98:	11 f4       	brne	.+4      	; 0xd9e <vfprintf+0x2ca>
     d9a:	29 7e       	andi	r18, 0xE9	; 233
     d9c:	09 c0       	rjmp	.+18     	; 0xdb0 <vfprintf+0x2dc>
     d9e:	22 ff       	sbrs	r18, 2
     da0:	06 c0       	rjmp	.+12     	; 0xdae <vfprintf+0x2da>
     da2:	73 94       	inc	r7
     da4:	73 94       	inc	r7
     da6:	04 c0       	rjmp	.+8      	; 0xdb0 <vfprintf+0x2dc>
     da8:	82 2f       	mov	r24, r18
     daa:	86 78       	andi	r24, 0x86	; 134
     dac:	09 f0       	breq	.+2      	; 0xdb0 <vfprintf+0x2dc>
     dae:	73 94       	inc	r7
     db0:	23 fd       	sbrc	r18, 3
     db2:	13 c0       	rjmp	.+38     	; 0xdda <vfprintf+0x306>
     db4:	20 ff       	sbrs	r18, 0
     db6:	06 c0       	rjmp	.+12     	; 0xdc4 <vfprintf+0x2f0>
     db8:	5a 2c       	mov	r5, r10
     dba:	73 14       	cp	r7, r3
     dbc:	18 f4       	brcc	.+6      	; 0xdc4 <vfprintf+0x2f0>
     dbe:	53 0c       	add	r5, r3
     dc0:	57 18       	sub	r5, r7
     dc2:	73 2c       	mov	r7, r3
     dc4:	73 14       	cp	r7, r3
     dc6:	68 f4       	brcc	.+26     	; 0xde2 <vfprintf+0x30e>
     dc8:	b7 01       	movw	r22, r14
     dca:	80 e2       	ldi	r24, 0x20	; 32
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	2c 87       	std	Y+12, r18	; 0x0c
     dd0:	0e 94 9c 08 	call	0x1138	; 0x1138 <fputc>
     dd4:	73 94       	inc	r7
     dd6:	2c 85       	ldd	r18, Y+12	; 0x0c
     dd8:	f5 cf       	rjmp	.-22     	; 0xdc4 <vfprintf+0x2f0>
     dda:	73 14       	cp	r7, r3
     ddc:	10 f4       	brcc	.+4      	; 0xde2 <vfprintf+0x30e>
     dde:	37 18       	sub	r3, r7
     de0:	01 c0       	rjmp	.+2      	; 0xde4 <vfprintf+0x310>
     de2:	31 2c       	mov	r3, r1
     de4:	24 ff       	sbrs	r18, 4
     de6:	12 c0       	rjmp	.+36     	; 0xe0c <vfprintf+0x338>
     de8:	b7 01       	movw	r22, r14
     dea:	80 e3       	ldi	r24, 0x30	; 48
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	2c 87       	std	Y+12, r18	; 0x0c
     df0:	0e 94 9c 08 	call	0x1138	; 0x1138 <fputc>
     df4:	2c 85       	ldd	r18, Y+12	; 0x0c
     df6:	22 ff       	sbrs	r18, 2
     df8:	17 c0       	rjmp	.+46     	; 0xe28 <vfprintf+0x354>
     dfa:	21 ff       	sbrs	r18, 1
     dfc:	03 c0       	rjmp	.+6      	; 0xe04 <vfprintf+0x330>
     dfe:	88 e5       	ldi	r24, 0x58	; 88
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	02 c0       	rjmp	.+4      	; 0xe08 <vfprintf+0x334>
     e04:	88 e7       	ldi	r24, 0x78	; 120
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	b7 01       	movw	r22, r14
     e0a:	0c c0       	rjmp	.+24     	; 0xe24 <vfprintf+0x350>
     e0c:	82 2f       	mov	r24, r18
     e0e:	86 78       	andi	r24, 0x86	; 134
     e10:	59 f0       	breq	.+22     	; 0xe28 <vfprintf+0x354>
     e12:	21 fd       	sbrc	r18, 1
     e14:	02 c0       	rjmp	.+4      	; 0xe1a <vfprintf+0x346>
     e16:	80 e2       	ldi	r24, 0x20	; 32
     e18:	01 c0       	rjmp	.+2      	; 0xe1c <vfprintf+0x348>
     e1a:	8b e2       	ldi	r24, 0x2B	; 43
     e1c:	27 fd       	sbrc	r18, 7
     e1e:	8d e2       	ldi	r24, 0x2D	; 45
     e20:	b7 01       	movw	r22, r14
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	0e 94 9c 08 	call	0x1138	; 0x1138 <fputc>
     e28:	a5 14       	cp	r10, r5
     e2a:	38 f4       	brcc	.+14     	; 0xe3a <vfprintf+0x366>
     e2c:	b7 01       	movw	r22, r14
     e2e:	80 e3       	ldi	r24, 0x30	; 48
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	0e 94 9c 08 	call	0x1138	; 0x1138 <fputc>
     e36:	5a 94       	dec	r5
     e38:	f7 cf       	rjmp	.-18     	; 0xe28 <vfprintf+0x354>
     e3a:	aa 94       	dec	r10
     e3c:	f4 01       	movw	r30, r8
     e3e:	ea 0d       	add	r30, r10
     e40:	f1 1d       	adc	r31, r1
     e42:	80 81       	ld	r24, Z
     e44:	b7 01       	movw	r22, r14
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	0e 94 9c 08 	call	0x1138	; 0x1138 <fputc>
     e4c:	a1 10       	cpse	r10, r1
     e4e:	f5 cf       	rjmp	.-22     	; 0xe3a <vfprintf+0x366>
     e50:	33 20       	and	r3, r3
     e52:	09 f4       	brne	.+2      	; 0xe56 <vfprintf+0x382>
     e54:	51 ce       	rjmp	.-862    	; 0xaf8 <vfprintf+0x24>
     e56:	b7 01       	movw	r22, r14
     e58:	80 e2       	ldi	r24, 0x20	; 32
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	0e 94 9c 08 	call	0x1138	; 0x1138 <fputc>
     e60:	3a 94       	dec	r3
     e62:	f6 cf       	rjmp	.-20     	; 0xe50 <vfprintf+0x37c>
     e64:	f7 01       	movw	r30, r14
     e66:	86 81       	ldd	r24, Z+6	; 0x06
     e68:	97 81       	ldd	r25, Z+7	; 0x07
     e6a:	02 c0       	rjmp	.+4      	; 0xe70 <vfprintf+0x39c>
     e6c:	8f ef       	ldi	r24, 0xFF	; 255
     e6e:	9f ef       	ldi	r25, 0xFF	; 255
     e70:	2c 96       	adiw	r28, 0x0c	; 12
     e72:	e2 e1       	ldi	r30, 0x12	; 18
     e74:	0c 94 48 09 	jmp	0x1290	; 0x1290 <__epilogue_restores__>

00000e78 <calloc>:
     e78:	0f 93       	push	r16
     e7a:	1f 93       	push	r17
     e7c:	cf 93       	push	r28
     e7e:	df 93       	push	r29
     e80:	86 9f       	mul	r24, r22
     e82:	80 01       	movw	r16, r0
     e84:	87 9f       	mul	r24, r23
     e86:	10 0d       	add	r17, r0
     e88:	96 9f       	mul	r25, r22
     e8a:	10 0d       	add	r17, r0
     e8c:	11 24       	eor	r1, r1
     e8e:	c8 01       	movw	r24, r16
     e90:	0e 94 58 07 	call	0xeb0	; 0xeb0 <malloc>
     e94:	ec 01       	movw	r28, r24
     e96:	00 97       	sbiw	r24, 0x00	; 0
     e98:	29 f0       	breq	.+10     	; 0xea4 <calloc+0x2c>
     e9a:	a8 01       	movw	r20, r16
     e9c:	60 e0       	ldi	r22, 0x00	; 0
     e9e:	70 e0       	ldi	r23, 0x00	; 0
     ea0:	0e 94 8a 08 	call	0x1114	; 0x1114 <memset>
     ea4:	ce 01       	movw	r24, r28
     ea6:	df 91       	pop	r29
     ea8:	cf 91       	pop	r28
     eaa:	1f 91       	pop	r17
     eac:	0f 91       	pop	r16
     eae:	08 95       	ret

00000eb0 <malloc>:
     eb0:	cf 93       	push	r28
     eb2:	df 93       	push	r29
     eb4:	82 30       	cpi	r24, 0x02	; 2
     eb6:	91 05       	cpc	r25, r1
     eb8:	10 f4       	brcc	.+4      	; 0xebe <malloc+0xe>
     eba:	82 e0       	ldi	r24, 0x02	; 2
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	e0 91 5c 03 	lds	r30, 0x035C
     ec2:	f0 91 5d 03 	lds	r31, 0x035D
     ec6:	20 e0       	ldi	r18, 0x00	; 0
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	a0 e0       	ldi	r26, 0x00	; 0
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	30 97       	sbiw	r30, 0x00	; 0
     ed0:	39 f1       	breq	.+78     	; 0xf20 <malloc+0x70>
     ed2:	40 81       	ld	r20, Z
     ed4:	51 81       	ldd	r21, Z+1	; 0x01
     ed6:	48 17       	cp	r20, r24
     ed8:	59 07       	cpc	r21, r25
     eda:	b8 f0       	brcs	.+46     	; 0xf0a <malloc+0x5a>
     edc:	48 17       	cp	r20, r24
     ede:	59 07       	cpc	r21, r25
     ee0:	71 f4       	brne	.+28     	; 0xefe <malloc+0x4e>
     ee2:	82 81       	ldd	r24, Z+2	; 0x02
     ee4:	93 81       	ldd	r25, Z+3	; 0x03
     ee6:	10 97       	sbiw	r26, 0x00	; 0
     ee8:	29 f0       	breq	.+10     	; 0xef4 <malloc+0x44>
     eea:	13 96       	adiw	r26, 0x03	; 3
     eec:	9c 93       	st	X, r25
     eee:	8e 93       	st	-X, r24
     ef0:	12 97       	sbiw	r26, 0x02	; 2
     ef2:	2c c0       	rjmp	.+88     	; 0xf4c <malloc+0x9c>
     ef4:	90 93 5d 03 	sts	0x035D, r25
     ef8:	80 93 5c 03 	sts	0x035C, r24
     efc:	27 c0       	rjmp	.+78     	; 0xf4c <malloc+0x9c>
     efe:	21 15       	cp	r18, r1
     f00:	31 05       	cpc	r19, r1
     f02:	31 f0       	breq	.+12     	; 0xf10 <malloc+0x60>
     f04:	42 17       	cp	r20, r18
     f06:	53 07       	cpc	r21, r19
     f08:	18 f0       	brcs	.+6      	; 0xf10 <malloc+0x60>
     f0a:	a9 01       	movw	r20, r18
     f0c:	db 01       	movw	r26, r22
     f0e:	01 c0       	rjmp	.+2      	; 0xf12 <malloc+0x62>
     f10:	ef 01       	movw	r28, r30
     f12:	9a 01       	movw	r18, r20
     f14:	bd 01       	movw	r22, r26
     f16:	df 01       	movw	r26, r30
     f18:	02 80       	ldd	r0, Z+2	; 0x02
     f1a:	f3 81       	ldd	r31, Z+3	; 0x03
     f1c:	e0 2d       	mov	r30, r0
     f1e:	d7 cf       	rjmp	.-82     	; 0xece <malloc+0x1e>
     f20:	21 15       	cp	r18, r1
     f22:	31 05       	cpc	r19, r1
     f24:	f9 f0       	breq	.+62     	; 0xf64 <malloc+0xb4>
     f26:	28 1b       	sub	r18, r24
     f28:	39 0b       	sbc	r19, r25
     f2a:	24 30       	cpi	r18, 0x04	; 4
     f2c:	31 05       	cpc	r19, r1
     f2e:	80 f4       	brcc	.+32     	; 0xf50 <malloc+0xa0>
     f30:	8a 81       	ldd	r24, Y+2	; 0x02
     f32:	9b 81       	ldd	r25, Y+3	; 0x03
     f34:	61 15       	cp	r22, r1
     f36:	71 05       	cpc	r23, r1
     f38:	21 f0       	breq	.+8      	; 0xf42 <malloc+0x92>
     f3a:	fb 01       	movw	r30, r22
     f3c:	93 83       	std	Z+3, r25	; 0x03
     f3e:	82 83       	std	Z+2, r24	; 0x02
     f40:	04 c0       	rjmp	.+8      	; 0xf4a <malloc+0x9a>
     f42:	90 93 5d 03 	sts	0x035D, r25
     f46:	80 93 5c 03 	sts	0x035C, r24
     f4a:	fe 01       	movw	r30, r28
     f4c:	32 96       	adiw	r30, 0x02	; 2
     f4e:	44 c0       	rjmp	.+136    	; 0xfd8 <malloc+0x128>
     f50:	fe 01       	movw	r30, r28
     f52:	e2 0f       	add	r30, r18
     f54:	f3 1f       	adc	r31, r19
     f56:	81 93       	st	Z+, r24
     f58:	91 93       	st	Z+, r25
     f5a:	22 50       	subi	r18, 0x02	; 2
     f5c:	31 09       	sbc	r19, r1
     f5e:	39 83       	std	Y+1, r19	; 0x01
     f60:	28 83       	st	Y, r18
     f62:	3a c0       	rjmp	.+116    	; 0xfd8 <malloc+0x128>
     f64:	20 91 5a 03 	lds	r18, 0x035A
     f68:	30 91 5b 03 	lds	r19, 0x035B
     f6c:	23 2b       	or	r18, r19
     f6e:	41 f4       	brne	.+16     	; 0xf80 <malloc+0xd0>
     f70:	20 91 02 01 	lds	r18, 0x0102
     f74:	30 91 03 01 	lds	r19, 0x0103
     f78:	30 93 5b 03 	sts	0x035B, r19
     f7c:	20 93 5a 03 	sts	0x035A, r18
     f80:	20 91 00 01 	lds	r18, 0x0100
     f84:	30 91 01 01 	lds	r19, 0x0101
     f88:	21 15       	cp	r18, r1
     f8a:	31 05       	cpc	r19, r1
     f8c:	41 f4       	brne	.+16     	; 0xf9e <malloc+0xee>
     f8e:	2d b7       	in	r18, 0x3d	; 61
     f90:	3e b7       	in	r19, 0x3e	; 62
     f92:	40 91 04 01 	lds	r20, 0x0104
     f96:	50 91 05 01 	lds	r21, 0x0105
     f9a:	24 1b       	sub	r18, r20
     f9c:	35 0b       	sbc	r19, r21
     f9e:	e0 91 5a 03 	lds	r30, 0x035A
     fa2:	f0 91 5b 03 	lds	r31, 0x035B
     fa6:	e2 17       	cp	r30, r18
     fa8:	f3 07       	cpc	r31, r19
     faa:	a0 f4       	brcc	.+40     	; 0xfd4 <malloc+0x124>
     fac:	2e 1b       	sub	r18, r30
     fae:	3f 0b       	sbc	r19, r31
     fb0:	28 17       	cp	r18, r24
     fb2:	39 07       	cpc	r19, r25
     fb4:	78 f0       	brcs	.+30     	; 0xfd4 <malloc+0x124>
     fb6:	ac 01       	movw	r20, r24
     fb8:	4e 5f       	subi	r20, 0xFE	; 254
     fba:	5f 4f       	sbci	r21, 0xFF	; 255
     fbc:	24 17       	cp	r18, r20
     fbe:	35 07       	cpc	r19, r21
     fc0:	48 f0       	brcs	.+18     	; 0xfd4 <malloc+0x124>
     fc2:	4e 0f       	add	r20, r30
     fc4:	5f 1f       	adc	r21, r31
     fc6:	50 93 5b 03 	sts	0x035B, r21
     fca:	40 93 5a 03 	sts	0x035A, r20
     fce:	81 93       	st	Z+, r24
     fd0:	91 93       	st	Z+, r25
     fd2:	02 c0       	rjmp	.+4      	; 0xfd8 <malloc+0x128>
     fd4:	e0 e0       	ldi	r30, 0x00	; 0
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	cf 01       	movw	r24, r30
     fda:	df 91       	pop	r29
     fdc:	cf 91       	pop	r28
     fde:	08 95       	ret

00000fe0 <free>:
     fe0:	cf 93       	push	r28
     fe2:	df 93       	push	r29
     fe4:	00 97       	sbiw	r24, 0x00	; 0
     fe6:	09 f4       	brne	.+2      	; 0xfea <free+0xa>
     fe8:	87 c0       	rjmp	.+270    	; 0x10f8 <free+0x118>
     fea:	fc 01       	movw	r30, r24
     fec:	32 97       	sbiw	r30, 0x02	; 2
     fee:	13 82       	std	Z+3, r1	; 0x03
     ff0:	12 82       	std	Z+2, r1	; 0x02
     ff2:	c0 91 5c 03 	lds	r28, 0x035C
     ff6:	d0 91 5d 03 	lds	r29, 0x035D
     ffa:	20 97       	sbiw	r28, 0x00	; 0
     ffc:	81 f4       	brne	.+32     	; 0x101e <free+0x3e>
     ffe:	20 81       	ld	r18, Z
    1000:	31 81       	ldd	r19, Z+1	; 0x01
    1002:	28 0f       	add	r18, r24
    1004:	39 1f       	adc	r19, r25
    1006:	80 91 5a 03 	lds	r24, 0x035A
    100a:	90 91 5b 03 	lds	r25, 0x035B
    100e:	82 17       	cp	r24, r18
    1010:	93 07       	cpc	r25, r19
    1012:	79 f5       	brne	.+94     	; 0x1072 <free+0x92>
    1014:	f0 93 5b 03 	sts	0x035B, r31
    1018:	e0 93 5a 03 	sts	0x035A, r30
    101c:	6d c0       	rjmp	.+218    	; 0x10f8 <free+0x118>
    101e:	de 01       	movw	r26, r28
    1020:	20 e0       	ldi	r18, 0x00	; 0
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	ae 17       	cp	r26, r30
    1026:	bf 07       	cpc	r27, r31
    1028:	50 f4       	brcc	.+20     	; 0x103e <free+0x5e>
    102a:	12 96       	adiw	r26, 0x02	; 2
    102c:	4d 91       	ld	r20, X+
    102e:	5c 91       	ld	r21, X
    1030:	13 97       	sbiw	r26, 0x03	; 3
    1032:	9d 01       	movw	r18, r26
    1034:	41 15       	cp	r20, r1
    1036:	51 05       	cpc	r21, r1
    1038:	09 f1       	breq	.+66     	; 0x107c <free+0x9c>
    103a:	da 01       	movw	r26, r20
    103c:	f3 cf       	rjmp	.-26     	; 0x1024 <free+0x44>
    103e:	b3 83       	std	Z+3, r27	; 0x03
    1040:	a2 83       	std	Z+2, r26	; 0x02
    1042:	40 81       	ld	r20, Z
    1044:	51 81       	ldd	r21, Z+1	; 0x01
    1046:	84 0f       	add	r24, r20
    1048:	95 1f       	adc	r25, r21
    104a:	8a 17       	cp	r24, r26
    104c:	9b 07       	cpc	r25, r27
    104e:	71 f4       	brne	.+28     	; 0x106c <free+0x8c>
    1050:	8d 91       	ld	r24, X+
    1052:	9c 91       	ld	r25, X
    1054:	11 97       	sbiw	r26, 0x01	; 1
    1056:	84 0f       	add	r24, r20
    1058:	95 1f       	adc	r25, r21
    105a:	02 96       	adiw	r24, 0x02	; 2
    105c:	91 83       	std	Z+1, r25	; 0x01
    105e:	80 83       	st	Z, r24
    1060:	12 96       	adiw	r26, 0x02	; 2
    1062:	8d 91       	ld	r24, X+
    1064:	9c 91       	ld	r25, X
    1066:	13 97       	sbiw	r26, 0x03	; 3
    1068:	93 83       	std	Z+3, r25	; 0x03
    106a:	82 83       	std	Z+2, r24	; 0x02
    106c:	21 15       	cp	r18, r1
    106e:	31 05       	cpc	r19, r1
    1070:	29 f4       	brne	.+10     	; 0x107c <free+0x9c>
    1072:	f0 93 5d 03 	sts	0x035D, r31
    1076:	e0 93 5c 03 	sts	0x035C, r30
    107a:	3e c0       	rjmp	.+124    	; 0x10f8 <free+0x118>
    107c:	d9 01       	movw	r26, r18
    107e:	13 96       	adiw	r26, 0x03	; 3
    1080:	fc 93       	st	X, r31
    1082:	ee 93       	st	-X, r30
    1084:	12 97       	sbiw	r26, 0x02	; 2
    1086:	4d 91       	ld	r20, X+
    1088:	5d 91       	ld	r21, X+
    108a:	a4 0f       	add	r26, r20
    108c:	b5 1f       	adc	r27, r21
    108e:	ea 17       	cp	r30, r26
    1090:	fb 07       	cpc	r31, r27
    1092:	79 f4       	brne	.+30     	; 0x10b2 <free+0xd2>
    1094:	80 81       	ld	r24, Z
    1096:	91 81       	ldd	r25, Z+1	; 0x01
    1098:	84 0f       	add	r24, r20
    109a:	95 1f       	adc	r25, r21
    109c:	02 96       	adiw	r24, 0x02	; 2
    109e:	d9 01       	movw	r26, r18
    10a0:	11 96       	adiw	r26, 0x01	; 1
    10a2:	9c 93       	st	X, r25
    10a4:	8e 93       	st	-X, r24
    10a6:	82 81       	ldd	r24, Z+2	; 0x02
    10a8:	93 81       	ldd	r25, Z+3	; 0x03
    10aa:	13 96       	adiw	r26, 0x03	; 3
    10ac:	9c 93       	st	X, r25
    10ae:	8e 93       	st	-X, r24
    10b0:	12 97       	sbiw	r26, 0x02	; 2
    10b2:	e0 e0       	ldi	r30, 0x00	; 0
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	8a 81       	ldd	r24, Y+2	; 0x02
    10b8:	9b 81       	ldd	r25, Y+3	; 0x03
    10ba:	00 97       	sbiw	r24, 0x00	; 0
    10bc:	19 f0       	breq	.+6      	; 0x10c4 <free+0xe4>
    10be:	fe 01       	movw	r30, r28
    10c0:	ec 01       	movw	r28, r24
    10c2:	f9 cf       	rjmp	.-14     	; 0x10b6 <free+0xd6>
    10c4:	ce 01       	movw	r24, r28
    10c6:	02 96       	adiw	r24, 0x02	; 2
    10c8:	28 81       	ld	r18, Y
    10ca:	39 81       	ldd	r19, Y+1	; 0x01
    10cc:	82 0f       	add	r24, r18
    10ce:	93 1f       	adc	r25, r19
    10d0:	20 91 5a 03 	lds	r18, 0x035A
    10d4:	30 91 5b 03 	lds	r19, 0x035B
    10d8:	28 17       	cp	r18, r24
    10da:	39 07       	cpc	r19, r25
    10dc:	69 f4       	brne	.+26     	; 0x10f8 <free+0x118>
    10de:	30 97       	sbiw	r30, 0x00	; 0
    10e0:	29 f4       	brne	.+10     	; 0x10ec <free+0x10c>
    10e2:	10 92 5d 03 	sts	0x035D, r1
    10e6:	10 92 5c 03 	sts	0x035C, r1
    10ea:	02 c0       	rjmp	.+4      	; 0x10f0 <free+0x110>
    10ec:	13 82       	std	Z+3, r1	; 0x03
    10ee:	12 82       	std	Z+2, r1	; 0x02
    10f0:	d0 93 5b 03 	sts	0x035B, r29
    10f4:	c0 93 5a 03 	sts	0x035A, r28
    10f8:	df 91       	pop	r29
    10fa:	cf 91       	pop	r28
    10fc:	08 95       	ret

000010fe <strnlen_P>:
    10fe:	fc 01       	movw	r30, r24
    1100:	05 90       	lpm	r0, Z+
    1102:	61 50       	subi	r22, 0x01	; 1
    1104:	70 40       	sbci	r23, 0x00	; 0
    1106:	01 10       	cpse	r0, r1
    1108:	d8 f7       	brcc	.-10     	; 0x1100 <strnlen_P+0x2>
    110a:	80 95       	com	r24
    110c:	90 95       	com	r25
    110e:	8e 0f       	add	r24, r30
    1110:	9f 1f       	adc	r25, r31
    1112:	08 95       	ret

00001114 <memset>:
    1114:	dc 01       	movw	r26, r24
    1116:	01 c0       	rjmp	.+2      	; 0x111a <memset+0x6>
    1118:	6d 93       	st	X+, r22
    111a:	41 50       	subi	r20, 0x01	; 1
    111c:	50 40       	sbci	r21, 0x00	; 0
    111e:	e0 f7       	brcc	.-8      	; 0x1118 <memset+0x4>
    1120:	08 95       	ret

00001122 <strnlen>:
    1122:	fc 01       	movw	r30, r24
    1124:	61 50       	subi	r22, 0x01	; 1
    1126:	70 40       	sbci	r23, 0x00	; 0
    1128:	01 90       	ld	r0, Z+
    112a:	01 10       	cpse	r0, r1
    112c:	d8 f7       	brcc	.-10     	; 0x1124 <strnlen+0x2>
    112e:	80 95       	com	r24
    1130:	90 95       	com	r25
    1132:	8e 0f       	add	r24, r30
    1134:	9f 1f       	adc	r25, r31
    1136:	08 95       	ret

00001138 <fputc>:
    1138:	0f 93       	push	r16
    113a:	1f 93       	push	r17
    113c:	cf 93       	push	r28
    113e:	df 93       	push	r29
    1140:	18 2f       	mov	r17, r24
    1142:	09 2f       	mov	r16, r25
    1144:	eb 01       	movw	r28, r22
    1146:	8b 81       	ldd	r24, Y+3	; 0x03
    1148:	81 fd       	sbrc	r24, 1
    114a:	03 c0       	rjmp	.+6      	; 0x1152 <fputc+0x1a>
    114c:	8f ef       	ldi	r24, 0xFF	; 255
    114e:	9f ef       	ldi	r25, 0xFF	; 255
    1150:	20 c0       	rjmp	.+64     	; 0x1192 <fputc+0x5a>
    1152:	82 ff       	sbrs	r24, 2
    1154:	10 c0       	rjmp	.+32     	; 0x1176 <fputc+0x3e>
    1156:	4e 81       	ldd	r20, Y+6	; 0x06
    1158:	5f 81       	ldd	r21, Y+7	; 0x07
    115a:	2c 81       	ldd	r18, Y+4	; 0x04
    115c:	3d 81       	ldd	r19, Y+5	; 0x05
    115e:	42 17       	cp	r20, r18
    1160:	53 07       	cpc	r21, r19
    1162:	7c f4       	brge	.+30     	; 0x1182 <fputc+0x4a>
    1164:	e8 81       	ld	r30, Y
    1166:	f9 81       	ldd	r31, Y+1	; 0x01
    1168:	9f 01       	movw	r18, r30
    116a:	2f 5f       	subi	r18, 0xFF	; 255
    116c:	3f 4f       	sbci	r19, 0xFF	; 255
    116e:	39 83       	std	Y+1, r19	; 0x01
    1170:	28 83       	st	Y, r18
    1172:	10 83       	st	Z, r17
    1174:	06 c0       	rjmp	.+12     	; 0x1182 <fputc+0x4a>
    1176:	e8 85       	ldd	r30, Y+8	; 0x08
    1178:	f9 85       	ldd	r31, Y+9	; 0x09
    117a:	81 2f       	mov	r24, r17
    117c:	09 95       	icall
    117e:	89 2b       	or	r24, r25
    1180:	29 f7       	brne	.-54     	; 0x114c <fputc+0x14>
    1182:	2e 81       	ldd	r18, Y+6	; 0x06
    1184:	3f 81       	ldd	r19, Y+7	; 0x07
    1186:	2f 5f       	subi	r18, 0xFF	; 255
    1188:	3f 4f       	sbci	r19, 0xFF	; 255
    118a:	3f 83       	std	Y+7, r19	; 0x07
    118c:	2e 83       	std	Y+6, r18	; 0x06
    118e:	81 2f       	mov	r24, r17
    1190:	90 2f       	mov	r25, r16
    1192:	df 91       	pop	r29
    1194:	cf 91       	pop	r28
    1196:	1f 91       	pop	r17
    1198:	0f 91       	pop	r16
    119a:	08 95       	ret

0000119c <__ultoa_invert>:
    119c:	fa 01       	movw	r30, r20
    119e:	aa 27       	eor	r26, r26
    11a0:	28 30       	cpi	r18, 0x08	; 8
    11a2:	51 f1       	breq	.+84     	; 0x11f8 <__ultoa_invert+0x5c>
    11a4:	20 31       	cpi	r18, 0x10	; 16
    11a6:	81 f1       	breq	.+96     	; 0x1208 <__ultoa_invert+0x6c>
    11a8:	e8 94       	clt
    11aa:	6f 93       	push	r22
    11ac:	6e 7f       	andi	r22, 0xFE	; 254
    11ae:	6e 5f       	subi	r22, 0xFE	; 254
    11b0:	7f 4f       	sbci	r23, 0xFF	; 255
    11b2:	8f 4f       	sbci	r24, 0xFF	; 255
    11b4:	9f 4f       	sbci	r25, 0xFF	; 255
    11b6:	af 4f       	sbci	r26, 0xFF	; 255
    11b8:	b1 e0       	ldi	r27, 0x01	; 1
    11ba:	3e d0       	rcall	.+124    	; 0x1238 <__ultoa_invert+0x9c>
    11bc:	b4 e0       	ldi	r27, 0x04	; 4
    11be:	3c d0       	rcall	.+120    	; 0x1238 <__ultoa_invert+0x9c>
    11c0:	67 0f       	add	r22, r23
    11c2:	78 1f       	adc	r23, r24
    11c4:	89 1f       	adc	r24, r25
    11c6:	9a 1f       	adc	r25, r26
    11c8:	a1 1d       	adc	r26, r1
    11ca:	68 0f       	add	r22, r24
    11cc:	79 1f       	adc	r23, r25
    11ce:	8a 1f       	adc	r24, r26
    11d0:	91 1d       	adc	r25, r1
    11d2:	a1 1d       	adc	r26, r1
    11d4:	6a 0f       	add	r22, r26
    11d6:	71 1d       	adc	r23, r1
    11d8:	81 1d       	adc	r24, r1
    11da:	91 1d       	adc	r25, r1
    11dc:	a1 1d       	adc	r26, r1
    11de:	20 d0       	rcall	.+64     	; 0x1220 <__ultoa_invert+0x84>
    11e0:	09 f4       	brne	.+2      	; 0x11e4 <__ultoa_invert+0x48>
    11e2:	68 94       	set
    11e4:	3f 91       	pop	r19
    11e6:	2a e0       	ldi	r18, 0x0A	; 10
    11e8:	26 9f       	mul	r18, r22
    11ea:	11 24       	eor	r1, r1
    11ec:	30 19       	sub	r19, r0
    11ee:	30 5d       	subi	r19, 0xD0	; 208
    11f0:	31 93       	st	Z+, r19
    11f2:	de f6       	brtc	.-74     	; 0x11aa <__ultoa_invert+0xe>
    11f4:	cf 01       	movw	r24, r30
    11f6:	08 95       	ret
    11f8:	46 2f       	mov	r20, r22
    11fa:	47 70       	andi	r20, 0x07	; 7
    11fc:	40 5d       	subi	r20, 0xD0	; 208
    11fe:	41 93       	st	Z+, r20
    1200:	b3 e0       	ldi	r27, 0x03	; 3
    1202:	0f d0       	rcall	.+30     	; 0x1222 <__ultoa_invert+0x86>
    1204:	c9 f7       	brne	.-14     	; 0x11f8 <__ultoa_invert+0x5c>
    1206:	f6 cf       	rjmp	.-20     	; 0x11f4 <__ultoa_invert+0x58>
    1208:	46 2f       	mov	r20, r22
    120a:	4f 70       	andi	r20, 0x0F	; 15
    120c:	40 5d       	subi	r20, 0xD0	; 208
    120e:	4a 33       	cpi	r20, 0x3A	; 58
    1210:	18 f0       	brcs	.+6      	; 0x1218 <__ultoa_invert+0x7c>
    1212:	49 5d       	subi	r20, 0xD9	; 217
    1214:	31 fd       	sbrc	r19, 1
    1216:	40 52       	subi	r20, 0x20	; 32
    1218:	41 93       	st	Z+, r20
    121a:	02 d0       	rcall	.+4      	; 0x1220 <__ultoa_invert+0x84>
    121c:	a9 f7       	brne	.-22     	; 0x1208 <__ultoa_invert+0x6c>
    121e:	ea cf       	rjmp	.-44     	; 0x11f4 <__ultoa_invert+0x58>
    1220:	b4 e0       	ldi	r27, 0x04	; 4
    1222:	a6 95       	lsr	r26
    1224:	97 95       	ror	r25
    1226:	87 95       	ror	r24
    1228:	77 95       	ror	r23
    122a:	67 95       	ror	r22
    122c:	ba 95       	dec	r27
    122e:	c9 f7       	brne	.-14     	; 0x1222 <__ultoa_invert+0x86>
    1230:	00 97       	sbiw	r24, 0x00	; 0
    1232:	61 05       	cpc	r22, r1
    1234:	71 05       	cpc	r23, r1
    1236:	08 95       	ret
    1238:	9b 01       	movw	r18, r22
    123a:	ac 01       	movw	r20, r24
    123c:	0a 2e       	mov	r0, r26
    123e:	06 94       	lsr	r0
    1240:	57 95       	ror	r21
    1242:	47 95       	ror	r20
    1244:	37 95       	ror	r19
    1246:	27 95       	ror	r18
    1248:	ba 95       	dec	r27
    124a:	c9 f7       	brne	.-14     	; 0x123e <__ultoa_invert+0xa2>
    124c:	62 0f       	add	r22, r18
    124e:	73 1f       	adc	r23, r19
    1250:	84 1f       	adc	r24, r20
    1252:	95 1f       	adc	r25, r21
    1254:	a0 1d       	adc	r26, r0
    1256:	08 95       	ret

00001258 <__prologue_saves__>:
    1258:	2f 92       	push	r2
    125a:	3f 92       	push	r3
    125c:	4f 92       	push	r4
    125e:	5f 92       	push	r5
    1260:	6f 92       	push	r6
    1262:	7f 92       	push	r7
    1264:	8f 92       	push	r8
    1266:	9f 92       	push	r9
    1268:	af 92       	push	r10
    126a:	bf 92       	push	r11
    126c:	cf 92       	push	r12
    126e:	df 92       	push	r13
    1270:	ef 92       	push	r14
    1272:	ff 92       	push	r15
    1274:	0f 93       	push	r16
    1276:	1f 93       	push	r17
    1278:	cf 93       	push	r28
    127a:	df 93       	push	r29
    127c:	cd b7       	in	r28, 0x3d	; 61
    127e:	de b7       	in	r29, 0x3e	; 62
    1280:	ca 1b       	sub	r28, r26
    1282:	db 0b       	sbc	r29, r27
    1284:	0f b6       	in	r0, 0x3f	; 63
    1286:	f8 94       	cli
    1288:	de bf       	out	0x3e, r29	; 62
    128a:	0f be       	out	0x3f, r0	; 63
    128c:	cd bf       	out	0x3d, r28	; 61
    128e:	09 94       	ijmp

00001290 <__epilogue_restores__>:
    1290:	2a 88       	ldd	r2, Y+18	; 0x12
    1292:	39 88       	ldd	r3, Y+17	; 0x11
    1294:	48 88       	ldd	r4, Y+16	; 0x10
    1296:	5f 84       	ldd	r5, Y+15	; 0x0f
    1298:	6e 84       	ldd	r6, Y+14	; 0x0e
    129a:	7d 84       	ldd	r7, Y+13	; 0x0d
    129c:	8c 84       	ldd	r8, Y+12	; 0x0c
    129e:	9b 84       	ldd	r9, Y+11	; 0x0b
    12a0:	aa 84       	ldd	r10, Y+10	; 0x0a
    12a2:	b9 84       	ldd	r11, Y+9	; 0x09
    12a4:	c8 84       	ldd	r12, Y+8	; 0x08
    12a6:	df 80       	ldd	r13, Y+7	; 0x07
    12a8:	ee 80       	ldd	r14, Y+6	; 0x06
    12aa:	fd 80       	ldd	r15, Y+5	; 0x05
    12ac:	0c 81       	ldd	r16, Y+4	; 0x04
    12ae:	1b 81       	ldd	r17, Y+3	; 0x03
    12b0:	aa 81       	ldd	r26, Y+2	; 0x02
    12b2:	b9 81       	ldd	r27, Y+1	; 0x01
    12b4:	ce 0f       	add	r28, r30
    12b6:	d1 1d       	adc	r29, r1
    12b8:	0f b6       	in	r0, 0x3f	; 63
    12ba:	f8 94       	cli
    12bc:	de bf       	out	0x3e, r29	; 62
    12be:	0f be       	out	0x3f, r0	; 63
    12c0:	cd bf       	out	0x3d, r28	; 61
    12c2:	ed 01       	movw	r28, r26
    12c4:	08 95       	ret

000012c6 <_exit>:
    12c6:	f8 94       	cli

000012c8 <__stop_program>:
    12c8:	ff cf       	rjmp	.-2      	; 0x12c8 <__stop_program>
