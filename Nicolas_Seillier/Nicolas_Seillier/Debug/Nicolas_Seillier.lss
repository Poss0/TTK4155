
Nicolas_Seillier.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000013e  00800100  00001d12  00001da6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d12  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  0080023e  0080023e  00001ee4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001ee4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000270  00000000  00000000  00001f40  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000031e3  00000000  00000000  000021b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d90  00000000  00000000  00005393  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d94  00000000  00000000  00006123  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000590  00000000  00000000  00006eb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000634  00000000  00000000  00007448  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001089  00000000  00000000  00007a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001e8  00000000  00000000  00008b05  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__ctors_end>
       4:	0c 94 e9 03 	jmp	0x7d2	; 0x7d2 <__vector_1>
       8:	0c 94 7c 04 	jmp	0x8f8	; 0x8f8 <__vector_2>
       c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      10:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      14:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      18:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      1c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      20:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      24:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      28:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      2c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      30:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      34:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      38:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      3c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      40:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      44:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      48:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      4c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      50:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      54:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      58:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      5c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      60:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      64:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      68:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      6c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	00 00       	nop
      72:	00 00       	nop
      74:	00 5c       	subi	r16, 0xC0	; 192
      76:	00 00       	nop
      78:	0c 00       	.word	0x000c	; ????
      7a:	0c 00       	.word	0x000c	; ????
      7c:	7c 28       	or	r7, r12
      7e:	7c 28       	or	r7, r12
      80:	58 dc       	rcall	.-1872   	; 0xfffff932 <__eeprom_end+0xff7ef932>
      82:	68 00       	.word	0x0068	; ????
      84:	24 10       	cpse	r2, r4
      86:	48 00       	.word	0x0048	; ????
      88:	28 54       	subi	r18, 0x48	; 72
      8a:	28 40       	sbci	r18, 0x08	; 8
      8c:	00 0c       	add	r0, r0
      8e:	00 00       	nop
      90:	00 78       	andi	r16, 0x80	; 128
      92:	84 00       	.word	0x0084	; ????
      94:	84 78       	andi	r24, 0x84	; 132
      96:	00 00       	nop
      98:	54 38       	cpi	r21, 0x84	; 132
      9a:	54 00       	.word	0x0054	; ????
      9c:	10 7c       	andi	r17, 0xC0	; 192
      9e:	10 00       	.word	0x0010	; ????
      a0:	80 40       	sbci	r24, 0x00	; 0
      a2:	00 00       	nop
      a4:	10 10       	cpse	r1, r0
      a6:	10 00       	.word	0x0010	; ????
      a8:	00 40       	sbci	r16, 0x00	; 0
      aa:	00 00       	nop
      ac:	60 10       	cpse	r6, r0
      ae:	0c 00       	.word	0x000c	; ????
      b0:	38 54       	subi	r19, 0x48	; 72
      b2:	38 00       	.word	0x0038	; ????
      b4:	48 7c       	andi	r20, 0xC8	; 200
      b6:	40 00       	.word	0x0040	; ????
      b8:	48 64       	ori	r20, 0x48	; 72
      ba:	58 00       	.word	0x0058	; ????
      bc:	44 54       	subi	r20, 0x44	; 68
      be:	2c 00       	.word	0x002c	; ????
      c0:	1c 10       	cpse	r1, r12
      c2:	7c 00       	.word	0x007c	; ????
      c4:	5c 54       	subi	r21, 0x4C	; 76
      c6:	24 00       	.word	0x0024	; ????
      c8:	38 54       	subi	r19, 0x48	; 72
      ca:	24 00       	.word	0x0024	; ????
      cc:	64 14       	cp	r6, r4
      ce:	0c 00       	.word	0x000c	; ????
      d0:	68 54       	subi	r22, 0x48	; 72
      d2:	2c 00       	.word	0x002c	; ????
      d4:	48 54       	subi	r20, 0x48	; 72
      d6:	38 00       	.word	0x0038	; ????
      d8:	00 48       	sbci	r16, 0x80	; 128
      da:	00 00       	nop
      dc:	80 48       	sbci	r24, 0x80	; 128
      de:	00 00       	nop
      e0:	10 28       	or	r1, r0
      e2:	44 00       	.word	0x0044	; ????
      e4:	28 28       	or	r2, r8
      e6:	28 00       	.word	0x0028	; ????
      e8:	44 28       	or	r4, r4
      ea:	10 00       	.word	0x0010	; ????
      ec:	04 54       	subi	r16, 0x44	; 68
      ee:	08 00       	.word	0x0008	; ????
      f0:	38 44       	sbci	r19, 0x48	; 72
      f2:	5c 00       	.word	0x005c	; ????
      f4:	78 14       	cp	r7, r8
      f6:	78 00       	.word	0x0078	; ????
      f8:	7c 54       	subi	r23, 0x4C	; 76
      fa:	28 00       	.word	0x0028	; ????
      fc:	38 44       	sbci	r19, 0x48	; 72
      fe:	28 00       	.word	0x0028	; ????
     100:	7c 44       	sbci	r23, 0x4C	; 76
     102:	38 00       	.word	0x0038	; ????
     104:	7c 54       	subi	r23, 0x4C	; 76
     106:	44 00       	.word	0x0044	; ????
     108:	7c 14       	cp	r7, r12
     10a:	04 00       	.word	0x0004	; ????
     10c:	38 44       	sbci	r19, 0x48	; 72
     10e:	74 00       	.word	0x0074	; ????
     110:	7c 10       	cpse	r7, r12
     112:	7c 00       	.word	0x007c	; ????
     114:	44 7c       	andi	r20, 0xC4	; 196
     116:	44 00       	.word	0x0044	; ????
     118:	20 40       	sbci	r18, 0x00	; 0
     11a:	3c 00       	.word	0x003c	; ????
     11c:	7c 10       	cpse	r7, r12
     11e:	6c 00       	.word	0x006c	; ????
     120:	7c 40       	sbci	r23, 0x0C	; 12
     122:	40 00       	.word	0x0040	; ????
     124:	7c 18       	sub	r7, r12
     126:	7c 00       	.word	0x007c	; ????
     128:	78 10       	cpse	r7, r8
     12a:	3c 00       	.word	0x003c	; ????
     12c:	38 44       	sbci	r19, 0x48	; 72
     12e:	38 00       	.word	0x0038	; ????
     130:	7c 14       	cp	r7, r12
     132:	08 00       	.word	0x0008	; ????
     134:	38 44       	sbci	r19, 0x48	; 72
     136:	b8 00       	.word	0x00b8	; ????
     138:	7c 14       	cp	r7, r12
     13a:	68 00       	.word	0x0068	; ????
     13c:	48 54       	subi	r20, 0x48	; 72
     13e:	24 00       	.word	0x0024	; ????
     140:	04 7c       	andi	r16, 0xC4	; 196
     142:	04 00       	.word	0x0004	; ????
     144:	7c 40       	sbci	r23, 0x0C	; 12
     146:	7c 00       	.word	0x007c	; ????
     148:	3c 60       	ori	r19, 0x0C	; 12
     14a:	3c 00       	.word	0x003c	; ????
     14c:	7c 30       	cpi	r23, 0x0C	; 12
     14e:	7c 00       	.word	0x007c	; ????
     150:	6c 10       	cpse	r6, r12
     152:	6c 00       	.word	0x006c	; ????
     154:	0c 70       	andi	r16, 0x0C	; 12
     156:	0c 00       	.word	0x000c	; ????
     158:	64 54       	subi	r22, 0x44	; 68
     15a:	4c 00       	.word	0x004c	; ????
     15c:	00 7c       	andi	r16, 0xC0	; 192
     15e:	44 00       	.word	0x0044	; ????
     160:	0c 10       	cpse	r0, r12
     162:	60 00       	.word	0x0060	; ????
     164:	44 7c       	andi	r20, 0xC4	; 196
     166:	00 00       	nop
     168:	08 04       	cpc	r0, r8
     16a:	08 00       	.word	0x0008	; ????
     16c:	80 80       	ld	r8, Z
     16e:	80 00       	.word	0x0080	; ????
     170:	00 04       	cpc	r0, r0
     172:	08 00       	.word	0x0008	; ????
     174:	30 48       	sbci	r19, 0x80	; 128
     176:	78 00       	.word	0x0078	; ????
     178:	7c 48       	sbci	r23, 0x8C	; 140
     17a:	30 00       	.word	0x0030	; ????
     17c:	30 48       	sbci	r19, 0x80	; 128
     17e:	48 00       	.word	0x0048	; ????
     180:	30 48       	sbci	r19, 0x80	; 128
     182:	7c 00       	.word	0x007c	; ????
     184:	30 68       	ori	r19, 0x80	; 128
     186:	50 00       	.word	0x0050	; ????
     188:	10 78       	andi	r17, 0x80	; 128
     18a:	14 00       	.word	0x0014	; ????
     18c:	90 a8       	ldd	r9, Z+48	; 0x30
     18e:	78 00       	.word	0x0078	; ????
     190:	7c 08       	sbc	r7, r12
     192:	70 00       	.word	0x0070	; ????
     194:	50 74       	andi	r21, 0x40	; 64
     196:	40 00       	.word	0x0040	; ????
     198:	80 80       	ld	r8, Z
     19a:	74 00       	.word	0x0074	; ????
     19c:	7c 10       	cpse	r7, r12
     19e:	68 00       	.word	0x0068	; ????
     1a0:	44 7c       	andi	r20, 0xC4	; 196
     1a2:	40 00       	.word	0x0040	; ????
     1a4:	78 10       	cpse	r7, r8
     1a6:	78 00       	.word	0x0078	; ????
     1a8:	78 08       	sbc	r7, r8
     1aa:	70 00       	.word	0x0070	; ????
     1ac:	30 48       	sbci	r19, 0x80	; 128
     1ae:	30 00       	.word	0x0030	; ????
     1b0:	f8 28       	or	r15, r8
     1b2:	10 00       	.word	0x0010	; ????
     1b4:	30 48       	sbci	r19, 0x80	; 128
     1b6:	f8 00       	.word	0x00f8	; ????
     1b8:	78 10       	cpse	r7, r8
     1ba:	08 00       	.word	0x0008	; ????
     1bc:	50 58       	subi	r21, 0x80	; 128
     1be:	28 00       	.word	0x0028	; ????
     1c0:	08 3c       	cpi	r16, 0xC8	; 200
     1c2:	48 00       	.word	0x0048	; ????
     1c4:	38 40       	sbci	r19, 0x08	; 8
     1c6:	78 00       	.word	0x0078	; ????
     1c8:	38 40       	sbci	r19, 0x08	; 8
     1ca:	38 00       	.word	0x0038	; ????
     1cc:	78 20       	and	r7, r8
     1ce:	78 00       	.word	0x0078	; ????
     1d0:	48 30       	cpi	r20, 0x08	; 8
     1d2:	48 00       	.word	0x0048	; ????
     1d4:	98 a0       	ldd	r9, Y+32	; 0x20
     1d6:	78 00       	.word	0x0078	; ????
     1d8:	48 68       	ori	r20, 0x88	; 136
     1da:	58 00       	.word	0x0058	; ????
     1dc:	10 78       	andi	r17, 0x80	; 128
     1de:	84 00       	.word	0x0084	; ????
     1e0:	00 7c       	andi	r16, 0xC0	; 192
     1e2:	00 00       	nop
     1e4:	84 78       	andi	r24, 0x84	; 132
     1e6:	10 00       	.word	0x0010	; ????
     1e8:	08 04       	cpc	r0, r8
     1ea:	08 04       	cpc	r0, r8

000001ec <__ctors_end>:
     1ec:	11 24       	eor	r1, r1
     1ee:	1f be       	out	0x3f, r1	; 63
     1f0:	cf ef       	ldi	r28, 0xFF	; 255
     1f2:	d4 e0       	ldi	r29, 0x04	; 4
     1f4:	de bf       	out	0x3e, r29	; 62
     1f6:	cd bf       	out	0x3d, r28	; 61

000001f8 <__do_copy_data>:
     1f8:	12 e0       	ldi	r17, 0x02	; 2
     1fa:	a0 e0       	ldi	r26, 0x00	; 0
     1fc:	b1 e0       	ldi	r27, 0x01	; 1
     1fe:	e2 e1       	ldi	r30, 0x12	; 18
     200:	fd e1       	ldi	r31, 0x1D	; 29
     202:	02 c0       	rjmp	.+4      	; 0x208 <__do_copy_data+0x10>
     204:	05 90       	lpm	r0, Z+
     206:	0d 92       	st	X+, r0
     208:	ae 33       	cpi	r26, 0x3E	; 62
     20a:	b1 07       	cpc	r27, r17
     20c:	d9 f7       	brne	.-10     	; 0x204 <__do_copy_data+0xc>

0000020e <__do_clear_bss>:
     20e:	22 e0       	ldi	r18, 0x02	; 2
     210:	ae e3       	ldi	r26, 0x3E	; 62
     212:	b2 e0       	ldi	r27, 0x02	; 2
     214:	01 c0       	rjmp	.+2      	; 0x218 <.do_clear_bss_start>

00000216 <.do_clear_bss_loop>:
     216:	1d 92       	st	X+, r1

00000218 <.do_clear_bss_start>:
     218:	ad 34       	cpi	r26, 0x4D	; 77
     21a:	b2 07       	cpc	r27, r18
     21c:	e1 f7       	brne	.-8      	; 0x216 <.do_clear_bss_loop>
     21e:	0e 94 ff 05 	call	0xbfe	; 0xbfe <main>
     222:	0c 94 87 0e 	jmp	0x1d0e	; 0x1d0e <_exit>

00000226 <__bad_interrupt>:
     226:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000022a <ADC_Convert>:

uint8_t ADC_Convert(uint8_t channel)
{
	/* Start conversion on the selected channel: write on command pins */
	volatile char* adc = (char *) ADC;
	adc[0] = channel;
     22a:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     22e:	83 ef       	ldi	r24, 0xF3	; 243
     230:	91 e0       	ldi	r25, 0x01	; 1
     232:	01 97       	sbiw	r24, 0x01	; 1
     234:	f1 f7       	brne	.-4      	; 0x232 <ADC_Convert+0x8>
     236:	00 c0       	rjmp	.+0      	; 0x238 <ADC_Convert+0xe>
     238:	00 00       	nop
	/* Wait for the conversion to be performed */
	_delay_ms(2);
	/* Read the result */
	return adc[0];
     23a:	80 91 00 14 	lds	r24, 0x1400
}
     23e:	08 95       	ret

00000240 <CAN_init>:
#include "MCP251DEFS.h"
#include "CAN.h"

void CAN_init()
{
	SPI_Init();
     240:	0e 94 ed 07 	call	0xfda	; 0xfda <SPI_Init>
	MCP2515_RESET();
     244:	0e 94 99 03 	call	0x732	; 0x732 <MCP2515_RESET>
     248:	87 ea       	ldi	r24, 0xA7	; 167
     24a:	91 e6       	ldi	r25, 0x61	; 97
     24c:	01 97       	sbiw	r24, 0x01	; 1
     24e:	f1 f7       	brne	.-4      	; 0x24c <CAN_init+0xc>
     250:	00 c0       	rjmp	.+0      	; 0x252 <CAN_init+0x12>
     252:	00 00       	nop
	_delay_ms(100);
	
	/*loop back mode*/
	MCP2515_BIT_MODIFY(MCP_CANCTRL, MODE_MASK, MODE_LOOPBACK);
     254:	40 e4       	ldi	r20, 0x40	; 64
     256:	60 ee       	ldi	r22, 0xE0	; 224
     258:	8f e0       	ldi	r24, 0x0F	; 15
     25a:	0e 94 cf 03 	call	0x79e	; 0x79e <MCP2515_BIT_MODIFY>
	
	/*enable interrupts*/
	MCP2515_BIT_MODIFY(MCP_CANINTE, 0b00000001, 0b00000001);
     25e:	41 e0       	ldi	r20, 0x01	; 1
     260:	61 e0       	ldi	r22, 0x01	; 1
     262:	8b e2       	ldi	r24, 0x2B	; 43
     264:	0e 94 cf 03 	call	0x79e	; 0x79e <MCP2515_BIT_MODIFY>
     268:	08 95       	ret

0000026a <CAN_send>:
}

void CAN_send(MSG* message)
{	
     26a:	ef 92       	push	r14
     26c:	ff 92       	push	r15
     26e:	0f 93       	push	r16
     270:	1f 93       	push	r17
     272:	cf 93       	push	r28
     274:	df 93       	push	r29
     276:	7c 01       	movw	r14, r24
	/*write ID*/
	int ID_l = (message->ID & 0x07) << 5;
     278:	fc 01       	movw	r30, r24
     27a:	40 81       	ld	r20, Z
     27c:	51 81       	ldd	r21, Z+1	; 0x01
     27e:	44 0f       	add	r20, r20
     280:	55 1f       	adc	r21, r21
     282:	42 95       	swap	r20
     284:	52 95       	swap	r21
     286:	50 7f       	andi	r21, 0xF0	; 240
     288:	54 27       	eor	r21, r20
     28a:	40 7f       	andi	r20, 0xF0	; 240
     28c:	54 27       	eor	r21, r20
     28e:	55 27       	eor	r21, r21
	MCP2515_BIT_MODIFY(MCP_TXB0SIDL,0xE0,ID_l);
     290:	60 ee       	ldi	r22, 0xE0	; 224
     292:	82 e3       	ldi	r24, 0x32	; 50
     294:	0e 94 cf 03 	call	0x79e	; 0x79e <MCP2515_BIT_MODIFY>
	
	int ID_h = (message->ID & 0xFFF8) >> 3;
     298:	f7 01       	movw	r30, r14
     29a:	60 81       	ld	r22, Z
     29c:	71 81       	ldd	r23, Z+1	; 0x01
     29e:	76 95       	lsr	r23
     2a0:	67 95       	ror	r22
     2a2:	76 95       	lsr	r23
     2a4:	67 95       	ror	r22
     2a6:	76 95       	lsr	r23
     2a8:	67 95       	ror	r22
	MCP2515_WRITE(MCP_TXB0SIDH,ID_h);
     2aa:	81 e3       	ldi	r24, 0x31	; 49
     2ac:	0e 94 b3 03 	call	0x766	; 0x766 <MCP2515_WRITE>
	
	/*write data length*/
	int length = message->length;
	MCP2515_BIT_MODIFY(MCP_TXB0DLC,0x0F,length);
     2b0:	f7 01       	movw	r30, r14
     2b2:	42 81       	ldd	r20, Z+2	; 0x02
     2b4:	6f e0       	ldi	r22, 0x0F	; 15
     2b6:	85 e3       	ldi	r24, 0x35	; 53
     2b8:	0e 94 cf 03 	call	0x79e	; 0x79e <MCP2515_BIT_MODIFY>
	
	/*write the message in the chosen buffer*/
	for (int i=0; i<message->length; i++)
     2bc:	f7 01       	movw	r30, r14
     2be:	82 81       	ldd	r24, Z+2	; 0x02
     2c0:	93 81       	ldd	r25, Z+3	; 0x03
     2c2:	18 16       	cp	r1, r24
     2c4:	19 06       	cpc	r1, r25
     2c6:	9c f4       	brge	.+38     	; 0x2ee <CAN_send+0x84>
     2c8:	87 01       	movw	r16, r14
     2ca:	0c 5f       	subi	r16, 0xFC	; 252
     2cc:	1f 4f       	sbci	r17, 0xFF	; 255
     2ce:	c0 e0       	ldi	r28, 0x00	; 0
     2d0:	d0 e0       	ldi	r29, 0x00	; 0
	{
		MCP2515_WRITE(MCP_TXB0D0+i,message->data[i]);
     2d2:	f8 01       	movw	r30, r16
     2d4:	61 91       	ld	r22, Z+
     2d6:	8f 01       	movw	r16, r30
     2d8:	8c 2f       	mov	r24, r28
     2da:	8a 5c       	subi	r24, 0xCA	; 202
     2dc:	0e 94 b3 03 	call	0x766	; 0x766 <MCP2515_WRITE>
	/*write data length*/
	int length = message->length;
	MCP2515_BIT_MODIFY(MCP_TXB0DLC,0x0F,length);
	
	/*write the message in the chosen buffer*/
	for (int i=0; i<message->length; i++)
     2e0:	21 96       	adiw	r28, 0x01	; 1
     2e2:	f7 01       	movw	r30, r14
     2e4:	22 81       	ldd	r18, Z+2	; 0x02
     2e6:	33 81       	ldd	r19, Z+3	; 0x03
     2e8:	c2 17       	cp	r28, r18
     2ea:	d3 07       	cpc	r29, r19
     2ec:	94 f3       	brlt	.-28     	; 0x2d2 <CAN_send+0x68>
	{
		MCP2515_WRITE(MCP_TXB0D0+i,message->data[i]);
	}
	
	MCP2515_REQUEST_TO_SEND();
     2ee:	0e 94 c7 03 	call	0x78e	; 0x78e <MCP2515_REQUEST_TO_SEND>
}
     2f2:	df 91       	pop	r29
     2f4:	cf 91       	pop	r28
     2f6:	1f 91       	pop	r17
     2f8:	0f 91       	pop	r16
     2fa:	ff 90       	pop	r15
     2fc:	ef 90       	pop	r14
     2fe:	08 95       	ret

00000300 <CAN_receive>:

MSG CAN_receive()
{
     300:	7f 92       	push	r7
     302:	8f 92       	push	r8
     304:	9f 92       	push	r9
     306:	af 92       	push	r10
     308:	bf 92       	push	r11
     30a:	cf 92       	push	r12
     30c:	df 92       	push	r13
     30e:	ef 92       	push	r14
     310:	ff 92       	push	r15
     312:	0f 93       	push	r16
     314:	1f 93       	push	r17
     316:	cf 93       	push	r28
     318:	df 93       	push	r29
     31a:	cd b7       	in	r28, 0x3d	; 61
     31c:	de b7       	in	r29, 0x3e	; 62
     31e:	2c 97       	sbiw	r28, 0x0c	; 12
     320:	0f b6       	in	r0, 0x3f	; 63
     322:	f8 94       	cli
     324:	de bf       	out	0x3e, r29	; 62
     326:	0f be       	out	0x3f, r0	; 63
     328:	cd bf       	out	0x3d, r28	; 61
     32a:	6c 01       	movw	r12, r24
	MSG message;
	
	int ID_l = MCP2515_READ(MCP_RXB0SIDL);
     32c:	82 e6       	ldi	r24, 0x62	; 98
     32e:	0e 94 a1 03 	call	0x742	; 0x742 <MCP2515_READ>
     332:	88 2e       	mov	r8, r24
	int ID_h = MCP2515_READ(MCP_RXB0SIDH);
     334:	81 e6       	ldi	r24, 0x61	; 97
     336:	0e 94 a1 03 	call	0x742	; 0x742 <MCP2515_READ>

MSG CAN_receive()
{
	MSG message;
	
	int ID_l = MCP2515_READ(MCP_RXB0SIDL);
     33a:	91 2c       	mov	r9, r1
	int ID_h = MCP2515_READ(MCP_RXB0SIDH);
	message.ID = ((ID_h << 3) + ((ID_l >> 5) & 0x7)) & 0xFF;
     33c:	96 94       	lsr	r9
     33e:	87 94       	ror	r8
     340:	96 94       	lsr	r9
     342:	87 94       	ror	r8
     344:	96 94       	lsr	r9
     346:	87 94       	ror	r8
     348:	96 94       	lsr	r9
     34a:	87 94       	ror	r8
     34c:	96 94       	lsr	r9
     34e:	87 94       	ror	r8
     350:	98 e0       	ldi	r25, 0x08	; 8
     352:	89 9f       	mul	r24, r25
     354:	80 0c       	add	r8, r0
     356:	91 1c       	adc	r9, r1
     358:	11 24       	eor	r1, r1
     35a:	99 24       	eor	r9, r9
		
	int length = MCP2515_READ(MCP_RXB0DLC);
     35c:	85 e6       	ldi	r24, 0x65	; 101
     35e:	0e 94 a1 03 	call	0x742	; 0x742 <MCP2515_READ>
	message.length = length & 0x0F;
     362:	98 2f       	mov	r25, r24
     364:	9f 70       	andi	r25, 0x0F	; 15
     366:	a9 2e       	mov	r10, r25
     368:	b1 2c       	mov	r11, r1
	
	for (int i=0; i<length; i++)
     36a:	88 23       	and	r24, r24
     36c:	a1 f0       	breq	.+40     	; 0x396 <CAN_receive+0x96>
     36e:	8e 01       	movw	r16, r28
     370:	0b 5f       	subi	r16, 0xFB	; 251
     372:	1f 4f       	sbci	r17, 0xFF	; 255
     374:	78 01       	movw	r14, r16
     376:	e8 0e       	add	r14, r24
     378:	f1 1c       	adc	r15, r1
     37a:	0f 2e       	mov	r0, r31
     37c:	f6 e6       	ldi	r31, 0x66	; 102
     37e:	7f 2e       	mov	r7, r31
     380:	f0 2d       	mov	r31, r0
	{
		message.data[i] = MCP2515_READ(MCP_RXB0D0+i);
     382:	87 2d       	mov	r24, r7
     384:	0e 94 a1 03 	call	0x742	; 0x742 <MCP2515_READ>
     388:	f8 01       	movw	r30, r16
     38a:	81 93       	st	Z+, r24
     38c:	8f 01       	movw	r16, r30
     38e:	73 94       	inc	r7
	message.ID = ((ID_h << 3) + ((ID_l >> 5) & 0x7)) & 0xFF;
		
	int length = MCP2515_READ(MCP_RXB0DLC);
	message.length = length & 0x0F;
	
	for (int i=0; i<length; i++)
     390:	ee 15       	cp	r30, r14
     392:	ff 05       	cpc	r31, r15
     394:	b1 f7       	brne	.-20     	; 0x382 <CAN_receive+0x82>
	{
		message.data[i] = MCP2515_READ(MCP_RXB0D0+i);
		
	}
	
	MCP2515_BIT_MODIFY(MCP_CANINTF,0b00000001,0b00000000);	
     396:	40 e0       	ldi	r20, 0x00	; 0
     398:	61 e0       	ldi	r22, 0x01	; 1
     39a:	8c e2       	ldi	r24, 0x2C	; 44
     39c:	0e 94 cf 03 	call	0x79e	; 0x79e <MCP2515_BIT_MODIFY>
		
	return message;
     3a0:	9a 82       	std	Y+2, r9	; 0x02
     3a2:	89 82       	std	Y+1, r8	; 0x01
     3a4:	bc 82       	std	Y+4, r11	; 0x04
     3a6:	ab 82       	std	Y+3, r10	; 0x03
     3a8:	8c e0       	ldi	r24, 0x0C	; 12
     3aa:	fe 01       	movw	r30, r28
     3ac:	31 96       	adiw	r30, 0x01	; 1
     3ae:	d6 01       	movw	r26, r12
     3b0:	01 90       	ld	r0, Z+
     3b2:	0d 92       	st	X+, r0
     3b4:	8a 95       	dec	r24
     3b6:	e1 f7       	brne	.-8      	; 0x3b0 <CAN_receive+0xb0>
     3b8:	c6 01       	movw	r24, r12
     3ba:	2c 96       	adiw	r28, 0x0c	; 12
     3bc:	0f b6       	in	r0, 0x3f	; 63
     3be:	f8 94       	cli
     3c0:	de bf       	out	0x3e, r29	; 62
     3c2:	0f be       	out	0x3f, r0	; 63
     3c4:	cd bf       	out	0x3d, r28	; 61
     3c6:	df 91       	pop	r29
     3c8:	cf 91       	pop	r28
     3ca:	1f 91       	pop	r17
     3cc:	0f 91       	pop	r16
     3ce:	ff 90       	pop	r15
     3d0:	ef 90       	pop	r14
     3d2:	df 90       	pop	r13
     3d4:	cf 90       	pop	r12
     3d6:	bf 90       	pop	r11
     3d8:	af 90       	pop	r10
     3da:	9f 90       	pop	r9
     3dc:	8f 90       	pop	r8
     3de:	7f 90       	pop	r7
     3e0:	08 95       	ret

000003e2 <draw_home>:
#include "OLED.h"
#include "Framework.h"

void draw_home()
{
	OLED_Reset();
     3e2:	0e 94 cd 06 	call	0xd9a	; 0xd9a <OLED_Reset>
	OLED_pos(1, 4);
     3e6:	64 e0       	ldi	r22, 0x04	; 4
     3e8:	81 e0       	ldi	r24, 0x01	; 1
     3ea:	0e 94 54 07 	call	0xea8	; 0xea8 <OLED_pos>
	OLED_print_string("Welcome to the best ping pong");
     3ee:	88 e0       	ldi	r24, 0x08	; 8
     3f0:	91 e0       	ldi	r25, 0x01	; 1
     3f2:	0e 94 76 07 	call	0xeec	; 0xeec <OLED_print_string>
	OLED_pos(3, 28);
     3f6:	6c e1       	ldi	r22, 0x1C	; 28
     3f8:	83 e0       	ldi	r24, 0x03	; 3
     3fa:	0e 94 54 07 	call	0xea8	; 0xea8 <OLED_pos>
	OLED_print_string("game in the world!");
     3fe:	86 e2       	ldi	r24, 0x26	; 38
     400:	91 e0       	ldi	r25, 0x01	; 1
     402:	0e 94 76 07 	call	0xeec	; 0xeec <OLED_print_string>
	OLED_pos(7, 20);
     406:	64 e1       	ldi	r22, 0x14	; 20
     408:	87 e0       	ldi	r24, 0x07	; 7
     40a:	0e 94 54 07 	call	0xea8	; 0xea8 <OLED_pos>
	OLED_print_string("Touch right to start!");
     40e:	89 e3       	ldi	r24, 0x39	; 57
     410:	91 e0       	ldi	r25, 0x01	; 1
     412:	0e 94 76 07 	call	0xeec	; 0xeec <OLED_print_string>
     416:	08 95       	ret

00000418 <draw_main_menu>:
}

void draw_main_menu()
{
	OLED_Reset();
     418:	0e 94 cd 06 	call	0xd9a	; 0xd9a <OLED_Reset>
	OLED_pos(0, 46);
     41c:	6e e2       	ldi	r22, 0x2E	; 46
     41e:	80 e0       	ldi	r24, 0x00	; 0
     420:	0e 94 54 07 	call	0xea8	; 0xea8 <OLED_pos>
	OLED_print_string("Main menu");	
     424:	8f e4       	ldi	r24, 0x4F	; 79
     426:	91 e0       	ldi	r25, 0x01	; 1
     428:	0e 94 76 07 	call	0xeec	; 0xeec <OLED_print_string>
	OLED_pos(2, 8);
     42c:	68 e0       	ldi	r22, 0x08	; 8
     42e:	82 e0       	ldi	r24, 0x02	; 2
     430:	0e 94 54 07 	call	0xea8	; 0xea8 <OLED_pos>
	OLED_print_arrow();
     434:	0e 94 94 07 	call	0xf28	; 0xf28 <OLED_print_arrow>
	OLED_pos(2, 20);
     438:	64 e1       	ldi	r22, 0x14	; 20
     43a:	82 e0       	ldi	r24, 0x02	; 2
     43c:	0e 94 54 07 	call	0xea8	; 0xea8 <OLED_pos>
	OLED_print_string("One-player mode");
     440:	89 e5       	ldi	r24, 0x59	; 89
     442:	91 e0       	ldi	r25, 0x01	; 1
     444:	0e 94 76 07 	call	0xeec	; 0xeec <OLED_print_string>
	OLED_pos(3, 20);
     448:	64 e1       	ldi	r22, 0x14	; 20
     44a:	83 e0       	ldi	r24, 0x03	; 3
     44c:	0e 94 54 07 	call	0xea8	; 0xea8 <OLED_pos>
	OLED_print_string("Two-players mode");
     450:	89 e6       	ldi	r24, 0x69	; 105
     452:	91 e0       	ldi	r25, 0x01	; 1
     454:	0e 94 76 07 	call	0xeec	; 0xeec <OLED_print_string>
	OLED_pos(4, 20);
     458:	64 e1       	ldi	r22, 0x14	; 20
     45a:	84 e0       	ldi	r24, 0x04	; 4
     45c:	0e 94 54 07 	call	0xea8	; 0xea8 <OLED_pos>
	OLED_print_string("Highscores");
     460:	8a e7       	ldi	r24, 0x7A	; 122
     462:	91 e0       	ldi	r25, 0x01	; 1
     464:	0e 94 76 07 	call	0xeec	; 0xeec <OLED_print_string>
	OLED_pos(5, 20);
     468:	64 e1       	ldi	r22, 0x14	; 20
     46a:	85 e0       	ldi	r24, 0x05	; 5
     46c:	0e 94 54 07 	call	0xea8	; 0xea8 <OLED_pos>
	OLED_print_string("Settings");
     470:	85 e8       	ldi	r24, 0x85	; 133
     472:	91 e0       	ldi	r25, 0x01	; 1
     474:	0e 94 76 07 	call	0xeec	; 0xeec <OLED_print_string>
	OLED_pos(7, 48);
     478:	60 e3       	ldi	r22, 0x30	; 48
     47a:	87 e0       	ldi	r24, 0x07	; 7
     47c:	0e 94 54 07 	call	0xea8	; 0xea8 <OLED_pos>
	OLED_print_string("Touch right to enter");
     480:	8e e8       	ldi	r24, 0x8E	; 142
     482:	91 e0       	ldi	r25, 0x01	; 1
     484:	0e 94 76 07 	call	0xeec	; 0xeec <OLED_print_string>
	OLED_pos(7,0);
     488:	60 e0       	ldi	r22, 0x00	; 0
     48a:	87 e0       	ldi	r24, 0x07	; 7
     48c:	0e 94 54 07 	call	0xea8	; 0xea8 <OLED_pos>
	OLED_print_home();
     490:	0e 94 ab 07 	call	0xf56	; 0xf56 <OLED_print_home>
     494:	08 95       	ret

00000496 <draw_one_player>:
}

void draw_one_player()
{
	OLED_Reset();
     496:	0e 94 cd 06 	call	0xd9a	; 0xd9a <OLED_Reset>
	OLED_pos(0, 32);
     49a:	60 e2       	ldi	r22, 0x20	; 32
     49c:	80 e0       	ldi	r24, 0x00	; 0
     49e:	0e 94 54 07 	call	0xea8	; 0xea8 <OLED_pos>
	OLED_print_string("One-player mode");
     4a2:	89 e5       	ldi	r24, 0x59	; 89
     4a4:	91 e0       	ldi	r25, 0x01	; 1
     4a6:	0e 94 76 07 	call	0xeec	; 0xeec <OLED_print_string>
	OLED_print_woman(3,58);
     4aa:	6a e3       	ldi	r22, 0x3A	; 58
     4ac:	83 e0       	ldi	r24, 0x03	; 3
     4ae:	0e 94 bb 07 	call	0xf76	; 0xf76 <OLED_print_woman>
	OLED_pos(7,0);
     4b2:	60 e0       	ldi	r22, 0x00	; 0
     4b4:	87 e0       	ldi	r24, 0x07	; 7
     4b6:	0e 94 54 07 	call	0xea8	; 0xea8 <OLED_pos>
	OLED_print_home();
     4ba:	0e 94 ab 07 	call	0xf56	; 0xf56 <OLED_print_home>
     4be:	08 95       	ret

000004c0 <draw_two_players>:
}

void draw_two_players()
{
	OLED_Reset();
     4c0:	0e 94 cd 06 	call	0xd9a	; 0xd9a <OLED_Reset>
	OLED_pos(0, 32);
     4c4:	60 e2       	ldi	r22, 0x20	; 32
     4c6:	80 e0       	ldi	r24, 0x00	; 0
     4c8:	0e 94 54 07 	call	0xea8	; 0xea8 <OLED_pos>
	OLED_print_string("Two-players mode");
     4cc:	89 e6       	ldi	r24, 0x69	; 105
     4ce:	91 e0       	ldi	r25, 0x01	; 1
     4d0:	0e 94 76 07 	call	0xeec	; 0xeec <OLED_print_string>
	OLED_print_woman(3,29);
     4d4:	6d e1       	ldi	r22, 0x1D	; 29
     4d6:	83 e0       	ldi	r24, 0x03	; 3
     4d8:	0e 94 bb 07 	call	0xf76	; 0xf76 <OLED_print_woman>
	OLED_print_woman(3,87);
     4dc:	67 e5       	ldi	r22, 0x57	; 87
     4de:	83 e0       	ldi	r24, 0x03	; 3
     4e0:	0e 94 bb 07 	call	0xf76	; 0xf76 <OLED_print_woman>
	OLED_pos(7,0);
     4e4:	60 e0       	ldi	r22, 0x00	; 0
     4e6:	87 e0       	ldi	r24, 0x07	; 7
     4e8:	0e 94 54 07 	call	0xea8	; 0xea8 <OLED_pos>
	OLED_print_home();
     4ec:	0e 94 ab 07 	call	0xf56	; 0xf56 <OLED_print_home>
     4f0:	08 95       	ret

000004f2 <draw_highscores>:
}

void draw_highscores()
{
	OLED_Reset();
     4f2:	0e 94 cd 06 	call	0xd9a	; 0xd9a <OLED_Reset>
	OLED_pos(0, 44);
     4f6:	6c e2       	ldi	r22, 0x2C	; 44
     4f8:	80 e0       	ldi	r24, 0x00	; 0
     4fa:	0e 94 54 07 	call	0xea8	; 0xea8 <OLED_pos>
	OLED_print_string("Highscores");
     4fe:	8a e7       	ldi	r24, 0x7A	; 122
     500:	91 e0       	ldi	r25, 0x01	; 1
     502:	0e 94 76 07 	call	0xeec	; 0xeec <OLED_print_string>
	OLED_pos(2, 20);
     506:	64 e1       	ldi	r22, 0x14	; 20
     508:	82 e0       	ldi	r24, 0x02	; 2
     50a:	0e 94 54 07 	call	0xea8	; 0xea8 <OLED_pos>
	OLED_print_string("1. 650 points");
     50e:	83 ea       	ldi	r24, 0xA3	; 163
     510:	91 e0       	ldi	r25, 0x01	; 1
     512:	0e 94 76 07 	call	0xeec	; 0xeec <OLED_print_string>
	OLED_pos(3, 20);
     516:	64 e1       	ldi	r22, 0x14	; 20
     518:	83 e0       	ldi	r24, 0x03	; 3
     51a:	0e 94 54 07 	call	0xea8	; 0xea8 <OLED_pos>
	OLED_print_string("2. 422 points");
     51e:	81 eb       	ldi	r24, 0xB1	; 177
     520:	91 e0       	ldi	r25, 0x01	; 1
     522:	0e 94 76 07 	call	0xeec	; 0xeec <OLED_print_string>
	OLED_pos(4, 20);
     526:	64 e1       	ldi	r22, 0x14	; 20
     528:	84 e0       	ldi	r24, 0x04	; 4
     52a:	0e 94 54 07 	call	0xea8	; 0xea8 <OLED_pos>
	OLED_print_string("3. 200 points");
     52e:	8f eb       	ldi	r24, 0xBF	; 191
     530:	91 e0       	ldi	r25, 0x01	; 1
     532:	0e 94 76 07 	call	0xeec	; 0xeec <OLED_print_string>
	OLED_pos(7,0);
     536:	60 e0       	ldi	r22, 0x00	; 0
     538:	87 e0       	ldi	r24, 0x07	; 7
     53a:	0e 94 54 07 	call	0xea8	; 0xea8 <OLED_pos>
	OLED_print_home();
     53e:	0e 94 ab 07 	call	0xf56	; 0xf56 <OLED_print_home>
     542:	08 95       	ret

00000544 <draw_settings>:
}

void draw_settings()
{
	OLED_Reset();
     544:	0e 94 cd 06 	call	0xd9a	; 0xd9a <OLED_Reset>
	OLED_pos(0, 48);
     548:	60 e3       	ldi	r22, 0x30	; 48
     54a:	80 e0       	ldi	r24, 0x00	; 0
     54c:	0e 94 54 07 	call	0xea8	; 0xea8 <OLED_pos>
	OLED_print_string("Settings");
     550:	85 e8       	ldi	r24, 0x85	; 133
     552:	91 e0       	ldi	r25, 0x01	; 1
     554:	0e 94 76 07 	call	0xeec	; 0xeec <OLED_print_string>
	OLED_pos(2, 8);
     558:	68 e0       	ldi	r22, 0x08	; 8
     55a:	82 e0       	ldi	r24, 0x02	; 2
     55c:	0e 94 54 07 	call	0xea8	; 0xea8 <OLED_pos>
	OLED_print_arrow();
     560:	0e 94 94 07 	call	0xf28	; 0xf28 <OLED_print_arrow>
	OLED_pos(2, 20);
     564:	64 e1       	ldi	r22, 0x14	; 20
     566:	82 e0       	ldi	r24, 0x02	; 2
     568:	0e 94 54 07 	call	0xea8	; 0xea8 <OLED_pos>
	OLED_print_string("Brightness");
     56c:	8d ec       	ldi	r24, 0xCD	; 205
     56e:	91 e0       	ldi	r25, 0x01	; 1
     570:	0e 94 76 07 	call	0xeec	; 0xeec <OLED_print_string>
	OLED_pos(3, 20);
     574:	64 e1       	ldi	r22, 0x14	; 20
     576:	83 e0       	ldi	r24, 0x03	; 3
     578:	0e 94 54 07 	call	0xea8	; 0xea8 <OLED_pos>
	OLED_print_string("Sound");
     57c:	88 ed       	ldi	r24, 0xD8	; 216
     57e:	91 e0       	ldi	r25, 0x01	; 1
     580:	0e 94 76 07 	call	0xeec	; 0xeec <OLED_print_string>
	OLED_pos(7,0);
     584:	60 e0       	ldi	r22, 0x00	; 0
     586:	87 e0       	ldi	r24, 0x07	; 7
     588:	0e 94 54 07 	call	0xea8	; 0xea8 <OLED_pos>
	OLED_print_home();
     58c:	0e 94 ab 07 	call	0xf56	; 0xf56 <OLED_print_home>
     590:	08 95       	ret

00000592 <draw_brightness>:
}

void draw_brightness()
{
	OLED_Reset();
     592:	0e 94 cd 06 	call	0xd9a	; 0xd9a <OLED_Reset>
	OLED_pos(0, 44);
     596:	6c e2       	ldi	r22, 0x2C	; 44
     598:	80 e0       	ldi	r24, 0x00	; 0
     59a:	0e 94 54 07 	call	0xea8	; 0xea8 <OLED_pos>
	OLED_print_string("Brightness");
     59e:	8d ec       	ldi	r24, 0xCD	; 205
     5a0:	91 e0       	ldi	r25, 0x01	; 1
     5a2:	0e 94 76 07 	call	0xeec	; 0xeec <OLED_print_string>
	OLED_pos(5, 0);
     5a6:	60 e0       	ldi	r22, 0x00	; 0
     5a8:	85 e0       	ldi	r24, 0x05	; 5
     5aa:	0e 94 54 07 	call	0xea8	; 0xea8 <OLED_pos>
	OLED_print_string("Use left slide to set brightness");
     5ae:	8e ed       	ldi	r24, 0xDE	; 222
     5b0:	91 e0       	ldi	r25, 0x01	; 1
     5b2:	0e 94 76 07 	call	0xeec	; 0xeec <OLED_print_string>
	OLED_pos(7,0);
     5b6:	60 e0       	ldi	r22, 0x00	; 0
     5b8:	87 e0       	ldi	r24, 0x07	; 7
     5ba:	0e 94 54 07 	call	0xea8	; 0xea8 <OLED_pos>
	OLED_print_home();
     5be:	0e 94 ab 07 	call	0xf56	; 0xf56 <OLED_print_home>
     5c2:	08 95       	ret

000005c4 <Joystick_Position>:

#define JOYSTICK_VERTICAL 0x4
#define JOYSTICK_HORIZONTAL 0x5

Position Joystick_Position()
{
     5c4:	0f 93       	push	r16
     5c6:	1f 93       	push	r17
     5c8:	cf 93       	push	r28
     5ca:	df 93       	push	r29
     5cc:	cd b7       	in	r28, 0x3d	; 61
     5ce:	de b7       	in	r29, 0x3e	; 62
     5d0:	28 97       	sbiw	r28, 0x08	; 8
     5d2:	0f b6       	in	r0, 0x3f	; 63
     5d4:	f8 94       	cli
     5d6:	de bf       	out	0x3e, r29	; 62
     5d8:	0f be       	out	0x3f, r0	; 63
     5da:	cd bf       	out	0x3d, r28	; 61
	uint8_t joystick_horizontal = ADC_Convert(JOYSTICK_HORIZONTAL);
     5dc:	85 e0       	ldi	r24, 0x05	; 5
     5de:	0e 94 15 01 	call	0x22a	; 0x22a <ADC_Convert>
     5e2:	18 2f       	mov	r17, r24
	uint8_t joystick_vertical = ADC_Convert(JOYSTICK_VERTICAL);
     5e4:	84 e0       	ldi	r24, 0x04	; 4
     5e6:	0e 94 15 01 	call	0x22a	; 0x22a <ADC_Convert>
     5ea:	08 2f       	mov	r16, r24
	float X = joystick_horizontal;
     5ec:	61 2f       	mov	r22, r17
     5ee:	70 e0       	ldi	r23, 0x00	; 0
     5f0:	80 e0       	ldi	r24, 0x00	; 0
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <__floatunsisf>
	float Y = joystick_vertical;
	
	Position joystick;
	joystick.x = (X / 255.0) * 200.0 - 100.0;
     5f8:	20 e0       	ldi	r18, 0x00	; 0
     5fa:	30 e0       	ldi	r19, 0x00	; 0
     5fc:	4f e7       	ldi	r20, 0x7F	; 127
     5fe:	53 e4       	ldi	r21, 0x43	; 67
     600:	0e 94 81 08 	call	0x1102	; 0x1102 <__divsf3>
     604:	20 e0       	ldi	r18, 0x00	; 0
     606:	30 e0       	ldi	r19, 0x00	; 0
     608:	48 e4       	ldi	r20, 0x48	; 72
     60a:	53 e4       	ldi	r21, 0x43	; 67
     60c:	0e 94 9f 09 	call	0x133e	; 0x133e <__mulsf3>
     610:	20 e0       	ldi	r18, 0x00	; 0
     612:	30 e0       	ldi	r19, 0x00	; 0
     614:	48 ec       	ldi	r20, 0xC8	; 200
     616:	52 e4       	ldi	r21, 0x42	; 66
     618:	0e 94 18 08 	call	0x1030	; 0x1030 <__subsf3>
     61c:	48 2f       	mov	r20, r24
     61e:	59 2f       	mov	r21, r25
	joystick.y = (Y / 255.0) * 200.0 - 100.0;
	return joystick;
     620:	16 2f       	mov	r17, r22
     622:	86 2f       	mov	r24, r22
     624:	97 2f       	mov	r25, r23
     626:	a4 2f       	mov	r26, r20
     628:	b5 2f       	mov	r27, r21
     62a:	89 83       	std	Y+1, r24	; 0x01
     62c:	9a 83       	std	Y+2, r25	; 0x02
     62e:	ab 83       	std	Y+3, r26	; 0x03
     630:	bc 83       	std	Y+4, r27	; 0x04
Position Joystick_Position()
{
	uint8_t joystick_horizontal = ADC_Convert(JOYSTICK_HORIZONTAL);
	uint8_t joystick_vertical = ADC_Convert(JOYSTICK_VERTICAL);
	float X = joystick_horizontal;
	float Y = joystick_vertical;
     632:	60 2f       	mov	r22, r16
     634:	70 e0       	ldi	r23, 0x00	; 0
     636:	80 e0       	ldi	r24, 0x00	; 0
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <__floatunsisf>
	
	Position joystick;
	joystick.x = (X / 255.0) * 200.0 - 100.0;
	joystick.y = (Y / 255.0) * 200.0 - 100.0;
     63e:	20 e0       	ldi	r18, 0x00	; 0
     640:	30 e0       	ldi	r19, 0x00	; 0
     642:	4f e7       	ldi	r20, 0x7F	; 127
     644:	53 e4       	ldi	r21, 0x43	; 67
     646:	0e 94 81 08 	call	0x1102	; 0x1102 <__divsf3>
     64a:	20 e0       	ldi	r18, 0x00	; 0
     64c:	30 e0       	ldi	r19, 0x00	; 0
     64e:	48 e4       	ldi	r20, 0x48	; 72
     650:	53 e4       	ldi	r21, 0x43	; 67
     652:	0e 94 9f 09 	call	0x133e	; 0x133e <__mulsf3>
     656:	20 e0       	ldi	r18, 0x00	; 0
     658:	30 e0       	ldi	r19, 0x00	; 0
     65a:	48 ec       	ldi	r20, 0xC8	; 200
     65c:	52 e4       	ldi	r21, 0x42	; 66
     65e:	0e 94 18 08 	call	0x1030	; 0x1030 <__subsf3>
     662:	e6 2f       	mov	r30, r22
	return joystick;
     664:	46 2f       	mov	r20, r22
     666:	57 2f       	mov	r21, r23
     668:	68 2f       	mov	r22, r24
     66a:	79 2f       	mov	r23, r25
     66c:	4d 83       	std	Y+5, r20	; 0x05
     66e:	5e 83       	std	Y+6, r21	; 0x06
     670:	6f 83       	std	Y+7, r22	; 0x07
     672:	78 87       	std	Y+8, r23	; 0x08
     674:	21 2f       	mov	r18, r17
     676:	3a 81       	ldd	r19, Y+2	; 0x02
     678:	4b 81       	ldd	r20, Y+3	; 0x03
     67a:	5c 81       	ldd	r21, Y+4	; 0x04
     67c:	6e 2f       	mov	r22, r30
     67e:	7e 81       	ldd	r23, Y+6	; 0x06
}
     680:	8f 81       	ldd	r24, Y+7	; 0x07
     682:	98 85       	ldd	r25, Y+8	; 0x08
     684:	28 96       	adiw	r28, 0x08	; 8
     686:	0f b6       	in	r0, 0x3f	; 63
     688:	f8 94       	cli
     68a:	de bf       	out	0x3e, r29	; 62
     68c:	0f be       	out	0x3f, r0	; 63
     68e:	cd bf       	out	0x3d, r28	; 61
     690:	df 91       	pop	r29
     692:	cf 91       	pop	r28
     694:	1f 91       	pop	r17
     696:	0f 91       	pop	r16
     698:	08 95       	ret

0000069a <Joystick_Direction>:

char* Joystick_Direction(Position* joystick)
{
     69a:	cf 92       	push	r12
     69c:	df 92       	push	r13
     69e:	ef 92       	push	r14
     6a0:	ff 92       	push	r15
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
     6a6:	ec 01       	movw	r28, r24
	if(joystick->x < -71)
     6a8:	c8 80       	ld	r12, Y
     6aa:	d9 80       	ldd	r13, Y+1	; 0x01
     6ac:	ea 80       	ldd	r14, Y+2	; 0x02
     6ae:	fb 80       	ldd	r15, Y+3	; 0x03
     6b0:	20 e0       	ldi	r18, 0x00	; 0
     6b2:	30 e0       	ldi	r19, 0x00	; 0
     6b4:	4e e8       	ldi	r20, 0x8E	; 142
     6b6:	52 ec       	ldi	r21, 0xC2	; 194
     6b8:	c7 01       	movw	r24, r14
     6ba:	b6 01       	movw	r22, r12
     6bc:	0e 94 7d 08 	call	0x10fa	; 0x10fa <__cmpsf2>
     6c0:	88 23       	and	r24, r24
     6c2:	2c f1       	brlt	.+74     	; 0x70e <Joystick_Direction+0x74>
	return "LEFT";
	else if(joystick->x > 71)
     6c4:	20 e0       	ldi	r18, 0x00	; 0
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	4e e8       	ldi	r20, 0x8E	; 142
     6ca:	52 e4       	ldi	r21, 0x42	; 66
     6cc:	c7 01       	movw	r24, r14
     6ce:	b6 01       	movw	r22, r12
     6d0:	0e 94 9b 09 	call	0x1336	; 0x1336 <__gesf2>
     6d4:	18 16       	cp	r1, r24
     6d6:	f4 f0       	brlt	.+60     	; 0x714 <Joystick_Direction+0x7a>
	return "RIGHT";
	
	if(joystick->y < -71)
     6d8:	cc 80       	ldd	r12, Y+4	; 0x04
     6da:	dd 80       	ldd	r13, Y+5	; 0x05
     6dc:	ee 80       	ldd	r14, Y+6	; 0x06
     6de:	ff 80       	ldd	r15, Y+7	; 0x07
     6e0:	20 e0       	ldi	r18, 0x00	; 0
     6e2:	30 e0       	ldi	r19, 0x00	; 0
     6e4:	4e e8       	ldi	r20, 0x8E	; 142
     6e6:	52 ec       	ldi	r21, 0xC2	; 194
     6e8:	c7 01       	movw	r24, r14
     6ea:	b6 01       	movw	r22, r12
     6ec:	0e 94 7d 08 	call	0x10fa	; 0x10fa <__cmpsf2>
     6f0:	88 23       	and	r24, r24
     6f2:	9c f0       	brlt	.+38     	; 0x71a <Joystick_Direction+0x80>
	return "DOWN";
	else if(joystick->y > 71)
     6f4:	20 e0       	ldi	r18, 0x00	; 0
     6f6:	30 e0       	ldi	r19, 0x00	; 0
     6f8:	4e e8       	ldi	r20, 0x8E	; 142
     6fa:	52 e4       	ldi	r21, 0x42	; 66
     6fc:	c7 01       	movw	r24, r14
     6fe:	b6 01       	movw	r22, r12
     700:	0e 94 9b 09 	call	0x1336	; 0x1336 <__gesf2>
     704:	18 16       	cp	r1, r24
     706:	64 f4       	brge	.+24     	; 0x720 <Joystick_Direction+0x86>
	return "UP";
     708:	8f e0       	ldi	r24, 0x0F	; 15
     70a:	92 e0       	ldi	r25, 0x02	; 2
     70c:	0b c0       	rjmp	.+22     	; 0x724 <Joystick_Direction+0x8a>
}

char* Joystick_Direction(Position* joystick)
{
	if(joystick->x < -71)
	return "LEFT";
     70e:	8f ef       	ldi	r24, 0xFF	; 255
     710:	91 e0       	ldi	r25, 0x01	; 1
     712:	08 c0       	rjmp	.+16     	; 0x724 <Joystick_Direction+0x8a>
	else if(joystick->x > 71)
	return "RIGHT";
     714:	84 e0       	ldi	r24, 0x04	; 4
     716:	92 e0       	ldi	r25, 0x02	; 2
     718:	05 c0       	rjmp	.+10     	; 0x724 <Joystick_Direction+0x8a>
	
	if(joystick->y < -71)
	return "DOWN";
     71a:	8a e0       	ldi	r24, 0x0A	; 10
     71c:	92 e0       	ldi	r25, 0x02	; 2
     71e:	02 c0       	rjmp	.+4      	; 0x724 <Joystick_Direction+0x8a>
	else if(joystick->y > 71)
	return "UP";
	
	return "NEUTRAL";
     720:	82 e1       	ldi	r24, 0x12	; 18
     722:	92 e0       	ldi	r25, 0x02	; 2
     724:	df 91       	pop	r29
     726:	cf 91       	pop	r28
     728:	ff 90       	pop	r15
     72a:	ef 90       	pop	r14
     72c:	df 90       	pop	r13
     72e:	cf 90       	pop	r12
     730:	08 95       	ret

00000732 <MCP2515_RESET>:
#include "SPI.h"
#include "MCP251DEFS.h"

void MCP2515_RESET()
{
	SPI_on();
     732:	0e 94 fe 07 	call	0xffc	; 0xffc <SPI_on>
	SPI_write(MCP_RESET);
     736:	80 ec       	ldi	r24, 0xC0	; 192
     738:	0e 94 f5 07 	call	0xfea	; 0xfea <SPI_write>
	SPI_off();
     73c:	0e 94 00 08 	call	0x1000	; 0x1000 <SPI_off>
     740:	08 95       	ret

00000742 <MCP2515_READ>:
}

char MCP2515_READ(uint8_t address)
{
     742:	cf 93       	push	r28
     744:	c8 2f       	mov	r28, r24
	SPI_on(); 
     746:	0e 94 fe 07 	call	0xffc	; 0xffc <SPI_on>
	SPI_write(MCP_READ);
     74a:	83 e0       	ldi	r24, 0x03	; 3
     74c:	0e 94 f5 07 	call	0xfea	; 0xfea <SPI_write>
	SPI_write(address);
     750:	8c 2f       	mov	r24, r28
     752:	0e 94 f5 07 	call	0xfea	; 0xfea <SPI_write>
	char data = SPI_read();
     756:	0e 94 f9 07 	call	0xff2	; 0xff2 <SPI_read>
     75a:	c8 2f       	mov	r28, r24
	SPI_off();
     75c:	0e 94 00 08 	call	0x1000	; 0x1000 <SPI_off>
	return data;
}
     760:	8c 2f       	mov	r24, r28
     762:	cf 91       	pop	r28
     764:	08 95       	ret

00000766 <MCP2515_WRITE>:

void MCP2515_WRITE(uint8_t address, uint8_t data)
{
     766:	cf 93       	push	r28
     768:	df 93       	push	r29
     76a:	d8 2f       	mov	r29, r24
     76c:	c6 2f       	mov	r28, r22
	SPI_on();
     76e:	0e 94 fe 07 	call	0xffc	; 0xffc <SPI_on>
	SPI_write(MCP_WRITE);
     772:	82 e0       	ldi	r24, 0x02	; 2
     774:	0e 94 f5 07 	call	0xfea	; 0xfea <SPI_write>
	SPI_write(address);
     778:	8d 2f       	mov	r24, r29
     77a:	0e 94 f5 07 	call	0xfea	; 0xfea <SPI_write>
	SPI_write(data);
     77e:	8c 2f       	mov	r24, r28
     780:	0e 94 f5 07 	call	0xfea	; 0xfea <SPI_write>
	SPI_off();
     784:	0e 94 00 08 	call	0x1000	; 0x1000 <SPI_off>
	
}
     788:	df 91       	pop	r29
     78a:	cf 91       	pop	r28
     78c:	08 95       	ret

0000078e <MCP2515_REQUEST_TO_SEND>:

void MCP2515_REQUEST_TO_SEND()
{
	SPI_on();
     78e:	0e 94 fe 07 	call	0xffc	; 0xffc <SPI_on>
	SPI_write(MCP_RTS_TX0);
     792:	81 e8       	ldi	r24, 0x81	; 129
     794:	0e 94 f5 07 	call	0xfea	; 0xfea <SPI_write>
	SPI_off();
     798:	0e 94 00 08 	call	0x1000	; 0x1000 <SPI_off>
     79c:	08 95       	ret

0000079e <MCP2515_BIT_MODIFY>:
	SPI_off();
	return data;
}

void MCP2515_BIT_MODIFY(uint8_t address, uint8_t mask, uint8_t data)
{
     79e:	1f 93       	push	r17
     7a0:	cf 93       	push	r28
     7a2:	df 93       	push	r29
     7a4:	18 2f       	mov	r17, r24
     7a6:	d6 2f       	mov	r29, r22
     7a8:	c4 2f       	mov	r28, r20
	SPI_on();
     7aa:	0e 94 fe 07 	call	0xffc	; 0xffc <SPI_on>
	SPI_write(MCP_BITMOD);
     7ae:	85 e0       	ldi	r24, 0x05	; 5
     7b0:	0e 94 f5 07 	call	0xfea	; 0xfea <SPI_write>
	SPI_write(address);
     7b4:	81 2f       	mov	r24, r17
     7b6:	0e 94 f5 07 	call	0xfea	; 0xfea <SPI_write>
	SPI_write(mask);
     7ba:	8d 2f       	mov	r24, r29
     7bc:	0e 94 f5 07 	call	0xfea	; 0xfea <SPI_write>
	SPI_write(data);
     7c0:	8c 2f       	mov	r24, r28
     7c2:	0e 94 f5 07 	call	0xfea	; 0xfea <SPI_write>
	SPI_off();	
     7c6:	0e 94 00 08 	call	0x1000	; 0x1000 <SPI_off>
     7ca:	df 91       	pop	r29
     7cc:	cf 91       	pop	r28
     7ce:	1f 91       	pop	r17
     7d0:	08 95       	ret

000007d2 <__vector_1>:
int arrow = 2 ;
int i = 0;
uint8_t slide_left;

ISR(INT0_vect)
{
     7d2:	1f 92       	push	r1
     7d4:	0f 92       	push	r0
     7d6:	0f b6       	in	r0, 0x3f	; 63
     7d8:	0f 92       	push	r0
     7da:	11 24       	eor	r1, r1
     7dc:	2f 93       	push	r18
     7de:	3f 93       	push	r19
     7e0:	4f 93       	push	r20
     7e2:	5f 93       	push	r21
     7e4:	6f 93       	push	r22
     7e6:	7f 93       	push	r23
     7e8:	8f 93       	push	r24
     7ea:	9f 93       	push	r25
     7ec:	af 93       	push	r26
     7ee:	bf 93       	push	r27
     7f0:	ef 93       	push	r30
     7f2:	ff 93       	push	r31
	if(i < 3)
     7f4:	80 91 3e 02 	lds	r24, 0x023E
     7f8:	90 91 3f 02 	lds	r25, 0x023F
     7fc:	83 30       	cpi	r24, 0x03	; 3
     7fe:	91 05       	cpc	r25, r1
     800:	34 f4       	brge	.+12     	; 0x80e <__vector_1+0x3c>
	{
		i++;
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	90 93 3f 02 	sts	0x023F, r25
     808:	80 93 3e 02 	sts	0x023E, r24
     80c:	64 c0       	rjmp	.+200    	; 0x8d6 <__vector_1+0x104>
	}
	else
	{
		if(mode == HOME)
     80e:	80 91 40 02 	lds	r24, 0x0240
     812:	90 91 41 02 	lds	r25, 0x0241
     816:	00 97       	sbiw	r24, 0x00	; 0
     818:	79 f4       	brne	.+30     	; 0x838 <__vector_1+0x66>
		{
			mode = MAIN_MENU;
     81a:	81 e0       	ldi	r24, 0x01	; 1
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	90 93 41 02 	sts	0x0241, r25
     822:	80 93 40 02 	sts	0x0240, r24
			arrow = 2;
     826:	82 e0       	ldi	r24, 0x02	; 2
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	90 93 07 01 	sts	0x0107, r25
     82e:	80 93 06 01 	sts	0x0106, r24
			draw_main_menu();
     832:	0e 94 0c 02 	call	0x418	; 0x418 <draw_main_menu>
     836:	4f c0       	rjmp	.+158    	; 0x8d6 <__vector_1+0x104>
		}
		else if(mode == MAIN_MENU && arrow == 2)
     838:	81 30       	cpi	r24, 0x01	; 1
     83a:	91 05       	cpc	r25, r1
     83c:	c9 f5       	brne	.+114    	; 0x8b0 <__vector_1+0xde>
     83e:	80 91 06 01 	lds	r24, 0x0106
     842:	90 91 07 01 	lds	r25, 0x0107
     846:	82 30       	cpi	r24, 0x02	; 2
     848:	91 05       	cpc	r25, r1
     84a:	49 f4       	brne	.+18     	; 0x85e <__vector_1+0x8c>
		{
			mode = ONE_PLAYER;
     84c:	8b e0       	ldi	r24, 0x0B	; 11
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	90 93 41 02 	sts	0x0241, r25
     854:	80 93 40 02 	sts	0x0240, r24
			draw_one_player();
     858:	0e 94 4b 02 	call	0x496	; 0x496 <draw_one_player>
     85c:	3c c0       	rjmp	.+120    	; 0x8d6 <__vector_1+0x104>
		}
		else if(mode == MAIN_MENU && arrow == 3)
     85e:	83 30       	cpi	r24, 0x03	; 3
     860:	91 05       	cpc	r25, r1
     862:	49 f4       	brne	.+18     	; 0x876 <__vector_1+0xa4>
		{
			mode = TWO_PLAYERS;
     864:	8c e0       	ldi	r24, 0x0C	; 12
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	90 93 41 02 	sts	0x0241, r25
     86c:	80 93 40 02 	sts	0x0240, r24
			draw_two_players();
     870:	0e 94 60 02 	call	0x4c0	; 0x4c0 <draw_two_players>
     874:	30 c0       	rjmp	.+96     	; 0x8d6 <__vector_1+0x104>
		}
		else if(mode == MAIN_MENU && arrow == 4)
     876:	84 30       	cpi	r24, 0x04	; 4
     878:	91 05       	cpc	r25, r1
     87a:	49 f4       	brne	.+18     	; 0x88e <__vector_1+0xbc>
		{
			mode = HIGHSCORES;
     87c:	8d e0       	ldi	r24, 0x0D	; 13
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	90 93 41 02 	sts	0x0241, r25
     884:	80 93 40 02 	sts	0x0240, r24
			draw_highscores();
     888:	0e 94 79 02 	call	0x4f2	; 0x4f2 <draw_highscores>
     88c:	24 c0       	rjmp	.+72     	; 0x8d6 <__vector_1+0x104>
		}
		else if(mode == MAIN_MENU && arrow == 5)
     88e:	05 97       	sbiw	r24, 0x05	; 5
     890:	11 f5       	brne	.+68     	; 0x8d6 <__vector_1+0x104>
		{
			mode = SETTINGS;
     892:	8e e0       	ldi	r24, 0x0E	; 14
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	90 93 41 02 	sts	0x0241, r25
     89a:	80 93 40 02 	sts	0x0240, r24
			arrow = 2;
     89e:	82 e0       	ldi	r24, 0x02	; 2
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	90 93 07 01 	sts	0x0107, r25
     8a6:	80 93 06 01 	sts	0x0106, r24
			draw_settings();
     8aa:	0e 94 a2 02 	call	0x544	; 0x544 <draw_settings>
     8ae:	13 c0       	rjmp	.+38     	; 0x8d6 <__vector_1+0x104>
		}
		else if(mode == SETTINGS && arrow == 2)
     8b0:	0e 97       	sbiw	r24, 0x0e	; 14
     8b2:	89 f4       	brne	.+34     	; 0x8d6 <__vector_1+0x104>
     8b4:	80 91 06 01 	lds	r24, 0x0106
     8b8:	90 91 07 01 	lds	r25, 0x0107
     8bc:	02 97       	sbiw	r24, 0x02	; 2
     8be:	59 f4       	brne	.+22     	; 0x8d6 <__vector_1+0x104>
		{
			mode = BRIGHTNESS;
     8c0:	8d e8       	ldi	r24, 0x8D	; 141
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	90 93 41 02 	sts	0x0241, r25
     8c8:	80 93 40 02 	sts	0x0240, r24
			draw_brightness(slide_left);
     8cc:	80 91 42 02 	lds	r24, 0x0242
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	0e 94 c9 02 	call	0x592	; 0x592 <draw_brightness>
		}
	}
}
     8d6:	ff 91       	pop	r31
     8d8:	ef 91       	pop	r30
     8da:	bf 91       	pop	r27
     8dc:	af 91       	pop	r26
     8de:	9f 91       	pop	r25
     8e0:	8f 91       	pop	r24
     8e2:	7f 91       	pop	r23
     8e4:	6f 91       	pop	r22
     8e6:	5f 91       	pop	r21
     8e8:	4f 91       	pop	r20
     8ea:	3f 91       	pop	r19
     8ec:	2f 91       	pop	r18
     8ee:	0f 90       	pop	r0
     8f0:	0f be       	out	0x3f, r0	; 63
     8f2:	0f 90       	pop	r0
     8f4:	1f 90       	pop	r1
     8f6:	18 95       	reti

000008f8 <__vector_2>:

ISR(INT1_vect)
{
     8f8:	1f 92       	push	r1
     8fa:	0f 92       	push	r0
     8fc:	0f b6       	in	r0, 0x3f	; 63
     8fe:	0f 92       	push	r0
     900:	11 24       	eor	r1, r1
     902:	2f 93       	push	r18
     904:	3f 93       	push	r19
     906:	4f 93       	push	r20
     908:	5f 93       	push	r21
     90a:	6f 93       	push	r22
     90c:	7f 93       	push	r23
     90e:	8f 93       	push	r24
     910:	9f 93       	push	r25
     912:	af 93       	push	r26
     914:	bf 93       	push	r27
     916:	ef 93       	push	r30
     918:	ff 93       	push	r31
	if(mode == MAIN_MENU)
     91a:	80 91 40 02 	lds	r24, 0x0240
     91e:	90 91 41 02 	lds	r25, 0x0241
     922:	81 30       	cpi	r24, 0x01	; 1
     924:	91 05       	cpc	r25, r1
     926:	39 f4       	brne	.+14     	; 0x936 <__vector_2+0x3e>
	{
		mode = HOME;
     928:	10 92 41 02 	sts	0x0241, r1
     92c:	10 92 40 02 	sts	0x0240, r1
		draw_home();
     930:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <draw_home>
     934:	26 c0       	rjmp	.+76     	; 0x982 <__vector_2+0x8a>
	}
	else if(mode == ONE_PLAYER || mode == TWO_PLAYERS || mode == HIGHSCORES || mode == SETTINGS)
     936:	9c 01       	movw	r18, r24
     938:	2b 50       	subi	r18, 0x0B	; 11
     93a:	31 09       	sbc	r19, r1
     93c:	24 30       	cpi	r18, 0x04	; 4
     93e:	31 05       	cpc	r19, r1
     940:	78 f4       	brcc	.+30     	; 0x960 <__vector_2+0x68>
	{
		mode = MAIN_MENU;
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	90 93 41 02 	sts	0x0241, r25
     94a:	80 93 40 02 	sts	0x0240, r24
		arrow = 2;
     94e:	82 e0       	ldi	r24, 0x02	; 2
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	90 93 07 01 	sts	0x0107, r25
     956:	80 93 06 01 	sts	0x0106, r24
		draw_main_menu();
     95a:	0e 94 0c 02 	call	0x418	; 0x418 <draw_main_menu>
     95e:	11 c0       	rjmp	.+34     	; 0x982 <__vector_2+0x8a>
	}
	else if(mode == BRIGHTNESS)
     960:	8d 38       	cpi	r24, 0x8D	; 141
     962:	91 05       	cpc	r25, r1
     964:	71 f4       	brne	.+28     	; 0x982 <__vector_2+0x8a>
	{
		mode = SETTINGS;
     966:	8e e0       	ldi	r24, 0x0E	; 14
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	90 93 41 02 	sts	0x0241, r25
     96e:	80 93 40 02 	sts	0x0240, r24
		arrow = 2;
     972:	82 e0       	ldi	r24, 0x02	; 2
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	90 93 07 01 	sts	0x0107, r25
     97a:	80 93 06 01 	sts	0x0106, r24
		draw_settings();
     97e:	0e 94 a2 02 	call	0x544	; 0x544 <draw_settings>
	}
}
     982:	ff 91       	pop	r31
     984:	ef 91       	pop	r30
     986:	bf 91       	pop	r27
     988:	af 91       	pop	r26
     98a:	9f 91       	pop	r25
     98c:	8f 91       	pop	r24
     98e:	7f 91       	pop	r23
     990:	6f 91       	pop	r22
     992:	5f 91       	pop	r21
     994:	4f 91       	pop	r20
     996:	3f 91       	pop	r19
     998:	2f 91       	pop	r18
     99a:	0f 90       	pop	r0
     99c:	0f be       	out	0x3f, r0	; 63
     99e:	0f 90       	pop	r0
     9a0:	1f 90       	pop	r1
     9a2:	18 95       	reti

000009a4 <ISR_slide_left>:
{
	//printf("Interrupted by right slide!\n");
}

void ISR_slide_left()
{
     9a4:	cf 93       	push	r28
     9a6:	df 93       	push	r29
	if(mode == BRIGHTNESS)
     9a8:	80 91 40 02 	lds	r24, 0x0240
     9ac:	90 91 41 02 	lds	r25, 0x0241
     9b0:	8d 38       	cpi	r24, 0x8D	; 141
     9b2:	91 05       	cpc	r25, r1
     9b4:	39 f5       	brne	.+78     	; 0xa04 <ISR_slide_left+0x60>
	{
		OLED_set_brightness(slide_left);
     9b6:	80 91 42 02 	lds	r24, 0x0242
     9ba:	0e 94 c7 06 	call	0xd8e	; 0xd8e <OLED_set_brightness>
		OLED_pos(3, 32);
     9be:	60 e2       	ldi	r22, 0x20	; 32
     9c0:	83 e0       	ldi	r24, 0x03	; 3
     9c2:	0e 94 54 07 	call	0xea8	; 0xea8 <OLED_pos>
     9c6:	c0 e4       	ldi	r28, 0x40	; 64
     9c8:	d0 e0       	ldi	r29, 0x00	; 0
		for(int i=0; i < 64; i++)
		{
			OLED_write_data(0b00000000);
     9ca:	80 e0       	ldi	r24, 0x00	; 0
     9cc:	0e 94 c4 06 	call	0xd88	; 0xd88 <OLED_write_data>
     9d0:	21 97       	sbiw	r28, 0x01	; 1
{
	if(mode == BRIGHTNESS)
	{
		OLED_set_brightness(slide_left);
		OLED_pos(3, 32);
		for(int i=0; i < 64; i++)
     9d2:	20 97       	sbiw	r28, 0x00	; 0
     9d4:	d1 f7       	brne	.-12     	; 0x9ca <ISR_slide_left+0x26>
		{
			OLED_write_data(0b00000000);
		}
		OLED_pos(3, 32);
     9d6:	60 e2       	ldi	r22, 0x20	; 32
     9d8:	83 e0       	ldi	r24, 0x03	; 3
     9da:	0e 94 54 07 	call	0xea8	; 0xea8 <OLED_pos>
		for(int i=0; i < slide_left/4; i++)
     9de:	80 91 42 02 	lds	r24, 0x0242
     9e2:	86 95       	lsr	r24
     9e4:	86 95       	lsr	r24
     9e6:	71 f0       	breq	.+28     	; 0xa04 <ISR_slide_left+0x60>
     9e8:	c0 e0       	ldi	r28, 0x00	; 0
     9ea:	d0 e0       	ldi	r29, 0x00	; 0
		{
			OLED_write_data(0b11111111);
     9ec:	8f ef       	ldi	r24, 0xFF	; 255
     9ee:	0e 94 c4 06 	call	0xd88	; 0xd88 <OLED_write_data>
		for(int i=0; i < 64; i++)
		{
			OLED_write_data(0b00000000);
		}
		OLED_pos(3, 32);
		for(int i=0; i < slide_left/4; i++)
     9f2:	21 96       	adiw	r28, 0x01	; 1
     9f4:	80 91 42 02 	lds	r24, 0x0242
     9f8:	86 95       	lsr	r24
     9fa:	86 95       	lsr	r24
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	c8 17       	cp	r28, r24
     a00:	d9 07       	cpc	r29, r25
     a02:	a4 f3       	brlt	.-24     	; 0x9ec <ISR_slide_left+0x48>
		{
			OLED_write_data(0b11111111);
		}
	}
}
     a04:	df 91       	pop	r29
     a06:	cf 91       	pop	r28
     a08:	08 95       	ret

00000a0a <ISR_joystick>:

void ISR_joystick(Position joystick)
{
     a0a:	cf 93       	push	r28
     a0c:	df 93       	push	r29
     a0e:	cd b7       	in	r28, 0x3d	; 61
     a10:	de b7       	in	r29, 0x3e	; 62
     a12:	28 97       	sbiw	r28, 0x08	; 8
     a14:	0f b6       	in	r0, 0x3f	; 63
     a16:	f8 94       	cli
     a18:	de bf       	out	0x3e, r29	; 62
     a1a:	0f be       	out	0x3f, r0	; 63
     a1c:	cd bf       	out	0x3d, r28	; 61
     a1e:	29 83       	std	Y+1, r18	; 0x01
     a20:	3a 83       	std	Y+2, r19	; 0x02
     a22:	4b 83       	std	Y+3, r20	; 0x03
     a24:	5c 83       	std	Y+4, r21	; 0x04
     a26:	6d 83       	std	Y+5, r22	; 0x05
     a28:	7e 83       	std	Y+6, r23	; 0x06
     a2a:	8f 83       	std	Y+7, r24	; 0x07
     a2c:	98 87       	std	Y+8, r25	; 0x08
	char* direction = Joystick_Direction(&joystick);
     a2e:	ce 01       	movw	r24, r28
     a30:	01 96       	adiw	r24, 0x01	; 1
     a32:	0e 94 4d 03 	call	0x69a	; 0x69a <Joystick_Direction>
	if(mode == MAIN_MENU && direction == "UP"){
     a36:	20 91 40 02 	lds	r18, 0x0240
     a3a:	30 91 41 02 	lds	r19, 0x0241
     a3e:	21 30       	cpi	r18, 0x01	; 1
     a40:	31 05       	cpc	r19, r1
     a42:	09 f0       	breq	.+2      	; 0xa46 <ISR_joystick+0x3c>
     a44:	68 c0       	rjmp	.+208    	; 0xb16 <ISR_joystick+0x10c>
     a46:	22 e0       	ldi	r18, 0x02	; 2
     a48:	8f 30       	cpi	r24, 0x0F	; 15
     a4a:	92 07       	cpc	r25, r18
     a4c:	81 f5       	brne	.+96     	; 0xaae <ISR_joystick+0xa4>
		if(arrow > 2)
     a4e:	80 91 06 01 	lds	r24, 0x0106
     a52:	90 91 07 01 	lds	r25, 0x0107
     a56:	83 30       	cpi	r24, 0x03	; 3
     a58:	91 05       	cpc	r25, r1
     a5a:	a4 f0       	brlt	.+40     	; 0xa84 <ISR_joystick+0x7a>
		{
			OLED_pos(arrow, 8);
     a5c:	68 e0       	ldi	r22, 0x08	; 8
     a5e:	0e 94 54 07 	call	0xea8	; 0xea8 <OLED_pos>
			OLED_erase_arrow();
     a62:	0e 94 a1 07 	call	0xf42	; 0xf42 <OLED_erase_arrow>
			arrow--;
     a66:	80 91 06 01 	lds	r24, 0x0106
     a6a:	90 91 07 01 	lds	r25, 0x0107
     a6e:	01 97       	sbiw	r24, 0x01	; 1
     a70:	90 93 07 01 	sts	0x0107, r25
     a74:	80 93 06 01 	sts	0x0106, r24
			OLED_pos(arrow, 8);
     a78:	68 e0       	ldi	r22, 0x08	; 8
     a7a:	0e 94 54 07 	call	0xea8	; 0xea8 <OLED_pos>
			OLED_print_arrow();
     a7e:	0e 94 94 07 	call	0xf28	; 0xf28 <OLED_print_arrow>
     a82:	b4 c0       	rjmp	.+360    	; 0xbec <ISR_joystick+0x1e2>
		}
		else if(arrow == 2)
     a84:	02 97       	sbiw	r24, 0x02	; 2
     a86:	09 f0       	breq	.+2      	; 0xa8a <ISR_joystick+0x80>
     a88:	b1 c0       	rjmp	.+354    	; 0xbec <ISR_joystick+0x1e2>
		{
			OLED_pos(arrow, 8);
     a8a:	68 e0       	ldi	r22, 0x08	; 8
     a8c:	82 e0       	ldi	r24, 0x02	; 2
     a8e:	0e 94 54 07 	call	0xea8	; 0xea8 <OLED_pos>
			OLED_erase_arrow();
     a92:	0e 94 a1 07 	call	0xf42	; 0xf42 <OLED_erase_arrow>
			arrow = 5;
     a96:	85 e0       	ldi	r24, 0x05	; 5
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	90 93 07 01 	sts	0x0107, r25
     a9e:	80 93 06 01 	sts	0x0106, r24
			OLED_pos(arrow, 8);
     aa2:	68 e0       	ldi	r22, 0x08	; 8
     aa4:	0e 94 54 07 	call	0xea8	; 0xea8 <OLED_pos>
			OLED_print_arrow();
     aa8:	0e 94 94 07 	call	0xf28	; 0xf28 <OLED_print_arrow>
     aac:	9f c0       	rjmp	.+318    	; 0xbec <ISR_joystick+0x1e2>
		}
	}
	else if(mode == MAIN_MENU && direction == "DOWN"){
     aae:	8a 50       	subi	r24, 0x0A	; 10
     ab0:	92 40       	sbci	r25, 0x02	; 2
     ab2:	09 f0       	breq	.+2      	; 0xab6 <ISR_joystick+0xac>
     ab4:	9b c0       	rjmp	.+310    	; 0xbec <ISR_joystick+0x1e2>
		if(arrow < 5)
     ab6:	80 91 06 01 	lds	r24, 0x0106
     aba:	90 91 07 01 	lds	r25, 0x0107
     abe:	85 30       	cpi	r24, 0x05	; 5
     ac0:	91 05       	cpc	r25, r1
     ac2:	a4 f4       	brge	.+40     	; 0xaec <ISR_joystick+0xe2>
		{
			OLED_pos(arrow, 8);
     ac4:	68 e0       	ldi	r22, 0x08	; 8
     ac6:	0e 94 54 07 	call	0xea8	; 0xea8 <OLED_pos>
			OLED_erase_arrow();
     aca:	0e 94 a1 07 	call	0xf42	; 0xf42 <OLED_erase_arrow>
			arrow++;
     ace:	80 91 06 01 	lds	r24, 0x0106
     ad2:	90 91 07 01 	lds	r25, 0x0107
     ad6:	01 96       	adiw	r24, 0x01	; 1
     ad8:	90 93 07 01 	sts	0x0107, r25
     adc:	80 93 06 01 	sts	0x0106, r24
			OLED_pos(arrow, 8);
     ae0:	68 e0       	ldi	r22, 0x08	; 8
     ae2:	0e 94 54 07 	call	0xea8	; 0xea8 <OLED_pos>
			OLED_print_arrow();
     ae6:	0e 94 94 07 	call	0xf28	; 0xf28 <OLED_print_arrow>
     aea:	80 c0       	rjmp	.+256    	; 0xbec <ISR_joystick+0x1e2>
		}
		else if(arrow == 5)
     aec:	05 97       	sbiw	r24, 0x05	; 5
     aee:	09 f0       	breq	.+2      	; 0xaf2 <ISR_joystick+0xe8>
     af0:	7d c0       	rjmp	.+250    	; 0xbec <ISR_joystick+0x1e2>
		{
			OLED_pos(arrow, 8);
     af2:	68 e0       	ldi	r22, 0x08	; 8
     af4:	85 e0       	ldi	r24, 0x05	; 5
     af6:	0e 94 54 07 	call	0xea8	; 0xea8 <OLED_pos>
			OLED_erase_arrow();
     afa:	0e 94 a1 07 	call	0xf42	; 0xf42 <OLED_erase_arrow>
			arrow = 2;
     afe:	82 e0       	ldi	r24, 0x02	; 2
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	90 93 07 01 	sts	0x0107, r25
     b06:	80 93 06 01 	sts	0x0106, r24
			OLED_pos(arrow, 8);
     b0a:	68 e0       	ldi	r22, 0x08	; 8
     b0c:	0e 94 54 07 	call	0xea8	; 0xea8 <OLED_pos>
			OLED_print_arrow();
     b10:	0e 94 94 07 	call	0xf28	; 0xf28 <OLED_print_arrow>
     b14:	6b c0       	rjmp	.+214    	; 0xbec <ISR_joystick+0x1e2>
		}
	}
	else if(mode == SETTINGS && direction == "UP"){
     b16:	2e 30       	cpi	r18, 0x0E	; 14
     b18:	31 05       	cpc	r19, r1
     b1a:	09 f0       	breq	.+2      	; 0xb1e <ISR_joystick+0x114>
     b1c:	67 c0       	rjmp	.+206    	; 0xbec <ISR_joystick+0x1e2>
     b1e:	22 e0       	ldi	r18, 0x02	; 2
     b20:	8f 30       	cpi	r24, 0x0F	; 15
     b22:	92 07       	cpc	r25, r18
     b24:	89 f5       	brne	.+98     	; 0xb88 <ISR_joystick+0x17e>
		if(arrow == 3)
     b26:	80 91 06 01 	lds	r24, 0x0106
     b2a:	90 91 07 01 	lds	r25, 0x0107
     b2e:	83 30       	cpi	r24, 0x03	; 3
     b30:	91 05       	cpc	r25, r1
     b32:	a9 f4       	brne	.+42     	; 0xb5e <ISR_joystick+0x154>
		{
			OLED_pos(arrow, 8);
     b34:	68 e0       	ldi	r22, 0x08	; 8
     b36:	83 e0       	ldi	r24, 0x03	; 3
     b38:	0e 94 54 07 	call	0xea8	; 0xea8 <OLED_pos>
			OLED_erase_arrow();
     b3c:	0e 94 a1 07 	call	0xf42	; 0xf42 <OLED_erase_arrow>
			arrow--;
     b40:	80 91 06 01 	lds	r24, 0x0106
     b44:	90 91 07 01 	lds	r25, 0x0107
     b48:	01 97       	sbiw	r24, 0x01	; 1
     b4a:	90 93 07 01 	sts	0x0107, r25
     b4e:	80 93 06 01 	sts	0x0106, r24
			OLED_pos(arrow, 8);
     b52:	68 e0       	ldi	r22, 0x08	; 8
     b54:	0e 94 54 07 	call	0xea8	; 0xea8 <OLED_pos>
			OLED_print_arrow();
     b58:	0e 94 94 07 	call	0xf28	; 0xf28 <OLED_print_arrow>
     b5c:	47 c0       	rjmp	.+142    	; 0xbec <ISR_joystick+0x1e2>
		}
		else if(arrow == 2)
     b5e:	02 97       	sbiw	r24, 0x02	; 2
     b60:	09 f0       	breq	.+2      	; 0xb64 <ISR_joystick+0x15a>
     b62:	44 c0       	rjmp	.+136    	; 0xbec <ISR_joystick+0x1e2>
		{
			OLED_pos(arrow, 8);
     b64:	68 e0       	ldi	r22, 0x08	; 8
     b66:	82 e0       	ldi	r24, 0x02	; 2
     b68:	0e 94 54 07 	call	0xea8	; 0xea8 <OLED_pos>
			OLED_erase_arrow();
     b6c:	0e 94 a1 07 	call	0xf42	; 0xf42 <OLED_erase_arrow>
			arrow = 3;
     b70:	83 e0       	ldi	r24, 0x03	; 3
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	90 93 07 01 	sts	0x0107, r25
     b78:	80 93 06 01 	sts	0x0106, r24
			OLED_pos(arrow, 8);
     b7c:	68 e0       	ldi	r22, 0x08	; 8
     b7e:	0e 94 54 07 	call	0xea8	; 0xea8 <OLED_pos>
			OLED_print_arrow();
     b82:	0e 94 94 07 	call	0xf28	; 0xf28 <OLED_print_arrow>
     b86:	32 c0       	rjmp	.+100    	; 0xbec <ISR_joystick+0x1e2>
		}
	}
	else if(mode == SETTINGS && direction == "DOWN"){
     b88:	8a 50       	subi	r24, 0x0A	; 10
     b8a:	92 40       	sbci	r25, 0x02	; 2
     b8c:	79 f5       	brne	.+94     	; 0xbec <ISR_joystick+0x1e2>
		if(arrow == 2)
     b8e:	80 91 06 01 	lds	r24, 0x0106
     b92:	90 91 07 01 	lds	r25, 0x0107
     b96:	82 30       	cpi	r24, 0x02	; 2
     b98:	91 05       	cpc	r25, r1
     b9a:	a9 f4       	brne	.+42     	; 0xbc6 <ISR_joystick+0x1bc>
		{
			OLED_pos(arrow, 8);
     b9c:	68 e0       	ldi	r22, 0x08	; 8
     b9e:	82 e0       	ldi	r24, 0x02	; 2
     ba0:	0e 94 54 07 	call	0xea8	; 0xea8 <OLED_pos>
			OLED_erase_arrow();
     ba4:	0e 94 a1 07 	call	0xf42	; 0xf42 <OLED_erase_arrow>
			arrow++;
     ba8:	80 91 06 01 	lds	r24, 0x0106
     bac:	90 91 07 01 	lds	r25, 0x0107
     bb0:	01 96       	adiw	r24, 0x01	; 1
     bb2:	90 93 07 01 	sts	0x0107, r25
     bb6:	80 93 06 01 	sts	0x0106, r24
			OLED_pos(arrow, 8);
     bba:	68 e0       	ldi	r22, 0x08	; 8
     bbc:	0e 94 54 07 	call	0xea8	; 0xea8 <OLED_pos>
			OLED_print_arrow();
     bc0:	0e 94 94 07 	call	0xf28	; 0xf28 <OLED_print_arrow>
     bc4:	13 c0       	rjmp	.+38     	; 0xbec <ISR_joystick+0x1e2>
		}
		else if(arrow == 3)
     bc6:	03 97       	sbiw	r24, 0x03	; 3
     bc8:	89 f4       	brne	.+34     	; 0xbec <ISR_joystick+0x1e2>
		{
			OLED_pos(arrow, 8);
     bca:	68 e0       	ldi	r22, 0x08	; 8
     bcc:	83 e0       	ldi	r24, 0x03	; 3
     bce:	0e 94 54 07 	call	0xea8	; 0xea8 <OLED_pos>
			OLED_erase_arrow();
     bd2:	0e 94 a1 07 	call	0xf42	; 0xf42 <OLED_erase_arrow>
			arrow = 2;
     bd6:	82 e0       	ldi	r24, 0x02	; 2
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	90 93 07 01 	sts	0x0107, r25
     bde:	80 93 06 01 	sts	0x0106, r24
			OLED_pos(arrow, 8);
     be2:	68 e0       	ldi	r22, 0x08	; 8
     be4:	0e 94 54 07 	call	0xea8	; 0xea8 <OLED_pos>
			OLED_print_arrow();
     be8:	0e 94 94 07 	call	0xf28	; 0xf28 <OLED_print_arrow>
		}
	}
}
     bec:	28 96       	adiw	r28, 0x08	; 8
     bee:	0f b6       	in	r0, 0x3f	; 63
     bf0:	f8 94       	cli
     bf2:	de bf       	out	0x3e, r29	; 62
     bf4:	0f be       	out	0x3f, r0	; 63
     bf6:	cd bf       	out	0x3d, r28	; 61
     bf8:	df 91       	pop	r29
     bfa:	cf 91       	pop	r28
     bfc:	08 95       	ret

00000bfe <main>:

int main(void)
{
     bfe:	cf 93       	push	r28
     c00:	df 93       	push	r29
     c02:	cd b7       	in	r28, 0x3d	; 61
     c04:	de b7       	in	r29, 0x3e	; 62
     c06:	a1 97       	sbiw	r28, 0x21	; 33
     c08:	0f b6       	in	r0, 0x3f	; 63
     c0a:	f8 94       	cli
     c0c:	de bf       	out	0x3e, r29	; 62
     c0e:	0f be       	out	0x3f, r0	; 63
     c10:	cd bf       	out	0x3d, r28	; 61
	/* Initialize UART */
	UART_Init(UART_BAUD);
     c12:	8f e1       	ldi	r24, 0x1F	; 31
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	0e 94 0e 08 	call	0x101c	; 0x101c <UART_Init>
	printf("Reset\n");
     c1a:	8a e1       	ldi	r24, 0x1A	; 26
     c1c:	92 e0       	ldi	r25, 0x02	; 2
     c1e:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <puts>
     c22:	2f e3       	ldi	r18, 0x3F	; 63
     c24:	8d e0       	ldi	r24, 0x0D	; 13
     c26:	93 e0       	ldi	r25, 0x03	; 3
     c28:	21 50       	subi	r18, 0x01	; 1
     c2a:	80 40       	sbci	r24, 0x00	; 0
     c2c:	90 40       	sbci	r25, 0x00	; 0
     c2e:	e1 f7       	brne	.-8      	; 0xc28 <main+0x2a>
     c30:	00 c0       	rjmp	.+0      	; 0xc32 <main+0x34>
     c32:	00 00       	nop
	_delay_ms(1000);
	
	/* Initialize SRAM, ADC and OLED */
	SRAM_Init();
     c34:	0e 94 02 08 	call	0x1004	; 0x1004 <SRAM_Init>
	OLED_Reset();
     c38:	0e 94 cd 06 	call	0xd9a	; 0xd9a <OLED_Reset>
	OLED_Init();
     c3c:	0e 94 26 07 	call	0xe4c	; 0xe4c <OLED_Init>
	CAN_init();
     c40:	0e 94 20 01 	call	0x240	; 0x240 <CAN_init>
	
	/* Draw something cool */
	draw_home();
     c44:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <draw_home>
	
	/* Send and receive a CAN message */
	MSG test_message;
	test_message.ID = 163;
     c48:	83 ea       	ldi	r24, 0xA3	; 163
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	9a 83       	std	Y+2, r25	; 0x02
     c4e:	89 83       	std	Y+1, r24	; 0x01
	test_message.length = 1; 
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	9c 83       	std	Y+4, r25	; 0x04
     c56:	8b 83       	std	Y+3, r24	; 0x03
	test_message.data[0] = 153;
     c58:	89 e9       	ldi	r24, 0x99	; 153
     c5a:	8d 83       	std	Y+5, r24	; 0x05
	CAN_send(&test_message);
     c5c:	ce 01       	movw	r24, r28
     c5e:	01 96       	adiw	r24, 0x01	; 1
     c60:	0e 94 35 01 	call	0x26a	; 0x26a <CAN_send>
     c64:	2f e3       	ldi	r18, 0x3F	; 63
     c66:	8d e0       	ldi	r24, 0x0D	; 13
     c68:	93 e0       	ldi	r25, 0x03	; 3
     c6a:	21 50       	subi	r18, 0x01	; 1
     c6c:	80 40       	sbci	r24, 0x00	; 0
     c6e:	90 40       	sbci	r25, 0x00	; 0
     c70:	e1 f7       	brne	.-8      	; 0xc6a <main+0x6c>
     c72:	00 c0       	rjmp	.+0      	; 0xc74 <main+0x76>
     c74:	00 00       	nop
	_delay_ms(1000);
	MSG received_test = CAN_receive();
     c76:	ce 01       	movw	r24, r28
     c78:	0d 96       	adiw	r24, 0x0d	; 13
     c7a:	0e 94 80 01 	call	0x300	; 0x300 <CAN_receive>
	printf("ID: %d, length: %d, data: %d\n", received_test.ID, received_test.length, received_test.data[0]);
     c7e:	89 89       	ldd	r24, Y+17	; 0x11
     c80:	1f 92       	push	r1
     c82:	8f 93       	push	r24
     c84:	88 89       	ldd	r24, Y+16	; 0x10
     c86:	8f 93       	push	r24
     c88:	8f 85       	ldd	r24, Y+15	; 0x0f
     c8a:	8f 93       	push	r24
     c8c:	8e 85       	ldd	r24, Y+14	; 0x0e
     c8e:	8f 93       	push	r24
     c90:	8d 85       	ldd	r24, Y+13	; 0x0d
     c92:	8f 93       	push	r24
     c94:	80 e2       	ldi	r24, 0x20	; 32
     c96:	92 e0       	ldi	r25, 0x02	; 2
     c98:	9f 93       	push	r25
     c9a:	8f 93       	push	r24
     c9c:	0e 94 4d 0a 	call	0x149a	; 0x149a <printf>
	
	/* Enable interrupts */
	GICR |= (1 << INT0) | (1 << INT1); //| (1 << INT2);
     ca0:	8b b7       	in	r24, 0x3b	; 59
     ca2:	80 6c       	ori	r24, 0xC0	; 192
     ca4:	8b bf       	out	0x3b, r24	; 59
	SREG |= (1 << 7);
     ca6:	8f b7       	in	r24, 0x3f	; 63
     ca8:	80 68       	ori	r24, 0x80	; 128
     caa:	8f bf       	out	0x3f, r24	; 63
	MCUCR |= (1<< ISC00) | (1 << ISC01) | (1 << ISC10) | (1 << ISC11);
     cac:	85 b7       	in	r24, 0x35	; 53
     cae:	8f 60       	ori	r24, 0x0F	; 15
     cb0:	85 bf       	out	0x35, r24	; 53
	EMCUCR &= (0 << ISC2);
     cb2:	86 b7       	in	r24, 0x36	; 54
     cb4:	16 be       	out	0x36, r1	; 54
	sei();
     cb6:	78 94       	sei
	
	/* Variables initialization */
	Position joystick = Joystick_Position();
     cb8:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <Joystick_Position>
     cbc:	52 2e       	mov	r5, r18
     cbe:	63 2e       	mov	r6, r19
     cc0:	74 2e       	mov	r7, r20
     cc2:	85 2e       	mov	r8, r21
     cc4:	26 2e       	mov	r2, r22
     cc6:	37 2e       	mov	r3, r23
     cc8:	48 2e       	mov	r4, r24
     cca:	99 a3       	std	Y+33, r25	; 0x21
	Position joystick_previous = joystick;
	slide_left = ADC_Convert(SLIDE_LEFT);
     ccc:	86 e0       	ldi	r24, 0x06	; 6
     cce:	0e 94 15 01 	call	0x22a	; 0x22a <ADC_Convert>
     cd2:	98 2e       	mov	r9, r24
     cd4:	80 93 42 02 	sts	0x0242, r24
	uint8_t previous_slide_left = slide_left;
	uint8_t slide_right = ADC_Convert(SLIDE_RIGHT);
     cd8:	87 e0       	ldi	r24, 0x07	; 7
     cda:	0e 94 15 01 	call	0x22a	; 0x22a <ADC_Convert>
     cde:	0f b6       	in	r0, 0x3f	; 63
     ce0:	f8 94       	cli
     ce2:	de bf       	out	0x3e, r29	; 62
     ce4:	0f be       	out	0x3f, r0	; 63
     ce6:	cd bf       	out	0x3d, r28	; 61
	uint8_t previous_slide_right = slide_right;
	
    while(1)
    {
		joystick = Joystick_Position();
     ce8:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <Joystick_Position>
     cec:	29 8f       	std	Y+25, r18	; 0x19
     cee:	3a 8f       	std	Y+26, r19	; 0x1a
     cf0:	4b 8f       	std	Y+27, r20	; 0x1b
     cf2:	5c 8f       	std	Y+28, r21	; 0x1c
     cf4:	6d 8f       	std	Y+29, r22	; 0x1d
     cf6:	7e 8f       	std	Y+30, r23	; 0x1e
     cf8:	8f 8f       	std	Y+31, r24	; 0x1f
     cfa:	98 a3       	std	Y+32, r25	; 0x20
     cfc:	e2 2e       	mov	r14, r18
     cfe:	f3 2e       	mov	r15, r19
     d00:	04 2f       	mov	r16, r20
     d02:	15 2f       	mov	r17, r21
     d04:	a6 2e       	mov	r10, r22
     d06:	b7 2e       	mov	r11, r23
     d08:	c8 2e       	mov	r12, r24
     d0a:	d9 2e       	mov	r13, r25
		if((joystick.x != joystick_previous.x)||(joystick.y != joystick_previous.y))
     d0c:	65 2d       	mov	r22, r5
     d0e:	76 2d       	mov	r23, r6
     d10:	87 2d       	mov	r24, r7
     d12:	98 2d       	mov	r25, r8
     d14:	0e 94 7d 08 	call	0x10fa	; 0x10fa <__cmpsf2>
     d18:	81 11       	cpse	r24, r1
     d1a:	0c c0       	rjmp	.+24     	; 0xd34 <main+0x136>
     d1c:	2a 2d       	mov	r18, r10
     d1e:	3b 2d       	mov	r19, r11
     d20:	4c 2d       	mov	r20, r12
     d22:	5d 2d       	mov	r21, r13
     d24:	62 2d       	mov	r22, r2
     d26:	73 2d       	mov	r23, r3
     d28:	84 2d       	mov	r24, r4
     d2a:	99 a1       	ldd	r25, Y+33	; 0x21
     d2c:	0e 94 7d 08 	call	0x10fa	; 0x10fa <__cmpsf2>
     d30:	88 23       	and	r24, r24
     d32:	51 f0       	breq	.+20     	; 0xd48 <main+0x14a>
		{
			ISR_joystick(joystick);
     d34:	29 8d       	ldd	r18, Y+25	; 0x19
     d36:	3a 8d       	ldd	r19, Y+26	; 0x1a
     d38:	4b 8d       	ldd	r20, Y+27	; 0x1b
     d3a:	5c 8d       	ldd	r21, Y+28	; 0x1c
     d3c:	6d 8d       	ldd	r22, Y+29	; 0x1d
     d3e:	7e 8d       	ldd	r23, Y+30	; 0x1e
     d40:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d42:	98 a1       	ldd	r25, Y+32	; 0x20
     d44:	0e 94 05 05 	call	0xa0a	; 0xa0a <ISR_joystick>
		}
		joystick_previous = joystick;
		
		slide_left = ADC_Convert(SLIDE_LEFT);
     d48:	86 e0       	ldi	r24, 0x06	; 6
     d4a:	0e 94 15 01 	call	0x22a	; 0x22a <ADC_Convert>
     d4e:	80 93 42 02 	sts	0x0242, r24
		if(slide_left != previous_slide_left)
     d52:	98 12       	cpse	r9, r24
		{
			ISR_slide_left();
     d54:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <ISR_slide_left>
		}
		previous_slide_left = slide_left;
     d58:	90 90 42 02 	lds	r9, 0x0242
		 
		slide_right = ADC_Convert(SLIDE_RIGHT);
     d5c:	87 e0       	ldi	r24, 0x07	; 7
     d5e:	0e 94 15 01 	call	0x22a	; 0x22a <ADC_Convert>
		{
			ISR_slide_right();
		}
		previous_slide_right = slide_right;
		
		if(JOYSTICK_BUTTON == 1)
     d62:	86 b3       	in	r24, 0x16	; 22
     d64:	9f ef       	ldi	r25, 0xFF	; 255
     d66:	20 e7       	ldi	r18, 0x70	; 112
     d68:	82 e0       	ldi	r24, 0x02	; 2
     d6a:	91 50       	subi	r25, 0x01	; 1
     d6c:	20 40       	sbci	r18, 0x00	; 0
     d6e:	80 40       	sbci	r24, 0x00	; 0
     d70:	e1 f7       	brne	.-8      	; 0xd6a <main+0x16c>
     d72:	00 c0       	rjmp	.+0      	; 0xd74 <main+0x176>
     d74:	00 00       	nop
		joystick = Joystick_Position();
		if((joystick.x != joystick_previous.x)||(joystick.y != joystick_previous.y))
		{
			ISR_joystick(joystick);
		}
		joystick_previous = joystick;
     d76:	5e 2c       	mov	r5, r14
     d78:	6f 2c       	mov	r6, r15
     d7a:	70 2e       	mov	r7, r16
     d7c:	81 2e       	mov	r8, r17
     d7e:	2a 2c       	mov	r2, r10
     d80:	3b 2c       	mov	r3, r11
     d82:	4c 2c       	mov	r4, r12
     d84:	d9 a2       	std	Y+33, r13	; 0x21
     d86:	b0 cf       	rjmp	.-160    	; 0xce8 <main+0xea>

00000d88 <OLED_write_data>:

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     d88:	80 93 00 12 	sts	0x1200, r24
     d8c:	08 95       	ret

00000d8e <OLED_set_brightness>:

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     d8e:	e0 e0       	ldi	r30, 0x00	; 0
     d90:	f0 e1       	ldi	r31, 0x10	; 16
     d92:	91 e8       	ldi	r25, 0x81	; 129
     d94:	90 83       	st	Z, r25
     d96:	80 83       	st	Z, r24
     d98:	08 95       	ret

00000d9a <OLED_Reset>:
     d9a:	80 eb       	ldi	r24, 0xB0	; 176
     d9c:	80 93 00 10 	sts	0x1000, r24
     da0:	80 e8       	ldi	r24, 0x80	; 128
     da2:	90 e0       	ldi	r25, 0x00	; 0

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     da4:	e0 e0       	ldi	r30, 0x00	; 0
     da6:	f2 e1       	ldi	r31, 0x12	; 18
     da8:	10 82       	st	Z, r1
     daa:	01 97       	sbiw	r24, 0x01	; 1

/* Erase the RAM line by line */
void OLED_Reset()
{
	OLED_write_cmd(0xb0);
	for(int i=0; i<128; i++){
     dac:	00 97       	sbiw	r24, 0x00	; 0
     dae:	e1 f7       	brne	.-8      	; 0xda8 <OLED_Reset+0xe>

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     db0:	81 eb       	ldi	r24, 0xB1	; 177
     db2:	80 93 00 10 	sts	0x1000, r24
     db6:	80 e8       	ldi	r24, 0x80	; 128
     db8:	90 e0       	ldi	r25, 0x00	; 0

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     dba:	e0 e0       	ldi	r30, 0x00	; 0
     dbc:	f2 e1       	ldi	r31, 0x12	; 18
     dbe:	10 82       	st	Z, r1
     dc0:	01 97       	sbiw	r24, 0x01	; 1
	OLED_write_cmd(0xb0);
	for(int i=0; i<128; i++){
		OLED_write_data(0b00000000);
	}
	OLED_write_cmd(0xb1);
	for(int i=0; i<128; i++){
     dc2:	00 97       	sbiw	r24, 0x00	; 0
     dc4:	e1 f7       	brne	.-8      	; 0xdbe <OLED_Reset+0x24>

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     dc6:	82 eb       	ldi	r24, 0xB2	; 178
     dc8:	80 93 00 10 	sts	0x1000, r24
     dcc:	80 e8       	ldi	r24, 0x80	; 128
     dce:	90 e0       	ldi	r25, 0x00	; 0

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     dd0:	e0 e0       	ldi	r30, 0x00	; 0
     dd2:	f2 e1       	ldi	r31, 0x12	; 18
     dd4:	10 82       	st	Z, r1
     dd6:	01 97       	sbiw	r24, 0x01	; 1
	OLED_write_cmd(0xb1);
	for(int i=0; i<128; i++){
		OLED_write_data(0b00000000);
	}
	OLED_write_cmd(0xb2);
	for(int i=0; i<128; i++){
     dd8:	00 97       	sbiw	r24, 0x00	; 0
     dda:	e1 f7       	brne	.-8      	; 0xdd4 <OLED_Reset+0x3a>

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     ddc:	83 eb       	ldi	r24, 0xB3	; 179
     dde:	80 93 00 10 	sts	0x1000, r24
     de2:	80 e8       	ldi	r24, 0x80	; 128
     de4:	90 e0       	ldi	r25, 0x00	; 0

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     de6:	e0 e0       	ldi	r30, 0x00	; 0
     de8:	f2 e1       	ldi	r31, 0x12	; 18
     dea:	10 82       	st	Z, r1
     dec:	01 97       	sbiw	r24, 0x01	; 1
	OLED_write_cmd(0xb2);
	for(int i=0; i<128; i++){
		OLED_write_data(0b00000000);
	}
	OLED_write_cmd(0xb3);
	for(int i=0; i<128; i++){
     dee:	00 97       	sbiw	r24, 0x00	; 0
     df0:	e1 f7       	brne	.-8      	; 0xdea <OLED_Reset+0x50>

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     df2:	84 eb       	ldi	r24, 0xB4	; 180
     df4:	80 93 00 10 	sts	0x1000, r24
     df8:	80 e8       	ldi	r24, 0x80	; 128
     dfa:	90 e0       	ldi	r25, 0x00	; 0

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     dfc:	e0 e0       	ldi	r30, 0x00	; 0
     dfe:	f2 e1       	ldi	r31, 0x12	; 18
     e00:	10 82       	st	Z, r1
     e02:	01 97       	sbiw	r24, 0x01	; 1
	OLED_write_cmd(0xb3);
	for(int i=0; i<128; i++){
		OLED_write_data(0b00000000);
	}
	OLED_write_cmd(0xb4);
	for(int i=0; i<128; i++){
     e04:	00 97       	sbiw	r24, 0x00	; 0
     e06:	e1 f7       	brne	.-8      	; 0xe00 <OLED_Reset+0x66>

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     e08:	85 eb       	ldi	r24, 0xB5	; 181
     e0a:	80 93 00 10 	sts	0x1000, r24
     e0e:	80 e8       	ldi	r24, 0x80	; 128
     e10:	90 e0       	ldi	r25, 0x00	; 0

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     e12:	e0 e0       	ldi	r30, 0x00	; 0
     e14:	f2 e1       	ldi	r31, 0x12	; 18
     e16:	10 82       	st	Z, r1
     e18:	01 97       	sbiw	r24, 0x01	; 1
	OLED_write_cmd(0xb4);
	for(int i=0; i<128; i++){
		OLED_write_data(0b00000000);
	}
	OLED_write_cmd(0xb5);
	for(int i=0; i<128; i++){
     e1a:	00 97       	sbiw	r24, 0x00	; 0
     e1c:	e1 f7       	brne	.-8      	; 0xe16 <OLED_Reset+0x7c>

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     e1e:	86 eb       	ldi	r24, 0xB6	; 182
     e20:	80 93 00 10 	sts	0x1000, r24
     e24:	80 e8       	ldi	r24, 0x80	; 128
     e26:	90 e0       	ldi	r25, 0x00	; 0

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     e28:	e0 e0       	ldi	r30, 0x00	; 0
     e2a:	f2 e1       	ldi	r31, 0x12	; 18
     e2c:	10 82       	st	Z, r1
     e2e:	01 97       	sbiw	r24, 0x01	; 1
	OLED_write_cmd(0xb5);
	for(int i=0; i<128; i++){
		OLED_write_data(0b00000000);
	}
	OLED_write_cmd(0xb6);
	for(int i=0; i<128; i++){
     e30:	00 97       	sbiw	r24, 0x00	; 0
     e32:	e1 f7       	brne	.-8      	; 0xe2c <OLED_Reset+0x92>

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     e34:	87 eb       	ldi	r24, 0xB7	; 183
     e36:	80 93 00 10 	sts	0x1000, r24
     e3a:	80 e8       	ldi	r24, 0x80	; 128
     e3c:	90 e0       	ldi	r25, 0x00	; 0

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     e3e:	e0 e0       	ldi	r30, 0x00	; 0
     e40:	f2 e1       	ldi	r31, 0x12	; 18
     e42:	10 82       	st	Z, r1
     e44:	01 97       	sbiw	r24, 0x01	; 1
	OLED_write_cmd(0xb6);
	for(int i=0; i<128; i++){
		OLED_write_data(0b00000000);
	}
	OLED_write_cmd(0xb7);
	for(int i=0; i<128; i++){
     e46:	00 97       	sbiw	r24, 0x00	; 0
     e48:	e1 f7       	brne	.-8      	; 0xe42 <OLED_Reset+0xa8>
		OLED_write_data(0b00000000);
	}
}
     e4a:	08 95       	ret

00000e4c <OLED_Init>:

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     e4c:	e0 e0       	ldi	r30, 0x00	; 0
     e4e:	f0 e1       	ldi	r31, 0x10	; 16
     e50:	8e ea       	ldi	r24, 0xAE	; 174
     e52:	80 83       	st	Z, r24
     e54:	81 ea       	ldi	r24, 0xA1	; 161
     e56:	80 83       	st	Z, r24
     e58:	8a ed       	ldi	r24, 0xDA	; 218
     e5a:	80 83       	st	Z, r24
     e5c:	82 e1       	ldi	r24, 0x12	; 18
     e5e:	80 83       	st	Z, r24
     e60:	88 ec       	ldi	r24, 0xC8	; 200
     e62:	80 83       	st	Z, r24
     e64:	88 ea       	ldi	r24, 0xA8	; 168
     e66:	80 83       	st	Z, r24
     e68:	8f e3       	ldi	r24, 0x3F	; 63
     e6a:	80 83       	st	Z, r24
     e6c:	85 ed       	ldi	r24, 0xD5	; 213
     e6e:	80 83       	st	Z, r24
     e70:	80 e8       	ldi	r24, 0x80	; 128
     e72:	80 83       	st	Z, r24
     e74:	81 e8       	ldi	r24, 0x81	; 129
     e76:	80 83       	st	Z, r24
     e78:	80 e5       	ldi	r24, 0x50	; 80
     e7a:	80 83       	st	Z, r24
     e7c:	89 ed       	ldi	r24, 0xD9	; 217
     e7e:	80 83       	st	Z, r24
     e80:	81 e2       	ldi	r24, 0x21	; 33
     e82:	80 83       	st	Z, r24
     e84:	80 e2       	ldi	r24, 0x20	; 32
     e86:	80 83       	st	Z, r24
     e88:	82 e0       	ldi	r24, 0x02	; 2
     e8a:	80 83       	st	Z, r24
     e8c:	8b ed       	ldi	r24, 0xDB	; 219
     e8e:	80 83       	st	Z, r24
     e90:	80 e3       	ldi	r24, 0x30	; 48
     e92:	80 83       	st	Z, r24
     e94:	8d ea       	ldi	r24, 0xAD	; 173
     e96:	80 83       	st	Z, r24
     e98:	10 82       	st	Z, r1
     e9a:	84 ea       	ldi	r24, 0xA4	; 164
     e9c:	80 83       	st	Z, r24
     e9e:	86 ea       	ldi	r24, 0xA6	; 166
     ea0:	80 83       	st	Z, r24
     ea2:	8f ea       	ldi	r24, 0xAF	; 175
     ea4:	80 83       	st	Z, r24
     ea6:	08 95       	ret

00000ea8 <OLED_pos>:
}

/* Set the cursor to the given position: page is from 0 to 7, segment from 0 to 127 */
void OLED_pos(uint8_t page, uint8_t segment)
{
	OLED_write_cmd(176 + page);
     ea8:	80 55       	subi	r24, 0x50	; 80

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     eaa:	e0 e0       	ldi	r30, 0x00	; 0
     eac:	f0 e1       	ldi	r31, 0x10	; 16
     eae:	80 83       	st	Z, r24

/* Set the cursor to the given position: page is from 0 to 7, segment from 0 to 127 */
void OLED_pos(uint8_t page, uint8_t segment)
{
	OLED_write_cmd(176 + page);
	OLED_write_cmd(segment & 0x0f);
     eb0:	86 2f       	mov	r24, r22
     eb2:	8f 70       	andi	r24, 0x0F	; 15

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     eb4:	80 83       	st	Z, r24
/* Set the cursor to the given position: page is from 0 to 7, segment from 0 to 127 */
void OLED_pos(uint8_t page, uint8_t segment)
{
	OLED_write_cmd(176 + page);
	OLED_write_cmd(segment & 0x0f);
	OLED_write_cmd(((segment & 0x70)>>4)|0x10);
     eb6:	60 77       	andi	r22, 0x70	; 112
     eb8:	62 95       	swap	r22
     eba:	6f 70       	andi	r22, 0x0F	; 15
     ebc:	60 61       	ori	r22, 0x10	; 16

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     ebe:	60 83       	st	Z, r22
     ec0:	08 95       	ret

00000ec2 <OLED_print>:
	OLED_write_cmd(((segment & 0x70)>>4)|0x10);
}

/* Print a character from the table */
void OLED_print(char* a)
{
     ec2:	88 0f       	add	r24, r24
     ec4:	99 1f       	adc	r25, r25
     ec6:	88 0f       	add	r24, r24
     ec8:	99 1f       	adc	r25, r25
	int index = (int)a - 32;
	for(int i=0; i<4; i++)
     eca:	20 e0       	ldi	r18, 0x00	; 0
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	80 51       	subi	r24, 0x10	; 16
     ed0:	90 40       	sbci	r25, 0x00	; 0

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     ed2:	a0 e0       	ldi	r26, 0x00	; 0
     ed4:	b2 e1       	ldi	r27, 0x12	; 18
     ed6:	fc 01       	movw	r30, r24
     ed8:	e2 0f       	add	r30, r18
     eda:	f3 1f       	adc	r31, r19
void OLED_print(char* a)
{
	int index = (int)a - 32;
	for(int i=0; i<4; i++)
	{
		OLED_write_data(pgm_read_byte(&font[index][i]));
     edc:	e4 91       	lpm	r30, Z

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     ede:	ec 93       	st	X, r30

/* Print a character from the table */
void OLED_print(char* a)
{
	int index = (int)a - 32;
	for(int i=0; i<4; i++)
     ee0:	2f 5f       	subi	r18, 0xFF	; 255
     ee2:	3f 4f       	sbci	r19, 0xFF	; 255
     ee4:	24 30       	cpi	r18, 0x04	; 4
     ee6:	31 05       	cpc	r19, r1
     ee8:	b1 f7       	brne	.-20     	; 0xed6 <OLED_print+0x14>
	{
		OLED_write_data(pgm_read_byte(&font[index][i]));
	}
}
     eea:	08 95       	ret

00000eec <OLED_print_string>:

/* Print a string. If the string exceeds the screen size, stop printing. */
void OLED_print_string(char* string)
{
     eec:	0f 93       	push	r16
     eee:	1f 93       	push	r17
     ef0:	cf 93       	push	r28
     ef2:	df 93       	push	r29
     ef4:	fc 01       	movw	r30, r24
	int i=0;
	while(string[i]!='\0' && i < 32)
     ef6:	80 81       	ld	r24, Z
     ef8:	88 23       	and	r24, r24
     efa:	89 f0       	breq	.+34     	; 0xf1e <OLED_print_string+0x32>
     efc:	8f 01       	movw	r16, r30
     efe:	0f 5f       	subi	r16, 0xFF	; 255
     f00:	1f 4f       	sbci	r17, 0xFF	; 255
}

/* Print a string. If the string exceeds the screen size, stop printing. */
void OLED_print_string(char* string)
{
	int i=0;
     f02:	c0 e0       	ldi	r28, 0x00	; 0
     f04:	d0 e0       	ldi	r29, 0x00	; 0
	while(string[i]!='\0' && i < 32)
	{
		OLED_print(string[i]);
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	0e 94 61 07 	call	0xec2	; 0xec2 <OLED_print>
		i++;
     f0c:	21 96       	adiw	r28, 0x01	; 1

/* Print a string. If the string exceeds the screen size, stop printing. */
void OLED_print_string(char* string)
{
	int i=0;
	while(string[i]!='\0' && i < 32)
     f0e:	f8 01       	movw	r30, r16
     f10:	81 91       	ld	r24, Z+
     f12:	8f 01       	movw	r16, r30
     f14:	88 23       	and	r24, r24
     f16:	19 f0       	breq	.+6      	; 0xf1e <OLED_print_string+0x32>
     f18:	c0 32       	cpi	r28, 0x20	; 32
     f1a:	d1 05       	cpc	r29, r1
     f1c:	a1 f7       	brne	.-24     	; 0xf06 <OLED_print_string+0x1a>
	{
		OLED_print(string[i]);
		i++;
	}
}
     f1e:	df 91       	pop	r29
     f20:	cf 91       	pop	r28
     f22:	1f 91       	pop	r17
     f24:	0f 91       	pop	r16
     f26:	08 95       	ret

00000f28 <OLED_print_arrow>:

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     f28:	e0 e0       	ldi	r30, 0x00	; 0
     f2a:	f2 e1       	ldi	r31, 0x12	; 18
     f2c:	80 e1       	ldi	r24, 0x10	; 16
     f2e:	80 83       	st	Z, r24
     f30:	80 83       	st	Z, r24
     f32:	80 83       	st	Z, r24
     f34:	80 83       	st	Z, r24
     f36:	9c e7       	ldi	r25, 0x7C	; 124
     f38:	90 83       	st	Z, r25
     f3a:	98 e3       	ldi	r25, 0x38	; 56
     f3c:	90 83       	st	Z, r25
     f3e:	80 83       	st	Z, r24
     f40:	08 95       	ret

00000f42 <OLED_erase_arrow>:
     f42:	e0 e0       	ldi	r30, 0x00	; 0
     f44:	f2 e1       	ldi	r31, 0x12	; 18
     f46:	10 82       	st	Z, r1
     f48:	10 82       	st	Z, r1
     f4a:	10 82       	st	Z, r1
     f4c:	10 82       	st	Z, r1
     f4e:	10 82       	st	Z, r1
     f50:	10 82       	st	Z, r1
     f52:	10 82       	st	Z, r1
     f54:	08 95       	ret

00000f56 <OLED_print_home>:
     f56:	e0 e0       	ldi	r30, 0x00	; 0
     f58:	f2 e1       	ldi	r31, 0x12	; 18
     f5a:	10 82       	st	Z, r1
     f5c:	88 ef       	ldi	r24, 0xF8	; 248
     f5e:	80 83       	st	Z, r24
     f60:	9c ef       	ldi	r25, 0xFC	; 252
     f62:	90 83       	st	Z, r25
     f64:	26 ef       	ldi	r18, 0xF6	; 246
     f66:	20 83       	st	Z, r18
     f68:	3f e3       	ldi	r19, 0x3F	; 63
     f6a:	30 83       	st	Z, r19
     f6c:	20 83       	st	Z, r18
     f6e:	90 83       	st	Z, r25
     f70:	80 83       	st	Z, r24
     f72:	10 82       	st	Z, r1
     f74:	08 95       	ret

00000f76 <OLED_print_woman>:
	OLED_write_data(0b11111000);
	OLED_write_data(0b00000000);
}

void OLED_print_woman(uint8_t page, uint8_t segment)
{
     f76:	0f 93       	push	r16
     f78:	1f 93       	push	r17
     f7a:	cf 93       	push	r28
     f7c:	df 93       	push	r29
     f7e:	18 2f       	mov	r17, r24
     f80:	06 2f       	mov	r16, r22
	OLED_pos(page, segment);
     f82:	0e 94 54 07 	call	0xea8	; 0xea8 <OLED_pos>

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     f86:	c0 e0       	ldi	r28, 0x00	; 0
     f88:	d2 e1       	ldi	r29, 0x12	; 18
     f8a:	18 82       	st	Y, r1
     f8c:	18 82       	st	Y, r1
     f8e:	80 e1       	ldi	r24, 0x10	; 16
     f90:	88 83       	st	Y, r24
     f92:	94 e9       	ldi	r25, 0x94	; 148
     f94:	98 83       	st	Y, r25
     f96:	27 ed       	ldi	r18, 0xD7	; 215
     f98:	28 83       	st	Y, r18
     f9a:	3f ef       	ldi	r19, 0xFF	; 255
     f9c:	38 83       	st	Y, r19
     f9e:	28 83       	st	Y, r18
     fa0:	98 83       	st	Y, r25
     fa2:	88 83       	st	Y, r24
     fa4:	18 82       	st	Y, r1
     fa6:	18 82       	st	Y, r1
	OLED_write_data(0b11010111);
	OLED_write_data(0b10010100);
	OLED_write_data(0b00010000);
	OLED_write_data(0b00000000);
	OLED_write_data(0b00000000);
	OLED_pos(page+1, segment);
     fa8:	60 2f       	mov	r22, r16
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	81 0f       	add	r24, r17
     fae:	0e 94 54 07 	call	0xea8	; 0xea8 <OLED_pos>

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     fb2:	18 82       	st	Y, r1
     fb4:	92 e0       	ldi	r25, 0x02	; 2
     fb6:	98 83       	st	Y, r25
     fb8:	83 e0       	ldi	r24, 0x03	; 3
     fba:	88 83       	st	Y, r24
     fbc:	23 e2       	ldi	r18, 0x23	; 35
     fbe:	28 83       	st	Y, r18
     fc0:	3f e3       	ldi	r19, 0x3F	; 63
     fc2:	38 83       	st	Y, r19
     fc4:	88 83       	st	Y, r24
     fc6:	38 83       	st	Y, r19
     fc8:	28 83       	st	Y, r18
     fca:	88 83       	st	Y, r24
     fcc:	98 83       	st	Y, r25
     fce:	18 82       	st	Y, r1
	OLED_write_data(0b00111111);
	OLED_write_data(0b00100011);
	OLED_write_data(0b00000011);
	OLED_write_data(0b00000010);
	OLED_write_data(0b00000000);
}
     fd0:	df 91       	pop	r29
     fd2:	cf 91       	pop	r28
     fd4:	1f 91       	pop	r17
     fd6:	0f 91       	pop	r16
     fd8:	08 95       	ret

00000fda <SPI_Init>:
#include <avr/io.h>

void SPI_Init(void)
{
	/* Set CS, MOSI and SCK output, MISO input */
	DDRB |= (1<<PB4)| (1<<PB5)|(1<<PB7);
     fda:	87 b3       	in	r24, 0x17	; 23
     fdc:	80 6b       	ori	r24, 0xB0	; 176
     fde:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1<<PB6);
     fe0:	be 98       	cbi	0x17, 6	; 23
	PORTB |= (1<<4);
     fe2:	c4 9a       	sbi	0x18, 4	; 24
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     fe4:	81 e5       	ldi	r24, 0x51	; 81
     fe6:	8d b9       	out	0x0d, r24	; 13
     fe8:	08 95       	ret

00000fea <SPI_write>:
}

void SPI_write(char cData)
{
	/* Start transmission */
	SPDR = cData;
     fea:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while (!(SPSR & (1<<SPIF)))
     fec:	77 9b       	sbis	0x0e, 7	; 14
     fee:	fe cf       	rjmp	.-4      	; 0xfec <SPI_write+0x2>
		;
}
     ff0:	08 95       	ret

00000ff2 <SPI_read>:

char SPI_read(void)
{
	/* Start transmission */
	SPDR = 0x00;
     ff2:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while (!(SPSR & (1<<SPIF)))
     ff4:	77 9b       	sbis	0x0e, 7	; 14
     ff6:	fe cf       	rjmp	.-4      	; 0xff4 <SPI_read+0x2>
		;
	return SPDR;
     ff8:	8f b1       	in	r24, 0x0f	; 15
}
     ffa:	08 95       	ret

00000ffc <SPI_on>:

void SPI_on(void)
{
	PORTB &= ~(1<<PB4);
     ffc:	c4 98       	cbi	0x18, 4	; 24
     ffe:	08 95       	ret

00001000 <SPI_off>:
}

void SPI_off(void)
{
	PORTB |= (1<<PB4);
    1000:	c4 9a       	sbi	0x18, 4	; 24
    1002:	08 95       	ret

00001004 <SRAM_Init>:
#include <avr/io.h>

void SRAM_Init(void)
{
	/* Enable external SRAM: set SRE to 1 */
	MCUCR |= (1 << SRE);
    1004:	85 b7       	in	r24, 0x35	; 53
    1006:	80 68       	ori	r24, 0x80	; 128
    1008:	85 bf       	out	0x35, r24	; 53
    100a:	08 95       	ret

0000100c <UART_Transmit>:
#include <stdio.h>
#include <avr/io.h>

void UART_Transmit(unsigned char data){
	/* Wait for empty transmit buffer */
	while(!(UCSR0A&(1<<UDRE0)))
    100c:	5d 9b       	sbis	0x0b, 5	; 11
    100e:	fe cf       	rjmp	.-4      	; 0x100c <UART_Transmit>
		;
	/* Put data into buffer */
	UDR0 = data;
    1010:	8c b9       	out	0x0c, r24	; 12
    1012:	08 95       	ret

00001014 <UART_Receive>:
}

unsigned char UART_Receive(void){
	/* Wait for data to be received */
	while(!(UCSR0A&(1<<RXC0)))
    1014:	5f 9b       	sbis	0x0b, 7	; 11
    1016:	fe cf       	rjmp	.-4      	; 0x1014 <UART_Receive>
		;
	/* Get and return received data from buffer */
	return UDR0;
    1018:	8c b1       	in	r24, 0x0c	; 12
}
    101a:	08 95       	ret

0000101c <UART_Init>:

void UART_Init(unsigned int ubrr){
	/* Set baud rate */
	UBRR0L = (unsigned char) ubrr;
    101c:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    101e:	88 e1       	ldi	r24, 0x18	; 24
    1020:	8a b9       	out	0x0a, r24	; 10
	/* Link printf to UART transmissions */	
	fdevopen(UART_Transmit,UART_Receive);
    1022:	6a e0       	ldi	r22, 0x0A	; 10
    1024:	78 e0       	ldi	r23, 0x08	; 8
    1026:	86 e0       	ldi	r24, 0x06	; 6
    1028:	98 e0       	ldi	r25, 0x08	; 8
    102a:	0e 94 02 0a 	call	0x1404	; 0x1404 <fdevopen>
    102e:	08 95       	ret

00001030 <__subsf3>:
    1030:	50 58       	subi	r21, 0x80	; 128

00001032 <__addsf3>:
    1032:	bb 27       	eor	r27, r27
    1034:	aa 27       	eor	r26, r26
    1036:	0e d0       	rcall	.+28     	; 0x1054 <__addsf3x>
    1038:	44 c1       	rjmp	.+648    	; 0x12c2 <__fp_round>
    103a:	35 d1       	rcall	.+618    	; 0x12a6 <__fp_pscA>
    103c:	30 f0       	brcs	.+12     	; 0x104a <__addsf3+0x18>
    103e:	3a d1       	rcall	.+628    	; 0x12b4 <__fp_pscB>
    1040:	20 f0       	brcs	.+8      	; 0x104a <__addsf3+0x18>
    1042:	31 f4       	brne	.+12     	; 0x1050 <__addsf3+0x1e>
    1044:	9f 3f       	cpi	r25, 0xFF	; 255
    1046:	11 f4       	brne	.+4      	; 0x104c <__addsf3+0x1a>
    1048:	1e f4       	brtc	.+6      	; 0x1050 <__addsf3+0x1e>
    104a:	2a c1       	rjmp	.+596    	; 0x12a0 <__fp_nan>
    104c:	0e f4       	brtc	.+2      	; 0x1050 <__addsf3+0x1e>
    104e:	e0 95       	com	r30
    1050:	e7 fb       	bst	r30, 7
    1052:	20 c1       	rjmp	.+576    	; 0x1294 <__fp_inf>

00001054 <__addsf3x>:
    1054:	e9 2f       	mov	r30, r25
    1056:	46 d1       	rcall	.+652    	; 0x12e4 <__fp_split3>
    1058:	80 f3       	brcs	.-32     	; 0x103a <__addsf3+0x8>
    105a:	ba 17       	cp	r27, r26
    105c:	62 07       	cpc	r22, r18
    105e:	73 07       	cpc	r23, r19
    1060:	84 07       	cpc	r24, r20
    1062:	95 07       	cpc	r25, r21
    1064:	18 f0       	brcs	.+6      	; 0x106c <__addsf3x+0x18>
    1066:	71 f4       	brne	.+28     	; 0x1084 <__addsf3x+0x30>
    1068:	9e f5       	brtc	.+102    	; 0x10d0 <__addsf3x+0x7c>
    106a:	5e c1       	rjmp	.+700    	; 0x1328 <__fp_zero>
    106c:	0e f4       	brtc	.+2      	; 0x1070 <__addsf3x+0x1c>
    106e:	e0 95       	com	r30
    1070:	0b 2e       	mov	r0, r27
    1072:	ba 2f       	mov	r27, r26
    1074:	a0 2d       	mov	r26, r0
    1076:	0b 01       	movw	r0, r22
    1078:	b9 01       	movw	r22, r18
    107a:	90 01       	movw	r18, r0
    107c:	0c 01       	movw	r0, r24
    107e:	ca 01       	movw	r24, r20
    1080:	a0 01       	movw	r20, r0
    1082:	11 24       	eor	r1, r1
    1084:	ff 27       	eor	r31, r31
    1086:	59 1b       	sub	r21, r25
    1088:	99 f0       	breq	.+38     	; 0x10b0 <__addsf3x+0x5c>
    108a:	59 3f       	cpi	r21, 0xF9	; 249
    108c:	50 f4       	brcc	.+20     	; 0x10a2 <__addsf3x+0x4e>
    108e:	50 3e       	cpi	r21, 0xE0	; 224
    1090:	68 f1       	brcs	.+90     	; 0x10ec <__addsf3x+0x98>
    1092:	1a 16       	cp	r1, r26
    1094:	f0 40       	sbci	r31, 0x00	; 0
    1096:	a2 2f       	mov	r26, r18
    1098:	23 2f       	mov	r18, r19
    109a:	34 2f       	mov	r19, r20
    109c:	44 27       	eor	r20, r20
    109e:	58 5f       	subi	r21, 0xF8	; 248
    10a0:	f3 cf       	rjmp	.-26     	; 0x1088 <__addsf3x+0x34>
    10a2:	46 95       	lsr	r20
    10a4:	37 95       	ror	r19
    10a6:	27 95       	ror	r18
    10a8:	a7 95       	ror	r26
    10aa:	f0 40       	sbci	r31, 0x00	; 0
    10ac:	53 95       	inc	r21
    10ae:	c9 f7       	brne	.-14     	; 0x10a2 <__addsf3x+0x4e>
    10b0:	7e f4       	brtc	.+30     	; 0x10d0 <__addsf3x+0x7c>
    10b2:	1f 16       	cp	r1, r31
    10b4:	ba 0b       	sbc	r27, r26
    10b6:	62 0b       	sbc	r22, r18
    10b8:	73 0b       	sbc	r23, r19
    10ba:	84 0b       	sbc	r24, r20
    10bc:	ba f0       	brmi	.+46     	; 0x10ec <__addsf3x+0x98>
    10be:	91 50       	subi	r25, 0x01	; 1
    10c0:	a1 f0       	breq	.+40     	; 0x10ea <__addsf3x+0x96>
    10c2:	ff 0f       	add	r31, r31
    10c4:	bb 1f       	adc	r27, r27
    10c6:	66 1f       	adc	r22, r22
    10c8:	77 1f       	adc	r23, r23
    10ca:	88 1f       	adc	r24, r24
    10cc:	c2 f7       	brpl	.-16     	; 0x10be <__addsf3x+0x6a>
    10ce:	0e c0       	rjmp	.+28     	; 0x10ec <__addsf3x+0x98>
    10d0:	ba 0f       	add	r27, r26
    10d2:	62 1f       	adc	r22, r18
    10d4:	73 1f       	adc	r23, r19
    10d6:	84 1f       	adc	r24, r20
    10d8:	48 f4       	brcc	.+18     	; 0x10ec <__addsf3x+0x98>
    10da:	87 95       	ror	r24
    10dc:	77 95       	ror	r23
    10de:	67 95       	ror	r22
    10e0:	b7 95       	ror	r27
    10e2:	f7 95       	ror	r31
    10e4:	9e 3f       	cpi	r25, 0xFE	; 254
    10e6:	08 f0       	brcs	.+2      	; 0x10ea <__addsf3x+0x96>
    10e8:	b3 cf       	rjmp	.-154    	; 0x1050 <__addsf3+0x1e>
    10ea:	93 95       	inc	r25
    10ec:	88 0f       	add	r24, r24
    10ee:	08 f0       	brcs	.+2      	; 0x10f2 <__addsf3x+0x9e>
    10f0:	99 27       	eor	r25, r25
    10f2:	ee 0f       	add	r30, r30
    10f4:	97 95       	ror	r25
    10f6:	87 95       	ror	r24
    10f8:	08 95       	ret

000010fa <__cmpsf2>:
    10fa:	a8 d0       	rcall	.+336    	; 0x124c <__fp_cmp>
    10fc:	08 f4       	brcc	.+2      	; 0x1100 <__cmpsf2+0x6>
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	08 95       	ret

00001102 <__divsf3>:
    1102:	0c d0       	rcall	.+24     	; 0x111c <__divsf3x>
    1104:	de c0       	rjmp	.+444    	; 0x12c2 <__fp_round>
    1106:	d6 d0       	rcall	.+428    	; 0x12b4 <__fp_pscB>
    1108:	40 f0       	brcs	.+16     	; 0x111a <__divsf3+0x18>
    110a:	cd d0       	rcall	.+410    	; 0x12a6 <__fp_pscA>
    110c:	30 f0       	brcs	.+12     	; 0x111a <__divsf3+0x18>
    110e:	21 f4       	brne	.+8      	; 0x1118 <__divsf3+0x16>
    1110:	5f 3f       	cpi	r21, 0xFF	; 255
    1112:	19 f0       	breq	.+6      	; 0x111a <__divsf3+0x18>
    1114:	bf c0       	rjmp	.+382    	; 0x1294 <__fp_inf>
    1116:	51 11       	cpse	r21, r1
    1118:	08 c1       	rjmp	.+528    	; 0x132a <__fp_szero>
    111a:	c2 c0       	rjmp	.+388    	; 0x12a0 <__fp_nan>

0000111c <__divsf3x>:
    111c:	e3 d0       	rcall	.+454    	; 0x12e4 <__fp_split3>
    111e:	98 f3       	brcs	.-26     	; 0x1106 <__divsf3+0x4>

00001120 <__divsf3_pse>:
    1120:	99 23       	and	r25, r25
    1122:	c9 f3       	breq	.-14     	; 0x1116 <__divsf3+0x14>
    1124:	55 23       	and	r21, r21
    1126:	b1 f3       	breq	.-20     	; 0x1114 <__divsf3+0x12>
    1128:	95 1b       	sub	r25, r21
    112a:	55 0b       	sbc	r21, r21
    112c:	bb 27       	eor	r27, r27
    112e:	aa 27       	eor	r26, r26
    1130:	62 17       	cp	r22, r18
    1132:	73 07       	cpc	r23, r19
    1134:	84 07       	cpc	r24, r20
    1136:	38 f0       	brcs	.+14     	; 0x1146 <__divsf3_pse+0x26>
    1138:	9f 5f       	subi	r25, 0xFF	; 255
    113a:	5f 4f       	sbci	r21, 0xFF	; 255
    113c:	22 0f       	add	r18, r18
    113e:	33 1f       	adc	r19, r19
    1140:	44 1f       	adc	r20, r20
    1142:	aa 1f       	adc	r26, r26
    1144:	a9 f3       	breq	.-22     	; 0x1130 <__divsf3_pse+0x10>
    1146:	33 d0       	rcall	.+102    	; 0x11ae <__divsf3_pse+0x8e>
    1148:	0e 2e       	mov	r0, r30
    114a:	3a f0       	brmi	.+14     	; 0x115a <__divsf3_pse+0x3a>
    114c:	e0 e8       	ldi	r30, 0x80	; 128
    114e:	30 d0       	rcall	.+96     	; 0x11b0 <__divsf3_pse+0x90>
    1150:	91 50       	subi	r25, 0x01	; 1
    1152:	50 40       	sbci	r21, 0x00	; 0
    1154:	e6 95       	lsr	r30
    1156:	00 1c       	adc	r0, r0
    1158:	ca f7       	brpl	.-14     	; 0x114c <__divsf3_pse+0x2c>
    115a:	29 d0       	rcall	.+82     	; 0x11ae <__divsf3_pse+0x8e>
    115c:	fe 2f       	mov	r31, r30
    115e:	27 d0       	rcall	.+78     	; 0x11ae <__divsf3_pse+0x8e>
    1160:	66 0f       	add	r22, r22
    1162:	77 1f       	adc	r23, r23
    1164:	88 1f       	adc	r24, r24
    1166:	bb 1f       	adc	r27, r27
    1168:	26 17       	cp	r18, r22
    116a:	37 07       	cpc	r19, r23
    116c:	48 07       	cpc	r20, r24
    116e:	ab 07       	cpc	r26, r27
    1170:	b0 e8       	ldi	r27, 0x80	; 128
    1172:	09 f0       	breq	.+2      	; 0x1176 <__divsf3_pse+0x56>
    1174:	bb 0b       	sbc	r27, r27
    1176:	80 2d       	mov	r24, r0
    1178:	bf 01       	movw	r22, r30
    117a:	ff 27       	eor	r31, r31
    117c:	93 58       	subi	r25, 0x83	; 131
    117e:	5f 4f       	sbci	r21, 0xFF	; 255
    1180:	2a f0       	brmi	.+10     	; 0x118c <__divsf3_pse+0x6c>
    1182:	9e 3f       	cpi	r25, 0xFE	; 254
    1184:	51 05       	cpc	r21, r1
    1186:	68 f0       	brcs	.+26     	; 0x11a2 <__divsf3_pse+0x82>
    1188:	85 c0       	rjmp	.+266    	; 0x1294 <__fp_inf>
    118a:	cf c0       	rjmp	.+414    	; 0x132a <__fp_szero>
    118c:	5f 3f       	cpi	r21, 0xFF	; 255
    118e:	ec f3       	brlt	.-6      	; 0x118a <__divsf3_pse+0x6a>
    1190:	98 3e       	cpi	r25, 0xE8	; 232
    1192:	dc f3       	brlt	.-10     	; 0x118a <__divsf3_pse+0x6a>
    1194:	86 95       	lsr	r24
    1196:	77 95       	ror	r23
    1198:	67 95       	ror	r22
    119a:	b7 95       	ror	r27
    119c:	f7 95       	ror	r31
    119e:	9f 5f       	subi	r25, 0xFF	; 255
    11a0:	c9 f7       	brne	.-14     	; 0x1194 <__divsf3_pse+0x74>
    11a2:	88 0f       	add	r24, r24
    11a4:	91 1d       	adc	r25, r1
    11a6:	96 95       	lsr	r25
    11a8:	87 95       	ror	r24
    11aa:	97 f9       	bld	r25, 7
    11ac:	08 95       	ret
    11ae:	e1 e0       	ldi	r30, 0x01	; 1
    11b0:	66 0f       	add	r22, r22
    11b2:	77 1f       	adc	r23, r23
    11b4:	88 1f       	adc	r24, r24
    11b6:	bb 1f       	adc	r27, r27
    11b8:	62 17       	cp	r22, r18
    11ba:	73 07       	cpc	r23, r19
    11bc:	84 07       	cpc	r24, r20
    11be:	ba 07       	cpc	r27, r26
    11c0:	20 f0       	brcs	.+8      	; 0x11ca <__divsf3_pse+0xaa>
    11c2:	62 1b       	sub	r22, r18
    11c4:	73 0b       	sbc	r23, r19
    11c6:	84 0b       	sbc	r24, r20
    11c8:	ba 0b       	sbc	r27, r26
    11ca:	ee 1f       	adc	r30, r30
    11cc:	88 f7       	brcc	.-30     	; 0x11b0 <__divsf3_pse+0x90>
    11ce:	e0 95       	com	r30
    11d0:	08 95       	ret

000011d2 <__floatunsisf>:
    11d2:	e8 94       	clt
    11d4:	09 c0       	rjmp	.+18     	; 0x11e8 <__floatsisf+0x12>

000011d6 <__floatsisf>:
    11d6:	97 fb       	bst	r25, 7
    11d8:	3e f4       	brtc	.+14     	; 0x11e8 <__floatsisf+0x12>
    11da:	90 95       	com	r25
    11dc:	80 95       	com	r24
    11de:	70 95       	com	r23
    11e0:	61 95       	neg	r22
    11e2:	7f 4f       	sbci	r23, 0xFF	; 255
    11e4:	8f 4f       	sbci	r24, 0xFF	; 255
    11e6:	9f 4f       	sbci	r25, 0xFF	; 255
    11e8:	99 23       	and	r25, r25
    11ea:	a9 f0       	breq	.+42     	; 0x1216 <__floatsisf+0x40>
    11ec:	f9 2f       	mov	r31, r25
    11ee:	96 e9       	ldi	r25, 0x96	; 150
    11f0:	bb 27       	eor	r27, r27
    11f2:	93 95       	inc	r25
    11f4:	f6 95       	lsr	r31
    11f6:	87 95       	ror	r24
    11f8:	77 95       	ror	r23
    11fa:	67 95       	ror	r22
    11fc:	b7 95       	ror	r27
    11fe:	f1 11       	cpse	r31, r1
    1200:	f8 cf       	rjmp	.-16     	; 0x11f2 <__floatsisf+0x1c>
    1202:	fa f4       	brpl	.+62     	; 0x1242 <__floatsisf+0x6c>
    1204:	bb 0f       	add	r27, r27
    1206:	11 f4       	brne	.+4      	; 0x120c <__floatsisf+0x36>
    1208:	60 ff       	sbrs	r22, 0
    120a:	1b c0       	rjmp	.+54     	; 0x1242 <__floatsisf+0x6c>
    120c:	6f 5f       	subi	r22, 0xFF	; 255
    120e:	7f 4f       	sbci	r23, 0xFF	; 255
    1210:	8f 4f       	sbci	r24, 0xFF	; 255
    1212:	9f 4f       	sbci	r25, 0xFF	; 255
    1214:	16 c0       	rjmp	.+44     	; 0x1242 <__floatsisf+0x6c>
    1216:	88 23       	and	r24, r24
    1218:	11 f0       	breq	.+4      	; 0x121e <__floatsisf+0x48>
    121a:	96 e9       	ldi	r25, 0x96	; 150
    121c:	11 c0       	rjmp	.+34     	; 0x1240 <__floatsisf+0x6a>
    121e:	77 23       	and	r23, r23
    1220:	21 f0       	breq	.+8      	; 0x122a <__floatsisf+0x54>
    1222:	9e e8       	ldi	r25, 0x8E	; 142
    1224:	87 2f       	mov	r24, r23
    1226:	76 2f       	mov	r23, r22
    1228:	05 c0       	rjmp	.+10     	; 0x1234 <__floatsisf+0x5e>
    122a:	66 23       	and	r22, r22
    122c:	71 f0       	breq	.+28     	; 0x124a <__floatsisf+0x74>
    122e:	96 e8       	ldi	r25, 0x86	; 134
    1230:	86 2f       	mov	r24, r22
    1232:	70 e0       	ldi	r23, 0x00	; 0
    1234:	60 e0       	ldi	r22, 0x00	; 0
    1236:	2a f0       	brmi	.+10     	; 0x1242 <__floatsisf+0x6c>
    1238:	9a 95       	dec	r25
    123a:	66 0f       	add	r22, r22
    123c:	77 1f       	adc	r23, r23
    123e:	88 1f       	adc	r24, r24
    1240:	da f7       	brpl	.-10     	; 0x1238 <__floatsisf+0x62>
    1242:	88 0f       	add	r24, r24
    1244:	96 95       	lsr	r25
    1246:	87 95       	ror	r24
    1248:	97 f9       	bld	r25, 7
    124a:	08 95       	ret

0000124c <__fp_cmp>:
    124c:	99 0f       	add	r25, r25
    124e:	00 08       	sbc	r0, r0
    1250:	55 0f       	add	r21, r21
    1252:	aa 0b       	sbc	r26, r26
    1254:	e0 e8       	ldi	r30, 0x80	; 128
    1256:	fe ef       	ldi	r31, 0xFE	; 254
    1258:	16 16       	cp	r1, r22
    125a:	17 06       	cpc	r1, r23
    125c:	e8 07       	cpc	r30, r24
    125e:	f9 07       	cpc	r31, r25
    1260:	c0 f0       	brcs	.+48     	; 0x1292 <__fp_cmp+0x46>
    1262:	12 16       	cp	r1, r18
    1264:	13 06       	cpc	r1, r19
    1266:	e4 07       	cpc	r30, r20
    1268:	f5 07       	cpc	r31, r21
    126a:	98 f0       	brcs	.+38     	; 0x1292 <__fp_cmp+0x46>
    126c:	62 1b       	sub	r22, r18
    126e:	73 0b       	sbc	r23, r19
    1270:	84 0b       	sbc	r24, r20
    1272:	95 0b       	sbc	r25, r21
    1274:	39 f4       	brne	.+14     	; 0x1284 <__fp_cmp+0x38>
    1276:	0a 26       	eor	r0, r26
    1278:	61 f0       	breq	.+24     	; 0x1292 <__fp_cmp+0x46>
    127a:	23 2b       	or	r18, r19
    127c:	24 2b       	or	r18, r20
    127e:	25 2b       	or	r18, r21
    1280:	21 f4       	brne	.+8      	; 0x128a <__fp_cmp+0x3e>
    1282:	08 95       	ret
    1284:	0a 26       	eor	r0, r26
    1286:	09 f4       	brne	.+2      	; 0x128a <__fp_cmp+0x3e>
    1288:	a1 40       	sbci	r26, 0x01	; 1
    128a:	a6 95       	lsr	r26
    128c:	8f ef       	ldi	r24, 0xFF	; 255
    128e:	81 1d       	adc	r24, r1
    1290:	81 1d       	adc	r24, r1
    1292:	08 95       	ret

00001294 <__fp_inf>:
    1294:	97 f9       	bld	r25, 7
    1296:	9f 67       	ori	r25, 0x7F	; 127
    1298:	80 e8       	ldi	r24, 0x80	; 128
    129a:	70 e0       	ldi	r23, 0x00	; 0
    129c:	60 e0       	ldi	r22, 0x00	; 0
    129e:	08 95       	ret

000012a0 <__fp_nan>:
    12a0:	9f ef       	ldi	r25, 0xFF	; 255
    12a2:	80 ec       	ldi	r24, 0xC0	; 192
    12a4:	08 95       	ret

000012a6 <__fp_pscA>:
    12a6:	00 24       	eor	r0, r0
    12a8:	0a 94       	dec	r0
    12aa:	16 16       	cp	r1, r22
    12ac:	17 06       	cpc	r1, r23
    12ae:	18 06       	cpc	r1, r24
    12b0:	09 06       	cpc	r0, r25
    12b2:	08 95       	ret

000012b4 <__fp_pscB>:
    12b4:	00 24       	eor	r0, r0
    12b6:	0a 94       	dec	r0
    12b8:	12 16       	cp	r1, r18
    12ba:	13 06       	cpc	r1, r19
    12bc:	14 06       	cpc	r1, r20
    12be:	05 06       	cpc	r0, r21
    12c0:	08 95       	ret

000012c2 <__fp_round>:
    12c2:	09 2e       	mov	r0, r25
    12c4:	03 94       	inc	r0
    12c6:	00 0c       	add	r0, r0
    12c8:	11 f4       	brne	.+4      	; 0x12ce <__fp_round+0xc>
    12ca:	88 23       	and	r24, r24
    12cc:	52 f0       	brmi	.+20     	; 0x12e2 <__fp_round+0x20>
    12ce:	bb 0f       	add	r27, r27
    12d0:	40 f4       	brcc	.+16     	; 0x12e2 <__fp_round+0x20>
    12d2:	bf 2b       	or	r27, r31
    12d4:	11 f4       	brne	.+4      	; 0x12da <__fp_round+0x18>
    12d6:	60 ff       	sbrs	r22, 0
    12d8:	04 c0       	rjmp	.+8      	; 0x12e2 <__fp_round+0x20>
    12da:	6f 5f       	subi	r22, 0xFF	; 255
    12dc:	7f 4f       	sbci	r23, 0xFF	; 255
    12de:	8f 4f       	sbci	r24, 0xFF	; 255
    12e0:	9f 4f       	sbci	r25, 0xFF	; 255
    12e2:	08 95       	ret

000012e4 <__fp_split3>:
    12e4:	57 fd       	sbrc	r21, 7
    12e6:	90 58       	subi	r25, 0x80	; 128
    12e8:	44 0f       	add	r20, r20
    12ea:	55 1f       	adc	r21, r21
    12ec:	59 f0       	breq	.+22     	; 0x1304 <__fp_splitA+0x10>
    12ee:	5f 3f       	cpi	r21, 0xFF	; 255
    12f0:	71 f0       	breq	.+28     	; 0x130e <__fp_splitA+0x1a>
    12f2:	47 95       	ror	r20

000012f4 <__fp_splitA>:
    12f4:	88 0f       	add	r24, r24
    12f6:	97 fb       	bst	r25, 7
    12f8:	99 1f       	adc	r25, r25
    12fa:	61 f0       	breq	.+24     	; 0x1314 <__fp_splitA+0x20>
    12fc:	9f 3f       	cpi	r25, 0xFF	; 255
    12fe:	79 f0       	breq	.+30     	; 0x131e <__fp_splitA+0x2a>
    1300:	87 95       	ror	r24
    1302:	08 95       	ret
    1304:	12 16       	cp	r1, r18
    1306:	13 06       	cpc	r1, r19
    1308:	14 06       	cpc	r1, r20
    130a:	55 1f       	adc	r21, r21
    130c:	f2 cf       	rjmp	.-28     	; 0x12f2 <__fp_split3+0xe>
    130e:	46 95       	lsr	r20
    1310:	f1 df       	rcall	.-30     	; 0x12f4 <__fp_splitA>
    1312:	08 c0       	rjmp	.+16     	; 0x1324 <__fp_splitA+0x30>
    1314:	16 16       	cp	r1, r22
    1316:	17 06       	cpc	r1, r23
    1318:	18 06       	cpc	r1, r24
    131a:	99 1f       	adc	r25, r25
    131c:	f1 cf       	rjmp	.-30     	; 0x1300 <__fp_splitA+0xc>
    131e:	86 95       	lsr	r24
    1320:	71 05       	cpc	r23, r1
    1322:	61 05       	cpc	r22, r1
    1324:	08 94       	sec
    1326:	08 95       	ret

00001328 <__fp_zero>:
    1328:	e8 94       	clt

0000132a <__fp_szero>:
    132a:	bb 27       	eor	r27, r27
    132c:	66 27       	eor	r22, r22
    132e:	77 27       	eor	r23, r23
    1330:	cb 01       	movw	r24, r22
    1332:	97 f9       	bld	r25, 7
    1334:	08 95       	ret

00001336 <__gesf2>:
    1336:	8a df       	rcall	.-236    	; 0x124c <__fp_cmp>
    1338:	08 f4       	brcc	.+2      	; 0x133c <__gesf2+0x6>
    133a:	8f ef       	ldi	r24, 0xFF	; 255
    133c:	08 95       	ret

0000133e <__mulsf3>:
    133e:	0b d0       	rcall	.+22     	; 0x1356 <__mulsf3x>
    1340:	c0 cf       	rjmp	.-128    	; 0x12c2 <__fp_round>
    1342:	b1 df       	rcall	.-158    	; 0x12a6 <__fp_pscA>
    1344:	28 f0       	brcs	.+10     	; 0x1350 <__mulsf3+0x12>
    1346:	b6 df       	rcall	.-148    	; 0x12b4 <__fp_pscB>
    1348:	18 f0       	brcs	.+6      	; 0x1350 <__mulsf3+0x12>
    134a:	95 23       	and	r25, r21
    134c:	09 f0       	breq	.+2      	; 0x1350 <__mulsf3+0x12>
    134e:	a2 cf       	rjmp	.-188    	; 0x1294 <__fp_inf>
    1350:	a7 cf       	rjmp	.-178    	; 0x12a0 <__fp_nan>
    1352:	11 24       	eor	r1, r1
    1354:	ea cf       	rjmp	.-44     	; 0x132a <__fp_szero>

00001356 <__mulsf3x>:
    1356:	c6 df       	rcall	.-116    	; 0x12e4 <__fp_split3>
    1358:	a0 f3       	brcs	.-24     	; 0x1342 <__mulsf3+0x4>

0000135a <__mulsf3_pse>:
    135a:	95 9f       	mul	r25, r21
    135c:	d1 f3       	breq	.-12     	; 0x1352 <__mulsf3+0x14>
    135e:	95 0f       	add	r25, r21
    1360:	50 e0       	ldi	r21, 0x00	; 0
    1362:	55 1f       	adc	r21, r21
    1364:	62 9f       	mul	r22, r18
    1366:	f0 01       	movw	r30, r0
    1368:	72 9f       	mul	r23, r18
    136a:	bb 27       	eor	r27, r27
    136c:	f0 0d       	add	r31, r0
    136e:	b1 1d       	adc	r27, r1
    1370:	63 9f       	mul	r22, r19
    1372:	aa 27       	eor	r26, r26
    1374:	f0 0d       	add	r31, r0
    1376:	b1 1d       	adc	r27, r1
    1378:	aa 1f       	adc	r26, r26
    137a:	64 9f       	mul	r22, r20
    137c:	66 27       	eor	r22, r22
    137e:	b0 0d       	add	r27, r0
    1380:	a1 1d       	adc	r26, r1
    1382:	66 1f       	adc	r22, r22
    1384:	82 9f       	mul	r24, r18
    1386:	22 27       	eor	r18, r18
    1388:	b0 0d       	add	r27, r0
    138a:	a1 1d       	adc	r26, r1
    138c:	62 1f       	adc	r22, r18
    138e:	73 9f       	mul	r23, r19
    1390:	b0 0d       	add	r27, r0
    1392:	a1 1d       	adc	r26, r1
    1394:	62 1f       	adc	r22, r18
    1396:	83 9f       	mul	r24, r19
    1398:	a0 0d       	add	r26, r0
    139a:	61 1d       	adc	r22, r1
    139c:	22 1f       	adc	r18, r18
    139e:	74 9f       	mul	r23, r20
    13a0:	33 27       	eor	r19, r19
    13a2:	a0 0d       	add	r26, r0
    13a4:	61 1d       	adc	r22, r1
    13a6:	23 1f       	adc	r18, r19
    13a8:	84 9f       	mul	r24, r20
    13aa:	60 0d       	add	r22, r0
    13ac:	21 1d       	adc	r18, r1
    13ae:	82 2f       	mov	r24, r18
    13b0:	76 2f       	mov	r23, r22
    13b2:	6a 2f       	mov	r22, r26
    13b4:	11 24       	eor	r1, r1
    13b6:	9f 57       	subi	r25, 0x7F	; 127
    13b8:	50 40       	sbci	r21, 0x00	; 0
    13ba:	8a f0       	brmi	.+34     	; 0x13de <__mulsf3_pse+0x84>
    13bc:	e1 f0       	breq	.+56     	; 0x13f6 <__mulsf3_pse+0x9c>
    13be:	88 23       	and	r24, r24
    13c0:	4a f0       	brmi	.+18     	; 0x13d4 <__mulsf3_pse+0x7a>
    13c2:	ee 0f       	add	r30, r30
    13c4:	ff 1f       	adc	r31, r31
    13c6:	bb 1f       	adc	r27, r27
    13c8:	66 1f       	adc	r22, r22
    13ca:	77 1f       	adc	r23, r23
    13cc:	88 1f       	adc	r24, r24
    13ce:	91 50       	subi	r25, 0x01	; 1
    13d0:	50 40       	sbci	r21, 0x00	; 0
    13d2:	a9 f7       	brne	.-22     	; 0x13be <__mulsf3_pse+0x64>
    13d4:	9e 3f       	cpi	r25, 0xFE	; 254
    13d6:	51 05       	cpc	r21, r1
    13d8:	70 f0       	brcs	.+28     	; 0x13f6 <__mulsf3_pse+0x9c>
    13da:	5c cf       	rjmp	.-328    	; 0x1294 <__fp_inf>
    13dc:	a6 cf       	rjmp	.-180    	; 0x132a <__fp_szero>
    13de:	5f 3f       	cpi	r21, 0xFF	; 255
    13e0:	ec f3       	brlt	.-6      	; 0x13dc <__mulsf3_pse+0x82>
    13e2:	98 3e       	cpi	r25, 0xE8	; 232
    13e4:	dc f3       	brlt	.-10     	; 0x13dc <__mulsf3_pse+0x82>
    13e6:	86 95       	lsr	r24
    13e8:	77 95       	ror	r23
    13ea:	67 95       	ror	r22
    13ec:	b7 95       	ror	r27
    13ee:	f7 95       	ror	r31
    13f0:	e7 95       	ror	r30
    13f2:	9f 5f       	subi	r25, 0xFF	; 255
    13f4:	c1 f7       	brne	.-16     	; 0x13e6 <__mulsf3_pse+0x8c>
    13f6:	fe 2b       	or	r31, r30
    13f8:	88 0f       	add	r24, r24
    13fa:	91 1d       	adc	r25, r1
    13fc:	96 95       	lsr	r25
    13fe:	87 95       	ror	r24
    1400:	97 f9       	bld	r25, 7
    1402:	08 95       	ret

00001404 <fdevopen>:
    1404:	0f 93       	push	r16
    1406:	1f 93       	push	r17
    1408:	cf 93       	push	r28
    140a:	df 93       	push	r29
    140c:	ec 01       	movw	r28, r24
    140e:	8b 01       	movw	r16, r22
    1410:	00 97       	sbiw	r24, 0x00	; 0
    1412:	31 f4       	brne	.+12     	; 0x1420 <fdevopen+0x1c>
    1414:	61 15       	cp	r22, r1
    1416:	71 05       	cpc	r23, r1
    1418:	19 f4       	brne	.+6      	; 0x1420 <fdevopen+0x1c>
    141a:	80 e0       	ldi	r24, 0x00	; 0
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	38 c0       	rjmp	.+112    	; 0x1490 <fdevopen+0x8c>
    1420:	6e e0       	ldi	r22, 0x0E	; 14
    1422:	70 e0       	ldi	r23, 0x00	; 0
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <calloc>
    142c:	fc 01       	movw	r30, r24
    142e:	00 97       	sbiw	r24, 0x00	; 0
    1430:	a1 f3       	breq	.-24     	; 0x141a <fdevopen+0x16>
    1432:	80 e8       	ldi	r24, 0x80	; 128
    1434:	83 83       	std	Z+3, r24	; 0x03
    1436:	01 15       	cp	r16, r1
    1438:	11 05       	cpc	r17, r1
    143a:	71 f0       	breq	.+28     	; 0x1458 <fdevopen+0x54>
    143c:	13 87       	std	Z+11, r17	; 0x0b
    143e:	02 87       	std	Z+10, r16	; 0x0a
    1440:	81 e8       	ldi	r24, 0x81	; 129
    1442:	83 83       	std	Z+3, r24	; 0x03
    1444:	80 91 43 02 	lds	r24, 0x0243
    1448:	90 91 44 02 	lds	r25, 0x0244
    144c:	89 2b       	or	r24, r25
    144e:	21 f4       	brne	.+8      	; 0x1458 <fdevopen+0x54>
    1450:	f0 93 44 02 	sts	0x0244, r31
    1454:	e0 93 43 02 	sts	0x0243, r30
    1458:	20 97       	sbiw	r28, 0x00	; 0
    145a:	c9 f0       	breq	.+50     	; 0x148e <fdevopen+0x8a>
    145c:	d1 87       	std	Z+9, r29	; 0x09
    145e:	c0 87       	std	Z+8, r28	; 0x08
    1460:	83 81       	ldd	r24, Z+3	; 0x03
    1462:	82 60       	ori	r24, 0x02	; 2
    1464:	83 83       	std	Z+3, r24	; 0x03
    1466:	80 91 45 02 	lds	r24, 0x0245
    146a:	90 91 46 02 	lds	r25, 0x0246
    146e:	89 2b       	or	r24, r25
    1470:	71 f4       	brne	.+28     	; 0x148e <fdevopen+0x8a>
    1472:	f0 93 46 02 	sts	0x0246, r31
    1476:	e0 93 45 02 	sts	0x0245, r30
    147a:	80 91 47 02 	lds	r24, 0x0247
    147e:	90 91 48 02 	lds	r25, 0x0248
    1482:	89 2b       	or	r24, r25
    1484:	21 f4       	brne	.+8      	; 0x148e <fdevopen+0x8a>
    1486:	f0 93 48 02 	sts	0x0248, r31
    148a:	e0 93 47 02 	sts	0x0247, r30
    148e:	cf 01       	movw	r24, r30
    1490:	df 91       	pop	r29
    1492:	cf 91       	pop	r28
    1494:	1f 91       	pop	r17
    1496:	0f 91       	pop	r16
    1498:	08 95       	ret

0000149a <printf>:
    149a:	a0 e0       	ldi	r26, 0x00	; 0
    149c:	b0 e0       	ldi	r27, 0x00	; 0
    149e:	e3 e5       	ldi	r30, 0x53	; 83
    14a0:	fa e0       	ldi	r31, 0x0A	; 10
    14a2:	0c 94 60 0e 	jmp	0x1cc0	; 0x1cc0 <__prologue_saves__+0x20>
    14a6:	fe 01       	movw	r30, r28
    14a8:	35 96       	adiw	r30, 0x05	; 5
    14aa:	61 91       	ld	r22, Z+
    14ac:	71 91       	ld	r23, Z+
    14ae:	af 01       	movw	r20, r30
    14b0:	80 91 45 02 	lds	r24, 0x0245
    14b4:	90 91 46 02 	lds	r25, 0x0246
    14b8:	0e 94 8e 0a 	call	0x151c	; 0x151c <vfprintf>
    14bc:	e2 e0       	ldi	r30, 0x02	; 2
    14be:	0c 94 7c 0e 	jmp	0x1cf8	; 0x1cf8 <__epilogue_restores__+0x20>

000014c2 <puts>:
    14c2:	0f 93       	push	r16
    14c4:	1f 93       	push	r17
    14c6:	cf 93       	push	r28
    14c8:	df 93       	push	r29
    14ca:	e0 91 45 02 	lds	r30, 0x0245
    14ce:	f0 91 46 02 	lds	r31, 0x0246
    14d2:	23 81       	ldd	r18, Z+3	; 0x03
    14d4:	21 ff       	sbrs	r18, 1
    14d6:	1b c0       	rjmp	.+54     	; 0x150e <puts+0x4c>
    14d8:	ec 01       	movw	r28, r24
    14da:	00 e0       	ldi	r16, 0x00	; 0
    14dc:	10 e0       	ldi	r17, 0x00	; 0
    14de:	89 91       	ld	r24, Y+
    14e0:	60 91 45 02 	lds	r22, 0x0245
    14e4:	70 91 46 02 	lds	r23, 0x0246
    14e8:	db 01       	movw	r26, r22
    14ea:	18 96       	adiw	r26, 0x08	; 8
    14ec:	ed 91       	ld	r30, X+
    14ee:	fc 91       	ld	r31, X
    14f0:	19 97       	sbiw	r26, 0x09	; 9
    14f2:	88 23       	and	r24, r24
    14f4:	31 f0       	breq	.+12     	; 0x1502 <puts+0x40>
    14f6:	09 95       	icall
    14f8:	89 2b       	or	r24, r25
    14fa:	89 f3       	breq	.-30     	; 0x14de <puts+0x1c>
    14fc:	0f ef       	ldi	r16, 0xFF	; 255
    14fe:	1f ef       	ldi	r17, 0xFF	; 255
    1500:	ee cf       	rjmp	.-36     	; 0x14de <puts+0x1c>
    1502:	8a e0       	ldi	r24, 0x0A	; 10
    1504:	09 95       	icall
    1506:	89 2b       	or	r24, r25
    1508:	11 f4       	brne	.+4      	; 0x150e <puts+0x4c>
    150a:	c8 01       	movw	r24, r16
    150c:	02 c0       	rjmp	.+4      	; 0x1512 <puts+0x50>
    150e:	8f ef       	ldi	r24, 0xFF	; 255
    1510:	9f ef       	ldi	r25, 0xFF	; 255
    1512:	df 91       	pop	r29
    1514:	cf 91       	pop	r28
    1516:	1f 91       	pop	r17
    1518:	0f 91       	pop	r16
    151a:	08 95       	ret

0000151c <vfprintf>:
    151c:	ac e0       	ldi	r26, 0x0C	; 12
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	e4 e9       	ldi	r30, 0x94	; 148
    1522:	fa e0       	ldi	r31, 0x0A	; 10
    1524:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__prologue_saves__>
    1528:	7c 01       	movw	r14, r24
    152a:	6b 01       	movw	r12, r22
    152c:	8a 01       	movw	r16, r20
    152e:	fc 01       	movw	r30, r24
    1530:	17 82       	std	Z+7, r1	; 0x07
    1532:	16 82       	std	Z+6, r1	; 0x06
    1534:	83 81       	ldd	r24, Z+3	; 0x03
    1536:	81 ff       	sbrs	r24, 1
    1538:	bd c1       	rjmp	.+890    	; 0x18b4 <vfprintf+0x398>
    153a:	ce 01       	movw	r24, r28
    153c:	01 96       	adiw	r24, 0x01	; 1
    153e:	4c 01       	movw	r8, r24
    1540:	f7 01       	movw	r30, r14
    1542:	93 81       	ldd	r25, Z+3	; 0x03
    1544:	f6 01       	movw	r30, r12
    1546:	93 fd       	sbrc	r25, 3
    1548:	85 91       	lpm	r24, Z+
    154a:	93 ff       	sbrs	r25, 3
    154c:	81 91       	ld	r24, Z+
    154e:	6f 01       	movw	r12, r30
    1550:	88 23       	and	r24, r24
    1552:	09 f4       	brne	.+2      	; 0x1556 <vfprintf+0x3a>
    1554:	ab c1       	rjmp	.+854    	; 0x18ac <vfprintf+0x390>
    1556:	85 32       	cpi	r24, 0x25	; 37
    1558:	39 f4       	brne	.+14     	; 0x1568 <vfprintf+0x4c>
    155a:	93 fd       	sbrc	r25, 3
    155c:	85 91       	lpm	r24, Z+
    155e:	93 ff       	sbrs	r25, 3
    1560:	81 91       	ld	r24, Z+
    1562:	6f 01       	movw	r12, r30
    1564:	85 32       	cpi	r24, 0x25	; 37
    1566:	29 f4       	brne	.+10     	; 0x1572 <vfprintf+0x56>
    1568:	b7 01       	movw	r22, r14
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <fputc>
    1570:	e7 cf       	rjmp	.-50     	; 0x1540 <vfprintf+0x24>
    1572:	51 2c       	mov	r5, r1
    1574:	31 2c       	mov	r3, r1
    1576:	20 e0       	ldi	r18, 0x00	; 0
    1578:	20 32       	cpi	r18, 0x20	; 32
    157a:	a0 f4       	brcc	.+40     	; 0x15a4 <vfprintf+0x88>
    157c:	8b 32       	cpi	r24, 0x2B	; 43
    157e:	69 f0       	breq	.+26     	; 0x159a <vfprintf+0x7e>
    1580:	30 f4       	brcc	.+12     	; 0x158e <vfprintf+0x72>
    1582:	80 32       	cpi	r24, 0x20	; 32
    1584:	59 f0       	breq	.+22     	; 0x159c <vfprintf+0x80>
    1586:	83 32       	cpi	r24, 0x23	; 35
    1588:	69 f4       	brne	.+26     	; 0x15a4 <vfprintf+0x88>
    158a:	20 61       	ori	r18, 0x10	; 16
    158c:	2c c0       	rjmp	.+88     	; 0x15e6 <vfprintf+0xca>
    158e:	8d 32       	cpi	r24, 0x2D	; 45
    1590:	39 f0       	breq	.+14     	; 0x15a0 <vfprintf+0x84>
    1592:	80 33       	cpi	r24, 0x30	; 48
    1594:	39 f4       	brne	.+14     	; 0x15a4 <vfprintf+0x88>
    1596:	21 60       	ori	r18, 0x01	; 1
    1598:	26 c0       	rjmp	.+76     	; 0x15e6 <vfprintf+0xca>
    159a:	22 60       	ori	r18, 0x02	; 2
    159c:	24 60       	ori	r18, 0x04	; 4
    159e:	23 c0       	rjmp	.+70     	; 0x15e6 <vfprintf+0xca>
    15a0:	28 60       	ori	r18, 0x08	; 8
    15a2:	21 c0       	rjmp	.+66     	; 0x15e6 <vfprintf+0xca>
    15a4:	27 fd       	sbrc	r18, 7
    15a6:	27 c0       	rjmp	.+78     	; 0x15f6 <vfprintf+0xda>
    15a8:	30 ed       	ldi	r19, 0xD0	; 208
    15aa:	38 0f       	add	r19, r24
    15ac:	3a 30       	cpi	r19, 0x0A	; 10
    15ae:	78 f4       	brcc	.+30     	; 0x15ce <vfprintf+0xb2>
    15b0:	26 ff       	sbrs	r18, 6
    15b2:	06 c0       	rjmp	.+12     	; 0x15c0 <vfprintf+0xa4>
    15b4:	fa e0       	ldi	r31, 0x0A	; 10
    15b6:	5f 9e       	mul	r5, r31
    15b8:	30 0d       	add	r19, r0
    15ba:	11 24       	eor	r1, r1
    15bc:	53 2e       	mov	r5, r19
    15be:	13 c0       	rjmp	.+38     	; 0x15e6 <vfprintf+0xca>
    15c0:	8a e0       	ldi	r24, 0x0A	; 10
    15c2:	38 9e       	mul	r3, r24
    15c4:	30 0d       	add	r19, r0
    15c6:	11 24       	eor	r1, r1
    15c8:	33 2e       	mov	r3, r19
    15ca:	20 62       	ori	r18, 0x20	; 32
    15cc:	0c c0       	rjmp	.+24     	; 0x15e6 <vfprintf+0xca>
    15ce:	8e 32       	cpi	r24, 0x2E	; 46
    15d0:	21 f4       	brne	.+8      	; 0x15da <vfprintf+0xbe>
    15d2:	26 fd       	sbrc	r18, 6
    15d4:	6b c1       	rjmp	.+726    	; 0x18ac <vfprintf+0x390>
    15d6:	20 64       	ori	r18, 0x40	; 64
    15d8:	06 c0       	rjmp	.+12     	; 0x15e6 <vfprintf+0xca>
    15da:	8c 36       	cpi	r24, 0x6C	; 108
    15dc:	11 f4       	brne	.+4      	; 0x15e2 <vfprintf+0xc6>
    15de:	20 68       	ori	r18, 0x80	; 128
    15e0:	02 c0       	rjmp	.+4      	; 0x15e6 <vfprintf+0xca>
    15e2:	88 36       	cpi	r24, 0x68	; 104
    15e4:	41 f4       	brne	.+16     	; 0x15f6 <vfprintf+0xda>
    15e6:	f6 01       	movw	r30, r12
    15e8:	93 fd       	sbrc	r25, 3
    15ea:	85 91       	lpm	r24, Z+
    15ec:	93 ff       	sbrs	r25, 3
    15ee:	81 91       	ld	r24, Z+
    15f0:	6f 01       	movw	r12, r30
    15f2:	81 11       	cpse	r24, r1
    15f4:	c1 cf       	rjmp	.-126    	; 0x1578 <vfprintf+0x5c>
    15f6:	98 2f       	mov	r25, r24
    15f8:	9f 7d       	andi	r25, 0xDF	; 223
    15fa:	95 54       	subi	r25, 0x45	; 69
    15fc:	93 30       	cpi	r25, 0x03	; 3
    15fe:	28 f4       	brcc	.+10     	; 0x160a <vfprintf+0xee>
    1600:	0c 5f       	subi	r16, 0xFC	; 252
    1602:	1f 4f       	sbci	r17, 0xFF	; 255
    1604:	ff e3       	ldi	r31, 0x3F	; 63
    1606:	f9 83       	std	Y+1, r31	; 0x01
    1608:	0d c0       	rjmp	.+26     	; 0x1624 <vfprintf+0x108>
    160a:	83 36       	cpi	r24, 0x63	; 99
    160c:	31 f0       	breq	.+12     	; 0x161a <vfprintf+0xfe>
    160e:	83 37       	cpi	r24, 0x73	; 115
    1610:	71 f0       	breq	.+28     	; 0x162e <vfprintf+0x112>
    1612:	83 35       	cpi	r24, 0x53	; 83
    1614:	09 f0       	breq	.+2      	; 0x1618 <vfprintf+0xfc>
    1616:	5b c0       	rjmp	.+182    	; 0x16ce <vfprintf+0x1b2>
    1618:	22 c0       	rjmp	.+68     	; 0x165e <vfprintf+0x142>
    161a:	f8 01       	movw	r30, r16
    161c:	80 81       	ld	r24, Z
    161e:	89 83       	std	Y+1, r24	; 0x01
    1620:	0e 5f       	subi	r16, 0xFE	; 254
    1622:	1f 4f       	sbci	r17, 0xFF	; 255
    1624:	44 24       	eor	r4, r4
    1626:	43 94       	inc	r4
    1628:	51 2c       	mov	r5, r1
    162a:	54 01       	movw	r10, r8
    162c:	15 c0       	rjmp	.+42     	; 0x1658 <vfprintf+0x13c>
    162e:	38 01       	movw	r6, r16
    1630:	f2 e0       	ldi	r31, 0x02	; 2
    1632:	6f 0e       	add	r6, r31
    1634:	71 1c       	adc	r7, r1
    1636:	f8 01       	movw	r30, r16
    1638:	a0 80       	ld	r10, Z
    163a:	b1 80       	ldd	r11, Z+1	; 0x01
    163c:	26 ff       	sbrs	r18, 6
    163e:	03 c0       	rjmp	.+6      	; 0x1646 <vfprintf+0x12a>
    1640:	65 2d       	mov	r22, r5
    1642:	70 e0       	ldi	r23, 0x00	; 0
    1644:	02 c0       	rjmp	.+4      	; 0x164a <vfprintf+0x12e>
    1646:	6f ef       	ldi	r22, 0xFF	; 255
    1648:	7f ef       	ldi	r23, 0xFF	; 255
    164a:	c5 01       	movw	r24, r10
    164c:	2c 87       	std	Y+12, r18	; 0x0c
    164e:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <strnlen>
    1652:	2c 01       	movw	r4, r24
    1654:	83 01       	movw	r16, r6
    1656:	2c 85       	ldd	r18, Y+12	; 0x0c
    1658:	2f 77       	andi	r18, 0x7F	; 127
    165a:	22 2e       	mov	r2, r18
    165c:	17 c0       	rjmp	.+46     	; 0x168c <vfprintf+0x170>
    165e:	38 01       	movw	r6, r16
    1660:	f2 e0       	ldi	r31, 0x02	; 2
    1662:	6f 0e       	add	r6, r31
    1664:	71 1c       	adc	r7, r1
    1666:	f8 01       	movw	r30, r16
    1668:	a0 80       	ld	r10, Z
    166a:	b1 80       	ldd	r11, Z+1	; 0x01
    166c:	26 ff       	sbrs	r18, 6
    166e:	03 c0       	rjmp	.+6      	; 0x1676 <vfprintf+0x15a>
    1670:	65 2d       	mov	r22, r5
    1672:	70 e0       	ldi	r23, 0x00	; 0
    1674:	02 c0       	rjmp	.+4      	; 0x167a <vfprintf+0x15e>
    1676:	6f ef       	ldi	r22, 0xFF	; 255
    1678:	7f ef       	ldi	r23, 0xFF	; 255
    167a:	c5 01       	movw	r24, r10
    167c:	2c 87       	std	Y+12, r18	; 0x0c
    167e:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <strnlen_P>
    1682:	2c 01       	movw	r4, r24
    1684:	2c 85       	ldd	r18, Y+12	; 0x0c
    1686:	20 68       	ori	r18, 0x80	; 128
    1688:	22 2e       	mov	r2, r18
    168a:	83 01       	movw	r16, r6
    168c:	23 fc       	sbrc	r2, 3
    168e:	1b c0       	rjmp	.+54     	; 0x16c6 <vfprintf+0x1aa>
    1690:	83 2d       	mov	r24, r3
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	48 16       	cp	r4, r24
    1696:	59 06       	cpc	r5, r25
    1698:	b0 f4       	brcc	.+44     	; 0x16c6 <vfprintf+0x1aa>
    169a:	b7 01       	movw	r22, r14
    169c:	80 e2       	ldi	r24, 0x20	; 32
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <fputc>
    16a4:	3a 94       	dec	r3
    16a6:	f4 cf       	rjmp	.-24     	; 0x1690 <vfprintf+0x174>
    16a8:	f5 01       	movw	r30, r10
    16aa:	27 fc       	sbrc	r2, 7
    16ac:	85 91       	lpm	r24, Z+
    16ae:	27 fe       	sbrs	r2, 7
    16b0:	81 91       	ld	r24, Z+
    16b2:	5f 01       	movw	r10, r30
    16b4:	b7 01       	movw	r22, r14
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <fputc>
    16bc:	31 10       	cpse	r3, r1
    16be:	3a 94       	dec	r3
    16c0:	f1 e0       	ldi	r31, 0x01	; 1
    16c2:	4f 1a       	sub	r4, r31
    16c4:	51 08       	sbc	r5, r1
    16c6:	41 14       	cp	r4, r1
    16c8:	51 04       	cpc	r5, r1
    16ca:	71 f7       	brne	.-36     	; 0x16a8 <vfprintf+0x18c>
    16cc:	e5 c0       	rjmp	.+458    	; 0x1898 <vfprintf+0x37c>
    16ce:	84 36       	cpi	r24, 0x64	; 100
    16d0:	11 f0       	breq	.+4      	; 0x16d6 <vfprintf+0x1ba>
    16d2:	89 36       	cpi	r24, 0x69	; 105
    16d4:	39 f5       	brne	.+78     	; 0x1724 <vfprintf+0x208>
    16d6:	f8 01       	movw	r30, r16
    16d8:	27 ff       	sbrs	r18, 7
    16da:	07 c0       	rjmp	.+14     	; 0x16ea <vfprintf+0x1ce>
    16dc:	60 81       	ld	r22, Z
    16de:	71 81       	ldd	r23, Z+1	; 0x01
    16e0:	82 81       	ldd	r24, Z+2	; 0x02
    16e2:	93 81       	ldd	r25, Z+3	; 0x03
    16e4:	0c 5f       	subi	r16, 0xFC	; 252
    16e6:	1f 4f       	sbci	r17, 0xFF	; 255
    16e8:	08 c0       	rjmp	.+16     	; 0x16fa <vfprintf+0x1de>
    16ea:	60 81       	ld	r22, Z
    16ec:	71 81       	ldd	r23, Z+1	; 0x01
    16ee:	88 27       	eor	r24, r24
    16f0:	77 fd       	sbrc	r23, 7
    16f2:	80 95       	com	r24
    16f4:	98 2f       	mov	r25, r24
    16f6:	0e 5f       	subi	r16, 0xFE	; 254
    16f8:	1f 4f       	sbci	r17, 0xFF	; 255
    16fa:	2f 76       	andi	r18, 0x6F	; 111
    16fc:	b2 2e       	mov	r11, r18
    16fe:	97 ff       	sbrs	r25, 7
    1700:	09 c0       	rjmp	.+18     	; 0x1714 <vfprintf+0x1f8>
    1702:	90 95       	com	r25
    1704:	80 95       	com	r24
    1706:	70 95       	com	r23
    1708:	61 95       	neg	r22
    170a:	7f 4f       	sbci	r23, 0xFF	; 255
    170c:	8f 4f       	sbci	r24, 0xFF	; 255
    170e:	9f 4f       	sbci	r25, 0xFF	; 255
    1710:	20 68       	ori	r18, 0x80	; 128
    1712:	b2 2e       	mov	r11, r18
    1714:	2a e0       	ldi	r18, 0x0A	; 10
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	a4 01       	movw	r20, r8
    171a:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <__ultoa_invert>
    171e:	a8 2e       	mov	r10, r24
    1720:	a8 18       	sub	r10, r8
    1722:	44 c0       	rjmp	.+136    	; 0x17ac <vfprintf+0x290>
    1724:	85 37       	cpi	r24, 0x75	; 117
    1726:	29 f4       	brne	.+10     	; 0x1732 <vfprintf+0x216>
    1728:	2f 7e       	andi	r18, 0xEF	; 239
    172a:	b2 2e       	mov	r11, r18
    172c:	2a e0       	ldi	r18, 0x0A	; 10
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	25 c0       	rjmp	.+74     	; 0x177c <vfprintf+0x260>
    1732:	f2 2f       	mov	r31, r18
    1734:	f9 7f       	andi	r31, 0xF9	; 249
    1736:	bf 2e       	mov	r11, r31
    1738:	8f 36       	cpi	r24, 0x6F	; 111
    173a:	c1 f0       	breq	.+48     	; 0x176c <vfprintf+0x250>
    173c:	18 f4       	brcc	.+6      	; 0x1744 <vfprintf+0x228>
    173e:	88 35       	cpi	r24, 0x58	; 88
    1740:	79 f0       	breq	.+30     	; 0x1760 <vfprintf+0x244>
    1742:	b4 c0       	rjmp	.+360    	; 0x18ac <vfprintf+0x390>
    1744:	80 37       	cpi	r24, 0x70	; 112
    1746:	19 f0       	breq	.+6      	; 0x174e <vfprintf+0x232>
    1748:	88 37       	cpi	r24, 0x78	; 120
    174a:	21 f0       	breq	.+8      	; 0x1754 <vfprintf+0x238>
    174c:	af c0       	rjmp	.+350    	; 0x18ac <vfprintf+0x390>
    174e:	2f 2f       	mov	r18, r31
    1750:	20 61       	ori	r18, 0x10	; 16
    1752:	b2 2e       	mov	r11, r18
    1754:	b4 fe       	sbrs	r11, 4
    1756:	0d c0       	rjmp	.+26     	; 0x1772 <vfprintf+0x256>
    1758:	8b 2d       	mov	r24, r11
    175a:	84 60       	ori	r24, 0x04	; 4
    175c:	b8 2e       	mov	r11, r24
    175e:	09 c0       	rjmp	.+18     	; 0x1772 <vfprintf+0x256>
    1760:	24 ff       	sbrs	r18, 4
    1762:	0a c0       	rjmp	.+20     	; 0x1778 <vfprintf+0x25c>
    1764:	9f 2f       	mov	r25, r31
    1766:	96 60       	ori	r25, 0x06	; 6
    1768:	b9 2e       	mov	r11, r25
    176a:	06 c0       	rjmp	.+12     	; 0x1778 <vfprintf+0x25c>
    176c:	28 e0       	ldi	r18, 0x08	; 8
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	05 c0       	rjmp	.+10     	; 0x177c <vfprintf+0x260>
    1772:	20 e1       	ldi	r18, 0x10	; 16
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	02 c0       	rjmp	.+4      	; 0x177c <vfprintf+0x260>
    1778:	20 e1       	ldi	r18, 0x10	; 16
    177a:	32 e0       	ldi	r19, 0x02	; 2
    177c:	f8 01       	movw	r30, r16
    177e:	b7 fe       	sbrs	r11, 7
    1780:	07 c0       	rjmp	.+14     	; 0x1790 <vfprintf+0x274>
    1782:	60 81       	ld	r22, Z
    1784:	71 81       	ldd	r23, Z+1	; 0x01
    1786:	82 81       	ldd	r24, Z+2	; 0x02
    1788:	93 81       	ldd	r25, Z+3	; 0x03
    178a:	0c 5f       	subi	r16, 0xFC	; 252
    178c:	1f 4f       	sbci	r17, 0xFF	; 255
    178e:	06 c0       	rjmp	.+12     	; 0x179c <vfprintf+0x280>
    1790:	60 81       	ld	r22, Z
    1792:	71 81       	ldd	r23, Z+1	; 0x01
    1794:	80 e0       	ldi	r24, 0x00	; 0
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	0e 5f       	subi	r16, 0xFE	; 254
    179a:	1f 4f       	sbci	r17, 0xFF	; 255
    179c:	a4 01       	movw	r20, r8
    179e:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <__ultoa_invert>
    17a2:	a8 2e       	mov	r10, r24
    17a4:	a8 18       	sub	r10, r8
    17a6:	fb 2d       	mov	r31, r11
    17a8:	ff 77       	andi	r31, 0x7F	; 127
    17aa:	bf 2e       	mov	r11, r31
    17ac:	b6 fe       	sbrs	r11, 6
    17ae:	0b c0       	rjmp	.+22     	; 0x17c6 <vfprintf+0x2aa>
    17b0:	2b 2d       	mov	r18, r11
    17b2:	2e 7f       	andi	r18, 0xFE	; 254
    17b4:	a5 14       	cp	r10, r5
    17b6:	50 f4       	brcc	.+20     	; 0x17cc <vfprintf+0x2b0>
    17b8:	b4 fe       	sbrs	r11, 4
    17ba:	0a c0       	rjmp	.+20     	; 0x17d0 <vfprintf+0x2b4>
    17bc:	b2 fc       	sbrc	r11, 2
    17be:	08 c0       	rjmp	.+16     	; 0x17d0 <vfprintf+0x2b4>
    17c0:	2b 2d       	mov	r18, r11
    17c2:	2e 7e       	andi	r18, 0xEE	; 238
    17c4:	05 c0       	rjmp	.+10     	; 0x17d0 <vfprintf+0x2b4>
    17c6:	7a 2c       	mov	r7, r10
    17c8:	2b 2d       	mov	r18, r11
    17ca:	03 c0       	rjmp	.+6      	; 0x17d2 <vfprintf+0x2b6>
    17cc:	7a 2c       	mov	r7, r10
    17ce:	01 c0       	rjmp	.+2      	; 0x17d2 <vfprintf+0x2b6>
    17d0:	75 2c       	mov	r7, r5
    17d2:	24 ff       	sbrs	r18, 4
    17d4:	0d c0       	rjmp	.+26     	; 0x17f0 <vfprintf+0x2d4>
    17d6:	fe 01       	movw	r30, r28
    17d8:	ea 0d       	add	r30, r10
    17da:	f1 1d       	adc	r31, r1
    17dc:	80 81       	ld	r24, Z
    17de:	80 33       	cpi	r24, 0x30	; 48
    17e0:	11 f4       	brne	.+4      	; 0x17e6 <vfprintf+0x2ca>
    17e2:	29 7e       	andi	r18, 0xE9	; 233
    17e4:	09 c0       	rjmp	.+18     	; 0x17f8 <vfprintf+0x2dc>
    17e6:	22 ff       	sbrs	r18, 2
    17e8:	06 c0       	rjmp	.+12     	; 0x17f6 <vfprintf+0x2da>
    17ea:	73 94       	inc	r7
    17ec:	73 94       	inc	r7
    17ee:	04 c0       	rjmp	.+8      	; 0x17f8 <vfprintf+0x2dc>
    17f0:	82 2f       	mov	r24, r18
    17f2:	86 78       	andi	r24, 0x86	; 134
    17f4:	09 f0       	breq	.+2      	; 0x17f8 <vfprintf+0x2dc>
    17f6:	73 94       	inc	r7
    17f8:	23 fd       	sbrc	r18, 3
    17fa:	13 c0       	rjmp	.+38     	; 0x1822 <vfprintf+0x306>
    17fc:	20 ff       	sbrs	r18, 0
    17fe:	06 c0       	rjmp	.+12     	; 0x180c <vfprintf+0x2f0>
    1800:	5a 2c       	mov	r5, r10
    1802:	73 14       	cp	r7, r3
    1804:	18 f4       	brcc	.+6      	; 0x180c <vfprintf+0x2f0>
    1806:	53 0c       	add	r5, r3
    1808:	57 18       	sub	r5, r7
    180a:	73 2c       	mov	r7, r3
    180c:	73 14       	cp	r7, r3
    180e:	68 f4       	brcc	.+26     	; 0x182a <vfprintf+0x30e>
    1810:	b7 01       	movw	r22, r14
    1812:	80 e2       	ldi	r24, 0x20	; 32
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	2c 87       	std	Y+12, r18	; 0x0c
    1818:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <fputc>
    181c:	73 94       	inc	r7
    181e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1820:	f5 cf       	rjmp	.-22     	; 0x180c <vfprintf+0x2f0>
    1822:	73 14       	cp	r7, r3
    1824:	10 f4       	brcc	.+4      	; 0x182a <vfprintf+0x30e>
    1826:	37 18       	sub	r3, r7
    1828:	01 c0       	rjmp	.+2      	; 0x182c <vfprintf+0x310>
    182a:	31 2c       	mov	r3, r1
    182c:	24 ff       	sbrs	r18, 4
    182e:	12 c0       	rjmp	.+36     	; 0x1854 <vfprintf+0x338>
    1830:	b7 01       	movw	r22, r14
    1832:	80 e3       	ldi	r24, 0x30	; 48
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	2c 87       	std	Y+12, r18	; 0x0c
    1838:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <fputc>
    183c:	2c 85       	ldd	r18, Y+12	; 0x0c
    183e:	22 ff       	sbrs	r18, 2
    1840:	17 c0       	rjmp	.+46     	; 0x1870 <vfprintf+0x354>
    1842:	21 ff       	sbrs	r18, 1
    1844:	03 c0       	rjmp	.+6      	; 0x184c <vfprintf+0x330>
    1846:	88 e5       	ldi	r24, 0x58	; 88
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	02 c0       	rjmp	.+4      	; 0x1850 <vfprintf+0x334>
    184c:	88 e7       	ldi	r24, 0x78	; 120
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	b7 01       	movw	r22, r14
    1852:	0c c0       	rjmp	.+24     	; 0x186c <vfprintf+0x350>
    1854:	82 2f       	mov	r24, r18
    1856:	86 78       	andi	r24, 0x86	; 134
    1858:	59 f0       	breq	.+22     	; 0x1870 <vfprintf+0x354>
    185a:	21 fd       	sbrc	r18, 1
    185c:	02 c0       	rjmp	.+4      	; 0x1862 <vfprintf+0x346>
    185e:	80 e2       	ldi	r24, 0x20	; 32
    1860:	01 c0       	rjmp	.+2      	; 0x1864 <vfprintf+0x348>
    1862:	8b e2       	ldi	r24, 0x2B	; 43
    1864:	27 fd       	sbrc	r18, 7
    1866:	8d e2       	ldi	r24, 0x2D	; 45
    1868:	b7 01       	movw	r22, r14
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <fputc>
    1870:	a5 14       	cp	r10, r5
    1872:	38 f4       	brcc	.+14     	; 0x1882 <vfprintf+0x366>
    1874:	b7 01       	movw	r22, r14
    1876:	80 e3       	ldi	r24, 0x30	; 48
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <fputc>
    187e:	5a 94       	dec	r5
    1880:	f7 cf       	rjmp	.-18     	; 0x1870 <vfprintf+0x354>
    1882:	aa 94       	dec	r10
    1884:	f4 01       	movw	r30, r8
    1886:	ea 0d       	add	r30, r10
    1888:	f1 1d       	adc	r31, r1
    188a:	80 81       	ld	r24, Z
    188c:	b7 01       	movw	r22, r14
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <fputc>
    1894:	a1 10       	cpse	r10, r1
    1896:	f5 cf       	rjmp	.-22     	; 0x1882 <vfprintf+0x366>
    1898:	33 20       	and	r3, r3
    189a:	09 f4       	brne	.+2      	; 0x189e <vfprintf+0x382>
    189c:	51 ce       	rjmp	.-862    	; 0x1540 <vfprintf+0x24>
    189e:	b7 01       	movw	r22, r14
    18a0:	80 e2       	ldi	r24, 0x20	; 32
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <fputc>
    18a8:	3a 94       	dec	r3
    18aa:	f6 cf       	rjmp	.-20     	; 0x1898 <vfprintf+0x37c>
    18ac:	f7 01       	movw	r30, r14
    18ae:	86 81       	ldd	r24, Z+6	; 0x06
    18b0:	97 81       	ldd	r25, Z+7	; 0x07
    18b2:	02 c0       	rjmp	.+4      	; 0x18b8 <vfprintf+0x39c>
    18b4:	8f ef       	ldi	r24, 0xFF	; 255
    18b6:	9f ef       	ldi	r25, 0xFF	; 255
    18b8:	2c 96       	adiw	r28, 0x0c	; 12
    18ba:	e2 e1       	ldi	r30, 0x12	; 18
    18bc:	0c 94 6c 0e 	jmp	0x1cd8	; 0x1cd8 <__epilogue_restores__>

000018c0 <calloc>:
    18c0:	0f 93       	push	r16
    18c2:	1f 93       	push	r17
    18c4:	cf 93       	push	r28
    18c6:	df 93       	push	r29
    18c8:	86 9f       	mul	r24, r22
    18ca:	80 01       	movw	r16, r0
    18cc:	87 9f       	mul	r24, r23
    18ce:	10 0d       	add	r17, r0
    18d0:	96 9f       	mul	r25, r22
    18d2:	10 0d       	add	r17, r0
    18d4:	11 24       	eor	r1, r1
    18d6:	c8 01       	movw	r24, r16
    18d8:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <malloc>
    18dc:	ec 01       	movw	r28, r24
    18de:	00 97       	sbiw	r24, 0x00	; 0
    18e0:	29 f0       	breq	.+10     	; 0x18ec <calloc+0x2c>
    18e2:	a8 01       	movw	r20, r16
    18e4:	60 e0       	ldi	r22, 0x00	; 0
    18e6:	70 e0       	ldi	r23, 0x00	; 0
    18e8:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <memset>
    18ec:	ce 01       	movw	r24, r28
    18ee:	df 91       	pop	r29
    18f0:	cf 91       	pop	r28
    18f2:	1f 91       	pop	r17
    18f4:	0f 91       	pop	r16
    18f6:	08 95       	ret

000018f8 <malloc>:
    18f8:	cf 93       	push	r28
    18fa:	df 93       	push	r29
    18fc:	82 30       	cpi	r24, 0x02	; 2
    18fe:	91 05       	cpc	r25, r1
    1900:	10 f4       	brcc	.+4      	; 0x1906 <malloc+0xe>
    1902:	82 e0       	ldi	r24, 0x02	; 2
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	e0 91 4b 02 	lds	r30, 0x024B
    190a:	f0 91 4c 02 	lds	r31, 0x024C
    190e:	20 e0       	ldi	r18, 0x00	; 0
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	a0 e0       	ldi	r26, 0x00	; 0
    1914:	b0 e0       	ldi	r27, 0x00	; 0
    1916:	30 97       	sbiw	r30, 0x00	; 0
    1918:	39 f1       	breq	.+78     	; 0x1968 <malloc+0x70>
    191a:	40 81       	ld	r20, Z
    191c:	51 81       	ldd	r21, Z+1	; 0x01
    191e:	48 17       	cp	r20, r24
    1920:	59 07       	cpc	r21, r25
    1922:	b8 f0       	brcs	.+46     	; 0x1952 <malloc+0x5a>
    1924:	48 17       	cp	r20, r24
    1926:	59 07       	cpc	r21, r25
    1928:	71 f4       	brne	.+28     	; 0x1946 <malloc+0x4e>
    192a:	82 81       	ldd	r24, Z+2	; 0x02
    192c:	93 81       	ldd	r25, Z+3	; 0x03
    192e:	10 97       	sbiw	r26, 0x00	; 0
    1930:	29 f0       	breq	.+10     	; 0x193c <malloc+0x44>
    1932:	13 96       	adiw	r26, 0x03	; 3
    1934:	9c 93       	st	X, r25
    1936:	8e 93       	st	-X, r24
    1938:	12 97       	sbiw	r26, 0x02	; 2
    193a:	2c c0       	rjmp	.+88     	; 0x1994 <malloc+0x9c>
    193c:	90 93 4c 02 	sts	0x024C, r25
    1940:	80 93 4b 02 	sts	0x024B, r24
    1944:	27 c0       	rjmp	.+78     	; 0x1994 <malloc+0x9c>
    1946:	21 15       	cp	r18, r1
    1948:	31 05       	cpc	r19, r1
    194a:	31 f0       	breq	.+12     	; 0x1958 <malloc+0x60>
    194c:	42 17       	cp	r20, r18
    194e:	53 07       	cpc	r21, r19
    1950:	18 f0       	brcs	.+6      	; 0x1958 <malloc+0x60>
    1952:	a9 01       	movw	r20, r18
    1954:	db 01       	movw	r26, r22
    1956:	01 c0       	rjmp	.+2      	; 0x195a <malloc+0x62>
    1958:	ef 01       	movw	r28, r30
    195a:	9a 01       	movw	r18, r20
    195c:	bd 01       	movw	r22, r26
    195e:	df 01       	movw	r26, r30
    1960:	02 80       	ldd	r0, Z+2	; 0x02
    1962:	f3 81       	ldd	r31, Z+3	; 0x03
    1964:	e0 2d       	mov	r30, r0
    1966:	d7 cf       	rjmp	.-82     	; 0x1916 <malloc+0x1e>
    1968:	21 15       	cp	r18, r1
    196a:	31 05       	cpc	r19, r1
    196c:	f9 f0       	breq	.+62     	; 0x19ac <malloc+0xb4>
    196e:	28 1b       	sub	r18, r24
    1970:	39 0b       	sbc	r19, r25
    1972:	24 30       	cpi	r18, 0x04	; 4
    1974:	31 05       	cpc	r19, r1
    1976:	80 f4       	brcc	.+32     	; 0x1998 <malloc+0xa0>
    1978:	8a 81       	ldd	r24, Y+2	; 0x02
    197a:	9b 81       	ldd	r25, Y+3	; 0x03
    197c:	61 15       	cp	r22, r1
    197e:	71 05       	cpc	r23, r1
    1980:	21 f0       	breq	.+8      	; 0x198a <malloc+0x92>
    1982:	fb 01       	movw	r30, r22
    1984:	93 83       	std	Z+3, r25	; 0x03
    1986:	82 83       	std	Z+2, r24	; 0x02
    1988:	04 c0       	rjmp	.+8      	; 0x1992 <malloc+0x9a>
    198a:	90 93 4c 02 	sts	0x024C, r25
    198e:	80 93 4b 02 	sts	0x024B, r24
    1992:	fe 01       	movw	r30, r28
    1994:	32 96       	adiw	r30, 0x02	; 2
    1996:	44 c0       	rjmp	.+136    	; 0x1a20 <malloc+0x128>
    1998:	fe 01       	movw	r30, r28
    199a:	e2 0f       	add	r30, r18
    199c:	f3 1f       	adc	r31, r19
    199e:	81 93       	st	Z+, r24
    19a0:	91 93       	st	Z+, r25
    19a2:	22 50       	subi	r18, 0x02	; 2
    19a4:	31 09       	sbc	r19, r1
    19a6:	39 83       	std	Y+1, r19	; 0x01
    19a8:	28 83       	st	Y, r18
    19aa:	3a c0       	rjmp	.+116    	; 0x1a20 <malloc+0x128>
    19ac:	20 91 49 02 	lds	r18, 0x0249
    19b0:	30 91 4a 02 	lds	r19, 0x024A
    19b4:	23 2b       	or	r18, r19
    19b6:	41 f4       	brne	.+16     	; 0x19c8 <malloc+0xd0>
    19b8:	20 91 02 01 	lds	r18, 0x0102
    19bc:	30 91 03 01 	lds	r19, 0x0103
    19c0:	30 93 4a 02 	sts	0x024A, r19
    19c4:	20 93 49 02 	sts	0x0249, r18
    19c8:	20 91 00 01 	lds	r18, 0x0100
    19cc:	30 91 01 01 	lds	r19, 0x0101
    19d0:	21 15       	cp	r18, r1
    19d2:	31 05       	cpc	r19, r1
    19d4:	41 f4       	brne	.+16     	; 0x19e6 <malloc+0xee>
    19d6:	2d b7       	in	r18, 0x3d	; 61
    19d8:	3e b7       	in	r19, 0x3e	; 62
    19da:	40 91 04 01 	lds	r20, 0x0104
    19de:	50 91 05 01 	lds	r21, 0x0105
    19e2:	24 1b       	sub	r18, r20
    19e4:	35 0b       	sbc	r19, r21
    19e6:	e0 91 49 02 	lds	r30, 0x0249
    19ea:	f0 91 4a 02 	lds	r31, 0x024A
    19ee:	e2 17       	cp	r30, r18
    19f0:	f3 07       	cpc	r31, r19
    19f2:	a0 f4       	brcc	.+40     	; 0x1a1c <malloc+0x124>
    19f4:	2e 1b       	sub	r18, r30
    19f6:	3f 0b       	sbc	r19, r31
    19f8:	28 17       	cp	r18, r24
    19fa:	39 07       	cpc	r19, r25
    19fc:	78 f0       	brcs	.+30     	; 0x1a1c <malloc+0x124>
    19fe:	ac 01       	movw	r20, r24
    1a00:	4e 5f       	subi	r20, 0xFE	; 254
    1a02:	5f 4f       	sbci	r21, 0xFF	; 255
    1a04:	24 17       	cp	r18, r20
    1a06:	35 07       	cpc	r19, r21
    1a08:	48 f0       	brcs	.+18     	; 0x1a1c <malloc+0x124>
    1a0a:	4e 0f       	add	r20, r30
    1a0c:	5f 1f       	adc	r21, r31
    1a0e:	50 93 4a 02 	sts	0x024A, r21
    1a12:	40 93 49 02 	sts	0x0249, r20
    1a16:	81 93       	st	Z+, r24
    1a18:	91 93       	st	Z+, r25
    1a1a:	02 c0       	rjmp	.+4      	; 0x1a20 <malloc+0x128>
    1a1c:	e0 e0       	ldi	r30, 0x00	; 0
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	cf 01       	movw	r24, r30
    1a22:	df 91       	pop	r29
    1a24:	cf 91       	pop	r28
    1a26:	08 95       	ret

00001a28 <free>:
    1a28:	cf 93       	push	r28
    1a2a:	df 93       	push	r29
    1a2c:	00 97       	sbiw	r24, 0x00	; 0
    1a2e:	09 f4       	brne	.+2      	; 0x1a32 <free+0xa>
    1a30:	87 c0       	rjmp	.+270    	; 0x1b40 <free+0x118>
    1a32:	fc 01       	movw	r30, r24
    1a34:	32 97       	sbiw	r30, 0x02	; 2
    1a36:	13 82       	std	Z+3, r1	; 0x03
    1a38:	12 82       	std	Z+2, r1	; 0x02
    1a3a:	c0 91 4b 02 	lds	r28, 0x024B
    1a3e:	d0 91 4c 02 	lds	r29, 0x024C
    1a42:	20 97       	sbiw	r28, 0x00	; 0
    1a44:	81 f4       	brne	.+32     	; 0x1a66 <free+0x3e>
    1a46:	20 81       	ld	r18, Z
    1a48:	31 81       	ldd	r19, Z+1	; 0x01
    1a4a:	28 0f       	add	r18, r24
    1a4c:	39 1f       	adc	r19, r25
    1a4e:	80 91 49 02 	lds	r24, 0x0249
    1a52:	90 91 4a 02 	lds	r25, 0x024A
    1a56:	82 17       	cp	r24, r18
    1a58:	93 07       	cpc	r25, r19
    1a5a:	79 f5       	brne	.+94     	; 0x1aba <free+0x92>
    1a5c:	f0 93 4a 02 	sts	0x024A, r31
    1a60:	e0 93 49 02 	sts	0x0249, r30
    1a64:	6d c0       	rjmp	.+218    	; 0x1b40 <free+0x118>
    1a66:	de 01       	movw	r26, r28
    1a68:	20 e0       	ldi	r18, 0x00	; 0
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	ae 17       	cp	r26, r30
    1a6e:	bf 07       	cpc	r27, r31
    1a70:	50 f4       	brcc	.+20     	; 0x1a86 <free+0x5e>
    1a72:	12 96       	adiw	r26, 0x02	; 2
    1a74:	4d 91       	ld	r20, X+
    1a76:	5c 91       	ld	r21, X
    1a78:	13 97       	sbiw	r26, 0x03	; 3
    1a7a:	9d 01       	movw	r18, r26
    1a7c:	41 15       	cp	r20, r1
    1a7e:	51 05       	cpc	r21, r1
    1a80:	09 f1       	breq	.+66     	; 0x1ac4 <free+0x9c>
    1a82:	da 01       	movw	r26, r20
    1a84:	f3 cf       	rjmp	.-26     	; 0x1a6c <free+0x44>
    1a86:	b3 83       	std	Z+3, r27	; 0x03
    1a88:	a2 83       	std	Z+2, r26	; 0x02
    1a8a:	40 81       	ld	r20, Z
    1a8c:	51 81       	ldd	r21, Z+1	; 0x01
    1a8e:	84 0f       	add	r24, r20
    1a90:	95 1f       	adc	r25, r21
    1a92:	8a 17       	cp	r24, r26
    1a94:	9b 07       	cpc	r25, r27
    1a96:	71 f4       	brne	.+28     	; 0x1ab4 <free+0x8c>
    1a98:	8d 91       	ld	r24, X+
    1a9a:	9c 91       	ld	r25, X
    1a9c:	11 97       	sbiw	r26, 0x01	; 1
    1a9e:	84 0f       	add	r24, r20
    1aa0:	95 1f       	adc	r25, r21
    1aa2:	02 96       	adiw	r24, 0x02	; 2
    1aa4:	91 83       	std	Z+1, r25	; 0x01
    1aa6:	80 83       	st	Z, r24
    1aa8:	12 96       	adiw	r26, 0x02	; 2
    1aaa:	8d 91       	ld	r24, X+
    1aac:	9c 91       	ld	r25, X
    1aae:	13 97       	sbiw	r26, 0x03	; 3
    1ab0:	93 83       	std	Z+3, r25	; 0x03
    1ab2:	82 83       	std	Z+2, r24	; 0x02
    1ab4:	21 15       	cp	r18, r1
    1ab6:	31 05       	cpc	r19, r1
    1ab8:	29 f4       	brne	.+10     	; 0x1ac4 <free+0x9c>
    1aba:	f0 93 4c 02 	sts	0x024C, r31
    1abe:	e0 93 4b 02 	sts	0x024B, r30
    1ac2:	3e c0       	rjmp	.+124    	; 0x1b40 <free+0x118>
    1ac4:	d9 01       	movw	r26, r18
    1ac6:	13 96       	adiw	r26, 0x03	; 3
    1ac8:	fc 93       	st	X, r31
    1aca:	ee 93       	st	-X, r30
    1acc:	12 97       	sbiw	r26, 0x02	; 2
    1ace:	4d 91       	ld	r20, X+
    1ad0:	5d 91       	ld	r21, X+
    1ad2:	a4 0f       	add	r26, r20
    1ad4:	b5 1f       	adc	r27, r21
    1ad6:	ea 17       	cp	r30, r26
    1ad8:	fb 07       	cpc	r31, r27
    1ada:	79 f4       	brne	.+30     	; 0x1afa <free+0xd2>
    1adc:	80 81       	ld	r24, Z
    1ade:	91 81       	ldd	r25, Z+1	; 0x01
    1ae0:	84 0f       	add	r24, r20
    1ae2:	95 1f       	adc	r25, r21
    1ae4:	02 96       	adiw	r24, 0x02	; 2
    1ae6:	d9 01       	movw	r26, r18
    1ae8:	11 96       	adiw	r26, 0x01	; 1
    1aea:	9c 93       	st	X, r25
    1aec:	8e 93       	st	-X, r24
    1aee:	82 81       	ldd	r24, Z+2	; 0x02
    1af0:	93 81       	ldd	r25, Z+3	; 0x03
    1af2:	13 96       	adiw	r26, 0x03	; 3
    1af4:	9c 93       	st	X, r25
    1af6:	8e 93       	st	-X, r24
    1af8:	12 97       	sbiw	r26, 0x02	; 2
    1afa:	e0 e0       	ldi	r30, 0x00	; 0
    1afc:	f0 e0       	ldi	r31, 0x00	; 0
    1afe:	8a 81       	ldd	r24, Y+2	; 0x02
    1b00:	9b 81       	ldd	r25, Y+3	; 0x03
    1b02:	00 97       	sbiw	r24, 0x00	; 0
    1b04:	19 f0       	breq	.+6      	; 0x1b0c <free+0xe4>
    1b06:	fe 01       	movw	r30, r28
    1b08:	ec 01       	movw	r28, r24
    1b0a:	f9 cf       	rjmp	.-14     	; 0x1afe <free+0xd6>
    1b0c:	ce 01       	movw	r24, r28
    1b0e:	02 96       	adiw	r24, 0x02	; 2
    1b10:	28 81       	ld	r18, Y
    1b12:	39 81       	ldd	r19, Y+1	; 0x01
    1b14:	82 0f       	add	r24, r18
    1b16:	93 1f       	adc	r25, r19
    1b18:	20 91 49 02 	lds	r18, 0x0249
    1b1c:	30 91 4a 02 	lds	r19, 0x024A
    1b20:	28 17       	cp	r18, r24
    1b22:	39 07       	cpc	r19, r25
    1b24:	69 f4       	brne	.+26     	; 0x1b40 <free+0x118>
    1b26:	30 97       	sbiw	r30, 0x00	; 0
    1b28:	29 f4       	brne	.+10     	; 0x1b34 <free+0x10c>
    1b2a:	10 92 4c 02 	sts	0x024C, r1
    1b2e:	10 92 4b 02 	sts	0x024B, r1
    1b32:	02 c0       	rjmp	.+4      	; 0x1b38 <free+0x110>
    1b34:	13 82       	std	Z+3, r1	; 0x03
    1b36:	12 82       	std	Z+2, r1	; 0x02
    1b38:	d0 93 4a 02 	sts	0x024A, r29
    1b3c:	c0 93 49 02 	sts	0x0249, r28
    1b40:	df 91       	pop	r29
    1b42:	cf 91       	pop	r28
    1b44:	08 95       	ret

00001b46 <strnlen_P>:
    1b46:	fc 01       	movw	r30, r24
    1b48:	05 90       	lpm	r0, Z+
    1b4a:	61 50       	subi	r22, 0x01	; 1
    1b4c:	70 40       	sbci	r23, 0x00	; 0
    1b4e:	01 10       	cpse	r0, r1
    1b50:	d8 f7       	brcc	.-10     	; 0x1b48 <strnlen_P+0x2>
    1b52:	80 95       	com	r24
    1b54:	90 95       	com	r25
    1b56:	8e 0f       	add	r24, r30
    1b58:	9f 1f       	adc	r25, r31
    1b5a:	08 95       	ret

00001b5c <memset>:
    1b5c:	dc 01       	movw	r26, r24
    1b5e:	01 c0       	rjmp	.+2      	; 0x1b62 <memset+0x6>
    1b60:	6d 93       	st	X+, r22
    1b62:	41 50       	subi	r20, 0x01	; 1
    1b64:	50 40       	sbci	r21, 0x00	; 0
    1b66:	e0 f7       	brcc	.-8      	; 0x1b60 <memset+0x4>
    1b68:	08 95       	ret

00001b6a <strnlen>:
    1b6a:	fc 01       	movw	r30, r24
    1b6c:	61 50       	subi	r22, 0x01	; 1
    1b6e:	70 40       	sbci	r23, 0x00	; 0
    1b70:	01 90       	ld	r0, Z+
    1b72:	01 10       	cpse	r0, r1
    1b74:	d8 f7       	brcc	.-10     	; 0x1b6c <strnlen+0x2>
    1b76:	80 95       	com	r24
    1b78:	90 95       	com	r25
    1b7a:	8e 0f       	add	r24, r30
    1b7c:	9f 1f       	adc	r25, r31
    1b7e:	08 95       	ret

00001b80 <fputc>:
    1b80:	0f 93       	push	r16
    1b82:	1f 93       	push	r17
    1b84:	cf 93       	push	r28
    1b86:	df 93       	push	r29
    1b88:	18 2f       	mov	r17, r24
    1b8a:	09 2f       	mov	r16, r25
    1b8c:	eb 01       	movw	r28, r22
    1b8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b90:	81 fd       	sbrc	r24, 1
    1b92:	03 c0       	rjmp	.+6      	; 0x1b9a <fputc+0x1a>
    1b94:	8f ef       	ldi	r24, 0xFF	; 255
    1b96:	9f ef       	ldi	r25, 0xFF	; 255
    1b98:	20 c0       	rjmp	.+64     	; 0x1bda <fputc+0x5a>
    1b9a:	82 ff       	sbrs	r24, 2
    1b9c:	10 c0       	rjmp	.+32     	; 0x1bbe <fputc+0x3e>
    1b9e:	4e 81       	ldd	r20, Y+6	; 0x06
    1ba0:	5f 81       	ldd	r21, Y+7	; 0x07
    1ba2:	2c 81       	ldd	r18, Y+4	; 0x04
    1ba4:	3d 81       	ldd	r19, Y+5	; 0x05
    1ba6:	42 17       	cp	r20, r18
    1ba8:	53 07       	cpc	r21, r19
    1baa:	7c f4       	brge	.+30     	; 0x1bca <fputc+0x4a>
    1bac:	e8 81       	ld	r30, Y
    1bae:	f9 81       	ldd	r31, Y+1	; 0x01
    1bb0:	9f 01       	movw	r18, r30
    1bb2:	2f 5f       	subi	r18, 0xFF	; 255
    1bb4:	3f 4f       	sbci	r19, 0xFF	; 255
    1bb6:	39 83       	std	Y+1, r19	; 0x01
    1bb8:	28 83       	st	Y, r18
    1bba:	10 83       	st	Z, r17
    1bbc:	06 c0       	rjmp	.+12     	; 0x1bca <fputc+0x4a>
    1bbe:	e8 85       	ldd	r30, Y+8	; 0x08
    1bc0:	f9 85       	ldd	r31, Y+9	; 0x09
    1bc2:	81 2f       	mov	r24, r17
    1bc4:	09 95       	icall
    1bc6:	89 2b       	or	r24, r25
    1bc8:	29 f7       	brne	.-54     	; 0x1b94 <fputc+0x14>
    1bca:	2e 81       	ldd	r18, Y+6	; 0x06
    1bcc:	3f 81       	ldd	r19, Y+7	; 0x07
    1bce:	2f 5f       	subi	r18, 0xFF	; 255
    1bd0:	3f 4f       	sbci	r19, 0xFF	; 255
    1bd2:	3f 83       	std	Y+7, r19	; 0x07
    1bd4:	2e 83       	std	Y+6, r18	; 0x06
    1bd6:	81 2f       	mov	r24, r17
    1bd8:	90 2f       	mov	r25, r16
    1bda:	df 91       	pop	r29
    1bdc:	cf 91       	pop	r28
    1bde:	1f 91       	pop	r17
    1be0:	0f 91       	pop	r16
    1be2:	08 95       	ret

00001be4 <__ultoa_invert>:
    1be4:	fa 01       	movw	r30, r20
    1be6:	aa 27       	eor	r26, r26
    1be8:	28 30       	cpi	r18, 0x08	; 8
    1bea:	51 f1       	breq	.+84     	; 0x1c40 <__ultoa_invert+0x5c>
    1bec:	20 31       	cpi	r18, 0x10	; 16
    1bee:	81 f1       	breq	.+96     	; 0x1c50 <__ultoa_invert+0x6c>
    1bf0:	e8 94       	clt
    1bf2:	6f 93       	push	r22
    1bf4:	6e 7f       	andi	r22, 0xFE	; 254
    1bf6:	6e 5f       	subi	r22, 0xFE	; 254
    1bf8:	7f 4f       	sbci	r23, 0xFF	; 255
    1bfa:	8f 4f       	sbci	r24, 0xFF	; 255
    1bfc:	9f 4f       	sbci	r25, 0xFF	; 255
    1bfe:	af 4f       	sbci	r26, 0xFF	; 255
    1c00:	b1 e0       	ldi	r27, 0x01	; 1
    1c02:	3e d0       	rcall	.+124    	; 0x1c80 <__ultoa_invert+0x9c>
    1c04:	b4 e0       	ldi	r27, 0x04	; 4
    1c06:	3c d0       	rcall	.+120    	; 0x1c80 <__ultoa_invert+0x9c>
    1c08:	67 0f       	add	r22, r23
    1c0a:	78 1f       	adc	r23, r24
    1c0c:	89 1f       	adc	r24, r25
    1c0e:	9a 1f       	adc	r25, r26
    1c10:	a1 1d       	adc	r26, r1
    1c12:	68 0f       	add	r22, r24
    1c14:	79 1f       	adc	r23, r25
    1c16:	8a 1f       	adc	r24, r26
    1c18:	91 1d       	adc	r25, r1
    1c1a:	a1 1d       	adc	r26, r1
    1c1c:	6a 0f       	add	r22, r26
    1c1e:	71 1d       	adc	r23, r1
    1c20:	81 1d       	adc	r24, r1
    1c22:	91 1d       	adc	r25, r1
    1c24:	a1 1d       	adc	r26, r1
    1c26:	20 d0       	rcall	.+64     	; 0x1c68 <__ultoa_invert+0x84>
    1c28:	09 f4       	brne	.+2      	; 0x1c2c <__ultoa_invert+0x48>
    1c2a:	68 94       	set
    1c2c:	3f 91       	pop	r19
    1c2e:	2a e0       	ldi	r18, 0x0A	; 10
    1c30:	26 9f       	mul	r18, r22
    1c32:	11 24       	eor	r1, r1
    1c34:	30 19       	sub	r19, r0
    1c36:	30 5d       	subi	r19, 0xD0	; 208
    1c38:	31 93       	st	Z+, r19
    1c3a:	de f6       	brtc	.-74     	; 0x1bf2 <__ultoa_invert+0xe>
    1c3c:	cf 01       	movw	r24, r30
    1c3e:	08 95       	ret
    1c40:	46 2f       	mov	r20, r22
    1c42:	47 70       	andi	r20, 0x07	; 7
    1c44:	40 5d       	subi	r20, 0xD0	; 208
    1c46:	41 93       	st	Z+, r20
    1c48:	b3 e0       	ldi	r27, 0x03	; 3
    1c4a:	0f d0       	rcall	.+30     	; 0x1c6a <__ultoa_invert+0x86>
    1c4c:	c9 f7       	brne	.-14     	; 0x1c40 <__ultoa_invert+0x5c>
    1c4e:	f6 cf       	rjmp	.-20     	; 0x1c3c <__ultoa_invert+0x58>
    1c50:	46 2f       	mov	r20, r22
    1c52:	4f 70       	andi	r20, 0x0F	; 15
    1c54:	40 5d       	subi	r20, 0xD0	; 208
    1c56:	4a 33       	cpi	r20, 0x3A	; 58
    1c58:	18 f0       	brcs	.+6      	; 0x1c60 <__ultoa_invert+0x7c>
    1c5a:	49 5d       	subi	r20, 0xD9	; 217
    1c5c:	31 fd       	sbrc	r19, 1
    1c5e:	40 52       	subi	r20, 0x20	; 32
    1c60:	41 93       	st	Z+, r20
    1c62:	02 d0       	rcall	.+4      	; 0x1c68 <__ultoa_invert+0x84>
    1c64:	a9 f7       	brne	.-22     	; 0x1c50 <__ultoa_invert+0x6c>
    1c66:	ea cf       	rjmp	.-44     	; 0x1c3c <__ultoa_invert+0x58>
    1c68:	b4 e0       	ldi	r27, 0x04	; 4
    1c6a:	a6 95       	lsr	r26
    1c6c:	97 95       	ror	r25
    1c6e:	87 95       	ror	r24
    1c70:	77 95       	ror	r23
    1c72:	67 95       	ror	r22
    1c74:	ba 95       	dec	r27
    1c76:	c9 f7       	brne	.-14     	; 0x1c6a <__ultoa_invert+0x86>
    1c78:	00 97       	sbiw	r24, 0x00	; 0
    1c7a:	61 05       	cpc	r22, r1
    1c7c:	71 05       	cpc	r23, r1
    1c7e:	08 95       	ret
    1c80:	9b 01       	movw	r18, r22
    1c82:	ac 01       	movw	r20, r24
    1c84:	0a 2e       	mov	r0, r26
    1c86:	06 94       	lsr	r0
    1c88:	57 95       	ror	r21
    1c8a:	47 95       	ror	r20
    1c8c:	37 95       	ror	r19
    1c8e:	27 95       	ror	r18
    1c90:	ba 95       	dec	r27
    1c92:	c9 f7       	brne	.-14     	; 0x1c86 <__ultoa_invert+0xa2>
    1c94:	62 0f       	add	r22, r18
    1c96:	73 1f       	adc	r23, r19
    1c98:	84 1f       	adc	r24, r20
    1c9a:	95 1f       	adc	r25, r21
    1c9c:	a0 1d       	adc	r26, r0
    1c9e:	08 95       	ret

00001ca0 <__prologue_saves__>:
    1ca0:	2f 92       	push	r2
    1ca2:	3f 92       	push	r3
    1ca4:	4f 92       	push	r4
    1ca6:	5f 92       	push	r5
    1ca8:	6f 92       	push	r6
    1caa:	7f 92       	push	r7
    1cac:	8f 92       	push	r8
    1cae:	9f 92       	push	r9
    1cb0:	af 92       	push	r10
    1cb2:	bf 92       	push	r11
    1cb4:	cf 92       	push	r12
    1cb6:	df 92       	push	r13
    1cb8:	ef 92       	push	r14
    1cba:	ff 92       	push	r15
    1cbc:	0f 93       	push	r16
    1cbe:	1f 93       	push	r17
    1cc0:	cf 93       	push	r28
    1cc2:	df 93       	push	r29
    1cc4:	cd b7       	in	r28, 0x3d	; 61
    1cc6:	de b7       	in	r29, 0x3e	; 62
    1cc8:	ca 1b       	sub	r28, r26
    1cca:	db 0b       	sbc	r29, r27
    1ccc:	0f b6       	in	r0, 0x3f	; 63
    1cce:	f8 94       	cli
    1cd0:	de bf       	out	0x3e, r29	; 62
    1cd2:	0f be       	out	0x3f, r0	; 63
    1cd4:	cd bf       	out	0x3d, r28	; 61
    1cd6:	09 94       	ijmp

00001cd8 <__epilogue_restores__>:
    1cd8:	2a 88       	ldd	r2, Y+18	; 0x12
    1cda:	39 88       	ldd	r3, Y+17	; 0x11
    1cdc:	48 88       	ldd	r4, Y+16	; 0x10
    1cde:	5f 84       	ldd	r5, Y+15	; 0x0f
    1ce0:	6e 84       	ldd	r6, Y+14	; 0x0e
    1ce2:	7d 84       	ldd	r7, Y+13	; 0x0d
    1ce4:	8c 84       	ldd	r8, Y+12	; 0x0c
    1ce6:	9b 84       	ldd	r9, Y+11	; 0x0b
    1ce8:	aa 84       	ldd	r10, Y+10	; 0x0a
    1cea:	b9 84       	ldd	r11, Y+9	; 0x09
    1cec:	c8 84       	ldd	r12, Y+8	; 0x08
    1cee:	df 80       	ldd	r13, Y+7	; 0x07
    1cf0:	ee 80       	ldd	r14, Y+6	; 0x06
    1cf2:	fd 80       	ldd	r15, Y+5	; 0x05
    1cf4:	0c 81       	ldd	r16, Y+4	; 0x04
    1cf6:	1b 81       	ldd	r17, Y+3	; 0x03
    1cf8:	aa 81       	ldd	r26, Y+2	; 0x02
    1cfa:	b9 81       	ldd	r27, Y+1	; 0x01
    1cfc:	ce 0f       	add	r28, r30
    1cfe:	d1 1d       	adc	r29, r1
    1d00:	0f b6       	in	r0, 0x3f	; 63
    1d02:	f8 94       	cli
    1d04:	de bf       	out	0x3e, r29	; 62
    1d06:	0f be       	out	0x3f, r0	; 63
    1d08:	cd bf       	out	0x3d, r28	; 61
    1d0a:	ed 01       	movw	r28, r26
    1d0c:	08 95       	ret

00001d0e <_exit>:
    1d0e:	f8 94       	cli

00001d10 <__stop_program>:
    1d10:	ff cf       	rjmp	.-2      	; 0x1d10 <__stop_program>
