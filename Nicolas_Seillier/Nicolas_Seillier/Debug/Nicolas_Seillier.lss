
Nicolas_Seillier.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002bc  00800100  0000134e  000013e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000134e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  008003bc  008003bc  0000169e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000169e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001b8  00000000  00000000  000016ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002816  00000000  00000000  00001886  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008fd  00000000  00000000  0000409c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009d5  00000000  00000000  00004999  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000440  00000000  00000000  00005370  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000500  00000000  00000000  000057b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c94  00000000  00000000  00005cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001a0  00000000  00000000  00006944  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 0a 02 	jmp	0x414	; 0x414 <__vector_1>
       8:	0c 94 9d 02 	jmp	0x53a	; 0x53a <__vector_2>
       c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	13 e0       	ldi	r17, 0x03	; 3
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	ee e4       	ldi	r30, 0x4E	; 78
      84:	f3 e1       	ldi	r31, 0x13	; 19
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	ac 3b       	cpi	r26, 0xBC	; 188
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	23 e0       	ldi	r18, 0x03	; 3
      94:	ac eb       	ldi	r26, 0xBC	; 188
      96:	b3 e0       	ldi	r27, 0x03	; 3
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	ab 3c       	cpi	r26, 0xCB	; 203
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 25 04 	call	0x84a	; 0x84a <main>
      a6:	0c 94 a5 09 	jmp	0x134a	; 0x134a <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <ADC_Convert>:

uint8_t ADC_Convert(uint8_t channel)
{
	/* Start conversion on the selected channel: write on command pins */
	volatile char* adc = (char *) ADC;
	adc[0] = channel;
      ae:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      b2:	83 ef       	ldi	r24, 0xF3	; 243
      b4:	91 e0       	ldi	r25, 0x01	; 1
      b6:	01 97       	sbiw	r24, 0x01	; 1
      b8:	f1 f7       	brne	.-4      	; 0xb6 <ADC_Convert+0x8>
      ba:	00 c0       	rjmp	.+0      	; 0xbc <ADC_Convert+0xe>
      bc:	00 00       	nop
	/* Wait for the conversion to be performed */
	_delay_ms(2);
	/* Read the result */
	return adc[0];
      be:	80 91 00 14 	lds	r24, 0x1400
}
      c2:	08 95       	ret

000000c4 <draw_home>:
#include "OLED.h"
#include "Framework.h"

void draw_home()
{
	OLED_Reset();
      c4:	0e 94 c1 04 	call	0x982	; 0x982 <OLED_Reset>
	OLED_pos(1, 4);
      c8:	64 e0       	ldi	r22, 0x04	; 4
      ca:	81 e0       	ldi	r24, 0x01	; 1
      cc:	0e 94 48 05 	call	0xa90	; 0xa90 <OLED_pos>
	OLED_print_string("Welcome to the best ping pong");
      d0:	84 e8       	ldi	r24, 0x84	; 132
      d2:	92 e0       	ldi	r25, 0x02	; 2
      d4:	0e 94 6c 05 	call	0xad8	; 0xad8 <OLED_print_string>
	OLED_pos(3, 28);
      d8:	6c e1       	ldi	r22, 0x1C	; 28
      da:	83 e0       	ldi	r24, 0x03	; 3
      dc:	0e 94 48 05 	call	0xa90	; 0xa90 <OLED_pos>
	OLED_print_string("game in the world!");
      e0:	82 ea       	ldi	r24, 0xA2	; 162
      e2:	92 e0       	ldi	r25, 0x02	; 2
      e4:	0e 94 6c 05 	call	0xad8	; 0xad8 <OLED_print_string>
	OLED_pos(7, 20);
      e8:	64 e1       	ldi	r22, 0x14	; 20
      ea:	87 e0       	ldi	r24, 0x07	; 7
      ec:	0e 94 48 05 	call	0xa90	; 0xa90 <OLED_pos>
	OLED_print_string("Touch right to start!");
      f0:	85 eb       	ldi	r24, 0xB5	; 181
      f2:	92 e0       	ldi	r25, 0x02	; 2
      f4:	0e 94 6c 05 	call	0xad8	; 0xad8 <OLED_print_string>
      f8:	08 95       	ret

000000fa <draw_main_menu>:
}

void draw_main_menu()
{
	OLED_Reset();
      fa:	0e 94 c1 04 	call	0x982	; 0x982 <OLED_Reset>
	OLED_pos(0, 46);
      fe:	6e e2       	ldi	r22, 0x2E	; 46
     100:	80 e0       	ldi	r24, 0x00	; 0
     102:	0e 94 48 05 	call	0xa90	; 0xa90 <OLED_pos>
	OLED_print_string("Main menu");	
     106:	8b ec       	ldi	r24, 0xCB	; 203
     108:	92 e0       	ldi	r25, 0x02	; 2
     10a:	0e 94 6c 05 	call	0xad8	; 0xad8 <OLED_print_string>
	OLED_pos(2, 8);
     10e:	68 e0       	ldi	r22, 0x08	; 8
     110:	82 e0       	ldi	r24, 0x02	; 2
     112:	0e 94 48 05 	call	0xa90	; 0xa90 <OLED_pos>
	OLED_print_arrow();
     116:	0e 94 8a 05 	call	0xb14	; 0xb14 <OLED_print_arrow>
	OLED_pos(2, 20);
     11a:	64 e1       	ldi	r22, 0x14	; 20
     11c:	82 e0       	ldi	r24, 0x02	; 2
     11e:	0e 94 48 05 	call	0xa90	; 0xa90 <OLED_pos>
	OLED_print_string("One-player mode");
     122:	85 ed       	ldi	r24, 0xD5	; 213
     124:	92 e0       	ldi	r25, 0x02	; 2
     126:	0e 94 6c 05 	call	0xad8	; 0xad8 <OLED_print_string>
	OLED_pos(3, 20);
     12a:	64 e1       	ldi	r22, 0x14	; 20
     12c:	83 e0       	ldi	r24, 0x03	; 3
     12e:	0e 94 48 05 	call	0xa90	; 0xa90 <OLED_pos>
	OLED_print_string("Two-players mode");
     132:	85 ee       	ldi	r24, 0xE5	; 229
     134:	92 e0       	ldi	r25, 0x02	; 2
     136:	0e 94 6c 05 	call	0xad8	; 0xad8 <OLED_print_string>
	OLED_pos(4, 20);
     13a:	64 e1       	ldi	r22, 0x14	; 20
     13c:	84 e0       	ldi	r24, 0x04	; 4
     13e:	0e 94 48 05 	call	0xa90	; 0xa90 <OLED_pos>
	OLED_print_string("Highscores");
     142:	86 ef       	ldi	r24, 0xF6	; 246
     144:	92 e0       	ldi	r25, 0x02	; 2
     146:	0e 94 6c 05 	call	0xad8	; 0xad8 <OLED_print_string>
	OLED_pos(5, 20);
     14a:	64 e1       	ldi	r22, 0x14	; 20
     14c:	85 e0       	ldi	r24, 0x05	; 5
     14e:	0e 94 48 05 	call	0xa90	; 0xa90 <OLED_pos>
	OLED_print_string("Settings");
     152:	81 e0       	ldi	r24, 0x01	; 1
     154:	93 e0       	ldi	r25, 0x03	; 3
     156:	0e 94 6c 05 	call	0xad8	; 0xad8 <OLED_print_string>
	OLED_pos(7, 48);
     15a:	60 e3       	ldi	r22, 0x30	; 48
     15c:	87 e0       	ldi	r24, 0x07	; 7
     15e:	0e 94 48 05 	call	0xa90	; 0xa90 <OLED_pos>
	OLED_print_string("Touch right to enter");
     162:	8a e0       	ldi	r24, 0x0A	; 10
     164:	93 e0       	ldi	r25, 0x03	; 3
     166:	0e 94 6c 05 	call	0xad8	; 0xad8 <OLED_print_string>
	OLED_pos(7,0);
     16a:	60 e0       	ldi	r22, 0x00	; 0
     16c:	87 e0       	ldi	r24, 0x07	; 7
     16e:	0e 94 48 05 	call	0xa90	; 0xa90 <OLED_pos>
	OLED_print_home();
     172:	0e 94 a1 05 	call	0xb42	; 0xb42 <OLED_print_home>
     176:	08 95       	ret

00000178 <draw_one_player>:
}

void draw_one_player()
{
	OLED_Reset();
     178:	0e 94 c1 04 	call	0x982	; 0x982 <OLED_Reset>
	OLED_pos(0, 32);
     17c:	60 e2       	ldi	r22, 0x20	; 32
     17e:	80 e0       	ldi	r24, 0x00	; 0
     180:	0e 94 48 05 	call	0xa90	; 0xa90 <OLED_pos>
	OLED_print_string("One-player mode");
     184:	85 ed       	ldi	r24, 0xD5	; 213
     186:	92 e0       	ldi	r25, 0x02	; 2
     188:	0e 94 6c 05 	call	0xad8	; 0xad8 <OLED_print_string>
	OLED_print_woman(3,58);
     18c:	6a e3       	ldi	r22, 0x3A	; 58
     18e:	83 e0       	ldi	r24, 0x03	; 3
     190:	0e 94 b1 05 	call	0xb62	; 0xb62 <OLED_print_woman>
	OLED_pos(7,0);
     194:	60 e0       	ldi	r22, 0x00	; 0
     196:	87 e0       	ldi	r24, 0x07	; 7
     198:	0e 94 48 05 	call	0xa90	; 0xa90 <OLED_pos>
	OLED_print_home();
     19c:	0e 94 a1 05 	call	0xb42	; 0xb42 <OLED_print_home>
     1a0:	08 95       	ret

000001a2 <draw_two_players>:
}

void draw_two_players()
{
	OLED_Reset();
     1a2:	0e 94 c1 04 	call	0x982	; 0x982 <OLED_Reset>
	OLED_pos(0, 32);
     1a6:	60 e2       	ldi	r22, 0x20	; 32
     1a8:	80 e0       	ldi	r24, 0x00	; 0
     1aa:	0e 94 48 05 	call	0xa90	; 0xa90 <OLED_pos>
	OLED_print_string("Two-players mode");
     1ae:	85 ee       	ldi	r24, 0xE5	; 229
     1b0:	92 e0       	ldi	r25, 0x02	; 2
     1b2:	0e 94 6c 05 	call	0xad8	; 0xad8 <OLED_print_string>
	OLED_print_woman(3,29);
     1b6:	6d e1       	ldi	r22, 0x1D	; 29
     1b8:	83 e0       	ldi	r24, 0x03	; 3
     1ba:	0e 94 b1 05 	call	0xb62	; 0xb62 <OLED_print_woman>
	OLED_print_woman(3,87);
     1be:	67 e5       	ldi	r22, 0x57	; 87
     1c0:	83 e0       	ldi	r24, 0x03	; 3
     1c2:	0e 94 b1 05 	call	0xb62	; 0xb62 <OLED_print_woman>
	OLED_pos(7,0);
     1c6:	60 e0       	ldi	r22, 0x00	; 0
     1c8:	87 e0       	ldi	r24, 0x07	; 7
     1ca:	0e 94 48 05 	call	0xa90	; 0xa90 <OLED_pos>
	OLED_print_home();
     1ce:	0e 94 a1 05 	call	0xb42	; 0xb42 <OLED_print_home>
     1d2:	08 95       	ret

000001d4 <draw_highscores>:
}

void draw_highscores()
{
	OLED_Reset();
     1d4:	0e 94 c1 04 	call	0x982	; 0x982 <OLED_Reset>
	OLED_pos(0, 44);
     1d8:	6c e2       	ldi	r22, 0x2C	; 44
     1da:	80 e0       	ldi	r24, 0x00	; 0
     1dc:	0e 94 48 05 	call	0xa90	; 0xa90 <OLED_pos>
	OLED_print_string("Highscores");
     1e0:	86 ef       	ldi	r24, 0xF6	; 246
     1e2:	92 e0       	ldi	r25, 0x02	; 2
     1e4:	0e 94 6c 05 	call	0xad8	; 0xad8 <OLED_print_string>
	OLED_pos(2, 20);
     1e8:	64 e1       	ldi	r22, 0x14	; 20
     1ea:	82 e0       	ldi	r24, 0x02	; 2
     1ec:	0e 94 48 05 	call	0xa90	; 0xa90 <OLED_pos>
	OLED_print_string("1. 650 points");
     1f0:	8f e1       	ldi	r24, 0x1F	; 31
     1f2:	93 e0       	ldi	r25, 0x03	; 3
     1f4:	0e 94 6c 05 	call	0xad8	; 0xad8 <OLED_print_string>
	OLED_pos(3, 20);
     1f8:	64 e1       	ldi	r22, 0x14	; 20
     1fa:	83 e0       	ldi	r24, 0x03	; 3
     1fc:	0e 94 48 05 	call	0xa90	; 0xa90 <OLED_pos>
	OLED_print_string("2. 422 points");
     200:	8d e2       	ldi	r24, 0x2D	; 45
     202:	93 e0       	ldi	r25, 0x03	; 3
     204:	0e 94 6c 05 	call	0xad8	; 0xad8 <OLED_print_string>
	OLED_pos(4, 20);
     208:	64 e1       	ldi	r22, 0x14	; 20
     20a:	84 e0       	ldi	r24, 0x04	; 4
     20c:	0e 94 48 05 	call	0xa90	; 0xa90 <OLED_pos>
	OLED_print_string("3. 200 points");
     210:	8b e3       	ldi	r24, 0x3B	; 59
     212:	93 e0       	ldi	r25, 0x03	; 3
     214:	0e 94 6c 05 	call	0xad8	; 0xad8 <OLED_print_string>
	OLED_pos(7,0);
     218:	60 e0       	ldi	r22, 0x00	; 0
     21a:	87 e0       	ldi	r24, 0x07	; 7
     21c:	0e 94 48 05 	call	0xa90	; 0xa90 <OLED_pos>
	OLED_print_home();
     220:	0e 94 a1 05 	call	0xb42	; 0xb42 <OLED_print_home>
     224:	08 95       	ret

00000226 <draw_settings>:
}

void draw_settings()
{
	OLED_Reset();
     226:	0e 94 c1 04 	call	0x982	; 0x982 <OLED_Reset>
	OLED_pos(0, 48);
     22a:	60 e3       	ldi	r22, 0x30	; 48
     22c:	80 e0       	ldi	r24, 0x00	; 0
     22e:	0e 94 48 05 	call	0xa90	; 0xa90 <OLED_pos>
	OLED_print_string("Settings");
     232:	81 e0       	ldi	r24, 0x01	; 1
     234:	93 e0       	ldi	r25, 0x03	; 3
     236:	0e 94 6c 05 	call	0xad8	; 0xad8 <OLED_print_string>
	OLED_pos(2, 8);
     23a:	68 e0       	ldi	r22, 0x08	; 8
     23c:	82 e0       	ldi	r24, 0x02	; 2
     23e:	0e 94 48 05 	call	0xa90	; 0xa90 <OLED_pos>
	OLED_print_arrow();
     242:	0e 94 8a 05 	call	0xb14	; 0xb14 <OLED_print_arrow>
	OLED_pos(2, 20);
     246:	64 e1       	ldi	r22, 0x14	; 20
     248:	82 e0       	ldi	r24, 0x02	; 2
     24a:	0e 94 48 05 	call	0xa90	; 0xa90 <OLED_pos>
	OLED_print_string("Brightness");
     24e:	89 e4       	ldi	r24, 0x49	; 73
     250:	93 e0       	ldi	r25, 0x03	; 3
     252:	0e 94 6c 05 	call	0xad8	; 0xad8 <OLED_print_string>
	OLED_pos(3, 20);
     256:	64 e1       	ldi	r22, 0x14	; 20
     258:	83 e0       	ldi	r24, 0x03	; 3
     25a:	0e 94 48 05 	call	0xa90	; 0xa90 <OLED_pos>
	OLED_print_string("Sound");
     25e:	84 e5       	ldi	r24, 0x54	; 84
     260:	93 e0       	ldi	r25, 0x03	; 3
     262:	0e 94 6c 05 	call	0xad8	; 0xad8 <OLED_print_string>
	OLED_pos(7,0);
     266:	60 e0       	ldi	r22, 0x00	; 0
     268:	87 e0       	ldi	r24, 0x07	; 7
     26a:	0e 94 48 05 	call	0xa90	; 0xa90 <OLED_pos>
	OLED_print_home();
     26e:	0e 94 a1 05 	call	0xb42	; 0xb42 <OLED_print_home>
     272:	08 95       	ret

00000274 <draw_brightness>:
}

void draw_brightness()
{
	OLED_Reset();
     274:	0e 94 c1 04 	call	0x982	; 0x982 <OLED_Reset>
	OLED_pos(0, 44);
     278:	6c e2       	ldi	r22, 0x2C	; 44
     27a:	80 e0       	ldi	r24, 0x00	; 0
     27c:	0e 94 48 05 	call	0xa90	; 0xa90 <OLED_pos>
	OLED_print_string("Brightness");
     280:	89 e4       	ldi	r24, 0x49	; 73
     282:	93 e0       	ldi	r25, 0x03	; 3
     284:	0e 94 6c 05 	call	0xad8	; 0xad8 <OLED_print_string>
	OLED_pos(5, 0);
     288:	60 e0       	ldi	r22, 0x00	; 0
     28a:	85 e0       	ldi	r24, 0x05	; 5
     28c:	0e 94 48 05 	call	0xa90	; 0xa90 <OLED_pos>
	OLED_print_string("Use left slide to set brightness");
     290:	8a e5       	ldi	r24, 0x5A	; 90
     292:	93 e0       	ldi	r25, 0x03	; 3
     294:	0e 94 6c 05 	call	0xad8	; 0xad8 <OLED_print_string>
	OLED_pos(7,0);
     298:	60 e0       	ldi	r22, 0x00	; 0
     29a:	87 e0       	ldi	r24, 0x07	; 7
     29c:	0e 94 48 05 	call	0xa90	; 0xa90 <OLED_pos>
	OLED_print_home();
     2a0:	0e 94 a1 05 	call	0xb42	; 0xb42 <OLED_print_home>
     2a4:	08 95       	ret

000002a6 <Joystick_Position>:

#define JOYSTICK_VERTICAL 0x4
#define JOYSTICK_HORIZONTAL 0x5

Position Joystick_Position()
{
     2a6:	0f 93       	push	r16
     2a8:	1f 93       	push	r17
     2aa:	cf 93       	push	r28
     2ac:	df 93       	push	r29
     2ae:	cd b7       	in	r28, 0x3d	; 61
     2b0:	de b7       	in	r29, 0x3e	; 62
     2b2:	28 97       	sbiw	r28, 0x08	; 8
     2b4:	0f b6       	in	r0, 0x3f	; 63
     2b6:	f8 94       	cli
     2b8:	de bf       	out	0x3e, r29	; 62
     2ba:	0f be       	out	0x3f, r0	; 63
     2bc:	cd bf       	out	0x3d, r28	; 61
	uint8_t joystick_horizontal = ADC_Convert(JOYSTICK_HORIZONTAL);
     2be:	85 e0       	ldi	r24, 0x05	; 5
     2c0:	0e 94 57 00 	call	0xae	; 0xae <ADC_Convert>
     2c4:	18 2f       	mov	r17, r24
	uint8_t joystick_vertical = ADC_Convert(JOYSTICK_VERTICAL);
     2c6:	84 e0       	ldi	r24, 0x04	; 4
     2c8:	0e 94 57 00 	call	0xae	; 0xae <ADC_Convert>
     2cc:	08 2f       	mov	r16, r24
	float X = joystick_horizontal;
     2ce:	61 2f       	mov	r22, r17
     2d0:	70 e0       	ldi	r23, 0x00	; 0
     2d2:	80 e0       	ldi	r24, 0x00	; 0
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	0e 94 ca 06 	call	0xd94	; 0xd94 <__floatunsisf>
	float Y = joystick_vertical;
	
	Position joystick;
	joystick.x = (X / 255.0) * 200.0 - 100.0;
     2da:	20 e0       	ldi	r18, 0x00	; 0
     2dc:	30 e0       	ldi	r19, 0x00	; 0
     2de:	4f e7       	ldi	r20, 0x7F	; 127
     2e0:	53 e4       	ldi	r21, 0x43	; 67
     2e2:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__divsf3>
     2e6:	20 e0       	ldi	r18, 0x00	; 0
     2e8:	30 e0       	ldi	r19, 0x00	; 0
     2ea:	48 e4       	ldi	r20, 0x48	; 72
     2ec:	53 e4       	ldi	r21, 0x43	; 67
     2ee:	0e 94 80 07 	call	0xf00	; 0xf00 <__mulsf3>
     2f2:	20 e0       	ldi	r18, 0x00	; 0
     2f4:	30 e0       	ldi	r19, 0x00	; 0
     2f6:	48 ec       	ldi	r20, 0xC8	; 200
     2f8:	52 e4       	ldi	r21, 0x42	; 66
     2fa:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <__subsf3>
     2fe:	48 2f       	mov	r20, r24
     300:	59 2f       	mov	r21, r25
	joystick.y = (Y / 255.0) * 200.0 - 100.0;
	return joystick;
     302:	16 2f       	mov	r17, r22
     304:	86 2f       	mov	r24, r22
     306:	97 2f       	mov	r25, r23
     308:	a4 2f       	mov	r26, r20
     30a:	b5 2f       	mov	r27, r21
     30c:	89 83       	std	Y+1, r24	; 0x01
     30e:	9a 83       	std	Y+2, r25	; 0x02
     310:	ab 83       	std	Y+3, r26	; 0x03
     312:	bc 83       	std	Y+4, r27	; 0x04
Position Joystick_Position()
{
	uint8_t joystick_horizontal = ADC_Convert(JOYSTICK_HORIZONTAL);
	uint8_t joystick_vertical = ADC_Convert(JOYSTICK_VERTICAL);
	float X = joystick_horizontal;
	float Y = joystick_vertical;
     314:	60 2f       	mov	r22, r16
     316:	70 e0       	ldi	r23, 0x00	; 0
     318:	80 e0       	ldi	r24, 0x00	; 0
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	0e 94 ca 06 	call	0xd94	; 0xd94 <__floatunsisf>
	
	Position joystick;
	joystick.x = (X / 255.0) * 200.0 - 100.0;
	joystick.y = (Y / 255.0) * 200.0 - 100.0;
     320:	20 e0       	ldi	r18, 0x00	; 0
     322:	30 e0       	ldi	r19, 0x00	; 0
     324:	4f e7       	ldi	r20, 0x7F	; 127
     326:	53 e4       	ldi	r21, 0x43	; 67
     328:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__divsf3>
     32c:	20 e0       	ldi	r18, 0x00	; 0
     32e:	30 e0       	ldi	r19, 0x00	; 0
     330:	48 e4       	ldi	r20, 0x48	; 72
     332:	53 e4       	ldi	r21, 0x43	; 67
     334:	0e 94 80 07 	call	0xf00	; 0xf00 <__mulsf3>
     338:	20 e0       	ldi	r18, 0x00	; 0
     33a:	30 e0       	ldi	r19, 0x00	; 0
     33c:	48 ec       	ldi	r20, 0xC8	; 200
     33e:	52 e4       	ldi	r21, 0x42	; 66
     340:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <__subsf3>
     344:	e6 2f       	mov	r30, r22
	return joystick;
     346:	46 2f       	mov	r20, r22
     348:	57 2f       	mov	r21, r23
     34a:	68 2f       	mov	r22, r24
     34c:	79 2f       	mov	r23, r25
     34e:	4d 83       	std	Y+5, r20	; 0x05
     350:	5e 83       	std	Y+6, r21	; 0x06
     352:	6f 83       	std	Y+7, r22	; 0x07
     354:	78 87       	std	Y+8, r23	; 0x08
     356:	21 2f       	mov	r18, r17
     358:	3a 81       	ldd	r19, Y+2	; 0x02
     35a:	4b 81       	ldd	r20, Y+3	; 0x03
     35c:	5c 81       	ldd	r21, Y+4	; 0x04
     35e:	6e 2f       	mov	r22, r30
     360:	7e 81       	ldd	r23, Y+6	; 0x06
}
     362:	8f 81       	ldd	r24, Y+7	; 0x07
     364:	98 85       	ldd	r25, Y+8	; 0x08
     366:	28 96       	adiw	r28, 0x08	; 8
     368:	0f b6       	in	r0, 0x3f	; 63
     36a:	f8 94       	cli
     36c:	de bf       	out	0x3e, r29	; 62
     36e:	0f be       	out	0x3f, r0	; 63
     370:	cd bf       	out	0x3d, r28	; 61
     372:	df 91       	pop	r29
     374:	cf 91       	pop	r28
     376:	1f 91       	pop	r17
     378:	0f 91       	pop	r16
     37a:	08 95       	ret

0000037c <Joystick_Direction>:

char* Joystick_Direction(Position* joystick)
{
     37c:	cf 92       	push	r12
     37e:	df 92       	push	r13
     380:	ef 92       	push	r14
     382:	ff 92       	push	r15
     384:	cf 93       	push	r28
     386:	df 93       	push	r29
     388:	ec 01       	movw	r28, r24
	if(joystick->x < -71)
     38a:	c8 80       	ld	r12, Y
     38c:	d9 80       	ldd	r13, Y+1	; 0x01
     38e:	ea 80       	ldd	r14, Y+2	; 0x02
     390:	fb 80       	ldd	r15, Y+3	; 0x03
     392:	20 e0       	ldi	r18, 0x00	; 0
     394:	30 e0       	ldi	r19, 0x00	; 0
     396:	4e e8       	ldi	r20, 0x8E	; 142
     398:	52 ec       	ldi	r21, 0xC2	; 194
     39a:	c7 01       	movw	r24, r14
     39c:	b6 01       	movw	r22, r12
     39e:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__cmpsf2>
     3a2:	88 23       	and	r24, r24
     3a4:	2c f1       	brlt	.+74     	; 0x3f0 <Joystick_Direction+0x74>
	return "LEFT";
	else if(joystick->x > 71)
     3a6:	20 e0       	ldi	r18, 0x00	; 0
     3a8:	30 e0       	ldi	r19, 0x00	; 0
     3aa:	4e e8       	ldi	r20, 0x8E	; 142
     3ac:	52 e4       	ldi	r21, 0x42	; 66
     3ae:	c7 01       	movw	r24, r14
     3b0:	b6 01       	movw	r22, r12
     3b2:	0e 94 7c 07 	call	0xef8	; 0xef8 <__gesf2>
     3b6:	18 16       	cp	r1, r24
     3b8:	f4 f0       	brlt	.+60     	; 0x3f6 <Joystick_Direction+0x7a>
	return "RIGHT";
	
	if(joystick->y < -71)
     3ba:	cc 80       	ldd	r12, Y+4	; 0x04
     3bc:	dd 80       	ldd	r13, Y+5	; 0x05
     3be:	ee 80       	ldd	r14, Y+6	; 0x06
     3c0:	ff 80       	ldd	r15, Y+7	; 0x07
     3c2:	20 e0       	ldi	r18, 0x00	; 0
     3c4:	30 e0       	ldi	r19, 0x00	; 0
     3c6:	4e e8       	ldi	r20, 0x8E	; 142
     3c8:	52 ec       	ldi	r21, 0xC2	; 194
     3ca:	c7 01       	movw	r24, r14
     3cc:	b6 01       	movw	r22, r12
     3ce:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__cmpsf2>
     3d2:	88 23       	and	r24, r24
     3d4:	9c f0       	brlt	.+38     	; 0x3fc <Joystick_Direction+0x80>
	return "DOWN";
	else if(joystick->y > 71)
     3d6:	20 e0       	ldi	r18, 0x00	; 0
     3d8:	30 e0       	ldi	r19, 0x00	; 0
     3da:	4e e8       	ldi	r20, 0x8E	; 142
     3dc:	52 e4       	ldi	r21, 0x42	; 66
     3de:	c7 01       	movw	r24, r14
     3e0:	b6 01       	movw	r22, r12
     3e2:	0e 94 7c 07 	call	0xef8	; 0xef8 <__gesf2>
     3e6:	18 16       	cp	r1, r24
     3e8:	64 f4       	brge	.+24     	; 0x402 <Joystick_Direction+0x86>
	return "UP";
     3ea:	8b e8       	ldi	r24, 0x8B	; 139
     3ec:	93 e0       	ldi	r25, 0x03	; 3
     3ee:	0b c0       	rjmp	.+22     	; 0x406 <Joystick_Direction+0x8a>
}

char* Joystick_Direction(Position* joystick)
{
	if(joystick->x < -71)
	return "LEFT";
     3f0:	8b e7       	ldi	r24, 0x7B	; 123
     3f2:	93 e0       	ldi	r25, 0x03	; 3
     3f4:	08 c0       	rjmp	.+16     	; 0x406 <Joystick_Direction+0x8a>
	else if(joystick->x > 71)
	return "RIGHT";
     3f6:	80 e8       	ldi	r24, 0x80	; 128
     3f8:	93 e0       	ldi	r25, 0x03	; 3
     3fa:	05 c0       	rjmp	.+10     	; 0x406 <Joystick_Direction+0x8a>
	
	if(joystick->y < -71)
	return "DOWN";
     3fc:	86 e8       	ldi	r24, 0x86	; 134
     3fe:	93 e0       	ldi	r25, 0x03	; 3
     400:	02 c0       	rjmp	.+4      	; 0x406 <Joystick_Direction+0x8a>
	else if(joystick->y > 71)
	return "UP";
	
	return "NEUTRAL";
     402:	8e e8       	ldi	r24, 0x8E	; 142
     404:	93 e0       	ldi	r25, 0x03	; 3
     406:	df 91       	pop	r29
     408:	cf 91       	pop	r28
     40a:	ff 90       	pop	r15
     40c:	ef 90       	pop	r14
     40e:	df 90       	pop	r13
     410:	cf 90       	pop	r12
     412:	08 95       	ret

00000414 <__vector_1>:
int arrow = 2 ;
int i = 0;
uint8_t slide_left;

ISR(INT0_vect)
{
     414:	1f 92       	push	r1
     416:	0f 92       	push	r0
     418:	0f b6       	in	r0, 0x3f	; 63
     41a:	0f 92       	push	r0
     41c:	11 24       	eor	r1, r1
     41e:	2f 93       	push	r18
     420:	3f 93       	push	r19
     422:	4f 93       	push	r20
     424:	5f 93       	push	r21
     426:	6f 93       	push	r22
     428:	7f 93       	push	r23
     42a:	8f 93       	push	r24
     42c:	9f 93       	push	r25
     42e:	af 93       	push	r26
     430:	bf 93       	push	r27
     432:	ef 93       	push	r30
     434:	ff 93       	push	r31
	if(i < 3)
     436:	80 91 bc 03 	lds	r24, 0x03BC
     43a:	90 91 bd 03 	lds	r25, 0x03BD
     43e:	83 30       	cpi	r24, 0x03	; 3
     440:	91 05       	cpc	r25, r1
     442:	34 f4       	brge	.+12     	; 0x450 <__vector_1+0x3c>
	{
		i++;
     444:	01 96       	adiw	r24, 0x01	; 1
     446:	90 93 bd 03 	sts	0x03BD, r25
     44a:	80 93 bc 03 	sts	0x03BC, r24
     44e:	64 c0       	rjmp	.+200    	; 0x518 <__stack+0x19>
	}
	else
	{
		if(mode == HOME)
     450:	80 91 be 03 	lds	r24, 0x03BE
     454:	90 91 bf 03 	lds	r25, 0x03BF
     458:	00 97       	sbiw	r24, 0x00	; 0
     45a:	79 f4       	brne	.+30     	; 0x47a <__vector_1+0x66>
		{
			mode = MAIN_MENU;
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	90 93 bf 03 	sts	0x03BF, r25
     464:	80 93 be 03 	sts	0x03BE, r24
			arrow = 2;
     468:	82 e0       	ldi	r24, 0x02	; 2
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	90 93 07 01 	sts	0x0107, r25
     470:	80 93 06 01 	sts	0x0106, r24
			draw_main_menu();
     474:	0e 94 7d 00 	call	0xfa	; 0xfa <draw_main_menu>
     478:	4f c0       	rjmp	.+158    	; 0x518 <__stack+0x19>
		}
		else if(mode == MAIN_MENU && arrow == 2)
     47a:	81 30       	cpi	r24, 0x01	; 1
     47c:	91 05       	cpc	r25, r1
     47e:	c9 f5       	brne	.+114    	; 0x4f2 <__vector_1+0xde>
     480:	80 91 06 01 	lds	r24, 0x0106
     484:	90 91 07 01 	lds	r25, 0x0107
     488:	82 30       	cpi	r24, 0x02	; 2
     48a:	91 05       	cpc	r25, r1
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__vector_1+0x8c>
		{
			mode = ONE_PLAYER;
     48e:	8b e0       	ldi	r24, 0x0B	; 11
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	90 93 bf 03 	sts	0x03BF, r25
     496:	80 93 be 03 	sts	0x03BE, r24
			draw_one_player();
     49a:	0e 94 bc 00 	call	0x178	; 0x178 <draw_one_player>
     49e:	3c c0       	rjmp	.+120    	; 0x518 <__stack+0x19>
		}
		else if(mode == MAIN_MENU && arrow == 3)
     4a0:	83 30       	cpi	r24, 0x03	; 3
     4a2:	91 05       	cpc	r25, r1
     4a4:	49 f4       	brne	.+18     	; 0x4b8 <__vector_1+0xa4>
		{
			mode = TWO_PLAYERS;
     4a6:	8c e0       	ldi	r24, 0x0C	; 12
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	90 93 bf 03 	sts	0x03BF, r25
     4ae:	80 93 be 03 	sts	0x03BE, r24
			draw_two_players();
     4b2:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <draw_two_players>
     4b6:	30 c0       	rjmp	.+96     	; 0x518 <__stack+0x19>
		}
		else if(mode == MAIN_MENU && arrow == 4)
     4b8:	84 30       	cpi	r24, 0x04	; 4
     4ba:	91 05       	cpc	r25, r1
     4bc:	49 f4       	brne	.+18     	; 0x4d0 <__vector_1+0xbc>
		{
			mode = HIGHSCORES;
     4be:	8d e0       	ldi	r24, 0x0D	; 13
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	90 93 bf 03 	sts	0x03BF, r25
     4c6:	80 93 be 03 	sts	0x03BE, r24
			draw_highscores();
     4ca:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <draw_highscores>
     4ce:	24 c0       	rjmp	.+72     	; 0x518 <__stack+0x19>
		}
		else if(mode == MAIN_MENU && arrow == 5)
     4d0:	05 97       	sbiw	r24, 0x05	; 5
     4d2:	11 f5       	brne	.+68     	; 0x518 <__stack+0x19>
		{
			mode = SETTINGS;
     4d4:	8e e0       	ldi	r24, 0x0E	; 14
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	90 93 bf 03 	sts	0x03BF, r25
     4dc:	80 93 be 03 	sts	0x03BE, r24
			arrow = 2;
     4e0:	82 e0       	ldi	r24, 0x02	; 2
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	90 93 07 01 	sts	0x0107, r25
     4e8:	80 93 06 01 	sts	0x0106, r24
			draw_settings();
     4ec:	0e 94 13 01 	call	0x226	; 0x226 <draw_settings>
     4f0:	13 c0       	rjmp	.+38     	; 0x518 <__stack+0x19>
		}
		else if(mode == SETTINGS && arrow == 2)
     4f2:	0e 97       	sbiw	r24, 0x0e	; 14
     4f4:	89 f4       	brne	.+34     	; 0x518 <__stack+0x19>
     4f6:	80 91 06 01 	lds	r24, 0x0106
     4fa:	90 91 07 01 	lds	r25, 0x0107
     4fe:	02 97       	sbiw	r24, 0x02	; 2
     500:	59 f4       	brne	.+22     	; 0x518 <__stack+0x19>
		{
			mode = BRIGHTNESS;
     502:	8d e8       	ldi	r24, 0x8D	; 141
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	90 93 bf 03 	sts	0x03BF, r25
     50a:	80 93 be 03 	sts	0x03BE, r24
			draw_brightness(slide_left);
     50e:	80 91 c0 03 	lds	r24, 0x03C0
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	0e 94 3a 01 	call	0x274	; 0x274 <draw_brightness>
		}
	}
}
     518:	ff 91       	pop	r31
     51a:	ef 91       	pop	r30
     51c:	bf 91       	pop	r27
     51e:	af 91       	pop	r26
     520:	9f 91       	pop	r25
     522:	8f 91       	pop	r24
     524:	7f 91       	pop	r23
     526:	6f 91       	pop	r22
     528:	5f 91       	pop	r21
     52a:	4f 91       	pop	r20
     52c:	3f 91       	pop	r19
     52e:	2f 91       	pop	r18
     530:	0f 90       	pop	r0
     532:	0f be       	out	0x3f, r0	; 63
     534:	0f 90       	pop	r0
     536:	1f 90       	pop	r1
     538:	18 95       	reti

0000053a <__vector_2>:

ISR(INT1_vect)
{
     53a:	1f 92       	push	r1
     53c:	0f 92       	push	r0
     53e:	0f b6       	in	r0, 0x3f	; 63
     540:	0f 92       	push	r0
     542:	11 24       	eor	r1, r1
     544:	2f 93       	push	r18
     546:	3f 93       	push	r19
     548:	4f 93       	push	r20
     54a:	5f 93       	push	r21
     54c:	6f 93       	push	r22
     54e:	7f 93       	push	r23
     550:	8f 93       	push	r24
     552:	9f 93       	push	r25
     554:	af 93       	push	r26
     556:	bf 93       	push	r27
     558:	ef 93       	push	r30
     55a:	ff 93       	push	r31
	if(mode == MAIN_MENU)
     55c:	80 91 be 03 	lds	r24, 0x03BE
     560:	90 91 bf 03 	lds	r25, 0x03BF
     564:	81 30       	cpi	r24, 0x01	; 1
     566:	91 05       	cpc	r25, r1
     568:	39 f4       	brne	.+14     	; 0x578 <__vector_2+0x3e>
	{
		mode = HOME;
     56a:	10 92 bf 03 	sts	0x03BF, r1
     56e:	10 92 be 03 	sts	0x03BE, r1
		draw_home();
     572:	0e 94 62 00 	call	0xc4	; 0xc4 <draw_home>
     576:	26 c0       	rjmp	.+76     	; 0x5c4 <__vector_2+0x8a>
	}
	else if(mode == ONE_PLAYER || mode == TWO_PLAYERS || mode == HIGHSCORES || mode == SETTINGS)
     578:	9c 01       	movw	r18, r24
     57a:	2b 50       	subi	r18, 0x0B	; 11
     57c:	31 09       	sbc	r19, r1
     57e:	24 30       	cpi	r18, 0x04	; 4
     580:	31 05       	cpc	r19, r1
     582:	78 f4       	brcc	.+30     	; 0x5a2 <__vector_2+0x68>
	{
		mode = MAIN_MENU;
     584:	81 e0       	ldi	r24, 0x01	; 1
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	90 93 bf 03 	sts	0x03BF, r25
     58c:	80 93 be 03 	sts	0x03BE, r24
		arrow = 2;
     590:	82 e0       	ldi	r24, 0x02	; 2
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	90 93 07 01 	sts	0x0107, r25
     598:	80 93 06 01 	sts	0x0106, r24
		draw_main_menu();
     59c:	0e 94 7d 00 	call	0xfa	; 0xfa <draw_main_menu>
     5a0:	11 c0       	rjmp	.+34     	; 0x5c4 <__vector_2+0x8a>
	}
	else if(mode == BRIGHTNESS)
     5a2:	8d 38       	cpi	r24, 0x8D	; 141
     5a4:	91 05       	cpc	r25, r1
     5a6:	71 f4       	brne	.+28     	; 0x5c4 <__vector_2+0x8a>
	{
		mode = SETTINGS;
     5a8:	8e e0       	ldi	r24, 0x0E	; 14
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	90 93 bf 03 	sts	0x03BF, r25
     5b0:	80 93 be 03 	sts	0x03BE, r24
		arrow = 2;
     5b4:	82 e0       	ldi	r24, 0x02	; 2
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	90 93 07 01 	sts	0x0107, r25
     5bc:	80 93 06 01 	sts	0x0106, r24
		draw_settings();
     5c0:	0e 94 13 01 	call	0x226	; 0x226 <draw_settings>
	}
}
     5c4:	ff 91       	pop	r31
     5c6:	ef 91       	pop	r30
     5c8:	bf 91       	pop	r27
     5ca:	af 91       	pop	r26
     5cc:	9f 91       	pop	r25
     5ce:	8f 91       	pop	r24
     5d0:	7f 91       	pop	r23
     5d2:	6f 91       	pop	r22
     5d4:	5f 91       	pop	r21
     5d6:	4f 91       	pop	r20
     5d8:	3f 91       	pop	r19
     5da:	2f 91       	pop	r18
     5dc:	0f 90       	pop	r0
     5de:	0f be       	out	0x3f, r0	; 63
     5e0:	0f 90       	pop	r0
     5e2:	1f 90       	pop	r1
     5e4:	18 95       	reti

000005e6 <ISR_joystick_click>:
	printf("SPI\n");
}*/

void ISR_joystick_click()
{
	printf("Interrupted by joystick button!\n");
     5e6:	86 e9       	ldi	r24, 0x96	; 150
     5e8:	93 e0       	ldi	r25, 0x03	; 3
     5ea:	0e 94 2e 08 	call	0x105c	; 0x105c <puts>
     5ee:	08 95       	ret

000005f0 <ISR_slide_left>:
{
	//printf("Interrupted by right slide!\n");
}

void ISR_slide_left()
{
     5f0:	cf 93       	push	r28
     5f2:	df 93       	push	r29
	if(mode == BRIGHTNESS)
     5f4:	80 91 be 03 	lds	r24, 0x03BE
     5f8:	90 91 bf 03 	lds	r25, 0x03BF
     5fc:	8d 38       	cpi	r24, 0x8D	; 141
     5fe:	91 05       	cpc	r25, r1
     600:	39 f5       	brne	.+78     	; 0x650 <ISR_slide_left+0x60>
	{
		OLED_set_brightness(slide_left);
     602:	80 91 c0 03 	lds	r24, 0x03C0
     606:	0e 94 bb 04 	call	0x976	; 0x976 <OLED_set_brightness>
		OLED_pos(3, 32);
     60a:	60 e2       	ldi	r22, 0x20	; 32
     60c:	83 e0       	ldi	r24, 0x03	; 3
     60e:	0e 94 48 05 	call	0xa90	; 0xa90 <OLED_pos>
     612:	c0 e4       	ldi	r28, 0x40	; 64
     614:	d0 e0       	ldi	r29, 0x00	; 0
		for(int i=0; i < 64; i++)
		{
			OLED_write_data(0b00000000);
     616:	80 e0       	ldi	r24, 0x00	; 0
     618:	0e 94 b8 04 	call	0x970	; 0x970 <OLED_write_data>
     61c:	21 97       	sbiw	r28, 0x01	; 1
{
	if(mode == BRIGHTNESS)
	{
		OLED_set_brightness(slide_left);
		OLED_pos(3, 32);
		for(int i=0; i < 64; i++)
     61e:	20 97       	sbiw	r28, 0x00	; 0
     620:	d1 f7       	brne	.-12     	; 0x616 <ISR_slide_left+0x26>
		{
			OLED_write_data(0b00000000);
		}
		OLED_pos(3, 32);
     622:	60 e2       	ldi	r22, 0x20	; 32
     624:	83 e0       	ldi	r24, 0x03	; 3
     626:	0e 94 48 05 	call	0xa90	; 0xa90 <OLED_pos>
		for(int i=0; i < slide_left/4; i++)
     62a:	80 91 c0 03 	lds	r24, 0x03C0
     62e:	86 95       	lsr	r24
     630:	86 95       	lsr	r24
     632:	71 f0       	breq	.+28     	; 0x650 <ISR_slide_left+0x60>
     634:	c0 e0       	ldi	r28, 0x00	; 0
     636:	d0 e0       	ldi	r29, 0x00	; 0
		{
			OLED_write_data(0b11111111);
     638:	8f ef       	ldi	r24, 0xFF	; 255
     63a:	0e 94 b8 04 	call	0x970	; 0x970 <OLED_write_data>
		for(int i=0; i < 64; i++)
		{
			OLED_write_data(0b00000000);
		}
		OLED_pos(3, 32);
		for(int i=0; i < slide_left/4; i++)
     63e:	21 96       	adiw	r28, 0x01	; 1
     640:	80 91 c0 03 	lds	r24, 0x03C0
     644:	86 95       	lsr	r24
     646:	86 95       	lsr	r24
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	c8 17       	cp	r28, r24
     64c:	d9 07       	cpc	r29, r25
     64e:	a4 f3       	brlt	.-24     	; 0x638 <ISR_slide_left+0x48>
		{
			OLED_write_data(0b11111111);
		}
	}
}
     650:	df 91       	pop	r29
     652:	cf 91       	pop	r28
     654:	08 95       	ret

00000656 <ISR_joystick>:

void ISR_joystick(Position joystick)
{
     656:	cf 93       	push	r28
     658:	df 93       	push	r29
     65a:	cd b7       	in	r28, 0x3d	; 61
     65c:	de b7       	in	r29, 0x3e	; 62
     65e:	28 97       	sbiw	r28, 0x08	; 8
     660:	0f b6       	in	r0, 0x3f	; 63
     662:	f8 94       	cli
     664:	de bf       	out	0x3e, r29	; 62
     666:	0f be       	out	0x3f, r0	; 63
     668:	cd bf       	out	0x3d, r28	; 61
     66a:	29 83       	std	Y+1, r18	; 0x01
     66c:	3a 83       	std	Y+2, r19	; 0x02
     66e:	4b 83       	std	Y+3, r20	; 0x03
     670:	5c 83       	std	Y+4, r21	; 0x04
     672:	6d 83       	std	Y+5, r22	; 0x05
     674:	7e 83       	std	Y+6, r23	; 0x06
     676:	8f 83       	std	Y+7, r24	; 0x07
     678:	98 87       	std	Y+8, r25	; 0x08
	char* direction = Joystick_Direction(&joystick);
     67a:	ce 01       	movw	r24, r28
     67c:	01 96       	adiw	r24, 0x01	; 1
     67e:	0e 94 be 01 	call	0x37c	; 0x37c <Joystick_Direction>
	if(mode == MAIN_MENU && direction == "UP"){
     682:	20 91 be 03 	lds	r18, 0x03BE
     686:	30 91 bf 03 	lds	r19, 0x03BF
     68a:	21 30       	cpi	r18, 0x01	; 1
     68c:	31 05       	cpc	r19, r1
     68e:	09 f0       	breq	.+2      	; 0x692 <ISR_joystick+0x3c>
     690:	68 c0       	rjmp	.+208    	; 0x762 <ISR_joystick+0x10c>
     692:	23 e0       	ldi	r18, 0x03	; 3
     694:	8b 38       	cpi	r24, 0x8B	; 139
     696:	92 07       	cpc	r25, r18
     698:	81 f5       	brne	.+96     	; 0x6fa <ISR_joystick+0xa4>
		if(arrow > 2)
     69a:	80 91 06 01 	lds	r24, 0x0106
     69e:	90 91 07 01 	lds	r25, 0x0107
     6a2:	83 30       	cpi	r24, 0x03	; 3
     6a4:	91 05       	cpc	r25, r1
     6a6:	a4 f0       	brlt	.+40     	; 0x6d0 <ISR_joystick+0x7a>
		{
			OLED_pos(arrow, 8);
     6a8:	68 e0       	ldi	r22, 0x08	; 8
     6aa:	0e 94 48 05 	call	0xa90	; 0xa90 <OLED_pos>
			OLED_erase_arrow();
     6ae:	0e 94 97 05 	call	0xb2e	; 0xb2e <OLED_erase_arrow>
			arrow--;
     6b2:	80 91 06 01 	lds	r24, 0x0106
     6b6:	90 91 07 01 	lds	r25, 0x0107
     6ba:	01 97       	sbiw	r24, 0x01	; 1
     6bc:	90 93 07 01 	sts	0x0107, r25
     6c0:	80 93 06 01 	sts	0x0106, r24
			OLED_pos(arrow, 8);
     6c4:	68 e0       	ldi	r22, 0x08	; 8
     6c6:	0e 94 48 05 	call	0xa90	; 0xa90 <OLED_pos>
			OLED_print_arrow();
     6ca:	0e 94 8a 05 	call	0xb14	; 0xb14 <OLED_print_arrow>
     6ce:	b4 c0       	rjmp	.+360    	; 0x838 <ISR_joystick+0x1e2>
		}
		else if(arrow == 2)
     6d0:	02 97       	sbiw	r24, 0x02	; 2
     6d2:	09 f0       	breq	.+2      	; 0x6d6 <ISR_joystick+0x80>
     6d4:	b1 c0       	rjmp	.+354    	; 0x838 <ISR_joystick+0x1e2>
		{
			OLED_pos(arrow, 8);
     6d6:	68 e0       	ldi	r22, 0x08	; 8
     6d8:	82 e0       	ldi	r24, 0x02	; 2
     6da:	0e 94 48 05 	call	0xa90	; 0xa90 <OLED_pos>
			OLED_erase_arrow();
     6de:	0e 94 97 05 	call	0xb2e	; 0xb2e <OLED_erase_arrow>
			arrow = 5;
     6e2:	85 e0       	ldi	r24, 0x05	; 5
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	90 93 07 01 	sts	0x0107, r25
     6ea:	80 93 06 01 	sts	0x0106, r24
			OLED_pos(arrow, 8);
     6ee:	68 e0       	ldi	r22, 0x08	; 8
     6f0:	0e 94 48 05 	call	0xa90	; 0xa90 <OLED_pos>
			OLED_print_arrow();
     6f4:	0e 94 8a 05 	call	0xb14	; 0xb14 <OLED_print_arrow>
     6f8:	9f c0       	rjmp	.+318    	; 0x838 <ISR_joystick+0x1e2>
		}
	}
	else if(mode == MAIN_MENU && direction == "DOWN"){
     6fa:	86 58       	subi	r24, 0x86	; 134
     6fc:	93 40       	sbci	r25, 0x03	; 3
     6fe:	09 f0       	breq	.+2      	; 0x702 <ISR_joystick+0xac>
     700:	9b c0       	rjmp	.+310    	; 0x838 <ISR_joystick+0x1e2>
		if(arrow < 5)
     702:	80 91 06 01 	lds	r24, 0x0106
     706:	90 91 07 01 	lds	r25, 0x0107
     70a:	85 30       	cpi	r24, 0x05	; 5
     70c:	91 05       	cpc	r25, r1
     70e:	a4 f4       	brge	.+40     	; 0x738 <ISR_joystick+0xe2>
		{
			OLED_pos(arrow, 8);
     710:	68 e0       	ldi	r22, 0x08	; 8
     712:	0e 94 48 05 	call	0xa90	; 0xa90 <OLED_pos>
			OLED_erase_arrow();
     716:	0e 94 97 05 	call	0xb2e	; 0xb2e <OLED_erase_arrow>
			arrow++;
     71a:	80 91 06 01 	lds	r24, 0x0106
     71e:	90 91 07 01 	lds	r25, 0x0107
     722:	01 96       	adiw	r24, 0x01	; 1
     724:	90 93 07 01 	sts	0x0107, r25
     728:	80 93 06 01 	sts	0x0106, r24
			OLED_pos(arrow, 8);
     72c:	68 e0       	ldi	r22, 0x08	; 8
     72e:	0e 94 48 05 	call	0xa90	; 0xa90 <OLED_pos>
			OLED_print_arrow();
     732:	0e 94 8a 05 	call	0xb14	; 0xb14 <OLED_print_arrow>
     736:	80 c0       	rjmp	.+256    	; 0x838 <ISR_joystick+0x1e2>
		}
		else if(arrow == 5)
     738:	05 97       	sbiw	r24, 0x05	; 5
     73a:	09 f0       	breq	.+2      	; 0x73e <ISR_joystick+0xe8>
     73c:	7d c0       	rjmp	.+250    	; 0x838 <ISR_joystick+0x1e2>
		{
			OLED_pos(arrow, 8);
     73e:	68 e0       	ldi	r22, 0x08	; 8
     740:	85 e0       	ldi	r24, 0x05	; 5
     742:	0e 94 48 05 	call	0xa90	; 0xa90 <OLED_pos>
			OLED_erase_arrow();
     746:	0e 94 97 05 	call	0xb2e	; 0xb2e <OLED_erase_arrow>
			arrow = 2;
     74a:	82 e0       	ldi	r24, 0x02	; 2
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	90 93 07 01 	sts	0x0107, r25
     752:	80 93 06 01 	sts	0x0106, r24
			OLED_pos(arrow, 8);
     756:	68 e0       	ldi	r22, 0x08	; 8
     758:	0e 94 48 05 	call	0xa90	; 0xa90 <OLED_pos>
			OLED_print_arrow();
     75c:	0e 94 8a 05 	call	0xb14	; 0xb14 <OLED_print_arrow>
     760:	6b c0       	rjmp	.+214    	; 0x838 <ISR_joystick+0x1e2>
		}
	}
	else if(mode == SETTINGS && direction == "UP"){
     762:	2e 30       	cpi	r18, 0x0E	; 14
     764:	31 05       	cpc	r19, r1
     766:	09 f0       	breq	.+2      	; 0x76a <ISR_joystick+0x114>
     768:	67 c0       	rjmp	.+206    	; 0x838 <ISR_joystick+0x1e2>
     76a:	23 e0       	ldi	r18, 0x03	; 3
     76c:	8b 38       	cpi	r24, 0x8B	; 139
     76e:	92 07       	cpc	r25, r18
     770:	89 f5       	brne	.+98     	; 0x7d4 <ISR_joystick+0x17e>
		if(arrow == 3)
     772:	80 91 06 01 	lds	r24, 0x0106
     776:	90 91 07 01 	lds	r25, 0x0107
     77a:	83 30       	cpi	r24, 0x03	; 3
     77c:	91 05       	cpc	r25, r1
     77e:	a9 f4       	brne	.+42     	; 0x7aa <ISR_joystick+0x154>
		{
			OLED_pos(arrow, 8);
     780:	68 e0       	ldi	r22, 0x08	; 8
     782:	83 e0       	ldi	r24, 0x03	; 3
     784:	0e 94 48 05 	call	0xa90	; 0xa90 <OLED_pos>
			OLED_erase_arrow();
     788:	0e 94 97 05 	call	0xb2e	; 0xb2e <OLED_erase_arrow>
			arrow--;
     78c:	80 91 06 01 	lds	r24, 0x0106
     790:	90 91 07 01 	lds	r25, 0x0107
     794:	01 97       	sbiw	r24, 0x01	; 1
     796:	90 93 07 01 	sts	0x0107, r25
     79a:	80 93 06 01 	sts	0x0106, r24
			OLED_pos(arrow, 8);
     79e:	68 e0       	ldi	r22, 0x08	; 8
     7a0:	0e 94 48 05 	call	0xa90	; 0xa90 <OLED_pos>
			OLED_print_arrow();
     7a4:	0e 94 8a 05 	call	0xb14	; 0xb14 <OLED_print_arrow>
     7a8:	47 c0       	rjmp	.+142    	; 0x838 <ISR_joystick+0x1e2>
		}
		else if(arrow == 2)
     7aa:	02 97       	sbiw	r24, 0x02	; 2
     7ac:	09 f0       	breq	.+2      	; 0x7b0 <ISR_joystick+0x15a>
     7ae:	44 c0       	rjmp	.+136    	; 0x838 <ISR_joystick+0x1e2>
		{
			OLED_pos(arrow, 8);
     7b0:	68 e0       	ldi	r22, 0x08	; 8
     7b2:	82 e0       	ldi	r24, 0x02	; 2
     7b4:	0e 94 48 05 	call	0xa90	; 0xa90 <OLED_pos>
			OLED_erase_arrow();
     7b8:	0e 94 97 05 	call	0xb2e	; 0xb2e <OLED_erase_arrow>
			arrow = 3;
     7bc:	83 e0       	ldi	r24, 0x03	; 3
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	90 93 07 01 	sts	0x0107, r25
     7c4:	80 93 06 01 	sts	0x0106, r24
			OLED_pos(arrow, 8);
     7c8:	68 e0       	ldi	r22, 0x08	; 8
     7ca:	0e 94 48 05 	call	0xa90	; 0xa90 <OLED_pos>
			OLED_print_arrow();
     7ce:	0e 94 8a 05 	call	0xb14	; 0xb14 <OLED_print_arrow>
     7d2:	32 c0       	rjmp	.+100    	; 0x838 <ISR_joystick+0x1e2>
		}
	}
	else if(mode == SETTINGS && direction == "DOWN"){
     7d4:	86 58       	subi	r24, 0x86	; 134
     7d6:	93 40       	sbci	r25, 0x03	; 3
     7d8:	79 f5       	brne	.+94     	; 0x838 <ISR_joystick+0x1e2>
		if(arrow == 2)
     7da:	80 91 06 01 	lds	r24, 0x0106
     7de:	90 91 07 01 	lds	r25, 0x0107
     7e2:	82 30       	cpi	r24, 0x02	; 2
     7e4:	91 05       	cpc	r25, r1
     7e6:	a9 f4       	brne	.+42     	; 0x812 <ISR_joystick+0x1bc>
		{
			OLED_pos(arrow, 8);
     7e8:	68 e0       	ldi	r22, 0x08	; 8
     7ea:	82 e0       	ldi	r24, 0x02	; 2
     7ec:	0e 94 48 05 	call	0xa90	; 0xa90 <OLED_pos>
			OLED_erase_arrow();
     7f0:	0e 94 97 05 	call	0xb2e	; 0xb2e <OLED_erase_arrow>
			arrow++;
     7f4:	80 91 06 01 	lds	r24, 0x0106
     7f8:	90 91 07 01 	lds	r25, 0x0107
     7fc:	01 96       	adiw	r24, 0x01	; 1
     7fe:	90 93 07 01 	sts	0x0107, r25
     802:	80 93 06 01 	sts	0x0106, r24
			OLED_pos(arrow, 8);
     806:	68 e0       	ldi	r22, 0x08	; 8
     808:	0e 94 48 05 	call	0xa90	; 0xa90 <OLED_pos>
			OLED_print_arrow();
     80c:	0e 94 8a 05 	call	0xb14	; 0xb14 <OLED_print_arrow>
     810:	13 c0       	rjmp	.+38     	; 0x838 <ISR_joystick+0x1e2>
		}
		else if(arrow == 3)
     812:	03 97       	sbiw	r24, 0x03	; 3
     814:	89 f4       	brne	.+34     	; 0x838 <ISR_joystick+0x1e2>
		{
			OLED_pos(arrow, 8);
     816:	68 e0       	ldi	r22, 0x08	; 8
     818:	83 e0       	ldi	r24, 0x03	; 3
     81a:	0e 94 48 05 	call	0xa90	; 0xa90 <OLED_pos>
			OLED_erase_arrow();
     81e:	0e 94 97 05 	call	0xb2e	; 0xb2e <OLED_erase_arrow>
			arrow = 2;
     822:	82 e0       	ldi	r24, 0x02	; 2
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	90 93 07 01 	sts	0x0107, r25
     82a:	80 93 06 01 	sts	0x0106, r24
			OLED_pos(arrow, 8);
     82e:	68 e0       	ldi	r22, 0x08	; 8
     830:	0e 94 48 05 	call	0xa90	; 0xa90 <OLED_pos>
			OLED_print_arrow();
     834:	0e 94 8a 05 	call	0xb14	; 0xb14 <OLED_print_arrow>
		}
	}
}
     838:	28 96       	adiw	r28, 0x08	; 8
     83a:	0f b6       	in	r0, 0x3f	; 63
     83c:	f8 94       	cli
     83e:	de bf       	out	0x3e, r29	; 62
     840:	0f be       	out	0x3f, r0	; 63
     842:	cd bf       	out	0x3d, r28	; 61
     844:	df 91       	pop	r29
     846:	cf 91       	pop	r28
     848:	08 95       	ret

0000084a <main>:

int main(void)
{
     84a:	cf 93       	push	r28
     84c:	df 93       	push	r29
     84e:	cd b7       	in	r28, 0x3d	; 61
     850:	de b7       	in	r29, 0x3e	; 62
     852:	29 97       	sbiw	r28, 0x09	; 9
     854:	0f b6       	in	r0, 0x3f	; 63
     856:	f8 94       	cli
     858:	de bf       	out	0x3e, r29	; 62
     85a:	0f be       	out	0x3f, r0	; 63
     85c:	cd bf       	out	0x3d, r28	; 61
	/* Initialize UART */
	UART_Init(UART_BAUD);
     85e:	8f e1       	ldi	r24, 0x1F	; 31
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	0e 94 ef 05 	call	0xbde	; 0xbde <UART_Init>
	printf("Reset\n");
     866:	86 eb       	ldi	r24, 0xB6	; 182
     868:	93 e0       	ldi	r25, 0x03	; 3
     86a:	0e 94 2e 08 	call	0x105c	; 0x105c <puts>
     86e:	2f e3       	ldi	r18, 0x3F	; 63
     870:	8d e0       	ldi	r24, 0x0D	; 13
     872:	93 e0       	ldi	r25, 0x03	; 3
     874:	21 50       	subi	r18, 0x01	; 1
     876:	80 40       	sbci	r24, 0x00	; 0
     878:	90 40       	sbci	r25, 0x00	; 0
     87a:	e1 f7       	brne	.-8      	; 0x874 <main+0x2a>
     87c:	00 c0       	rjmp	.+0      	; 0x87e <main+0x34>
     87e:	00 00       	nop
	_delay_ms(1000);
	
	/* Initialize SRAM, ADC and OLED */
	SRAM_Init();
     880:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <SRAM_Init>
	OLED_Reset();
     884:	0e 94 c1 04 	call	0x982	; 0x982 <OLED_Reset>
	OLED_Init();
     888:	0e 94 1a 05 	call	0xa34	; 0xa34 <OLED_Init>
	
	/* Enable port B */
	PORTB |= 0x01;
     88c:	c0 9a       	sbi	0x18, 0	; 24
	
	/* Draw something cool */
	draw_home();
     88e:	0e 94 62 00 	call	0xc4	; 0xc4 <draw_home>
	
	/* Enable interrupts */
	GICR |= (1 << INT0) | (1 << INT1); //| (1 << INT2);
     892:	8b b7       	in	r24, 0x3b	; 59
     894:	80 6c       	ori	r24, 0xC0	; 192
     896:	8b bf       	out	0x3b, r24	; 59
	SREG |= (1 << 7);
     898:	8f b7       	in	r24, 0x3f	; 63
     89a:	80 68       	ori	r24, 0x80	; 128
     89c:	8f bf       	out	0x3f, r24	; 63
	MCUCR |= (1<< ISC00) | (1 << ISC01) | (1 << ISC10) | (1 << ISC11);
     89e:	85 b7       	in	r24, 0x35	; 53
     8a0:	8f 60       	ori	r24, 0x0F	; 15
     8a2:	85 bf       	out	0x35, r24	; 53
	//EMCUCR &= (0 << ISC2);
	sei();
     8a4:	78 94       	sei
	
	/* Variables initialization */
	Position joystick = Joystick_Position();
     8a6:	0e 94 53 01 	call	0x2a6	; 0x2a6 <Joystick_Position>
     8aa:	52 2e       	mov	r5, r18
     8ac:	63 2e       	mov	r6, r19
     8ae:	74 2e       	mov	r7, r20
     8b0:	85 2e       	mov	r8, r21
     8b2:	26 2e       	mov	r2, r22
     8b4:	37 2e       	mov	r3, r23
     8b6:	48 2e       	mov	r4, r24
     8b8:	99 87       	std	Y+9, r25	; 0x09
	Position joystick_previous = joystick;
	slide_left = ADC_Convert(SLIDE_LEFT);
     8ba:	86 e0       	ldi	r24, 0x06	; 6
     8bc:	0e 94 57 00 	call	0xae	; 0xae <ADC_Convert>
     8c0:	98 2e       	mov	r9, r24
     8c2:	80 93 c0 03 	sts	0x03C0, r24
	uint8_t previous_slide_left = slide_left;
	uint8_t slide_right = ADC_Convert(SLIDE_RIGHT);
     8c6:	87 e0       	ldi	r24, 0x07	; 7
     8c8:	0e 94 57 00 	call	0xae	; 0xae <ADC_Convert>
	uint8_t previous_slide_right = slide_right;
	
    while(1)
    {
		joystick = Joystick_Position();
     8cc:	0e 94 53 01 	call	0x2a6	; 0x2a6 <Joystick_Position>
     8d0:	29 83       	std	Y+1, r18	; 0x01
     8d2:	3a 83       	std	Y+2, r19	; 0x02
     8d4:	4b 83       	std	Y+3, r20	; 0x03
     8d6:	5c 83       	std	Y+4, r21	; 0x04
     8d8:	6d 83       	std	Y+5, r22	; 0x05
     8da:	7e 83       	std	Y+6, r23	; 0x06
     8dc:	8f 83       	std	Y+7, r24	; 0x07
     8de:	98 87       	std	Y+8, r25	; 0x08
     8e0:	e2 2e       	mov	r14, r18
     8e2:	f3 2e       	mov	r15, r19
     8e4:	04 2f       	mov	r16, r20
     8e6:	15 2f       	mov	r17, r21
     8e8:	a6 2e       	mov	r10, r22
     8ea:	b7 2e       	mov	r11, r23
     8ec:	c8 2e       	mov	r12, r24
     8ee:	d9 2e       	mov	r13, r25
		if((joystick.x != joystick_previous.x)||(joystick.y != joystick_previous.y))
     8f0:	65 2d       	mov	r22, r5
     8f2:	76 2d       	mov	r23, r6
     8f4:	87 2d       	mov	r24, r7
     8f6:	98 2d       	mov	r25, r8
     8f8:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__cmpsf2>
     8fc:	81 11       	cpse	r24, r1
     8fe:	0c c0       	rjmp	.+24     	; 0x918 <main+0xce>
     900:	2a 2d       	mov	r18, r10
     902:	3b 2d       	mov	r19, r11
     904:	4c 2d       	mov	r20, r12
     906:	5d 2d       	mov	r21, r13
     908:	62 2d       	mov	r22, r2
     90a:	73 2d       	mov	r23, r3
     90c:	84 2d       	mov	r24, r4
     90e:	99 85       	ldd	r25, Y+9	; 0x09
     910:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__cmpsf2>
     914:	88 23       	and	r24, r24
     916:	51 f0       	breq	.+20     	; 0x92c <main+0xe2>
		{
			ISR_joystick(joystick);
     918:	29 81       	ldd	r18, Y+1	; 0x01
     91a:	3a 81       	ldd	r19, Y+2	; 0x02
     91c:	4b 81       	ldd	r20, Y+3	; 0x03
     91e:	5c 81       	ldd	r21, Y+4	; 0x04
     920:	6d 81       	ldd	r22, Y+5	; 0x05
     922:	7e 81       	ldd	r23, Y+6	; 0x06
     924:	8f 81       	ldd	r24, Y+7	; 0x07
     926:	98 85       	ldd	r25, Y+8	; 0x08
     928:	0e 94 2b 03 	call	0x656	; 0x656 <ISR_joystick>
		}
		joystick_previous = joystick;
		
		slide_left = ADC_Convert(SLIDE_LEFT);
     92c:	86 e0       	ldi	r24, 0x06	; 6
     92e:	0e 94 57 00 	call	0xae	; 0xae <ADC_Convert>
     932:	80 93 c0 03 	sts	0x03C0, r24
		if(slide_left != previous_slide_left)
     936:	98 12       	cpse	r9, r24
		{
			ISR_slide_left();
     938:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <ISR_slide_left>
		}
		previous_slide_left = slide_left;
     93c:	90 90 c0 03 	lds	r9, 0x03C0
		 
		slide_right = ADC_Convert(SLIDE_RIGHT);
     940:	87 e0       	ldi	r24, 0x07	; 7
     942:	0e 94 57 00 	call	0xae	; 0xae <ADC_Convert>
		{
			ISR_slide_right();
		}
		previous_slide_right = slide_right;
		
		if(JOYSTICK_BUTTON == 1)
     946:	b0 9b       	sbis	0x16, 0	; 22
		{
			ISR_joystick_click();
     948:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <ISR_joystick_click>
     94c:	8f ef       	ldi	r24, 0xFF	; 255
     94e:	90 e7       	ldi	r25, 0x70	; 112
     950:	22 e0       	ldi	r18, 0x02	; 2
     952:	81 50       	subi	r24, 0x01	; 1
     954:	90 40       	sbci	r25, 0x00	; 0
     956:	20 40       	sbci	r18, 0x00	; 0
     958:	e1 f7       	brne	.-8      	; 0x952 <main+0x108>
     95a:	00 c0       	rjmp	.+0      	; 0x95c <main+0x112>
     95c:	00 00       	nop
		joystick = Joystick_Position();
		if((joystick.x != joystick_previous.x)||(joystick.y != joystick_previous.y))
		{
			ISR_joystick(joystick);
		}
		joystick_previous = joystick;
     95e:	5e 2c       	mov	r5, r14
     960:	6f 2c       	mov	r6, r15
     962:	70 2e       	mov	r7, r16
     964:	81 2e       	mov	r8, r17
     966:	2a 2c       	mov	r2, r10
     968:	3b 2c       	mov	r3, r11
     96a:	4c 2c       	mov	r4, r12
     96c:	d9 86       	std	Y+9, r13	; 0x09
     96e:	ae cf       	rjmp	.-164    	; 0x8cc <main+0x82>

00000970 <OLED_write_data>:

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     970:	80 93 00 12 	sts	0x1200, r24
     974:	08 95       	ret

00000976 <OLED_set_brightness>:

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     976:	e0 e0       	ldi	r30, 0x00	; 0
     978:	f0 e1       	ldi	r31, 0x10	; 16
     97a:	91 e8       	ldi	r25, 0x81	; 129
     97c:	90 83       	st	Z, r25
     97e:	80 83       	st	Z, r24
     980:	08 95       	ret

00000982 <OLED_Reset>:
     982:	80 eb       	ldi	r24, 0xB0	; 176
     984:	80 93 00 10 	sts	0x1000, r24
     988:	80 e8       	ldi	r24, 0x80	; 128
     98a:	90 e0       	ldi	r25, 0x00	; 0

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f2 e1       	ldi	r31, 0x12	; 18
     990:	10 82       	st	Z, r1
     992:	01 97       	sbiw	r24, 0x01	; 1

/* Erase the RAM line by line */
void OLED_Reset()
{
	OLED_write_cmd(0xb0);
	for(int i=0; i<128; i++){
     994:	00 97       	sbiw	r24, 0x00	; 0
     996:	e1 f7       	brne	.-8      	; 0x990 <OLED_Reset+0xe>

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     998:	81 eb       	ldi	r24, 0xB1	; 177
     99a:	80 93 00 10 	sts	0x1000, r24
     99e:	80 e8       	ldi	r24, 0x80	; 128
     9a0:	90 e0       	ldi	r25, 0x00	; 0

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     9a2:	e0 e0       	ldi	r30, 0x00	; 0
     9a4:	f2 e1       	ldi	r31, 0x12	; 18
     9a6:	10 82       	st	Z, r1
     9a8:	01 97       	sbiw	r24, 0x01	; 1
	OLED_write_cmd(0xb0);
	for(int i=0; i<128; i++){
		OLED_write_data(0b00000000);
	}
	OLED_write_cmd(0xb1);
	for(int i=0; i<128; i++){
     9aa:	00 97       	sbiw	r24, 0x00	; 0
     9ac:	e1 f7       	brne	.-8      	; 0x9a6 <OLED_Reset+0x24>

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     9ae:	82 eb       	ldi	r24, 0xB2	; 178
     9b0:	80 93 00 10 	sts	0x1000, r24
     9b4:	80 e8       	ldi	r24, 0x80	; 128
     9b6:	90 e0       	ldi	r25, 0x00	; 0

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     9b8:	e0 e0       	ldi	r30, 0x00	; 0
     9ba:	f2 e1       	ldi	r31, 0x12	; 18
     9bc:	10 82       	st	Z, r1
     9be:	01 97       	sbiw	r24, 0x01	; 1
	OLED_write_cmd(0xb1);
	for(int i=0; i<128; i++){
		OLED_write_data(0b00000000);
	}
	OLED_write_cmd(0xb2);
	for(int i=0; i<128; i++){
     9c0:	00 97       	sbiw	r24, 0x00	; 0
     9c2:	e1 f7       	brne	.-8      	; 0x9bc <OLED_Reset+0x3a>

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     9c4:	83 eb       	ldi	r24, 0xB3	; 179
     9c6:	80 93 00 10 	sts	0x1000, r24
     9ca:	80 e8       	ldi	r24, 0x80	; 128
     9cc:	90 e0       	ldi	r25, 0x00	; 0

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     9ce:	e0 e0       	ldi	r30, 0x00	; 0
     9d0:	f2 e1       	ldi	r31, 0x12	; 18
     9d2:	10 82       	st	Z, r1
     9d4:	01 97       	sbiw	r24, 0x01	; 1
	OLED_write_cmd(0xb2);
	for(int i=0; i<128; i++){
		OLED_write_data(0b00000000);
	}
	OLED_write_cmd(0xb3);
	for(int i=0; i<128; i++){
     9d6:	00 97       	sbiw	r24, 0x00	; 0
     9d8:	e1 f7       	brne	.-8      	; 0x9d2 <OLED_Reset+0x50>

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     9da:	84 eb       	ldi	r24, 0xB4	; 180
     9dc:	80 93 00 10 	sts	0x1000, r24
     9e0:	80 e8       	ldi	r24, 0x80	; 128
     9e2:	90 e0       	ldi	r25, 0x00	; 0

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     9e4:	e0 e0       	ldi	r30, 0x00	; 0
     9e6:	f2 e1       	ldi	r31, 0x12	; 18
     9e8:	10 82       	st	Z, r1
     9ea:	01 97       	sbiw	r24, 0x01	; 1
	OLED_write_cmd(0xb3);
	for(int i=0; i<128; i++){
		OLED_write_data(0b00000000);
	}
	OLED_write_cmd(0xb4);
	for(int i=0; i<128; i++){
     9ec:	00 97       	sbiw	r24, 0x00	; 0
     9ee:	e1 f7       	brne	.-8      	; 0x9e8 <OLED_Reset+0x66>

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     9f0:	85 eb       	ldi	r24, 0xB5	; 181
     9f2:	80 93 00 10 	sts	0x1000, r24
     9f6:	80 e8       	ldi	r24, 0x80	; 128
     9f8:	90 e0       	ldi	r25, 0x00	; 0

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     9fa:	e0 e0       	ldi	r30, 0x00	; 0
     9fc:	f2 e1       	ldi	r31, 0x12	; 18
     9fe:	10 82       	st	Z, r1
     a00:	01 97       	sbiw	r24, 0x01	; 1
	OLED_write_cmd(0xb4);
	for(int i=0; i<128; i++){
		OLED_write_data(0b00000000);
	}
	OLED_write_cmd(0xb5);
	for(int i=0; i<128; i++){
     a02:	00 97       	sbiw	r24, 0x00	; 0
     a04:	e1 f7       	brne	.-8      	; 0x9fe <OLED_Reset+0x7c>

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     a06:	86 eb       	ldi	r24, 0xB6	; 182
     a08:	80 93 00 10 	sts	0x1000, r24
     a0c:	80 e8       	ldi	r24, 0x80	; 128
     a0e:	90 e0       	ldi	r25, 0x00	; 0

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     a10:	e0 e0       	ldi	r30, 0x00	; 0
     a12:	f2 e1       	ldi	r31, 0x12	; 18
     a14:	10 82       	st	Z, r1
     a16:	01 97       	sbiw	r24, 0x01	; 1
	OLED_write_cmd(0xb5);
	for(int i=0; i<128; i++){
		OLED_write_data(0b00000000);
	}
	OLED_write_cmd(0xb6);
	for(int i=0; i<128; i++){
     a18:	00 97       	sbiw	r24, 0x00	; 0
     a1a:	e1 f7       	brne	.-8      	; 0xa14 <OLED_Reset+0x92>

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     a1c:	87 eb       	ldi	r24, 0xB7	; 183
     a1e:	80 93 00 10 	sts	0x1000, r24
     a22:	80 e8       	ldi	r24, 0x80	; 128
     a24:	90 e0       	ldi	r25, 0x00	; 0

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     a26:	e0 e0       	ldi	r30, 0x00	; 0
     a28:	f2 e1       	ldi	r31, 0x12	; 18
     a2a:	10 82       	st	Z, r1
     a2c:	01 97       	sbiw	r24, 0x01	; 1
	OLED_write_cmd(0xb6);
	for(int i=0; i<128; i++){
		OLED_write_data(0b00000000);
	}
	OLED_write_cmd(0xb7);
	for(int i=0; i<128; i++){
     a2e:	00 97       	sbiw	r24, 0x00	; 0
     a30:	e1 f7       	brne	.-8      	; 0xa2a <OLED_Reset+0xa8>
		OLED_write_data(0b00000000);
	}
}
     a32:	08 95       	ret

00000a34 <OLED_Init>:

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     a34:	e0 e0       	ldi	r30, 0x00	; 0
     a36:	f0 e1       	ldi	r31, 0x10	; 16
     a38:	8e ea       	ldi	r24, 0xAE	; 174
     a3a:	80 83       	st	Z, r24
     a3c:	81 ea       	ldi	r24, 0xA1	; 161
     a3e:	80 83       	st	Z, r24
     a40:	8a ed       	ldi	r24, 0xDA	; 218
     a42:	80 83       	st	Z, r24
     a44:	82 e1       	ldi	r24, 0x12	; 18
     a46:	80 83       	st	Z, r24
     a48:	88 ec       	ldi	r24, 0xC8	; 200
     a4a:	80 83       	st	Z, r24
     a4c:	88 ea       	ldi	r24, 0xA8	; 168
     a4e:	80 83       	st	Z, r24
     a50:	8f e3       	ldi	r24, 0x3F	; 63
     a52:	80 83       	st	Z, r24
     a54:	85 ed       	ldi	r24, 0xD5	; 213
     a56:	80 83       	st	Z, r24
     a58:	80 e8       	ldi	r24, 0x80	; 128
     a5a:	80 83       	st	Z, r24
     a5c:	81 e8       	ldi	r24, 0x81	; 129
     a5e:	80 83       	st	Z, r24
     a60:	80 e5       	ldi	r24, 0x50	; 80
     a62:	80 83       	st	Z, r24
     a64:	89 ed       	ldi	r24, 0xD9	; 217
     a66:	80 83       	st	Z, r24
     a68:	81 e2       	ldi	r24, 0x21	; 33
     a6a:	80 83       	st	Z, r24
     a6c:	80 e2       	ldi	r24, 0x20	; 32
     a6e:	80 83       	st	Z, r24
     a70:	82 e0       	ldi	r24, 0x02	; 2
     a72:	80 83       	st	Z, r24
     a74:	8b ed       	ldi	r24, 0xDB	; 219
     a76:	80 83       	st	Z, r24
     a78:	80 e3       	ldi	r24, 0x30	; 48
     a7a:	80 83       	st	Z, r24
     a7c:	8d ea       	ldi	r24, 0xAD	; 173
     a7e:	80 83       	st	Z, r24
     a80:	10 82       	st	Z, r1
     a82:	84 ea       	ldi	r24, 0xA4	; 164
     a84:	80 83       	st	Z, r24
     a86:	86 ea       	ldi	r24, 0xA6	; 166
     a88:	80 83       	st	Z, r24
     a8a:	8f ea       	ldi	r24, 0xAF	; 175
     a8c:	80 83       	st	Z, r24
     a8e:	08 95       	ret

00000a90 <OLED_pos>:
}

/* Set the cursor to the given position: page is from 0 to 7, segment from 0 to 127 */
void OLED_pos(uint8_t page, uint8_t segment)
{
	OLED_write_cmd(176 + page);
     a90:	80 55       	subi	r24, 0x50	; 80

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     a92:	e0 e0       	ldi	r30, 0x00	; 0
     a94:	f0 e1       	ldi	r31, 0x10	; 16
     a96:	80 83       	st	Z, r24

/* Set the cursor to the given position: page is from 0 to 7, segment from 0 to 127 */
void OLED_pos(uint8_t page, uint8_t segment)
{
	OLED_write_cmd(176 + page);
	OLED_write_cmd(segment & 0x0f);
     a98:	86 2f       	mov	r24, r22
     a9a:	8f 70       	andi	r24, 0x0F	; 15

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     a9c:	80 83       	st	Z, r24
/* Set the cursor to the given position: page is from 0 to 7, segment from 0 to 127 */
void OLED_pos(uint8_t page, uint8_t segment)
{
	OLED_write_cmd(176 + page);
	OLED_write_cmd(segment & 0x0f);
	OLED_write_cmd(((segment & 0x70)>>4)|0x10);
     a9e:	60 77       	andi	r22, 0x70	; 112
     aa0:	62 95       	swap	r22
     aa2:	6f 70       	andi	r22, 0x0F	; 15
     aa4:	60 61       	ori	r22, 0x10	; 16

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     aa6:	60 83       	st	Z, r22
     aa8:	08 95       	ret

00000aaa <OLED_print>:
void OLED_print(char* a)
{
	int index = (int)a - 32;
	for(int i=0; i<4; i++)
	{
		OLED_write_data(font[index][i]);
     aaa:	88 0f       	add	r24, r24
     aac:	99 1f       	adc	r25, r25
     aae:	88 0f       	add	r24, r24
     ab0:	99 1f       	adc	r25, r25
     ab2:	dc 01       	movw	r26, r24
     ab4:	a8 57       	subi	r26, 0x78	; 120
     ab6:	bf 4f       	sbci	r27, 0xFF	; 255
     ab8:	8c 91       	ld	r24, X

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     aba:	e0 e0       	ldi	r30, 0x00	; 0
     abc:	f2 e1       	ldi	r31, 0x12	; 18
     abe:	80 83       	st	Z, r24
void OLED_print(char* a)
{
	int index = (int)a - 32;
	for(int i=0; i<4; i++)
	{
		OLED_write_data(font[index][i]);
     ac0:	11 96       	adiw	r26, 0x01	; 1
     ac2:	8c 91       	ld	r24, X
     ac4:	11 97       	sbiw	r26, 0x01	; 1

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     ac6:	80 83       	st	Z, r24
void OLED_print(char* a)
{
	int index = (int)a - 32;
	for(int i=0; i<4; i++)
	{
		OLED_write_data(font[index][i]);
     ac8:	12 96       	adiw	r26, 0x02	; 2
     aca:	8c 91       	ld	r24, X
     acc:	12 97       	sbiw	r26, 0x02	; 2

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     ace:	80 83       	st	Z, r24
void OLED_print(char* a)
{
	int index = (int)a - 32;
	for(int i=0; i<4; i++)
	{
		OLED_write_data(font[index][i]);
     ad0:	13 96       	adiw	r26, 0x03	; 3
     ad2:	8c 91       	ld	r24, X

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     ad4:	80 83       	st	Z, r24
     ad6:	08 95       	ret

00000ad8 <OLED_print_string>:
	}
}

/* Print a string. If the string exceeds the screen size, stop printing. */
void OLED_print_string(char* string)
{
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	cf 93       	push	r28
     ade:	df 93       	push	r29
     ae0:	fc 01       	movw	r30, r24
	int i=0;
	while(string[i]!='\0' && i < 32)
     ae2:	80 81       	ld	r24, Z
     ae4:	88 23       	and	r24, r24
     ae6:	89 f0       	breq	.+34     	; 0xb0a <OLED_print_string+0x32>
     ae8:	8f 01       	movw	r16, r30
     aea:	0f 5f       	subi	r16, 0xFF	; 255
     aec:	1f 4f       	sbci	r17, 0xFF	; 255
}

/* Print a string. If the string exceeds the screen size, stop printing. */
void OLED_print_string(char* string)
{
	int i=0;
     aee:	c0 e0       	ldi	r28, 0x00	; 0
     af0:	d0 e0       	ldi	r29, 0x00	; 0
	while(string[i]!='\0' && i < 32)
	{
		OLED_print(string[i]);
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	0e 94 55 05 	call	0xaaa	; 0xaaa <OLED_print>
		i++;
     af8:	21 96       	adiw	r28, 0x01	; 1

/* Print a string. If the string exceeds the screen size, stop printing. */
void OLED_print_string(char* string)
{
	int i=0;
	while(string[i]!='\0' && i < 32)
     afa:	f8 01       	movw	r30, r16
     afc:	81 91       	ld	r24, Z+
     afe:	8f 01       	movw	r16, r30
     b00:	88 23       	and	r24, r24
     b02:	19 f0       	breq	.+6      	; 0xb0a <OLED_print_string+0x32>
     b04:	c0 32       	cpi	r28, 0x20	; 32
     b06:	d1 05       	cpc	r29, r1
     b08:	a1 f7       	brne	.-24     	; 0xaf2 <OLED_print_string+0x1a>
	{
		OLED_print(string[i]);
		i++;
	}
}
     b0a:	df 91       	pop	r29
     b0c:	cf 91       	pop	r28
     b0e:	1f 91       	pop	r17
     b10:	0f 91       	pop	r16
     b12:	08 95       	ret

00000b14 <OLED_print_arrow>:

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     b14:	e0 e0       	ldi	r30, 0x00	; 0
     b16:	f2 e1       	ldi	r31, 0x12	; 18
     b18:	80 e1       	ldi	r24, 0x10	; 16
     b1a:	80 83       	st	Z, r24
     b1c:	80 83       	st	Z, r24
     b1e:	80 83       	st	Z, r24
     b20:	80 83       	st	Z, r24
     b22:	9c e7       	ldi	r25, 0x7C	; 124
     b24:	90 83       	st	Z, r25
     b26:	98 e3       	ldi	r25, 0x38	; 56
     b28:	90 83       	st	Z, r25
     b2a:	80 83       	st	Z, r24
     b2c:	08 95       	ret

00000b2e <OLED_erase_arrow>:
     b2e:	e0 e0       	ldi	r30, 0x00	; 0
     b30:	f2 e1       	ldi	r31, 0x12	; 18
     b32:	10 82       	st	Z, r1
     b34:	10 82       	st	Z, r1
     b36:	10 82       	st	Z, r1
     b38:	10 82       	st	Z, r1
     b3a:	10 82       	st	Z, r1
     b3c:	10 82       	st	Z, r1
     b3e:	10 82       	st	Z, r1
     b40:	08 95       	ret

00000b42 <OLED_print_home>:
     b42:	e0 e0       	ldi	r30, 0x00	; 0
     b44:	f2 e1       	ldi	r31, 0x12	; 18
     b46:	10 82       	st	Z, r1
     b48:	88 ef       	ldi	r24, 0xF8	; 248
     b4a:	80 83       	st	Z, r24
     b4c:	9c ef       	ldi	r25, 0xFC	; 252
     b4e:	90 83       	st	Z, r25
     b50:	26 ef       	ldi	r18, 0xF6	; 246
     b52:	20 83       	st	Z, r18
     b54:	3f e3       	ldi	r19, 0x3F	; 63
     b56:	30 83       	st	Z, r19
     b58:	20 83       	st	Z, r18
     b5a:	90 83       	st	Z, r25
     b5c:	80 83       	st	Z, r24
     b5e:	10 82       	st	Z, r1
     b60:	08 95       	ret

00000b62 <OLED_print_woman>:
	OLED_write_data(0b11111000);
	OLED_write_data(0b00000000);
}

void OLED_print_woman(uint8_t page, uint8_t segment)
{
     b62:	0f 93       	push	r16
     b64:	1f 93       	push	r17
     b66:	cf 93       	push	r28
     b68:	df 93       	push	r29
     b6a:	18 2f       	mov	r17, r24
     b6c:	06 2f       	mov	r16, r22
	OLED_pos(page, segment);
     b6e:	0e 94 48 05 	call	0xa90	; 0xa90 <OLED_pos>

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     b72:	c0 e0       	ldi	r28, 0x00	; 0
     b74:	d2 e1       	ldi	r29, 0x12	; 18
     b76:	18 82       	st	Y, r1
     b78:	18 82       	st	Y, r1
     b7a:	80 e1       	ldi	r24, 0x10	; 16
     b7c:	88 83       	st	Y, r24
     b7e:	94 e9       	ldi	r25, 0x94	; 148
     b80:	98 83       	st	Y, r25
     b82:	27 ed       	ldi	r18, 0xD7	; 215
     b84:	28 83       	st	Y, r18
     b86:	3f ef       	ldi	r19, 0xFF	; 255
     b88:	38 83       	st	Y, r19
     b8a:	28 83       	st	Y, r18
     b8c:	98 83       	st	Y, r25
     b8e:	88 83       	st	Y, r24
     b90:	18 82       	st	Y, r1
     b92:	18 82       	st	Y, r1
	OLED_write_data(0b11010111);
	OLED_write_data(0b10010100);
	OLED_write_data(0b00010000);
	OLED_write_data(0b00000000);
	OLED_write_data(0b00000000);
	OLED_pos(page+1, segment);
     b94:	60 2f       	mov	r22, r16
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	81 0f       	add	r24, r17
     b9a:	0e 94 48 05 	call	0xa90	; 0xa90 <OLED_pos>

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     b9e:	18 82       	st	Y, r1
     ba0:	92 e0       	ldi	r25, 0x02	; 2
     ba2:	98 83       	st	Y, r25
     ba4:	83 e0       	ldi	r24, 0x03	; 3
     ba6:	88 83       	st	Y, r24
     ba8:	23 e2       	ldi	r18, 0x23	; 35
     baa:	28 83       	st	Y, r18
     bac:	3f e3       	ldi	r19, 0x3F	; 63
     bae:	38 83       	st	Y, r19
     bb0:	88 83       	st	Y, r24
     bb2:	38 83       	st	Y, r19
     bb4:	28 83       	st	Y, r18
     bb6:	88 83       	st	Y, r24
     bb8:	98 83       	st	Y, r25
     bba:	18 82       	st	Y, r1
	OLED_write_data(0b00111111);
	OLED_write_data(0b00100011);
	OLED_write_data(0b00000011);
	OLED_write_data(0b00000010);
	OLED_write_data(0b00000000);
}
     bbc:	df 91       	pop	r29
     bbe:	cf 91       	pop	r28
     bc0:	1f 91       	pop	r17
     bc2:	0f 91       	pop	r16
     bc4:	08 95       	ret

00000bc6 <SRAM_Init>:
#include <avr/io.h>

void SRAM_Init(void)
{
	/* Enable external SRAM: set SRE to 1 */
	MCUCR |= (1 << SRE);
     bc6:	85 b7       	in	r24, 0x35	; 53
     bc8:	80 68       	ori	r24, 0x80	; 128
     bca:	85 bf       	out	0x35, r24	; 53
     bcc:	08 95       	ret

00000bce <UART_Transmit>:
#include <stdio.h>
#include <avr/io.h>

void UART_Transmit(unsigned char data){
	/* Wait for empty transmit buffer */
	while(!(UCSR0A&(1<<UDRE0)))
     bce:	5d 9b       	sbis	0x0b, 5	; 11
     bd0:	fe cf       	rjmp	.-4      	; 0xbce <UART_Transmit>
		;
	/* Put data into buffer */
	UDR0 = data;
     bd2:	8c b9       	out	0x0c, r24	; 12
     bd4:	08 95       	ret

00000bd6 <UART_Receive>:
}

unsigned char UART_Receive(void){
	/* Wait for data to be received */
	while(!(UCSR0A&(1<<RXC0)))
     bd6:	5f 9b       	sbis	0x0b, 7	; 11
     bd8:	fe cf       	rjmp	.-4      	; 0xbd6 <UART_Receive>
		;
	/* Get and return received data from buffer */
	return UDR0;
     bda:	8c b1       	in	r24, 0x0c	; 12
}
     bdc:	08 95       	ret

00000bde <UART_Init>:

void UART_Init(unsigned int ubrr){
	/* Set baud rate */
	UBRR0L = (unsigned char) ubrr;
     bde:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     be0:	88 e1       	ldi	r24, 0x18	; 24
     be2:	8a b9       	out	0x0a, r24	; 10
	/* Link printf to UART transmissions */	
	fdevopen(UART_Transmit,UART_Receive);
     be4:	6b ee       	ldi	r22, 0xEB	; 235
     be6:	75 e0       	ldi	r23, 0x05	; 5
     be8:	87 ee       	ldi	r24, 0xE7	; 231
     bea:	95 e0       	ldi	r25, 0x05	; 5
     bec:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <fdevopen>
     bf0:	08 95       	ret

00000bf2 <__subsf3>:
     bf2:	50 58       	subi	r21, 0x80	; 128

00000bf4 <__addsf3>:
     bf4:	bb 27       	eor	r27, r27
     bf6:	aa 27       	eor	r26, r26
     bf8:	0e d0       	rcall	.+28     	; 0xc16 <__addsf3x>
     bfa:	44 c1       	rjmp	.+648    	; 0xe84 <__fp_round>
     bfc:	35 d1       	rcall	.+618    	; 0xe68 <__fp_pscA>
     bfe:	30 f0       	brcs	.+12     	; 0xc0c <__addsf3+0x18>
     c00:	3a d1       	rcall	.+628    	; 0xe76 <__fp_pscB>
     c02:	20 f0       	brcs	.+8      	; 0xc0c <__addsf3+0x18>
     c04:	31 f4       	brne	.+12     	; 0xc12 <__addsf3+0x1e>
     c06:	9f 3f       	cpi	r25, 0xFF	; 255
     c08:	11 f4       	brne	.+4      	; 0xc0e <__addsf3+0x1a>
     c0a:	1e f4       	brtc	.+6      	; 0xc12 <__addsf3+0x1e>
     c0c:	2a c1       	rjmp	.+596    	; 0xe62 <__fp_nan>
     c0e:	0e f4       	brtc	.+2      	; 0xc12 <__addsf3+0x1e>
     c10:	e0 95       	com	r30
     c12:	e7 fb       	bst	r30, 7
     c14:	20 c1       	rjmp	.+576    	; 0xe56 <__fp_inf>

00000c16 <__addsf3x>:
     c16:	e9 2f       	mov	r30, r25
     c18:	46 d1       	rcall	.+652    	; 0xea6 <__fp_split3>
     c1a:	80 f3       	brcs	.-32     	; 0xbfc <__addsf3+0x8>
     c1c:	ba 17       	cp	r27, r26
     c1e:	62 07       	cpc	r22, r18
     c20:	73 07       	cpc	r23, r19
     c22:	84 07       	cpc	r24, r20
     c24:	95 07       	cpc	r25, r21
     c26:	18 f0       	brcs	.+6      	; 0xc2e <__addsf3x+0x18>
     c28:	71 f4       	brne	.+28     	; 0xc46 <__addsf3x+0x30>
     c2a:	9e f5       	brtc	.+102    	; 0xc92 <__addsf3x+0x7c>
     c2c:	5e c1       	rjmp	.+700    	; 0xeea <__fp_zero>
     c2e:	0e f4       	brtc	.+2      	; 0xc32 <__addsf3x+0x1c>
     c30:	e0 95       	com	r30
     c32:	0b 2e       	mov	r0, r27
     c34:	ba 2f       	mov	r27, r26
     c36:	a0 2d       	mov	r26, r0
     c38:	0b 01       	movw	r0, r22
     c3a:	b9 01       	movw	r22, r18
     c3c:	90 01       	movw	r18, r0
     c3e:	0c 01       	movw	r0, r24
     c40:	ca 01       	movw	r24, r20
     c42:	a0 01       	movw	r20, r0
     c44:	11 24       	eor	r1, r1
     c46:	ff 27       	eor	r31, r31
     c48:	59 1b       	sub	r21, r25
     c4a:	99 f0       	breq	.+38     	; 0xc72 <__addsf3x+0x5c>
     c4c:	59 3f       	cpi	r21, 0xF9	; 249
     c4e:	50 f4       	brcc	.+20     	; 0xc64 <__addsf3x+0x4e>
     c50:	50 3e       	cpi	r21, 0xE0	; 224
     c52:	68 f1       	brcs	.+90     	; 0xcae <__addsf3x+0x98>
     c54:	1a 16       	cp	r1, r26
     c56:	f0 40       	sbci	r31, 0x00	; 0
     c58:	a2 2f       	mov	r26, r18
     c5a:	23 2f       	mov	r18, r19
     c5c:	34 2f       	mov	r19, r20
     c5e:	44 27       	eor	r20, r20
     c60:	58 5f       	subi	r21, 0xF8	; 248
     c62:	f3 cf       	rjmp	.-26     	; 0xc4a <__addsf3x+0x34>
     c64:	46 95       	lsr	r20
     c66:	37 95       	ror	r19
     c68:	27 95       	ror	r18
     c6a:	a7 95       	ror	r26
     c6c:	f0 40       	sbci	r31, 0x00	; 0
     c6e:	53 95       	inc	r21
     c70:	c9 f7       	brne	.-14     	; 0xc64 <__addsf3x+0x4e>
     c72:	7e f4       	brtc	.+30     	; 0xc92 <__addsf3x+0x7c>
     c74:	1f 16       	cp	r1, r31
     c76:	ba 0b       	sbc	r27, r26
     c78:	62 0b       	sbc	r22, r18
     c7a:	73 0b       	sbc	r23, r19
     c7c:	84 0b       	sbc	r24, r20
     c7e:	ba f0       	brmi	.+46     	; 0xcae <__addsf3x+0x98>
     c80:	91 50       	subi	r25, 0x01	; 1
     c82:	a1 f0       	breq	.+40     	; 0xcac <__addsf3x+0x96>
     c84:	ff 0f       	add	r31, r31
     c86:	bb 1f       	adc	r27, r27
     c88:	66 1f       	adc	r22, r22
     c8a:	77 1f       	adc	r23, r23
     c8c:	88 1f       	adc	r24, r24
     c8e:	c2 f7       	brpl	.-16     	; 0xc80 <__addsf3x+0x6a>
     c90:	0e c0       	rjmp	.+28     	; 0xcae <__addsf3x+0x98>
     c92:	ba 0f       	add	r27, r26
     c94:	62 1f       	adc	r22, r18
     c96:	73 1f       	adc	r23, r19
     c98:	84 1f       	adc	r24, r20
     c9a:	48 f4       	brcc	.+18     	; 0xcae <__addsf3x+0x98>
     c9c:	87 95       	ror	r24
     c9e:	77 95       	ror	r23
     ca0:	67 95       	ror	r22
     ca2:	b7 95       	ror	r27
     ca4:	f7 95       	ror	r31
     ca6:	9e 3f       	cpi	r25, 0xFE	; 254
     ca8:	08 f0       	brcs	.+2      	; 0xcac <__addsf3x+0x96>
     caa:	b3 cf       	rjmp	.-154    	; 0xc12 <__addsf3+0x1e>
     cac:	93 95       	inc	r25
     cae:	88 0f       	add	r24, r24
     cb0:	08 f0       	brcs	.+2      	; 0xcb4 <__addsf3x+0x9e>
     cb2:	99 27       	eor	r25, r25
     cb4:	ee 0f       	add	r30, r30
     cb6:	97 95       	ror	r25
     cb8:	87 95       	ror	r24
     cba:	08 95       	ret

00000cbc <__cmpsf2>:
     cbc:	a8 d0       	rcall	.+336    	; 0xe0e <__fp_cmp>
     cbe:	08 f4       	brcc	.+2      	; 0xcc2 <__cmpsf2+0x6>
     cc0:	81 e0       	ldi	r24, 0x01	; 1
     cc2:	08 95       	ret

00000cc4 <__divsf3>:
     cc4:	0c d0       	rcall	.+24     	; 0xcde <__divsf3x>
     cc6:	de c0       	rjmp	.+444    	; 0xe84 <__fp_round>
     cc8:	d6 d0       	rcall	.+428    	; 0xe76 <__fp_pscB>
     cca:	40 f0       	brcs	.+16     	; 0xcdc <__divsf3+0x18>
     ccc:	cd d0       	rcall	.+410    	; 0xe68 <__fp_pscA>
     cce:	30 f0       	brcs	.+12     	; 0xcdc <__divsf3+0x18>
     cd0:	21 f4       	brne	.+8      	; 0xcda <__divsf3+0x16>
     cd2:	5f 3f       	cpi	r21, 0xFF	; 255
     cd4:	19 f0       	breq	.+6      	; 0xcdc <__divsf3+0x18>
     cd6:	bf c0       	rjmp	.+382    	; 0xe56 <__fp_inf>
     cd8:	51 11       	cpse	r21, r1
     cda:	08 c1       	rjmp	.+528    	; 0xeec <__fp_szero>
     cdc:	c2 c0       	rjmp	.+388    	; 0xe62 <__fp_nan>

00000cde <__divsf3x>:
     cde:	e3 d0       	rcall	.+454    	; 0xea6 <__fp_split3>
     ce0:	98 f3       	brcs	.-26     	; 0xcc8 <__divsf3+0x4>

00000ce2 <__divsf3_pse>:
     ce2:	99 23       	and	r25, r25
     ce4:	c9 f3       	breq	.-14     	; 0xcd8 <__divsf3+0x14>
     ce6:	55 23       	and	r21, r21
     ce8:	b1 f3       	breq	.-20     	; 0xcd6 <__divsf3+0x12>
     cea:	95 1b       	sub	r25, r21
     cec:	55 0b       	sbc	r21, r21
     cee:	bb 27       	eor	r27, r27
     cf0:	aa 27       	eor	r26, r26
     cf2:	62 17       	cp	r22, r18
     cf4:	73 07       	cpc	r23, r19
     cf6:	84 07       	cpc	r24, r20
     cf8:	38 f0       	brcs	.+14     	; 0xd08 <__divsf3_pse+0x26>
     cfa:	9f 5f       	subi	r25, 0xFF	; 255
     cfc:	5f 4f       	sbci	r21, 0xFF	; 255
     cfe:	22 0f       	add	r18, r18
     d00:	33 1f       	adc	r19, r19
     d02:	44 1f       	adc	r20, r20
     d04:	aa 1f       	adc	r26, r26
     d06:	a9 f3       	breq	.-22     	; 0xcf2 <__divsf3_pse+0x10>
     d08:	33 d0       	rcall	.+102    	; 0xd70 <__divsf3_pse+0x8e>
     d0a:	0e 2e       	mov	r0, r30
     d0c:	3a f0       	brmi	.+14     	; 0xd1c <__divsf3_pse+0x3a>
     d0e:	e0 e8       	ldi	r30, 0x80	; 128
     d10:	30 d0       	rcall	.+96     	; 0xd72 <__divsf3_pse+0x90>
     d12:	91 50       	subi	r25, 0x01	; 1
     d14:	50 40       	sbci	r21, 0x00	; 0
     d16:	e6 95       	lsr	r30
     d18:	00 1c       	adc	r0, r0
     d1a:	ca f7       	brpl	.-14     	; 0xd0e <__divsf3_pse+0x2c>
     d1c:	29 d0       	rcall	.+82     	; 0xd70 <__divsf3_pse+0x8e>
     d1e:	fe 2f       	mov	r31, r30
     d20:	27 d0       	rcall	.+78     	; 0xd70 <__divsf3_pse+0x8e>
     d22:	66 0f       	add	r22, r22
     d24:	77 1f       	adc	r23, r23
     d26:	88 1f       	adc	r24, r24
     d28:	bb 1f       	adc	r27, r27
     d2a:	26 17       	cp	r18, r22
     d2c:	37 07       	cpc	r19, r23
     d2e:	48 07       	cpc	r20, r24
     d30:	ab 07       	cpc	r26, r27
     d32:	b0 e8       	ldi	r27, 0x80	; 128
     d34:	09 f0       	breq	.+2      	; 0xd38 <__divsf3_pse+0x56>
     d36:	bb 0b       	sbc	r27, r27
     d38:	80 2d       	mov	r24, r0
     d3a:	bf 01       	movw	r22, r30
     d3c:	ff 27       	eor	r31, r31
     d3e:	93 58       	subi	r25, 0x83	; 131
     d40:	5f 4f       	sbci	r21, 0xFF	; 255
     d42:	2a f0       	brmi	.+10     	; 0xd4e <__divsf3_pse+0x6c>
     d44:	9e 3f       	cpi	r25, 0xFE	; 254
     d46:	51 05       	cpc	r21, r1
     d48:	68 f0       	brcs	.+26     	; 0xd64 <__divsf3_pse+0x82>
     d4a:	85 c0       	rjmp	.+266    	; 0xe56 <__fp_inf>
     d4c:	cf c0       	rjmp	.+414    	; 0xeec <__fp_szero>
     d4e:	5f 3f       	cpi	r21, 0xFF	; 255
     d50:	ec f3       	brlt	.-6      	; 0xd4c <__divsf3_pse+0x6a>
     d52:	98 3e       	cpi	r25, 0xE8	; 232
     d54:	dc f3       	brlt	.-10     	; 0xd4c <__divsf3_pse+0x6a>
     d56:	86 95       	lsr	r24
     d58:	77 95       	ror	r23
     d5a:	67 95       	ror	r22
     d5c:	b7 95       	ror	r27
     d5e:	f7 95       	ror	r31
     d60:	9f 5f       	subi	r25, 0xFF	; 255
     d62:	c9 f7       	brne	.-14     	; 0xd56 <__divsf3_pse+0x74>
     d64:	88 0f       	add	r24, r24
     d66:	91 1d       	adc	r25, r1
     d68:	96 95       	lsr	r25
     d6a:	87 95       	ror	r24
     d6c:	97 f9       	bld	r25, 7
     d6e:	08 95       	ret
     d70:	e1 e0       	ldi	r30, 0x01	; 1
     d72:	66 0f       	add	r22, r22
     d74:	77 1f       	adc	r23, r23
     d76:	88 1f       	adc	r24, r24
     d78:	bb 1f       	adc	r27, r27
     d7a:	62 17       	cp	r22, r18
     d7c:	73 07       	cpc	r23, r19
     d7e:	84 07       	cpc	r24, r20
     d80:	ba 07       	cpc	r27, r26
     d82:	20 f0       	brcs	.+8      	; 0xd8c <__divsf3_pse+0xaa>
     d84:	62 1b       	sub	r22, r18
     d86:	73 0b       	sbc	r23, r19
     d88:	84 0b       	sbc	r24, r20
     d8a:	ba 0b       	sbc	r27, r26
     d8c:	ee 1f       	adc	r30, r30
     d8e:	88 f7       	brcc	.-30     	; 0xd72 <__divsf3_pse+0x90>
     d90:	e0 95       	com	r30
     d92:	08 95       	ret

00000d94 <__floatunsisf>:
     d94:	e8 94       	clt
     d96:	09 c0       	rjmp	.+18     	; 0xdaa <__floatsisf+0x12>

00000d98 <__floatsisf>:
     d98:	97 fb       	bst	r25, 7
     d9a:	3e f4       	brtc	.+14     	; 0xdaa <__floatsisf+0x12>
     d9c:	90 95       	com	r25
     d9e:	80 95       	com	r24
     da0:	70 95       	com	r23
     da2:	61 95       	neg	r22
     da4:	7f 4f       	sbci	r23, 0xFF	; 255
     da6:	8f 4f       	sbci	r24, 0xFF	; 255
     da8:	9f 4f       	sbci	r25, 0xFF	; 255
     daa:	99 23       	and	r25, r25
     dac:	a9 f0       	breq	.+42     	; 0xdd8 <__floatsisf+0x40>
     dae:	f9 2f       	mov	r31, r25
     db0:	96 e9       	ldi	r25, 0x96	; 150
     db2:	bb 27       	eor	r27, r27
     db4:	93 95       	inc	r25
     db6:	f6 95       	lsr	r31
     db8:	87 95       	ror	r24
     dba:	77 95       	ror	r23
     dbc:	67 95       	ror	r22
     dbe:	b7 95       	ror	r27
     dc0:	f1 11       	cpse	r31, r1
     dc2:	f8 cf       	rjmp	.-16     	; 0xdb4 <__floatsisf+0x1c>
     dc4:	fa f4       	brpl	.+62     	; 0xe04 <__floatsisf+0x6c>
     dc6:	bb 0f       	add	r27, r27
     dc8:	11 f4       	brne	.+4      	; 0xdce <__floatsisf+0x36>
     dca:	60 ff       	sbrs	r22, 0
     dcc:	1b c0       	rjmp	.+54     	; 0xe04 <__floatsisf+0x6c>
     dce:	6f 5f       	subi	r22, 0xFF	; 255
     dd0:	7f 4f       	sbci	r23, 0xFF	; 255
     dd2:	8f 4f       	sbci	r24, 0xFF	; 255
     dd4:	9f 4f       	sbci	r25, 0xFF	; 255
     dd6:	16 c0       	rjmp	.+44     	; 0xe04 <__floatsisf+0x6c>
     dd8:	88 23       	and	r24, r24
     dda:	11 f0       	breq	.+4      	; 0xde0 <__floatsisf+0x48>
     ddc:	96 e9       	ldi	r25, 0x96	; 150
     dde:	11 c0       	rjmp	.+34     	; 0xe02 <__floatsisf+0x6a>
     de0:	77 23       	and	r23, r23
     de2:	21 f0       	breq	.+8      	; 0xdec <__floatsisf+0x54>
     de4:	9e e8       	ldi	r25, 0x8E	; 142
     de6:	87 2f       	mov	r24, r23
     de8:	76 2f       	mov	r23, r22
     dea:	05 c0       	rjmp	.+10     	; 0xdf6 <__floatsisf+0x5e>
     dec:	66 23       	and	r22, r22
     dee:	71 f0       	breq	.+28     	; 0xe0c <__floatsisf+0x74>
     df0:	96 e8       	ldi	r25, 0x86	; 134
     df2:	86 2f       	mov	r24, r22
     df4:	70 e0       	ldi	r23, 0x00	; 0
     df6:	60 e0       	ldi	r22, 0x00	; 0
     df8:	2a f0       	brmi	.+10     	; 0xe04 <__floatsisf+0x6c>
     dfa:	9a 95       	dec	r25
     dfc:	66 0f       	add	r22, r22
     dfe:	77 1f       	adc	r23, r23
     e00:	88 1f       	adc	r24, r24
     e02:	da f7       	brpl	.-10     	; 0xdfa <__floatsisf+0x62>
     e04:	88 0f       	add	r24, r24
     e06:	96 95       	lsr	r25
     e08:	87 95       	ror	r24
     e0a:	97 f9       	bld	r25, 7
     e0c:	08 95       	ret

00000e0e <__fp_cmp>:
     e0e:	99 0f       	add	r25, r25
     e10:	00 08       	sbc	r0, r0
     e12:	55 0f       	add	r21, r21
     e14:	aa 0b       	sbc	r26, r26
     e16:	e0 e8       	ldi	r30, 0x80	; 128
     e18:	fe ef       	ldi	r31, 0xFE	; 254
     e1a:	16 16       	cp	r1, r22
     e1c:	17 06       	cpc	r1, r23
     e1e:	e8 07       	cpc	r30, r24
     e20:	f9 07       	cpc	r31, r25
     e22:	c0 f0       	brcs	.+48     	; 0xe54 <__fp_cmp+0x46>
     e24:	12 16       	cp	r1, r18
     e26:	13 06       	cpc	r1, r19
     e28:	e4 07       	cpc	r30, r20
     e2a:	f5 07       	cpc	r31, r21
     e2c:	98 f0       	brcs	.+38     	; 0xe54 <__fp_cmp+0x46>
     e2e:	62 1b       	sub	r22, r18
     e30:	73 0b       	sbc	r23, r19
     e32:	84 0b       	sbc	r24, r20
     e34:	95 0b       	sbc	r25, r21
     e36:	39 f4       	brne	.+14     	; 0xe46 <__fp_cmp+0x38>
     e38:	0a 26       	eor	r0, r26
     e3a:	61 f0       	breq	.+24     	; 0xe54 <__fp_cmp+0x46>
     e3c:	23 2b       	or	r18, r19
     e3e:	24 2b       	or	r18, r20
     e40:	25 2b       	or	r18, r21
     e42:	21 f4       	brne	.+8      	; 0xe4c <__fp_cmp+0x3e>
     e44:	08 95       	ret
     e46:	0a 26       	eor	r0, r26
     e48:	09 f4       	brne	.+2      	; 0xe4c <__fp_cmp+0x3e>
     e4a:	a1 40       	sbci	r26, 0x01	; 1
     e4c:	a6 95       	lsr	r26
     e4e:	8f ef       	ldi	r24, 0xFF	; 255
     e50:	81 1d       	adc	r24, r1
     e52:	81 1d       	adc	r24, r1
     e54:	08 95       	ret

00000e56 <__fp_inf>:
     e56:	97 f9       	bld	r25, 7
     e58:	9f 67       	ori	r25, 0x7F	; 127
     e5a:	80 e8       	ldi	r24, 0x80	; 128
     e5c:	70 e0       	ldi	r23, 0x00	; 0
     e5e:	60 e0       	ldi	r22, 0x00	; 0
     e60:	08 95       	ret

00000e62 <__fp_nan>:
     e62:	9f ef       	ldi	r25, 0xFF	; 255
     e64:	80 ec       	ldi	r24, 0xC0	; 192
     e66:	08 95       	ret

00000e68 <__fp_pscA>:
     e68:	00 24       	eor	r0, r0
     e6a:	0a 94       	dec	r0
     e6c:	16 16       	cp	r1, r22
     e6e:	17 06       	cpc	r1, r23
     e70:	18 06       	cpc	r1, r24
     e72:	09 06       	cpc	r0, r25
     e74:	08 95       	ret

00000e76 <__fp_pscB>:
     e76:	00 24       	eor	r0, r0
     e78:	0a 94       	dec	r0
     e7a:	12 16       	cp	r1, r18
     e7c:	13 06       	cpc	r1, r19
     e7e:	14 06       	cpc	r1, r20
     e80:	05 06       	cpc	r0, r21
     e82:	08 95       	ret

00000e84 <__fp_round>:
     e84:	09 2e       	mov	r0, r25
     e86:	03 94       	inc	r0
     e88:	00 0c       	add	r0, r0
     e8a:	11 f4       	brne	.+4      	; 0xe90 <__fp_round+0xc>
     e8c:	88 23       	and	r24, r24
     e8e:	52 f0       	brmi	.+20     	; 0xea4 <__fp_round+0x20>
     e90:	bb 0f       	add	r27, r27
     e92:	40 f4       	brcc	.+16     	; 0xea4 <__fp_round+0x20>
     e94:	bf 2b       	or	r27, r31
     e96:	11 f4       	brne	.+4      	; 0xe9c <__fp_round+0x18>
     e98:	60 ff       	sbrs	r22, 0
     e9a:	04 c0       	rjmp	.+8      	; 0xea4 <__fp_round+0x20>
     e9c:	6f 5f       	subi	r22, 0xFF	; 255
     e9e:	7f 4f       	sbci	r23, 0xFF	; 255
     ea0:	8f 4f       	sbci	r24, 0xFF	; 255
     ea2:	9f 4f       	sbci	r25, 0xFF	; 255
     ea4:	08 95       	ret

00000ea6 <__fp_split3>:
     ea6:	57 fd       	sbrc	r21, 7
     ea8:	90 58       	subi	r25, 0x80	; 128
     eaa:	44 0f       	add	r20, r20
     eac:	55 1f       	adc	r21, r21
     eae:	59 f0       	breq	.+22     	; 0xec6 <__fp_splitA+0x10>
     eb0:	5f 3f       	cpi	r21, 0xFF	; 255
     eb2:	71 f0       	breq	.+28     	; 0xed0 <__fp_splitA+0x1a>
     eb4:	47 95       	ror	r20

00000eb6 <__fp_splitA>:
     eb6:	88 0f       	add	r24, r24
     eb8:	97 fb       	bst	r25, 7
     eba:	99 1f       	adc	r25, r25
     ebc:	61 f0       	breq	.+24     	; 0xed6 <__fp_splitA+0x20>
     ebe:	9f 3f       	cpi	r25, 0xFF	; 255
     ec0:	79 f0       	breq	.+30     	; 0xee0 <__fp_splitA+0x2a>
     ec2:	87 95       	ror	r24
     ec4:	08 95       	ret
     ec6:	12 16       	cp	r1, r18
     ec8:	13 06       	cpc	r1, r19
     eca:	14 06       	cpc	r1, r20
     ecc:	55 1f       	adc	r21, r21
     ece:	f2 cf       	rjmp	.-28     	; 0xeb4 <__fp_split3+0xe>
     ed0:	46 95       	lsr	r20
     ed2:	f1 df       	rcall	.-30     	; 0xeb6 <__fp_splitA>
     ed4:	08 c0       	rjmp	.+16     	; 0xee6 <__fp_splitA+0x30>
     ed6:	16 16       	cp	r1, r22
     ed8:	17 06       	cpc	r1, r23
     eda:	18 06       	cpc	r1, r24
     edc:	99 1f       	adc	r25, r25
     ede:	f1 cf       	rjmp	.-30     	; 0xec2 <__fp_splitA+0xc>
     ee0:	86 95       	lsr	r24
     ee2:	71 05       	cpc	r23, r1
     ee4:	61 05       	cpc	r22, r1
     ee6:	08 94       	sec
     ee8:	08 95       	ret

00000eea <__fp_zero>:
     eea:	e8 94       	clt

00000eec <__fp_szero>:
     eec:	bb 27       	eor	r27, r27
     eee:	66 27       	eor	r22, r22
     ef0:	77 27       	eor	r23, r23
     ef2:	cb 01       	movw	r24, r22
     ef4:	97 f9       	bld	r25, 7
     ef6:	08 95       	ret

00000ef8 <__gesf2>:
     ef8:	8a df       	rcall	.-236    	; 0xe0e <__fp_cmp>
     efa:	08 f4       	brcc	.+2      	; 0xefe <__gesf2+0x6>
     efc:	8f ef       	ldi	r24, 0xFF	; 255
     efe:	08 95       	ret

00000f00 <__mulsf3>:
     f00:	0b d0       	rcall	.+22     	; 0xf18 <__mulsf3x>
     f02:	c0 cf       	rjmp	.-128    	; 0xe84 <__fp_round>
     f04:	b1 df       	rcall	.-158    	; 0xe68 <__fp_pscA>
     f06:	28 f0       	brcs	.+10     	; 0xf12 <__mulsf3+0x12>
     f08:	b6 df       	rcall	.-148    	; 0xe76 <__fp_pscB>
     f0a:	18 f0       	brcs	.+6      	; 0xf12 <__mulsf3+0x12>
     f0c:	95 23       	and	r25, r21
     f0e:	09 f0       	breq	.+2      	; 0xf12 <__mulsf3+0x12>
     f10:	a2 cf       	rjmp	.-188    	; 0xe56 <__fp_inf>
     f12:	a7 cf       	rjmp	.-178    	; 0xe62 <__fp_nan>
     f14:	11 24       	eor	r1, r1
     f16:	ea cf       	rjmp	.-44     	; 0xeec <__fp_szero>

00000f18 <__mulsf3x>:
     f18:	c6 df       	rcall	.-116    	; 0xea6 <__fp_split3>
     f1a:	a0 f3       	brcs	.-24     	; 0xf04 <__mulsf3+0x4>

00000f1c <__mulsf3_pse>:
     f1c:	95 9f       	mul	r25, r21
     f1e:	d1 f3       	breq	.-12     	; 0xf14 <__mulsf3+0x14>
     f20:	95 0f       	add	r25, r21
     f22:	50 e0       	ldi	r21, 0x00	; 0
     f24:	55 1f       	adc	r21, r21
     f26:	62 9f       	mul	r22, r18
     f28:	f0 01       	movw	r30, r0
     f2a:	72 9f       	mul	r23, r18
     f2c:	bb 27       	eor	r27, r27
     f2e:	f0 0d       	add	r31, r0
     f30:	b1 1d       	adc	r27, r1
     f32:	63 9f       	mul	r22, r19
     f34:	aa 27       	eor	r26, r26
     f36:	f0 0d       	add	r31, r0
     f38:	b1 1d       	adc	r27, r1
     f3a:	aa 1f       	adc	r26, r26
     f3c:	64 9f       	mul	r22, r20
     f3e:	66 27       	eor	r22, r22
     f40:	b0 0d       	add	r27, r0
     f42:	a1 1d       	adc	r26, r1
     f44:	66 1f       	adc	r22, r22
     f46:	82 9f       	mul	r24, r18
     f48:	22 27       	eor	r18, r18
     f4a:	b0 0d       	add	r27, r0
     f4c:	a1 1d       	adc	r26, r1
     f4e:	62 1f       	adc	r22, r18
     f50:	73 9f       	mul	r23, r19
     f52:	b0 0d       	add	r27, r0
     f54:	a1 1d       	adc	r26, r1
     f56:	62 1f       	adc	r22, r18
     f58:	83 9f       	mul	r24, r19
     f5a:	a0 0d       	add	r26, r0
     f5c:	61 1d       	adc	r22, r1
     f5e:	22 1f       	adc	r18, r18
     f60:	74 9f       	mul	r23, r20
     f62:	33 27       	eor	r19, r19
     f64:	a0 0d       	add	r26, r0
     f66:	61 1d       	adc	r22, r1
     f68:	23 1f       	adc	r18, r19
     f6a:	84 9f       	mul	r24, r20
     f6c:	60 0d       	add	r22, r0
     f6e:	21 1d       	adc	r18, r1
     f70:	82 2f       	mov	r24, r18
     f72:	76 2f       	mov	r23, r22
     f74:	6a 2f       	mov	r22, r26
     f76:	11 24       	eor	r1, r1
     f78:	9f 57       	subi	r25, 0x7F	; 127
     f7a:	50 40       	sbci	r21, 0x00	; 0
     f7c:	8a f0       	brmi	.+34     	; 0xfa0 <__mulsf3_pse+0x84>
     f7e:	e1 f0       	breq	.+56     	; 0xfb8 <__mulsf3_pse+0x9c>
     f80:	88 23       	and	r24, r24
     f82:	4a f0       	brmi	.+18     	; 0xf96 <__mulsf3_pse+0x7a>
     f84:	ee 0f       	add	r30, r30
     f86:	ff 1f       	adc	r31, r31
     f88:	bb 1f       	adc	r27, r27
     f8a:	66 1f       	adc	r22, r22
     f8c:	77 1f       	adc	r23, r23
     f8e:	88 1f       	adc	r24, r24
     f90:	91 50       	subi	r25, 0x01	; 1
     f92:	50 40       	sbci	r21, 0x00	; 0
     f94:	a9 f7       	brne	.-22     	; 0xf80 <__mulsf3_pse+0x64>
     f96:	9e 3f       	cpi	r25, 0xFE	; 254
     f98:	51 05       	cpc	r21, r1
     f9a:	70 f0       	brcs	.+28     	; 0xfb8 <__mulsf3_pse+0x9c>
     f9c:	5c cf       	rjmp	.-328    	; 0xe56 <__fp_inf>
     f9e:	a6 cf       	rjmp	.-180    	; 0xeec <__fp_szero>
     fa0:	5f 3f       	cpi	r21, 0xFF	; 255
     fa2:	ec f3       	brlt	.-6      	; 0xf9e <__mulsf3_pse+0x82>
     fa4:	98 3e       	cpi	r25, 0xE8	; 232
     fa6:	dc f3       	brlt	.-10     	; 0xf9e <__mulsf3_pse+0x82>
     fa8:	86 95       	lsr	r24
     faa:	77 95       	ror	r23
     fac:	67 95       	ror	r22
     fae:	b7 95       	ror	r27
     fb0:	f7 95       	ror	r31
     fb2:	e7 95       	ror	r30
     fb4:	9f 5f       	subi	r25, 0xFF	; 255
     fb6:	c1 f7       	brne	.-16     	; 0xfa8 <__mulsf3_pse+0x8c>
     fb8:	fe 2b       	or	r31, r30
     fba:	88 0f       	add	r24, r24
     fbc:	91 1d       	adc	r25, r1
     fbe:	96 95       	lsr	r25
     fc0:	87 95       	ror	r24
     fc2:	97 f9       	bld	r25, 7
     fc4:	08 95       	ret

00000fc6 <fdevopen>:
     fc6:	0f 93       	push	r16
     fc8:	1f 93       	push	r17
     fca:	cf 93       	push	r28
     fcc:	df 93       	push	r29
     fce:	ec 01       	movw	r28, r24
     fd0:	8b 01       	movw	r16, r22
     fd2:	00 97       	sbiw	r24, 0x00	; 0
     fd4:	31 f4       	brne	.+12     	; 0xfe2 <fdevopen+0x1c>
     fd6:	61 15       	cp	r22, r1
     fd8:	71 05       	cpc	r23, r1
     fda:	19 f4       	brne	.+6      	; 0xfe2 <fdevopen+0x1c>
     fdc:	80 e0       	ldi	r24, 0x00	; 0
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	38 c0       	rjmp	.+112    	; 0x1052 <fdevopen+0x8c>
     fe2:	6e e0       	ldi	r22, 0x0E	; 14
     fe4:	70 e0       	ldi	r23, 0x00	; 0
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <calloc>
     fee:	fc 01       	movw	r30, r24
     ff0:	00 97       	sbiw	r24, 0x00	; 0
     ff2:	a1 f3       	breq	.-24     	; 0xfdc <fdevopen+0x16>
     ff4:	80 e8       	ldi	r24, 0x80	; 128
     ff6:	83 83       	std	Z+3, r24	; 0x03
     ff8:	01 15       	cp	r16, r1
     ffa:	11 05       	cpc	r17, r1
     ffc:	71 f0       	breq	.+28     	; 0x101a <fdevopen+0x54>
     ffe:	13 87       	std	Z+11, r17	; 0x0b
    1000:	02 87       	std	Z+10, r16	; 0x0a
    1002:	81 e8       	ldi	r24, 0x81	; 129
    1004:	83 83       	std	Z+3, r24	; 0x03
    1006:	80 91 c1 03 	lds	r24, 0x03C1
    100a:	90 91 c2 03 	lds	r25, 0x03C2
    100e:	89 2b       	or	r24, r25
    1010:	21 f4       	brne	.+8      	; 0x101a <fdevopen+0x54>
    1012:	f0 93 c2 03 	sts	0x03C2, r31
    1016:	e0 93 c1 03 	sts	0x03C1, r30
    101a:	20 97       	sbiw	r28, 0x00	; 0
    101c:	c9 f0       	breq	.+50     	; 0x1050 <fdevopen+0x8a>
    101e:	d1 87       	std	Z+9, r29	; 0x09
    1020:	c0 87       	std	Z+8, r28	; 0x08
    1022:	83 81       	ldd	r24, Z+3	; 0x03
    1024:	82 60       	ori	r24, 0x02	; 2
    1026:	83 83       	std	Z+3, r24	; 0x03
    1028:	80 91 c3 03 	lds	r24, 0x03C3
    102c:	90 91 c4 03 	lds	r25, 0x03C4
    1030:	89 2b       	or	r24, r25
    1032:	71 f4       	brne	.+28     	; 0x1050 <fdevopen+0x8a>
    1034:	f0 93 c4 03 	sts	0x03C4, r31
    1038:	e0 93 c3 03 	sts	0x03C3, r30
    103c:	80 91 c5 03 	lds	r24, 0x03C5
    1040:	90 91 c6 03 	lds	r25, 0x03C6
    1044:	89 2b       	or	r24, r25
    1046:	21 f4       	brne	.+8      	; 0x1050 <fdevopen+0x8a>
    1048:	f0 93 c6 03 	sts	0x03C6, r31
    104c:	e0 93 c5 03 	sts	0x03C5, r30
    1050:	cf 01       	movw	r24, r30
    1052:	df 91       	pop	r29
    1054:	cf 91       	pop	r28
    1056:	1f 91       	pop	r17
    1058:	0f 91       	pop	r16
    105a:	08 95       	ret

0000105c <puts>:
    105c:	0f 93       	push	r16
    105e:	1f 93       	push	r17
    1060:	cf 93       	push	r28
    1062:	df 93       	push	r29
    1064:	e0 91 c3 03 	lds	r30, 0x03C3
    1068:	f0 91 c4 03 	lds	r31, 0x03C4
    106c:	23 81       	ldd	r18, Z+3	; 0x03
    106e:	21 ff       	sbrs	r18, 1
    1070:	1b c0       	rjmp	.+54     	; 0x10a8 <puts+0x4c>
    1072:	ec 01       	movw	r28, r24
    1074:	00 e0       	ldi	r16, 0x00	; 0
    1076:	10 e0       	ldi	r17, 0x00	; 0
    1078:	89 91       	ld	r24, Y+
    107a:	60 91 c3 03 	lds	r22, 0x03C3
    107e:	70 91 c4 03 	lds	r23, 0x03C4
    1082:	db 01       	movw	r26, r22
    1084:	18 96       	adiw	r26, 0x08	; 8
    1086:	ed 91       	ld	r30, X+
    1088:	fc 91       	ld	r31, X
    108a:	19 97       	sbiw	r26, 0x09	; 9
    108c:	88 23       	and	r24, r24
    108e:	31 f0       	breq	.+12     	; 0x109c <puts+0x40>
    1090:	09 95       	icall
    1092:	89 2b       	or	r24, r25
    1094:	89 f3       	breq	.-30     	; 0x1078 <puts+0x1c>
    1096:	0f ef       	ldi	r16, 0xFF	; 255
    1098:	1f ef       	ldi	r17, 0xFF	; 255
    109a:	ee cf       	rjmp	.-36     	; 0x1078 <puts+0x1c>
    109c:	8a e0       	ldi	r24, 0x0A	; 10
    109e:	09 95       	icall
    10a0:	89 2b       	or	r24, r25
    10a2:	11 f4       	brne	.+4      	; 0x10a8 <puts+0x4c>
    10a4:	c8 01       	movw	r24, r16
    10a6:	02 c0       	rjmp	.+4      	; 0x10ac <puts+0x50>
    10a8:	8f ef       	ldi	r24, 0xFF	; 255
    10aa:	9f ef       	ldi	r25, 0xFF	; 255
    10ac:	df 91       	pop	r29
    10ae:	cf 91       	pop	r28
    10b0:	1f 91       	pop	r17
    10b2:	0f 91       	pop	r16
    10b4:	08 95       	ret

000010b6 <calloc>:
    10b6:	0f 93       	push	r16
    10b8:	1f 93       	push	r17
    10ba:	cf 93       	push	r28
    10bc:	df 93       	push	r29
    10be:	86 9f       	mul	r24, r22
    10c0:	80 01       	movw	r16, r0
    10c2:	87 9f       	mul	r24, r23
    10c4:	10 0d       	add	r17, r0
    10c6:	96 9f       	mul	r25, r22
    10c8:	10 0d       	add	r17, r0
    10ca:	11 24       	eor	r1, r1
    10cc:	c8 01       	movw	r24, r16
    10ce:	0e 94 77 08 	call	0x10ee	; 0x10ee <malloc>
    10d2:	ec 01       	movw	r28, r24
    10d4:	00 97       	sbiw	r24, 0x00	; 0
    10d6:	29 f0       	breq	.+10     	; 0x10e2 <calloc+0x2c>
    10d8:	a8 01       	movw	r20, r16
    10da:	60 e0       	ldi	r22, 0x00	; 0
    10dc:	70 e0       	ldi	r23, 0x00	; 0
    10de:	0e 94 9e 09 	call	0x133c	; 0x133c <memset>
    10e2:	ce 01       	movw	r24, r28
    10e4:	df 91       	pop	r29
    10e6:	cf 91       	pop	r28
    10e8:	1f 91       	pop	r17
    10ea:	0f 91       	pop	r16
    10ec:	08 95       	ret

000010ee <malloc>:
    10ee:	cf 93       	push	r28
    10f0:	df 93       	push	r29
    10f2:	82 30       	cpi	r24, 0x02	; 2
    10f4:	91 05       	cpc	r25, r1
    10f6:	10 f4       	brcc	.+4      	; 0x10fc <malloc+0xe>
    10f8:	82 e0       	ldi	r24, 0x02	; 2
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	e0 91 c9 03 	lds	r30, 0x03C9
    1100:	f0 91 ca 03 	lds	r31, 0x03CA
    1104:	20 e0       	ldi	r18, 0x00	; 0
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	a0 e0       	ldi	r26, 0x00	; 0
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	30 97       	sbiw	r30, 0x00	; 0
    110e:	39 f1       	breq	.+78     	; 0x115e <malloc+0x70>
    1110:	40 81       	ld	r20, Z
    1112:	51 81       	ldd	r21, Z+1	; 0x01
    1114:	48 17       	cp	r20, r24
    1116:	59 07       	cpc	r21, r25
    1118:	b8 f0       	brcs	.+46     	; 0x1148 <malloc+0x5a>
    111a:	48 17       	cp	r20, r24
    111c:	59 07       	cpc	r21, r25
    111e:	71 f4       	brne	.+28     	; 0x113c <malloc+0x4e>
    1120:	82 81       	ldd	r24, Z+2	; 0x02
    1122:	93 81       	ldd	r25, Z+3	; 0x03
    1124:	10 97       	sbiw	r26, 0x00	; 0
    1126:	29 f0       	breq	.+10     	; 0x1132 <malloc+0x44>
    1128:	13 96       	adiw	r26, 0x03	; 3
    112a:	9c 93       	st	X, r25
    112c:	8e 93       	st	-X, r24
    112e:	12 97       	sbiw	r26, 0x02	; 2
    1130:	2c c0       	rjmp	.+88     	; 0x118a <malloc+0x9c>
    1132:	90 93 ca 03 	sts	0x03CA, r25
    1136:	80 93 c9 03 	sts	0x03C9, r24
    113a:	27 c0       	rjmp	.+78     	; 0x118a <malloc+0x9c>
    113c:	21 15       	cp	r18, r1
    113e:	31 05       	cpc	r19, r1
    1140:	31 f0       	breq	.+12     	; 0x114e <malloc+0x60>
    1142:	42 17       	cp	r20, r18
    1144:	53 07       	cpc	r21, r19
    1146:	18 f0       	brcs	.+6      	; 0x114e <malloc+0x60>
    1148:	a9 01       	movw	r20, r18
    114a:	db 01       	movw	r26, r22
    114c:	01 c0       	rjmp	.+2      	; 0x1150 <malloc+0x62>
    114e:	ef 01       	movw	r28, r30
    1150:	9a 01       	movw	r18, r20
    1152:	bd 01       	movw	r22, r26
    1154:	df 01       	movw	r26, r30
    1156:	02 80       	ldd	r0, Z+2	; 0x02
    1158:	f3 81       	ldd	r31, Z+3	; 0x03
    115a:	e0 2d       	mov	r30, r0
    115c:	d7 cf       	rjmp	.-82     	; 0x110c <malloc+0x1e>
    115e:	21 15       	cp	r18, r1
    1160:	31 05       	cpc	r19, r1
    1162:	f9 f0       	breq	.+62     	; 0x11a2 <malloc+0xb4>
    1164:	28 1b       	sub	r18, r24
    1166:	39 0b       	sbc	r19, r25
    1168:	24 30       	cpi	r18, 0x04	; 4
    116a:	31 05       	cpc	r19, r1
    116c:	80 f4       	brcc	.+32     	; 0x118e <malloc+0xa0>
    116e:	8a 81       	ldd	r24, Y+2	; 0x02
    1170:	9b 81       	ldd	r25, Y+3	; 0x03
    1172:	61 15       	cp	r22, r1
    1174:	71 05       	cpc	r23, r1
    1176:	21 f0       	breq	.+8      	; 0x1180 <malloc+0x92>
    1178:	fb 01       	movw	r30, r22
    117a:	93 83       	std	Z+3, r25	; 0x03
    117c:	82 83       	std	Z+2, r24	; 0x02
    117e:	04 c0       	rjmp	.+8      	; 0x1188 <malloc+0x9a>
    1180:	90 93 ca 03 	sts	0x03CA, r25
    1184:	80 93 c9 03 	sts	0x03C9, r24
    1188:	fe 01       	movw	r30, r28
    118a:	32 96       	adiw	r30, 0x02	; 2
    118c:	44 c0       	rjmp	.+136    	; 0x1216 <malloc+0x128>
    118e:	fe 01       	movw	r30, r28
    1190:	e2 0f       	add	r30, r18
    1192:	f3 1f       	adc	r31, r19
    1194:	81 93       	st	Z+, r24
    1196:	91 93       	st	Z+, r25
    1198:	22 50       	subi	r18, 0x02	; 2
    119a:	31 09       	sbc	r19, r1
    119c:	39 83       	std	Y+1, r19	; 0x01
    119e:	28 83       	st	Y, r18
    11a0:	3a c0       	rjmp	.+116    	; 0x1216 <malloc+0x128>
    11a2:	20 91 c7 03 	lds	r18, 0x03C7
    11a6:	30 91 c8 03 	lds	r19, 0x03C8
    11aa:	23 2b       	or	r18, r19
    11ac:	41 f4       	brne	.+16     	; 0x11be <malloc+0xd0>
    11ae:	20 91 02 01 	lds	r18, 0x0102
    11b2:	30 91 03 01 	lds	r19, 0x0103
    11b6:	30 93 c8 03 	sts	0x03C8, r19
    11ba:	20 93 c7 03 	sts	0x03C7, r18
    11be:	20 91 00 01 	lds	r18, 0x0100
    11c2:	30 91 01 01 	lds	r19, 0x0101
    11c6:	21 15       	cp	r18, r1
    11c8:	31 05       	cpc	r19, r1
    11ca:	41 f4       	brne	.+16     	; 0x11dc <malloc+0xee>
    11cc:	2d b7       	in	r18, 0x3d	; 61
    11ce:	3e b7       	in	r19, 0x3e	; 62
    11d0:	40 91 04 01 	lds	r20, 0x0104
    11d4:	50 91 05 01 	lds	r21, 0x0105
    11d8:	24 1b       	sub	r18, r20
    11da:	35 0b       	sbc	r19, r21
    11dc:	e0 91 c7 03 	lds	r30, 0x03C7
    11e0:	f0 91 c8 03 	lds	r31, 0x03C8
    11e4:	e2 17       	cp	r30, r18
    11e6:	f3 07       	cpc	r31, r19
    11e8:	a0 f4       	brcc	.+40     	; 0x1212 <malloc+0x124>
    11ea:	2e 1b       	sub	r18, r30
    11ec:	3f 0b       	sbc	r19, r31
    11ee:	28 17       	cp	r18, r24
    11f0:	39 07       	cpc	r19, r25
    11f2:	78 f0       	brcs	.+30     	; 0x1212 <malloc+0x124>
    11f4:	ac 01       	movw	r20, r24
    11f6:	4e 5f       	subi	r20, 0xFE	; 254
    11f8:	5f 4f       	sbci	r21, 0xFF	; 255
    11fa:	24 17       	cp	r18, r20
    11fc:	35 07       	cpc	r19, r21
    11fe:	48 f0       	brcs	.+18     	; 0x1212 <malloc+0x124>
    1200:	4e 0f       	add	r20, r30
    1202:	5f 1f       	adc	r21, r31
    1204:	50 93 c8 03 	sts	0x03C8, r21
    1208:	40 93 c7 03 	sts	0x03C7, r20
    120c:	81 93       	st	Z+, r24
    120e:	91 93       	st	Z+, r25
    1210:	02 c0       	rjmp	.+4      	; 0x1216 <malloc+0x128>
    1212:	e0 e0       	ldi	r30, 0x00	; 0
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	cf 01       	movw	r24, r30
    1218:	df 91       	pop	r29
    121a:	cf 91       	pop	r28
    121c:	08 95       	ret

0000121e <free>:
    121e:	cf 93       	push	r28
    1220:	df 93       	push	r29
    1222:	00 97       	sbiw	r24, 0x00	; 0
    1224:	09 f4       	brne	.+2      	; 0x1228 <free+0xa>
    1226:	87 c0       	rjmp	.+270    	; 0x1336 <free+0x118>
    1228:	fc 01       	movw	r30, r24
    122a:	32 97       	sbiw	r30, 0x02	; 2
    122c:	13 82       	std	Z+3, r1	; 0x03
    122e:	12 82       	std	Z+2, r1	; 0x02
    1230:	c0 91 c9 03 	lds	r28, 0x03C9
    1234:	d0 91 ca 03 	lds	r29, 0x03CA
    1238:	20 97       	sbiw	r28, 0x00	; 0
    123a:	81 f4       	brne	.+32     	; 0x125c <free+0x3e>
    123c:	20 81       	ld	r18, Z
    123e:	31 81       	ldd	r19, Z+1	; 0x01
    1240:	28 0f       	add	r18, r24
    1242:	39 1f       	adc	r19, r25
    1244:	80 91 c7 03 	lds	r24, 0x03C7
    1248:	90 91 c8 03 	lds	r25, 0x03C8
    124c:	82 17       	cp	r24, r18
    124e:	93 07       	cpc	r25, r19
    1250:	79 f5       	brne	.+94     	; 0x12b0 <free+0x92>
    1252:	f0 93 c8 03 	sts	0x03C8, r31
    1256:	e0 93 c7 03 	sts	0x03C7, r30
    125a:	6d c0       	rjmp	.+218    	; 0x1336 <free+0x118>
    125c:	de 01       	movw	r26, r28
    125e:	20 e0       	ldi	r18, 0x00	; 0
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	ae 17       	cp	r26, r30
    1264:	bf 07       	cpc	r27, r31
    1266:	50 f4       	brcc	.+20     	; 0x127c <free+0x5e>
    1268:	12 96       	adiw	r26, 0x02	; 2
    126a:	4d 91       	ld	r20, X+
    126c:	5c 91       	ld	r21, X
    126e:	13 97       	sbiw	r26, 0x03	; 3
    1270:	9d 01       	movw	r18, r26
    1272:	41 15       	cp	r20, r1
    1274:	51 05       	cpc	r21, r1
    1276:	09 f1       	breq	.+66     	; 0x12ba <free+0x9c>
    1278:	da 01       	movw	r26, r20
    127a:	f3 cf       	rjmp	.-26     	; 0x1262 <free+0x44>
    127c:	b3 83       	std	Z+3, r27	; 0x03
    127e:	a2 83       	std	Z+2, r26	; 0x02
    1280:	40 81       	ld	r20, Z
    1282:	51 81       	ldd	r21, Z+1	; 0x01
    1284:	84 0f       	add	r24, r20
    1286:	95 1f       	adc	r25, r21
    1288:	8a 17       	cp	r24, r26
    128a:	9b 07       	cpc	r25, r27
    128c:	71 f4       	brne	.+28     	; 0x12aa <free+0x8c>
    128e:	8d 91       	ld	r24, X+
    1290:	9c 91       	ld	r25, X
    1292:	11 97       	sbiw	r26, 0x01	; 1
    1294:	84 0f       	add	r24, r20
    1296:	95 1f       	adc	r25, r21
    1298:	02 96       	adiw	r24, 0x02	; 2
    129a:	91 83       	std	Z+1, r25	; 0x01
    129c:	80 83       	st	Z, r24
    129e:	12 96       	adiw	r26, 0x02	; 2
    12a0:	8d 91       	ld	r24, X+
    12a2:	9c 91       	ld	r25, X
    12a4:	13 97       	sbiw	r26, 0x03	; 3
    12a6:	93 83       	std	Z+3, r25	; 0x03
    12a8:	82 83       	std	Z+2, r24	; 0x02
    12aa:	21 15       	cp	r18, r1
    12ac:	31 05       	cpc	r19, r1
    12ae:	29 f4       	brne	.+10     	; 0x12ba <free+0x9c>
    12b0:	f0 93 ca 03 	sts	0x03CA, r31
    12b4:	e0 93 c9 03 	sts	0x03C9, r30
    12b8:	3e c0       	rjmp	.+124    	; 0x1336 <free+0x118>
    12ba:	d9 01       	movw	r26, r18
    12bc:	13 96       	adiw	r26, 0x03	; 3
    12be:	fc 93       	st	X, r31
    12c0:	ee 93       	st	-X, r30
    12c2:	12 97       	sbiw	r26, 0x02	; 2
    12c4:	4d 91       	ld	r20, X+
    12c6:	5d 91       	ld	r21, X+
    12c8:	a4 0f       	add	r26, r20
    12ca:	b5 1f       	adc	r27, r21
    12cc:	ea 17       	cp	r30, r26
    12ce:	fb 07       	cpc	r31, r27
    12d0:	79 f4       	brne	.+30     	; 0x12f0 <free+0xd2>
    12d2:	80 81       	ld	r24, Z
    12d4:	91 81       	ldd	r25, Z+1	; 0x01
    12d6:	84 0f       	add	r24, r20
    12d8:	95 1f       	adc	r25, r21
    12da:	02 96       	adiw	r24, 0x02	; 2
    12dc:	d9 01       	movw	r26, r18
    12de:	11 96       	adiw	r26, 0x01	; 1
    12e0:	9c 93       	st	X, r25
    12e2:	8e 93       	st	-X, r24
    12e4:	82 81       	ldd	r24, Z+2	; 0x02
    12e6:	93 81       	ldd	r25, Z+3	; 0x03
    12e8:	13 96       	adiw	r26, 0x03	; 3
    12ea:	9c 93       	st	X, r25
    12ec:	8e 93       	st	-X, r24
    12ee:	12 97       	sbiw	r26, 0x02	; 2
    12f0:	e0 e0       	ldi	r30, 0x00	; 0
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	8a 81       	ldd	r24, Y+2	; 0x02
    12f6:	9b 81       	ldd	r25, Y+3	; 0x03
    12f8:	00 97       	sbiw	r24, 0x00	; 0
    12fa:	19 f0       	breq	.+6      	; 0x1302 <free+0xe4>
    12fc:	fe 01       	movw	r30, r28
    12fe:	ec 01       	movw	r28, r24
    1300:	f9 cf       	rjmp	.-14     	; 0x12f4 <free+0xd6>
    1302:	ce 01       	movw	r24, r28
    1304:	02 96       	adiw	r24, 0x02	; 2
    1306:	28 81       	ld	r18, Y
    1308:	39 81       	ldd	r19, Y+1	; 0x01
    130a:	82 0f       	add	r24, r18
    130c:	93 1f       	adc	r25, r19
    130e:	20 91 c7 03 	lds	r18, 0x03C7
    1312:	30 91 c8 03 	lds	r19, 0x03C8
    1316:	28 17       	cp	r18, r24
    1318:	39 07       	cpc	r19, r25
    131a:	69 f4       	brne	.+26     	; 0x1336 <free+0x118>
    131c:	30 97       	sbiw	r30, 0x00	; 0
    131e:	29 f4       	brne	.+10     	; 0x132a <free+0x10c>
    1320:	10 92 ca 03 	sts	0x03CA, r1
    1324:	10 92 c9 03 	sts	0x03C9, r1
    1328:	02 c0       	rjmp	.+4      	; 0x132e <free+0x110>
    132a:	13 82       	std	Z+3, r1	; 0x03
    132c:	12 82       	std	Z+2, r1	; 0x02
    132e:	d0 93 c8 03 	sts	0x03C8, r29
    1332:	c0 93 c7 03 	sts	0x03C7, r28
    1336:	df 91       	pop	r29
    1338:	cf 91       	pop	r28
    133a:	08 95       	ret

0000133c <memset>:
    133c:	dc 01       	movw	r26, r24
    133e:	01 c0       	rjmp	.+2      	; 0x1342 <memset+0x6>
    1340:	6d 93       	st	X+, r22
    1342:	41 50       	subi	r20, 0x01	; 1
    1344:	50 40       	sbci	r21, 0x00	; 0
    1346:	e0 f7       	brcc	.-8      	; 0x1340 <memset+0x4>
    1348:	08 95       	ret

0000134a <_exit>:
    134a:	f8 94       	cli

0000134c <__stop_program>:
    134c:	ff cf       	rjmp	.-2      	; 0x134c <__stop_program>
