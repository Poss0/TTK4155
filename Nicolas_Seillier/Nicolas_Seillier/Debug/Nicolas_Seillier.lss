
Nicolas_Seillier.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000150  00800100  00001e1a  00001eae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e1a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800250  00800250  00001ffe  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001ffe  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000260  00000000  00000000  0000205a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000032dd  00000000  00000000  000022ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000dc4  00000000  00000000  00005597  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d96  00000000  00000000  0000635b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000588  00000000  00000000  000070f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000631  00000000  00000000  0000767c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000010bf  00000000  00000000  00007cad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001d8  00000000  00000000  00008d6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__ctors_end>
       4:	0c 94 fa 03 	jmp	0x7f4	; 0x7f4 <__vector_1>
       8:	0c 94 b6 04 	jmp	0x96c	; 0x96c <__vector_2>
       c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      10:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      14:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      18:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      1c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      20:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      24:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      28:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      2c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      30:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      34:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      38:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      3c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      40:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      44:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      48:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      4c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      50:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      54:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      58:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      5c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      60:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      64:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      68:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      6c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	00 00       	nop
      72:	00 00       	nop
      74:	00 5c       	subi	r16, 0xC0	; 192
      76:	00 00       	nop
      78:	0c 00       	.word	0x000c	; ????
      7a:	0c 00       	.word	0x000c	; ????
      7c:	7c 28       	or	r7, r12
      7e:	7c 28       	or	r7, r12
      80:	58 dc       	rcall	.-1872   	; 0xfffff932 <__eeprom_end+0xff7ef932>
      82:	68 00       	.word	0x0068	; ????
      84:	24 10       	cpse	r2, r4
      86:	48 00       	.word	0x0048	; ????
      88:	28 54       	subi	r18, 0x48	; 72
      8a:	28 40       	sbci	r18, 0x08	; 8
      8c:	00 0c       	add	r0, r0
      8e:	00 00       	nop
      90:	00 78       	andi	r16, 0x80	; 128
      92:	84 00       	.word	0x0084	; ????
      94:	84 78       	andi	r24, 0x84	; 132
      96:	00 00       	nop
      98:	54 38       	cpi	r21, 0x84	; 132
      9a:	54 00       	.word	0x0054	; ????
      9c:	10 7c       	andi	r17, 0xC0	; 192
      9e:	10 00       	.word	0x0010	; ????
      a0:	80 40       	sbci	r24, 0x00	; 0
      a2:	00 00       	nop
      a4:	10 10       	cpse	r1, r0
      a6:	10 00       	.word	0x0010	; ????
      a8:	00 40       	sbci	r16, 0x00	; 0
      aa:	00 00       	nop
      ac:	60 10       	cpse	r6, r0
      ae:	0c 00       	.word	0x000c	; ????
      b0:	38 54       	subi	r19, 0x48	; 72
      b2:	38 00       	.word	0x0038	; ????
      b4:	48 7c       	andi	r20, 0xC8	; 200
      b6:	40 00       	.word	0x0040	; ????
      b8:	48 64       	ori	r20, 0x48	; 72
      ba:	58 00       	.word	0x0058	; ????
      bc:	44 54       	subi	r20, 0x44	; 68
      be:	2c 00       	.word	0x002c	; ????
      c0:	1c 10       	cpse	r1, r12
      c2:	7c 00       	.word	0x007c	; ????
      c4:	5c 54       	subi	r21, 0x4C	; 76
      c6:	24 00       	.word	0x0024	; ????
      c8:	38 54       	subi	r19, 0x48	; 72
      ca:	24 00       	.word	0x0024	; ????
      cc:	64 14       	cp	r6, r4
      ce:	0c 00       	.word	0x000c	; ????
      d0:	68 54       	subi	r22, 0x48	; 72
      d2:	2c 00       	.word	0x002c	; ????
      d4:	48 54       	subi	r20, 0x48	; 72
      d6:	38 00       	.word	0x0038	; ????
      d8:	00 48       	sbci	r16, 0x80	; 128
      da:	00 00       	nop
      dc:	80 48       	sbci	r24, 0x80	; 128
      de:	00 00       	nop
      e0:	10 28       	or	r1, r0
      e2:	44 00       	.word	0x0044	; ????
      e4:	28 28       	or	r2, r8
      e6:	28 00       	.word	0x0028	; ????
      e8:	44 28       	or	r4, r4
      ea:	10 00       	.word	0x0010	; ????
      ec:	04 54       	subi	r16, 0x44	; 68
      ee:	08 00       	.word	0x0008	; ????
      f0:	38 44       	sbci	r19, 0x48	; 72
      f2:	5c 00       	.word	0x005c	; ????
      f4:	78 14       	cp	r7, r8
      f6:	78 00       	.word	0x0078	; ????
      f8:	7c 54       	subi	r23, 0x4C	; 76
      fa:	28 00       	.word	0x0028	; ????
      fc:	38 44       	sbci	r19, 0x48	; 72
      fe:	28 00       	.word	0x0028	; ????
     100:	7c 44       	sbci	r23, 0x4C	; 76
     102:	38 00       	.word	0x0038	; ????
     104:	7c 54       	subi	r23, 0x4C	; 76
     106:	44 00       	.word	0x0044	; ????
     108:	7c 14       	cp	r7, r12
     10a:	04 00       	.word	0x0004	; ????
     10c:	38 44       	sbci	r19, 0x48	; 72
     10e:	74 00       	.word	0x0074	; ????
     110:	7c 10       	cpse	r7, r12
     112:	7c 00       	.word	0x007c	; ????
     114:	44 7c       	andi	r20, 0xC4	; 196
     116:	44 00       	.word	0x0044	; ????
     118:	20 40       	sbci	r18, 0x00	; 0
     11a:	3c 00       	.word	0x003c	; ????
     11c:	7c 10       	cpse	r7, r12
     11e:	6c 00       	.word	0x006c	; ????
     120:	7c 40       	sbci	r23, 0x0C	; 12
     122:	40 00       	.word	0x0040	; ????
     124:	7c 18       	sub	r7, r12
     126:	7c 00       	.word	0x007c	; ????
     128:	78 10       	cpse	r7, r8
     12a:	3c 00       	.word	0x003c	; ????
     12c:	38 44       	sbci	r19, 0x48	; 72
     12e:	38 00       	.word	0x0038	; ????
     130:	7c 14       	cp	r7, r12
     132:	08 00       	.word	0x0008	; ????
     134:	38 44       	sbci	r19, 0x48	; 72
     136:	b8 00       	.word	0x00b8	; ????
     138:	7c 14       	cp	r7, r12
     13a:	68 00       	.word	0x0068	; ????
     13c:	48 54       	subi	r20, 0x48	; 72
     13e:	24 00       	.word	0x0024	; ????
     140:	04 7c       	andi	r16, 0xC4	; 196
     142:	04 00       	.word	0x0004	; ????
     144:	7c 40       	sbci	r23, 0x0C	; 12
     146:	7c 00       	.word	0x007c	; ????
     148:	3c 60       	ori	r19, 0x0C	; 12
     14a:	3c 00       	.word	0x003c	; ????
     14c:	7c 30       	cpi	r23, 0x0C	; 12
     14e:	7c 00       	.word	0x007c	; ????
     150:	6c 10       	cpse	r6, r12
     152:	6c 00       	.word	0x006c	; ????
     154:	0c 70       	andi	r16, 0x0C	; 12
     156:	0c 00       	.word	0x000c	; ????
     158:	64 54       	subi	r22, 0x44	; 68
     15a:	4c 00       	.word	0x004c	; ????
     15c:	00 7c       	andi	r16, 0xC0	; 192
     15e:	44 00       	.word	0x0044	; ????
     160:	0c 10       	cpse	r0, r12
     162:	60 00       	.word	0x0060	; ????
     164:	44 7c       	andi	r20, 0xC4	; 196
     166:	00 00       	nop
     168:	08 04       	cpc	r0, r8
     16a:	08 00       	.word	0x0008	; ????
     16c:	80 80       	ld	r8, Z
     16e:	80 00       	.word	0x0080	; ????
     170:	00 04       	cpc	r0, r0
     172:	08 00       	.word	0x0008	; ????
     174:	30 48       	sbci	r19, 0x80	; 128
     176:	78 00       	.word	0x0078	; ????
     178:	7c 48       	sbci	r23, 0x8C	; 140
     17a:	30 00       	.word	0x0030	; ????
     17c:	30 48       	sbci	r19, 0x80	; 128
     17e:	48 00       	.word	0x0048	; ????
     180:	30 48       	sbci	r19, 0x80	; 128
     182:	7c 00       	.word	0x007c	; ????
     184:	30 68       	ori	r19, 0x80	; 128
     186:	50 00       	.word	0x0050	; ????
     188:	10 78       	andi	r17, 0x80	; 128
     18a:	14 00       	.word	0x0014	; ????
     18c:	90 a8       	ldd	r9, Z+48	; 0x30
     18e:	78 00       	.word	0x0078	; ????
     190:	7c 08       	sbc	r7, r12
     192:	70 00       	.word	0x0070	; ????
     194:	50 74       	andi	r21, 0x40	; 64
     196:	40 00       	.word	0x0040	; ????
     198:	80 80       	ld	r8, Z
     19a:	74 00       	.word	0x0074	; ????
     19c:	7c 10       	cpse	r7, r12
     19e:	68 00       	.word	0x0068	; ????
     1a0:	44 7c       	andi	r20, 0xC4	; 196
     1a2:	40 00       	.word	0x0040	; ????
     1a4:	78 10       	cpse	r7, r8
     1a6:	78 00       	.word	0x0078	; ????
     1a8:	78 08       	sbc	r7, r8
     1aa:	70 00       	.word	0x0070	; ????
     1ac:	30 48       	sbci	r19, 0x80	; 128
     1ae:	30 00       	.word	0x0030	; ????
     1b0:	f8 28       	or	r15, r8
     1b2:	10 00       	.word	0x0010	; ????
     1b4:	30 48       	sbci	r19, 0x80	; 128
     1b6:	f8 00       	.word	0x00f8	; ????
     1b8:	78 10       	cpse	r7, r8
     1ba:	08 00       	.word	0x0008	; ????
     1bc:	50 58       	subi	r21, 0x80	; 128
     1be:	28 00       	.word	0x0028	; ????
     1c0:	08 3c       	cpi	r16, 0xC8	; 200
     1c2:	48 00       	.word	0x0048	; ????
     1c4:	38 40       	sbci	r19, 0x08	; 8
     1c6:	78 00       	.word	0x0078	; ????
     1c8:	38 40       	sbci	r19, 0x08	; 8
     1ca:	38 00       	.word	0x0038	; ????
     1cc:	78 20       	and	r7, r8
     1ce:	78 00       	.word	0x0078	; ????
     1d0:	48 30       	cpi	r20, 0x08	; 8
     1d2:	48 00       	.word	0x0048	; ????
     1d4:	98 a0       	ldd	r9, Y+32	; 0x20
     1d6:	78 00       	.word	0x0078	; ????
     1d8:	48 68       	ori	r20, 0x88	; 136
     1da:	58 00       	.word	0x0058	; ????
     1dc:	10 78       	andi	r17, 0x80	; 128
     1de:	84 00       	.word	0x0084	; ????
     1e0:	00 7c       	andi	r16, 0xC0	; 192
     1e2:	00 00       	nop
     1e4:	84 78       	andi	r24, 0x84	; 132
     1e6:	10 00       	.word	0x0010	; ????
     1e8:	08 04       	cpc	r0, r8
     1ea:	08 04       	cpc	r0, r8

000001ec <__ctors_end>:
     1ec:	11 24       	eor	r1, r1
     1ee:	1f be       	out	0x3f, r1	; 63
     1f0:	cf ef       	ldi	r28, 0xFF	; 255
     1f2:	d4 e0       	ldi	r29, 0x04	; 4
     1f4:	de bf       	out	0x3e, r29	; 62
     1f6:	cd bf       	out	0x3d, r28	; 61

000001f8 <__do_copy_data>:
     1f8:	12 e0       	ldi	r17, 0x02	; 2
     1fa:	a0 e0       	ldi	r26, 0x00	; 0
     1fc:	b1 e0       	ldi	r27, 0x01	; 1
     1fe:	ea e1       	ldi	r30, 0x1A	; 26
     200:	fe e1       	ldi	r31, 0x1E	; 30
     202:	02 c0       	rjmp	.+4      	; 0x208 <__do_copy_data+0x10>
     204:	05 90       	lpm	r0, Z+
     206:	0d 92       	st	X+, r0
     208:	a0 35       	cpi	r26, 0x50	; 80
     20a:	b1 07       	cpc	r27, r17
     20c:	d9 f7       	brne	.-10     	; 0x204 <__do_copy_data+0xc>

0000020e <__do_clear_bss>:
     20e:	22 e0       	ldi	r18, 0x02	; 2
     210:	a0 e5       	ldi	r26, 0x50	; 80
     212:	b2 e0       	ldi	r27, 0x02	; 2
     214:	01 c0       	rjmp	.+2      	; 0x218 <.do_clear_bss_start>

00000216 <.do_clear_bss_loop>:
     216:	1d 92       	st	X+, r1

00000218 <.do_clear_bss_start>:
     218:	af 35       	cpi	r26, 0x5F	; 95
     21a:	b2 07       	cpc	r27, r18
     21c:	e1 f7       	brne	.-8      	; 0x216 <.do_clear_bss_loop>
     21e:	0e 94 7e 06 	call	0xcfc	; 0xcfc <main>
     222:	0c 94 0b 0f 	jmp	0x1e16	; 0x1e16 <_exit>

00000226 <__bad_interrupt>:
     226:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000022a <ADC_Convert>:

uint8_t ADC_Convert(uint8_t channel)
{
	/* Start conversion on the selected channel: write on command pins */
	volatile char* adc = (char *) ADC;
	adc[0] = channel;
     22a:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     22e:	83 ef       	ldi	r24, 0xF3	; 243
     230:	91 e0       	ldi	r25, 0x01	; 1
     232:	01 97       	sbiw	r24, 0x01	; 1
     234:	f1 f7       	brne	.-4      	; 0x232 <ADC_Convert+0x8>
     236:	00 c0       	rjmp	.+0      	; 0x238 <ADC_Convert+0xe>
     238:	00 00       	nop
	/* Wait for the conversion to be performed */
	_delay_ms(2);
	/* Read the result */
	return adc[0];
     23a:	80 91 00 14 	lds	r24, 0x1400
}
     23e:	08 95       	ret

00000240 <CAN_init>:
#include "MCP251DEFS.h"
#include "CAN.h"

void CAN_init()
{
	SPI_init();
     240:	0e 94 37 08 	call	0x106e	; 0x106e <SPI_init>
	MCP2515_reset();
     244:	0e 94 aa 03 	call	0x754	; 0x754 <MCP2515_reset>
     248:	87 ea       	ldi	r24, 0xA7	; 167
     24a:	91 e6       	ldi	r25, 0x61	; 97
     24c:	01 97       	sbiw	r24, 0x01	; 1
     24e:	f1 f7       	brne	.-4      	; 0x24c <CAN_init+0xc>
     250:	00 c0       	rjmp	.+0      	; 0x252 <CAN_init+0x12>
     252:	00 00       	nop
	_delay_ms(100);
	
	uint8_t	value;
	
	/* Normal mode */
	MCP2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	60 ee       	ldi	r22, 0xE0	; 224
     258:	8f e0       	ldi	r24, 0x0F	; 15
     25a:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <MCP2515_bit_modify>
	
	value = MCP2515_read(MCP_CANSTAT);
     25e:	8e e0       	ldi	r24, 0x0E	; 14
     260:	0e 94 b2 03 	call	0x764	; 0x764 <MCP2515_read>
	if ((value & MODE_MASK)  != MODE_NORMAL) {
     264:	80 7e       	andi	r24, 0xE0	; 224
     266:	21 f0       	breq	.+8      	; 0x270 <CAN_init+0x30>
		printf("MCP2515 is in normal mode \n");
     268:	88 e0       	ldi	r24, 0x08	; 8
     26a:	91 e0       	ldi	r25, 0x01	; 1
     26c:	0e 94 c3 0a 	call	0x1586	; 0x1586 <puts>
	}
	
	/* Enable interrupts */
	MCP2515_bit_modify(MCP_CANINTE, 0b00000001, 0b00000001);
     270:	41 e0       	ldi	r20, 0x01	; 1
     272:	61 e0       	ldi	r22, 0x01	; 1
     274:	8b e2       	ldi	r24, 0x2B	; 43
     276:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <MCP2515_bit_modify>
     27a:	08 95       	ret

0000027c <CAN_send>:
}

void CAN_send(MSG* message)
{	
     27c:	ef 92       	push	r14
     27e:	ff 92       	push	r15
     280:	0f 93       	push	r16
     282:	1f 93       	push	r17
     284:	cf 93       	push	r28
     286:	df 93       	push	r29
     288:	7c 01       	movw	r14, r24
	/* Wait until the previous message is sent */
	while(MCP2515_read(MCP_TXB0CTRL) & 0x04 == 0x4)
     28a:	80 e3       	ldi	r24, 0x30	; 48
     28c:	0e 94 b2 03 	call	0x764	; 0x764 <MCP2515_read>
     290:	80 fd       	sbrc	r24, 0
     292:	fb cf       	rjmp	.-10     	; 0x28a <CAN_send+0xe>
		;
	
	/* Write ID */
	int ID_l = (message->ID & 0x07) << 5;
     294:	f7 01       	movw	r30, r14
     296:	40 81       	ld	r20, Z
     298:	51 81       	ldd	r21, Z+1	; 0x01
     29a:	44 0f       	add	r20, r20
     29c:	55 1f       	adc	r21, r21
     29e:	42 95       	swap	r20
     2a0:	52 95       	swap	r21
     2a2:	50 7f       	andi	r21, 0xF0	; 240
     2a4:	54 27       	eor	r21, r20
     2a6:	40 7f       	andi	r20, 0xF0	; 240
     2a8:	54 27       	eor	r21, r20
     2aa:	55 27       	eor	r21, r21
	MCP2515_bit_modify(MCP_TXB0SIDL,0xE0,ID_l);
     2ac:	60 ee       	ldi	r22, 0xE0	; 224
     2ae:	82 e3       	ldi	r24, 0x32	; 50
     2b0:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <MCP2515_bit_modify>
	
	int ID_h = (message->ID & 0xFFF8) >> 3;
     2b4:	f7 01       	movw	r30, r14
     2b6:	60 81       	ld	r22, Z
     2b8:	71 81       	ldd	r23, Z+1	; 0x01
     2ba:	76 95       	lsr	r23
     2bc:	67 95       	ror	r22
     2be:	76 95       	lsr	r23
     2c0:	67 95       	ror	r22
     2c2:	76 95       	lsr	r23
     2c4:	67 95       	ror	r22
	MCP2515_write(MCP_TXB0SIDH,ID_h);
     2c6:	81 e3       	ldi	r24, 0x31	; 49
     2c8:	0e 94 c4 03 	call	0x788	; 0x788 <MCP2515_write>
	
	/* Write data length */
	int length = message->length;
	MCP2515_bit_modify(MCP_TXB0DLC,0x0F,length);
     2cc:	f7 01       	movw	r30, r14
     2ce:	42 81       	ldd	r20, Z+2	; 0x02
     2d0:	6f e0       	ldi	r22, 0x0F	; 15
     2d2:	85 e3       	ldi	r24, 0x35	; 53
     2d4:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <MCP2515_bit_modify>
	
	/* Write the message in the chosen buffer */
	for (int i=0; i<message->length; i++)
     2d8:	f7 01       	movw	r30, r14
     2da:	82 81       	ldd	r24, Z+2	; 0x02
     2dc:	93 81       	ldd	r25, Z+3	; 0x03
     2de:	18 16       	cp	r1, r24
     2e0:	19 06       	cpc	r1, r25
     2e2:	9c f4       	brge	.+38     	; 0x30a <CAN_send+0x8e>
     2e4:	87 01       	movw	r16, r14
     2e6:	0c 5f       	subi	r16, 0xFC	; 252
     2e8:	1f 4f       	sbci	r17, 0xFF	; 255
     2ea:	c0 e0       	ldi	r28, 0x00	; 0
     2ec:	d0 e0       	ldi	r29, 0x00	; 0
	{
		MCP2515_write(MCP_TXB0D0+i,message->data[i]);
     2ee:	f8 01       	movw	r30, r16
     2f0:	61 91       	ld	r22, Z+
     2f2:	8f 01       	movw	r16, r30
     2f4:	8c 2f       	mov	r24, r28
     2f6:	8a 5c       	subi	r24, 0xCA	; 202
     2f8:	0e 94 c4 03 	call	0x788	; 0x788 <MCP2515_write>
	/* Write data length */
	int length = message->length;
	MCP2515_bit_modify(MCP_TXB0DLC,0x0F,length);
	
	/* Write the message in the chosen buffer */
	for (int i=0; i<message->length; i++)
     2fc:	21 96       	adiw	r28, 0x01	; 1
     2fe:	f7 01       	movw	r30, r14
     300:	22 81       	ldd	r18, Z+2	; 0x02
     302:	33 81       	ldd	r19, Z+3	; 0x03
     304:	c2 17       	cp	r28, r18
     306:	d3 07       	cpc	r29, r19
     308:	94 f3       	brlt	.-28     	; 0x2ee <CAN_send+0x72>
	{
		MCP2515_write(MCP_TXB0D0+i,message->data[i]);
	}
	
	MCP2515_request_to_send();
     30a:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <MCP2515_request_to_send>
}
     30e:	df 91       	pop	r29
     310:	cf 91       	pop	r28
     312:	1f 91       	pop	r17
     314:	0f 91       	pop	r16
     316:	ff 90       	pop	r15
     318:	ef 90       	pop	r14
     31a:	08 95       	ret

0000031c <CAN_receive>:

MSG CAN_receive()
{
     31c:	8f 92       	push	r8
     31e:	9f 92       	push	r9
     320:	af 92       	push	r10
     322:	bf 92       	push	r11
     324:	cf 92       	push	r12
     326:	df 92       	push	r13
     328:	ef 92       	push	r14
     32a:	ff 92       	push	r15
     32c:	0f 93       	push	r16
     32e:	1f 93       	push	r17
     330:	cf 93       	push	r28
     332:	df 93       	push	r29
     334:	cd b7       	in	r28, 0x3d	; 61
     336:	de b7       	in	r29, 0x3e	; 62
     338:	2c 97       	sbiw	r28, 0x0c	; 12
     33a:	0f b6       	in	r0, 0x3f	; 63
     33c:	f8 94       	cli
     33e:	de bf       	out	0x3e, r29	; 62
     340:	0f be       	out	0x3f, r0	; 63
     342:	cd bf       	out	0x3d, r28	; 61
     344:	5c 01       	movw	r10, r24
	/* Check if there is a message */
	if(MCP2515_read(MCP_CANINTF) & 0x01 == 0x1){
     346:	8c e2       	ldi	r24, 0x2C	; 44
     348:	0e 94 b2 03 	call	0x764	; 0x764 <MCP2515_read>
     34c:	80 ff       	sbrs	r24, 0
     34e:	46 c0       	rjmp	.+140    	; 0x3dc <CAN_receive+0xc0>
		MSG message;
		
		int ID_l = MCP2515_read(MCP_RXB0SIDL);
     350:	82 e6       	ldi	r24, 0x62	; 98
     352:	0e 94 b2 03 	call	0x764	; 0x764 <MCP2515_read>
     356:	18 2f       	mov	r17, r24
		int ID_h = MCP2515_read(MCP_RXB0SIDH);
     358:	81 e6       	ldi	r24, 0x61	; 97
     35a:	0e 94 b2 03 	call	0x764	; 0x764 <MCP2515_read>
{
	/* Check if there is a message */
	if(MCP2515_read(MCP_CANINTF) & 0x01 == 0x1){
		MSG message;
		
		int ID_l = MCP2515_read(MCP_RXB0SIDL);
     35e:	21 2f       	mov	r18, r17
     360:	30 e0       	ldi	r19, 0x00	; 0
		int ID_h = MCP2515_read(MCP_RXB0SIDH);
		message.ID = ((ID_h << 3) + ((ID_l >> 5) & 0x7)) & 0xFF;
     362:	36 95       	lsr	r19
     364:	27 95       	ror	r18
     366:	32 95       	swap	r19
     368:	22 95       	swap	r18
     36a:	2f 70       	andi	r18, 0x0F	; 15
     36c:	23 27       	eor	r18, r19
     36e:	3f 70       	andi	r19, 0x0F	; 15
     370:	23 27       	eor	r18, r19
     372:	98 e0       	ldi	r25, 0x08	; 8
     374:	89 9f       	mul	r24, r25
     376:	20 0d       	add	r18, r0
     378:	31 1d       	adc	r19, r1
     37a:	11 24       	eor	r1, r1
     37c:	49 01       	movw	r8, r18
     37e:	99 24       	eor	r9, r9
		
		int length = MCP2515_read(MCP_RXB0DLC) & 0x0F;
     380:	85 e6       	ldi	r24, 0x65	; 101
     382:	0e 94 b2 03 	call	0x764	; 0x764 <MCP2515_read>
     386:	8f 70       	andi	r24, 0x0F	; 15
     388:	c8 2e       	mov	r12, r24
     38a:	d1 2c       	mov	r13, r1
     38c:	7e 01       	movw	r14, r28
     38e:	e5 e0       	ldi	r30, 0x05	; 5
     390:	ee 0e       	add	r14, r30
     392:	f1 1c       	adc	r15, r1
		message.length = length;
		
		for (int i=0; i < length || i < 8; i++)
     394:	00 e0       	ldi	r16, 0x00	; 0
     396:	10 e0       	ldi	r17, 0x00	; 0
     398:	09 c0       	rjmp	.+18     	; 0x3ac <CAN_receive+0x90>
		{
			message.data[i] = MCP2515_read(MCP_RXB0D0+i);
     39a:	86 e6       	ldi	r24, 0x66	; 102
     39c:	80 0f       	add	r24, r16
     39e:	0e 94 b2 03 	call	0x764	; 0x764 <MCP2515_read>
     3a2:	f7 01       	movw	r30, r14
     3a4:	81 93       	st	Z+, r24
     3a6:	7f 01       	movw	r14, r30
		message.ID = ((ID_h << 3) + ((ID_l >> 5) & 0x7)) & 0xFF;
		
		int length = MCP2515_read(MCP_RXB0DLC) & 0x0F;
		message.length = length;
		
		for (int i=0; i < length || i < 8; i++)
     3a8:	0f 5f       	subi	r16, 0xFF	; 255
     3aa:	1f 4f       	sbci	r17, 0xFF	; 255
     3ac:	0c 15       	cp	r16, r12
     3ae:	1d 05       	cpc	r17, r13
     3b0:	a4 f3       	brlt	.-24     	; 0x39a <CAN_receive+0x7e>
     3b2:	08 30       	cpi	r16, 0x08	; 8
     3b4:	11 05       	cpc	r17, r1
     3b6:	8c f3       	brlt	.-30     	; 0x39a <CAN_receive+0x7e>
		{
			message.data[i] = MCP2515_read(MCP_RXB0D0+i);
		}
		
		MCP2515_bit_modify(MCP_CANINTF,0b00000001,0b00000000);
     3b8:	40 e0       	ldi	r20, 0x00	; 0
     3ba:	61 e0       	ldi	r22, 0x01	; 1
     3bc:	8c e2       	ldi	r24, 0x2C	; 44
     3be:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <MCP2515_bit_modify>
		
		return message;
     3c2:	9a 82       	std	Y+2, r9	; 0x02
     3c4:	89 82       	std	Y+1, r8	; 0x01
     3c6:	dc 82       	std	Y+4, r13	; 0x04
     3c8:	cb 82       	std	Y+3, r12	; 0x03
     3ca:	8c e0       	ldi	r24, 0x0C	; 12
     3cc:	fe 01       	movw	r30, r28
     3ce:	31 96       	adiw	r30, 0x01	; 1
     3d0:	d5 01       	movw	r26, r10
     3d2:	01 90       	ld	r0, Z+
     3d4:	0d 92       	st	X+, r0
     3d6:	8a 95       	dec	r24
     3d8:	e1 f7       	brne	.-8      	; 0x3d2 <CAN_receive+0xb6>
     3da:	00 c0       	rjmp	.+0      	; 0x3dc <CAN_receive+0xc0>
	}
	else return;
     3dc:	c5 01       	movw	r24, r10
     3de:	2c 96       	adiw	r28, 0x0c	; 12
     3e0:	0f b6       	in	r0, 0x3f	; 63
     3e2:	f8 94       	cli
     3e4:	de bf       	out	0x3e, r29	; 62
     3e6:	0f be       	out	0x3f, r0	; 63
     3e8:	cd bf       	out	0x3d, r28	; 61
     3ea:	df 91       	pop	r29
     3ec:	cf 91       	pop	r28
     3ee:	1f 91       	pop	r17
     3f0:	0f 91       	pop	r16
     3f2:	ff 90       	pop	r15
     3f4:	ef 90       	pop	r14
     3f6:	df 90       	pop	r13
     3f8:	cf 90       	pop	r12
     3fa:	bf 90       	pop	r11
     3fc:	af 90       	pop	r10
     3fe:	9f 90       	pop	r9
     400:	8f 90       	pop	r8
     402:	08 95       	ret

00000404 <draw_home>:
#include "OLED.h"
#include "Framework.h"

void draw_home()
{
	OLED_reset();
     404:	0e 94 17 07 	call	0xe2e	; 0xe2e <OLED_reset>
	OLED_pos(1, 4);
     408:	64 e0       	ldi	r22, 0x04	; 4
     40a:	81 e0       	ldi	r24, 0x01	; 1
     40c:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
	OLED_print_string("Welcome to the best ping pong");
     410:	83 e2       	ldi	r24, 0x23	; 35
     412:	91 e0       	ldi	r25, 0x01	; 1
     414:	0e 94 c0 07 	call	0xf80	; 0xf80 <OLED_print_string>
	OLED_pos(3, 28);
     418:	6c e1       	ldi	r22, 0x1C	; 28
     41a:	83 e0       	ldi	r24, 0x03	; 3
     41c:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
	OLED_print_string("game in the world!");
     420:	81 e4       	ldi	r24, 0x41	; 65
     422:	91 e0       	ldi	r25, 0x01	; 1
     424:	0e 94 c0 07 	call	0xf80	; 0xf80 <OLED_print_string>
	OLED_pos(7, 20);
     428:	64 e1       	ldi	r22, 0x14	; 20
     42a:	87 e0       	ldi	r24, 0x07	; 7
     42c:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
	OLED_print_string("Touch right to start!");
     430:	84 e5       	ldi	r24, 0x54	; 84
     432:	91 e0       	ldi	r25, 0x01	; 1
     434:	0e 94 c0 07 	call	0xf80	; 0xf80 <OLED_print_string>
     438:	08 95       	ret

0000043a <draw_main_menu>:
}

void draw_main_menu()
{
	OLED_reset();
     43a:	0e 94 17 07 	call	0xe2e	; 0xe2e <OLED_reset>
	OLED_pos(0, 46);
     43e:	6e e2       	ldi	r22, 0x2E	; 46
     440:	80 e0       	ldi	r24, 0x00	; 0
     442:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
	OLED_print_string("Main menu");	
     446:	8a e6       	ldi	r24, 0x6A	; 106
     448:	91 e0       	ldi	r25, 0x01	; 1
     44a:	0e 94 c0 07 	call	0xf80	; 0xf80 <OLED_print_string>
	OLED_pos(2, 8);
     44e:	68 e0       	ldi	r22, 0x08	; 8
     450:	82 e0       	ldi	r24, 0x02	; 2
     452:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
	OLED_print_arrow();
     456:	0e 94 de 07 	call	0xfbc	; 0xfbc <OLED_print_arrow>
	OLED_pos(2, 20);
     45a:	64 e1       	ldi	r22, 0x14	; 20
     45c:	82 e0       	ldi	r24, 0x02	; 2
     45e:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
	OLED_print_string("One-player mode");
     462:	84 e7       	ldi	r24, 0x74	; 116
     464:	91 e0       	ldi	r25, 0x01	; 1
     466:	0e 94 c0 07 	call	0xf80	; 0xf80 <OLED_print_string>
	OLED_pos(3, 20);
     46a:	64 e1       	ldi	r22, 0x14	; 20
     46c:	83 e0       	ldi	r24, 0x03	; 3
     46e:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
	OLED_print_string("Two-players mode");
     472:	84 e8       	ldi	r24, 0x84	; 132
     474:	91 e0       	ldi	r25, 0x01	; 1
     476:	0e 94 c0 07 	call	0xf80	; 0xf80 <OLED_print_string>
	OLED_pos(4, 20);
     47a:	64 e1       	ldi	r22, 0x14	; 20
     47c:	84 e0       	ldi	r24, 0x04	; 4
     47e:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
	OLED_print_string("Highscores");
     482:	85 e9       	ldi	r24, 0x95	; 149
     484:	91 e0       	ldi	r25, 0x01	; 1
     486:	0e 94 c0 07 	call	0xf80	; 0xf80 <OLED_print_string>
	OLED_pos(5, 20);
     48a:	64 e1       	ldi	r22, 0x14	; 20
     48c:	85 e0       	ldi	r24, 0x05	; 5
     48e:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
	OLED_print_string("Settings");
     492:	80 ea       	ldi	r24, 0xA0	; 160
     494:	91 e0       	ldi	r25, 0x01	; 1
     496:	0e 94 c0 07 	call	0xf80	; 0xf80 <OLED_print_string>
	OLED_pos(7, 48);
     49a:	60 e3       	ldi	r22, 0x30	; 48
     49c:	87 e0       	ldi	r24, 0x07	; 7
     49e:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
	OLED_print_string("Touch right to enter");
     4a2:	89 ea       	ldi	r24, 0xA9	; 169
     4a4:	91 e0       	ldi	r25, 0x01	; 1
     4a6:	0e 94 c0 07 	call	0xf80	; 0xf80 <OLED_print_string>
	OLED_pos(7,0);
     4aa:	60 e0       	ldi	r22, 0x00	; 0
     4ac:	87 e0       	ldi	r24, 0x07	; 7
     4ae:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
	OLED_print_home();
     4b2:	0e 94 f5 07 	call	0xfea	; 0xfea <OLED_print_home>
     4b6:	08 95       	ret

000004b8 <draw_one_player>:
}

void draw_one_player()
{
	OLED_reset();
     4b8:	0e 94 17 07 	call	0xe2e	; 0xe2e <OLED_reset>
	OLED_pos(0, 32);
     4bc:	60 e2       	ldi	r22, 0x20	; 32
     4be:	80 e0       	ldi	r24, 0x00	; 0
     4c0:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
	OLED_print_string("One-player mode");
     4c4:	84 e7       	ldi	r24, 0x74	; 116
     4c6:	91 e0       	ldi	r25, 0x01	; 1
     4c8:	0e 94 c0 07 	call	0xf80	; 0xf80 <OLED_print_string>
	OLED_print_woman(3,58);
     4cc:	6a e3       	ldi	r22, 0x3A	; 58
     4ce:	83 e0       	ldi	r24, 0x03	; 3
     4d0:	0e 94 05 08 	call	0x100a	; 0x100a <OLED_print_woman>
	OLED_pos(7,0);
     4d4:	60 e0       	ldi	r22, 0x00	; 0
     4d6:	87 e0       	ldi	r24, 0x07	; 7
     4d8:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
	OLED_print_home();
     4dc:	0e 94 f5 07 	call	0xfea	; 0xfea <OLED_print_home>
     4e0:	08 95       	ret

000004e2 <draw_two_players>:
}

void draw_two_players()
{
	OLED_reset();
     4e2:	0e 94 17 07 	call	0xe2e	; 0xe2e <OLED_reset>
	OLED_pos(0, 32);
     4e6:	60 e2       	ldi	r22, 0x20	; 32
     4e8:	80 e0       	ldi	r24, 0x00	; 0
     4ea:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
	OLED_print_string("Two-players mode");
     4ee:	84 e8       	ldi	r24, 0x84	; 132
     4f0:	91 e0       	ldi	r25, 0x01	; 1
     4f2:	0e 94 c0 07 	call	0xf80	; 0xf80 <OLED_print_string>
	OLED_print_woman(3,29);
     4f6:	6d e1       	ldi	r22, 0x1D	; 29
     4f8:	83 e0       	ldi	r24, 0x03	; 3
     4fa:	0e 94 05 08 	call	0x100a	; 0x100a <OLED_print_woman>
	OLED_print_woman(3,87);
     4fe:	67 e5       	ldi	r22, 0x57	; 87
     500:	83 e0       	ldi	r24, 0x03	; 3
     502:	0e 94 05 08 	call	0x100a	; 0x100a <OLED_print_woman>
	OLED_pos(7,0);
     506:	60 e0       	ldi	r22, 0x00	; 0
     508:	87 e0       	ldi	r24, 0x07	; 7
     50a:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
	OLED_print_home();
     50e:	0e 94 f5 07 	call	0xfea	; 0xfea <OLED_print_home>
     512:	08 95       	ret

00000514 <draw_highscores>:
}

void draw_highscores()
{
	OLED_reset();
     514:	0e 94 17 07 	call	0xe2e	; 0xe2e <OLED_reset>
	OLED_pos(0, 44);
     518:	6c e2       	ldi	r22, 0x2C	; 44
     51a:	80 e0       	ldi	r24, 0x00	; 0
     51c:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
	OLED_print_string("Highscores");
     520:	85 e9       	ldi	r24, 0x95	; 149
     522:	91 e0       	ldi	r25, 0x01	; 1
     524:	0e 94 c0 07 	call	0xf80	; 0xf80 <OLED_print_string>
	OLED_pos(2, 20);
     528:	64 e1       	ldi	r22, 0x14	; 20
     52a:	82 e0       	ldi	r24, 0x02	; 2
     52c:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
	OLED_print_string("1. 650 points");
     530:	8e eb       	ldi	r24, 0xBE	; 190
     532:	91 e0       	ldi	r25, 0x01	; 1
     534:	0e 94 c0 07 	call	0xf80	; 0xf80 <OLED_print_string>
	OLED_pos(3, 20);
     538:	64 e1       	ldi	r22, 0x14	; 20
     53a:	83 e0       	ldi	r24, 0x03	; 3
     53c:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
	OLED_print_string("2. 422 points");
     540:	8c ec       	ldi	r24, 0xCC	; 204
     542:	91 e0       	ldi	r25, 0x01	; 1
     544:	0e 94 c0 07 	call	0xf80	; 0xf80 <OLED_print_string>
	OLED_pos(4, 20);
     548:	64 e1       	ldi	r22, 0x14	; 20
     54a:	84 e0       	ldi	r24, 0x04	; 4
     54c:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
	OLED_print_string("3. 200 points");
     550:	8a ed       	ldi	r24, 0xDA	; 218
     552:	91 e0       	ldi	r25, 0x01	; 1
     554:	0e 94 c0 07 	call	0xf80	; 0xf80 <OLED_print_string>
	OLED_pos(7,0);
     558:	60 e0       	ldi	r22, 0x00	; 0
     55a:	87 e0       	ldi	r24, 0x07	; 7
     55c:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
	OLED_print_home();
     560:	0e 94 f5 07 	call	0xfea	; 0xfea <OLED_print_home>
     564:	08 95       	ret

00000566 <draw_settings>:
}

void draw_settings()
{
	OLED_reset();
     566:	0e 94 17 07 	call	0xe2e	; 0xe2e <OLED_reset>
	OLED_pos(0, 48);
     56a:	60 e3       	ldi	r22, 0x30	; 48
     56c:	80 e0       	ldi	r24, 0x00	; 0
     56e:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
	OLED_print_string("Settings");
     572:	80 ea       	ldi	r24, 0xA0	; 160
     574:	91 e0       	ldi	r25, 0x01	; 1
     576:	0e 94 c0 07 	call	0xf80	; 0xf80 <OLED_print_string>
	OLED_pos(2, 8);
     57a:	68 e0       	ldi	r22, 0x08	; 8
     57c:	82 e0       	ldi	r24, 0x02	; 2
     57e:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
	OLED_print_arrow();
     582:	0e 94 de 07 	call	0xfbc	; 0xfbc <OLED_print_arrow>
	OLED_pos(2, 20);
     586:	64 e1       	ldi	r22, 0x14	; 20
     588:	82 e0       	ldi	r24, 0x02	; 2
     58a:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
	OLED_print_string("Brightness");
     58e:	88 ee       	ldi	r24, 0xE8	; 232
     590:	91 e0       	ldi	r25, 0x01	; 1
     592:	0e 94 c0 07 	call	0xf80	; 0xf80 <OLED_print_string>
	OLED_pos(3, 20);
     596:	64 e1       	ldi	r22, 0x14	; 20
     598:	83 e0       	ldi	r24, 0x03	; 3
     59a:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
	OLED_print_string("Sound");
     59e:	83 ef       	ldi	r24, 0xF3	; 243
     5a0:	91 e0       	ldi	r25, 0x01	; 1
     5a2:	0e 94 c0 07 	call	0xf80	; 0xf80 <OLED_print_string>
	OLED_pos(7,0);
     5a6:	60 e0       	ldi	r22, 0x00	; 0
     5a8:	87 e0       	ldi	r24, 0x07	; 7
     5aa:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
	OLED_print_home();
     5ae:	0e 94 f5 07 	call	0xfea	; 0xfea <OLED_print_home>
     5b2:	08 95       	ret

000005b4 <draw_brightness>:
}

void draw_brightness()
{
	OLED_reset();
     5b4:	0e 94 17 07 	call	0xe2e	; 0xe2e <OLED_reset>
	OLED_pos(0, 44);
     5b8:	6c e2       	ldi	r22, 0x2C	; 44
     5ba:	80 e0       	ldi	r24, 0x00	; 0
     5bc:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
	OLED_print_string("Brightness");
     5c0:	88 ee       	ldi	r24, 0xE8	; 232
     5c2:	91 e0       	ldi	r25, 0x01	; 1
     5c4:	0e 94 c0 07 	call	0xf80	; 0xf80 <OLED_print_string>
	OLED_pos(5, 0);
     5c8:	60 e0       	ldi	r22, 0x00	; 0
     5ca:	85 e0       	ldi	r24, 0x05	; 5
     5cc:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
	OLED_print_string("Use left slide to set brightness");
     5d0:	89 ef       	ldi	r24, 0xF9	; 249
     5d2:	91 e0       	ldi	r25, 0x01	; 1
     5d4:	0e 94 c0 07 	call	0xf80	; 0xf80 <OLED_print_string>
	OLED_pos(7,0);
     5d8:	60 e0       	ldi	r22, 0x00	; 0
     5da:	87 e0       	ldi	r24, 0x07	; 7
     5dc:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
	OLED_print_home();
     5e0:	0e 94 f5 07 	call	0xfea	; 0xfea <OLED_print_home>
     5e4:	08 95       	ret

000005e6 <Joystick_Position>:

#define JOYSTICK_VERTICAL 0x4
#define JOYSTICK_HORIZONTAL 0x5

Position Joystick_Position()
{
     5e6:	0f 93       	push	r16
     5e8:	1f 93       	push	r17
     5ea:	cf 93       	push	r28
     5ec:	df 93       	push	r29
     5ee:	cd b7       	in	r28, 0x3d	; 61
     5f0:	de b7       	in	r29, 0x3e	; 62
     5f2:	28 97       	sbiw	r28, 0x08	; 8
     5f4:	0f b6       	in	r0, 0x3f	; 63
     5f6:	f8 94       	cli
     5f8:	de bf       	out	0x3e, r29	; 62
     5fa:	0f be       	out	0x3f, r0	; 63
     5fc:	cd bf       	out	0x3d, r28	; 61
	uint8_t joystick_horizontal = ADC_Convert(JOYSTICK_HORIZONTAL);
     5fe:	85 e0       	ldi	r24, 0x05	; 5
     600:	0e 94 15 01 	call	0x22a	; 0x22a <ADC_Convert>
     604:	18 2f       	mov	r17, r24
	uint8_t joystick_vertical = ADC_Convert(JOYSTICK_VERTICAL);
     606:	84 e0       	ldi	r24, 0x04	; 4
     608:	0e 94 15 01 	call	0x22a	; 0x22a <ADC_Convert>
     60c:	08 2f       	mov	r16, r24
	float X = joystick_horizontal;
     60e:	61 2f       	mov	r22, r17
     610:	70 e0       	ldi	r23, 0x00	; 0
     612:	80 e0       	ldi	r24, 0x00	; 0
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	0e 94 5f 09 	call	0x12be	; 0x12be <__floatunsisf>
	float Y = joystick_vertical;
	
	Position joystick;
	joystick.x = (X / 255.0) * 200.0 - 100.0;
     61a:	20 e0       	ldi	r18, 0x00	; 0
     61c:	30 e0       	ldi	r19, 0x00	; 0
     61e:	4f e7       	ldi	r20, 0x7F	; 127
     620:	53 e4       	ldi	r21, 0x43	; 67
     622:	0e 94 cb 08 	call	0x1196	; 0x1196 <__divsf3>
     626:	20 e0       	ldi	r18, 0x00	; 0
     628:	30 e0       	ldi	r19, 0x00	; 0
     62a:	48 e4       	ldi	r20, 0x48	; 72
     62c:	53 e4       	ldi	r21, 0x43	; 67
     62e:	0e 94 15 0a 	call	0x142a	; 0x142a <__mulsf3>
     632:	20 e0       	ldi	r18, 0x00	; 0
     634:	30 e0       	ldi	r19, 0x00	; 0
     636:	48 ec       	ldi	r20, 0xC8	; 200
     638:	52 e4       	ldi	r21, 0x42	; 66
     63a:	0e 94 62 08 	call	0x10c4	; 0x10c4 <__subsf3>
     63e:	48 2f       	mov	r20, r24
     640:	59 2f       	mov	r21, r25
	joystick.y = (Y / 255.0) * 200.0 - 100.0;
	return joystick;
     642:	16 2f       	mov	r17, r22
     644:	86 2f       	mov	r24, r22
     646:	97 2f       	mov	r25, r23
     648:	a4 2f       	mov	r26, r20
     64a:	b5 2f       	mov	r27, r21
     64c:	89 83       	std	Y+1, r24	; 0x01
     64e:	9a 83       	std	Y+2, r25	; 0x02
     650:	ab 83       	std	Y+3, r26	; 0x03
     652:	bc 83       	std	Y+4, r27	; 0x04
Position Joystick_Position()
{
	uint8_t joystick_horizontal = ADC_Convert(JOYSTICK_HORIZONTAL);
	uint8_t joystick_vertical = ADC_Convert(JOYSTICK_VERTICAL);
	float X = joystick_horizontal;
	float Y = joystick_vertical;
     654:	60 2f       	mov	r22, r16
     656:	70 e0       	ldi	r23, 0x00	; 0
     658:	80 e0       	ldi	r24, 0x00	; 0
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	0e 94 5f 09 	call	0x12be	; 0x12be <__floatunsisf>
	
	Position joystick;
	joystick.x = (X / 255.0) * 200.0 - 100.0;
	joystick.y = (Y / 255.0) * 200.0 - 100.0;
     660:	20 e0       	ldi	r18, 0x00	; 0
     662:	30 e0       	ldi	r19, 0x00	; 0
     664:	4f e7       	ldi	r20, 0x7F	; 127
     666:	53 e4       	ldi	r21, 0x43	; 67
     668:	0e 94 cb 08 	call	0x1196	; 0x1196 <__divsf3>
     66c:	20 e0       	ldi	r18, 0x00	; 0
     66e:	30 e0       	ldi	r19, 0x00	; 0
     670:	48 e4       	ldi	r20, 0x48	; 72
     672:	53 e4       	ldi	r21, 0x43	; 67
     674:	0e 94 15 0a 	call	0x142a	; 0x142a <__mulsf3>
     678:	20 e0       	ldi	r18, 0x00	; 0
     67a:	30 e0       	ldi	r19, 0x00	; 0
     67c:	48 ec       	ldi	r20, 0xC8	; 200
     67e:	52 e4       	ldi	r21, 0x42	; 66
     680:	0e 94 62 08 	call	0x10c4	; 0x10c4 <__subsf3>
     684:	e6 2f       	mov	r30, r22
	return joystick;
     686:	46 2f       	mov	r20, r22
     688:	57 2f       	mov	r21, r23
     68a:	68 2f       	mov	r22, r24
     68c:	79 2f       	mov	r23, r25
     68e:	4d 83       	std	Y+5, r20	; 0x05
     690:	5e 83       	std	Y+6, r21	; 0x06
     692:	6f 83       	std	Y+7, r22	; 0x07
     694:	78 87       	std	Y+8, r23	; 0x08
     696:	21 2f       	mov	r18, r17
     698:	3a 81       	ldd	r19, Y+2	; 0x02
     69a:	4b 81       	ldd	r20, Y+3	; 0x03
     69c:	5c 81       	ldd	r21, Y+4	; 0x04
     69e:	6e 2f       	mov	r22, r30
     6a0:	7e 81       	ldd	r23, Y+6	; 0x06
}
     6a2:	8f 81       	ldd	r24, Y+7	; 0x07
     6a4:	98 85       	ldd	r25, Y+8	; 0x08
     6a6:	28 96       	adiw	r28, 0x08	; 8
     6a8:	0f b6       	in	r0, 0x3f	; 63
     6aa:	f8 94       	cli
     6ac:	de bf       	out	0x3e, r29	; 62
     6ae:	0f be       	out	0x3f, r0	; 63
     6b0:	cd bf       	out	0x3d, r28	; 61
     6b2:	df 91       	pop	r29
     6b4:	cf 91       	pop	r28
     6b6:	1f 91       	pop	r17
     6b8:	0f 91       	pop	r16
     6ba:	08 95       	ret

000006bc <Joystick_Direction>:

char* Joystick_Direction(Position* joystick)
{
     6bc:	cf 92       	push	r12
     6be:	df 92       	push	r13
     6c0:	ef 92       	push	r14
     6c2:	ff 92       	push	r15
     6c4:	cf 93       	push	r28
     6c6:	df 93       	push	r29
     6c8:	ec 01       	movw	r28, r24
	if(joystick->x < -71)
     6ca:	c8 80       	ld	r12, Y
     6cc:	d9 80       	ldd	r13, Y+1	; 0x01
     6ce:	ea 80       	ldd	r14, Y+2	; 0x02
     6d0:	fb 80       	ldd	r15, Y+3	; 0x03
     6d2:	20 e0       	ldi	r18, 0x00	; 0
     6d4:	30 e0       	ldi	r19, 0x00	; 0
     6d6:	4e e8       	ldi	r20, 0x8E	; 142
     6d8:	52 ec       	ldi	r21, 0xC2	; 194
     6da:	c7 01       	movw	r24, r14
     6dc:	b6 01       	movw	r22, r12
     6de:	0e 94 c7 08 	call	0x118e	; 0x118e <__cmpsf2>
     6e2:	88 23       	and	r24, r24
     6e4:	2c f1       	brlt	.+74     	; 0x730 <Joystick_Direction+0x74>
	return "LEFT";
	else if(joystick->x > 71)
     6e6:	20 e0       	ldi	r18, 0x00	; 0
     6e8:	30 e0       	ldi	r19, 0x00	; 0
     6ea:	4e e8       	ldi	r20, 0x8E	; 142
     6ec:	52 e4       	ldi	r21, 0x42	; 66
     6ee:	c7 01       	movw	r24, r14
     6f0:	b6 01       	movw	r22, r12
     6f2:	0e 94 11 0a 	call	0x1422	; 0x1422 <__gesf2>
     6f6:	18 16       	cp	r1, r24
     6f8:	f4 f0       	brlt	.+60     	; 0x736 <Joystick_Direction+0x7a>
	return "RIGHT";
	
	if(joystick->y < -71)
     6fa:	cc 80       	ldd	r12, Y+4	; 0x04
     6fc:	dd 80       	ldd	r13, Y+5	; 0x05
     6fe:	ee 80       	ldd	r14, Y+6	; 0x06
     700:	ff 80       	ldd	r15, Y+7	; 0x07
     702:	20 e0       	ldi	r18, 0x00	; 0
     704:	30 e0       	ldi	r19, 0x00	; 0
     706:	4e e8       	ldi	r20, 0x8E	; 142
     708:	52 ec       	ldi	r21, 0xC2	; 194
     70a:	c7 01       	movw	r24, r14
     70c:	b6 01       	movw	r22, r12
     70e:	0e 94 c7 08 	call	0x118e	; 0x118e <__cmpsf2>
     712:	88 23       	and	r24, r24
     714:	9c f0       	brlt	.+38     	; 0x73c <Joystick_Direction+0x80>
	return "DOWN";
	else if(joystick->y > 71)
     716:	20 e0       	ldi	r18, 0x00	; 0
     718:	30 e0       	ldi	r19, 0x00	; 0
     71a:	4e e8       	ldi	r20, 0x8E	; 142
     71c:	52 e4       	ldi	r21, 0x42	; 66
     71e:	c7 01       	movw	r24, r14
     720:	b6 01       	movw	r22, r12
     722:	0e 94 11 0a 	call	0x1422	; 0x1422 <__gesf2>
     726:	18 16       	cp	r1, r24
     728:	64 f4       	brge	.+24     	; 0x742 <Joystick_Direction+0x86>
	return "UP";
     72a:	8a e2       	ldi	r24, 0x2A	; 42
     72c:	92 e0       	ldi	r25, 0x02	; 2
     72e:	0b c0       	rjmp	.+22     	; 0x746 <Joystick_Direction+0x8a>
}

char* Joystick_Direction(Position* joystick)
{
	if(joystick->x < -71)
	return "LEFT";
     730:	8a e1       	ldi	r24, 0x1A	; 26
     732:	92 e0       	ldi	r25, 0x02	; 2
     734:	08 c0       	rjmp	.+16     	; 0x746 <Joystick_Direction+0x8a>
	else if(joystick->x > 71)
	return "RIGHT";
     736:	8f e1       	ldi	r24, 0x1F	; 31
     738:	92 e0       	ldi	r25, 0x02	; 2
     73a:	05 c0       	rjmp	.+10     	; 0x746 <Joystick_Direction+0x8a>
	
	if(joystick->y < -71)
	return "DOWN";
     73c:	85 e2       	ldi	r24, 0x25	; 37
     73e:	92 e0       	ldi	r25, 0x02	; 2
     740:	02 c0       	rjmp	.+4      	; 0x746 <Joystick_Direction+0x8a>
	else if(joystick->y > 71)
	return "UP";
	
	return "NEUTRAL";
     742:	8d e2       	ldi	r24, 0x2D	; 45
     744:	92 e0       	ldi	r25, 0x02	; 2
     746:	df 91       	pop	r29
     748:	cf 91       	pop	r28
     74a:	ff 90       	pop	r15
     74c:	ef 90       	pop	r14
     74e:	df 90       	pop	r13
     750:	cf 90       	pop	r12
     752:	08 95       	ret

00000754 <MCP2515_reset>:
#include "SPI.h"
#include "MCP251DEFS.h"

void MCP2515_reset()
{
	SPI_on();
     754:	0e 94 48 08 	call	0x1090	; 0x1090 <SPI_on>
	SPI_write(MCP_RESET);
     758:	80 ec       	ldi	r24, 0xC0	; 192
     75a:	0e 94 3f 08 	call	0x107e	; 0x107e <SPI_write>
	SPI_off();
     75e:	0e 94 4a 08 	call	0x1094	; 0x1094 <SPI_off>
     762:	08 95       	ret

00000764 <MCP2515_read>:
}

char MCP2515_read(uint8_t address)
{
     764:	cf 93       	push	r28
     766:	c8 2f       	mov	r28, r24
	SPI_on(); 
     768:	0e 94 48 08 	call	0x1090	; 0x1090 <SPI_on>
	SPI_write(MCP_READ);
     76c:	83 e0       	ldi	r24, 0x03	; 3
     76e:	0e 94 3f 08 	call	0x107e	; 0x107e <SPI_write>
	SPI_write(address);
     772:	8c 2f       	mov	r24, r28
     774:	0e 94 3f 08 	call	0x107e	; 0x107e <SPI_write>
	char data = SPI_read();
     778:	0e 94 43 08 	call	0x1086	; 0x1086 <SPI_read>
     77c:	c8 2f       	mov	r28, r24
	SPI_off();
     77e:	0e 94 4a 08 	call	0x1094	; 0x1094 <SPI_off>
	return data;
}
     782:	8c 2f       	mov	r24, r28
     784:	cf 91       	pop	r28
     786:	08 95       	ret

00000788 <MCP2515_write>:

void MCP2515_write(uint8_t address, uint8_t data)
{
     788:	cf 93       	push	r28
     78a:	df 93       	push	r29
     78c:	d8 2f       	mov	r29, r24
     78e:	c6 2f       	mov	r28, r22
	SPI_on();
     790:	0e 94 48 08 	call	0x1090	; 0x1090 <SPI_on>
	SPI_write(MCP_WRITE);
     794:	82 e0       	ldi	r24, 0x02	; 2
     796:	0e 94 3f 08 	call	0x107e	; 0x107e <SPI_write>
	SPI_write(address);
     79a:	8d 2f       	mov	r24, r29
     79c:	0e 94 3f 08 	call	0x107e	; 0x107e <SPI_write>
	SPI_write(data);
     7a0:	8c 2f       	mov	r24, r28
     7a2:	0e 94 3f 08 	call	0x107e	; 0x107e <SPI_write>
	SPI_off();
     7a6:	0e 94 4a 08 	call	0x1094	; 0x1094 <SPI_off>
	
}
     7aa:	df 91       	pop	r29
     7ac:	cf 91       	pop	r28
     7ae:	08 95       	ret

000007b0 <MCP2515_request_to_send>:

void MCP2515_request_to_send()
{
	SPI_on();
     7b0:	0e 94 48 08 	call	0x1090	; 0x1090 <SPI_on>
	SPI_write(MCP_RTS_TX0);
     7b4:	81 e8       	ldi	r24, 0x81	; 129
     7b6:	0e 94 3f 08 	call	0x107e	; 0x107e <SPI_write>
	SPI_off();
     7ba:	0e 94 4a 08 	call	0x1094	; 0x1094 <SPI_off>
     7be:	08 95       	ret

000007c0 <MCP2515_bit_modify>:
	SPI_off();
	return data;
}

void MCP2515_bit_modify(uint8_t address, uint8_t mask, uint8_t data)
{
     7c0:	1f 93       	push	r17
     7c2:	cf 93       	push	r28
     7c4:	df 93       	push	r29
     7c6:	18 2f       	mov	r17, r24
     7c8:	d6 2f       	mov	r29, r22
     7ca:	c4 2f       	mov	r28, r20
	SPI_on();
     7cc:	0e 94 48 08 	call	0x1090	; 0x1090 <SPI_on>
	SPI_write(MCP_BITMOD);
     7d0:	85 e0       	ldi	r24, 0x05	; 5
     7d2:	0e 94 3f 08 	call	0x107e	; 0x107e <SPI_write>
	SPI_write(address);
     7d6:	81 2f       	mov	r24, r17
     7d8:	0e 94 3f 08 	call	0x107e	; 0x107e <SPI_write>
	SPI_write(mask);
     7dc:	8d 2f       	mov	r24, r29
     7de:	0e 94 3f 08 	call	0x107e	; 0x107e <SPI_write>
	SPI_write(data);
     7e2:	8c 2f       	mov	r24, r28
     7e4:	0e 94 3f 08 	call	0x107e	; 0x107e <SPI_write>
	SPI_off();	
     7e8:	0e 94 4a 08 	call	0x1094	; 0x1094 <SPI_off>
     7ec:	df 91       	pop	r29
     7ee:	cf 91       	pop	r28
     7f0:	1f 91       	pop	r17
     7f2:	08 95       	ret

000007f4 <__vector_1>:
int arrow = 2 ;
int i = 0;
uint8_t slide_left;

ISR(INT0_vect)
{
     7f4:	1f 92       	push	r1
     7f6:	0f 92       	push	r0
     7f8:	0f b6       	in	r0, 0x3f	; 63
     7fa:	0f 92       	push	r0
     7fc:	11 24       	eor	r1, r1
     7fe:	2f 93       	push	r18
     800:	3f 93       	push	r19
     802:	4f 93       	push	r20
     804:	5f 93       	push	r21
     806:	6f 93       	push	r22
     808:	7f 93       	push	r23
     80a:	8f 93       	push	r24
     80c:	9f 93       	push	r25
     80e:	af 93       	push	r26
     810:	bf 93       	push	r27
     812:	ef 93       	push	r30
     814:	ff 93       	push	r31
     816:	cf 93       	push	r28
     818:	df 93       	push	r29
     81a:	cd b7       	in	r28, 0x3d	; 61
     81c:	de b7       	in	r29, 0x3e	; 62
     81e:	2c 97       	sbiw	r28, 0x0c	; 12
     820:	de bf       	out	0x3e, r29	; 62
     822:	cd bf       	out	0x3d, r28	; 61
	if(i < 3)
     824:	80 91 50 02 	lds	r24, 0x0250
     828:	90 91 51 02 	lds	r25, 0x0251
     82c:	83 30       	cpi	r24, 0x03	; 3
     82e:	91 05       	cpc	r25, r1
     830:	34 f4       	brge	.+12     	; 0x83e <__vector_1+0x4a>
	{
		i++;
     832:	01 96       	adiw	r24, 0x01	; 1
     834:	90 93 51 02 	sts	0x0251, r25
     838:	80 93 50 02 	sts	0x0250, r24
     83c:	7e c0       	rjmp	.+252    	; 0x93a <__vector_1+0x146>
	}
	else
	{
		if(mode == HOME)
     83e:	80 91 52 02 	lds	r24, 0x0252
     842:	90 91 53 02 	lds	r25, 0x0253
     846:	00 97       	sbiw	r24, 0x00	; 0
     848:	79 f4       	brne	.+30     	; 0x868 <__vector_1+0x74>
		{
			mode = MAIN_MENU;
     84a:	81 e0       	ldi	r24, 0x01	; 1
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	90 93 53 02 	sts	0x0253, r25
     852:	80 93 52 02 	sts	0x0252, r24
			arrow = 2;
     856:	82 e0       	ldi	r24, 0x02	; 2
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	90 93 07 01 	sts	0x0107, r25
     85e:	80 93 06 01 	sts	0x0106, r24
			draw_main_menu();
     862:	0e 94 1d 02 	call	0x43a	; 0x43a <draw_main_menu>
     866:	69 c0       	rjmp	.+210    	; 0x93a <__vector_1+0x146>
		}
		else if(mode == MAIN_MENU && arrow == 2)
     868:	81 30       	cpi	r24, 0x01	; 1
     86a:	91 05       	cpc	r25, r1
     86c:	c9 f5       	brne	.+114    	; 0x8e0 <__vector_1+0xec>
     86e:	80 91 06 01 	lds	r24, 0x0106
     872:	90 91 07 01 	lds	r25, 0x0107
     876:	82 30       	cpi	r24, 0x02	; 2
     878:	91 05       	cpc	r25, r1
     87a:	49 f4       	brne	.+18     	; 0x88e <__vector_1+0x9a>
		{
			mode = ONE_PLAYER;
     87c:	8b e0       	ldi	r24, 0x0B	; 11
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	90 93 53 02 	sts	0x0253, r25
     884:	80 93 52 02 	sts	0x0252, r24
			draw_one_player();
     888:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <draw_one_player>
     88c:	56 c0       	rjmp	.+172    	; 0x93a <__vector_1+0x146>
		}
		else if(mode == MAIN_MENU && arrow == 3)
     88e:	83 30       	cpi	r24, 0x03	; 3
     890:	91 05       	cpc	r25, r1
     892:	49 f4       	brne	.+18     	; 0x8a6 <__vector_1+0xb2>
		{
			mode = TWO_PLAYERS;
     894:	8c e0       	ldi	r24, 0x0C	; 12
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	90 93 53 02 	sts	0x0253, r25
     89c:	80 93 52 02 	sts	0x0252, r24
			draw_two_players();
     8a0:	0e 94 71 02 	call	0x4e2	; 0x4e2 <draw_two_players>
     8a4:	4a c0       	rjmp	.+148    	; 0x93a <__vector_1+0x146>
		}
		else if(mode == MAIN_MENU && arrow == 4)
     8a6:	84 30       	cpi	r24, 0x04	; 4
     8a8:	91 05       	cpc	r25, r1
     8aa:	49 f4       	brne	.+18     	; 0x8be <__vector_1+0xca>
		{
			mode = HIGHSCORES;
     8ac:	8d e0       	ldi	r24, 0x0D	; 13
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	90 93 53 02 	sts	0x0253, r25
     8b4:	80 93 52 02 	sts	0x0252, r24
			draw_highscores();
     8b8:	0e 94 8a 02 	call	0x514	; 0x514 <draw_highscores>
     8bc:	3e c0       	rjmp	.+124    	; 0x93a <__vector_1+0x146>
		}
		else if(mode == MAIN_MENU && arrow == 5)
     8be:	05 97       	sbiw	r24, 0x05	; 5
     8c0:	e1 f5       	brne	.+120    	; 0x93a <__vector_1+0x146>
		{
			mode = SETTINGS;
     8c2:	8e e0       	ldi	r24, 0x0E	; 14
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	90 93 53 02 	sts	0x0253, r25
     8ca:	80 93 52 02 	sts	0x0252, r24
			arrow = 2;
     8ce:	82 e0       	ldi	r24, 0x02	; 2
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	90 93 07 01 	sts	0x0107, r25
     8d6:	80 93 06 01 	sts	0x0106, r24
			draw_settings();
     8da:	0e 94 b3 02 	call	0x566	; 0x566 <draw_settings>
     8de:	2d c0       	rjmp	.+90     	; 0x93a <__vector_1+0x146>
		}
		else if((mode == ONE_PLAYER) || (mode == TWO_PLAYERS))
     8e0:	9c 01       	movw	r18, r24
     8e2:	2b 50       	subi	r18, 0x0B	; 11
     8e4:	31 09       	sbc	r19, r1
     8e6:	22 30       	cpi	r18, 0x02	; 2
     8e8:	31 05       	cpc	r19, r1
     8ea:	a0 f4       	brcc	.+40     	; 0x914 <__vector_1+0x120>
		{
			MSG reset_message;
			reset_message.ID = 3;
     8ec:	83 e0       	ldi	r24, 0x03	; 3
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	9a 83       	std	Y+2, r25	; 0x02
     8f2:	89 83       	std	Y+1, r24	; 0x01
			reset_message.length = 0;
     8f4:	1c 82       	std	Y+4, r1	; 0x04
     8f6:	1b 82       	std	Y+3, r1	; 0x03
			reset_message.data[0] = 0;
     8f8:	1d 82       	std	Y+5, r1	; 0x05
			CAN_send(&reset_message);
     8fa:	ce 01       	movw	r24, r28
     8fc:	01 96       	adiw	r24, 0x01	; 1
     8fe:	0e 94 3e 01 	call	0x27c	; 0x27c <CAN_send>
			OLED_pos(5, 20);
     902:	64 e1       	ldi	r22, 0x14	; 20
     904:	85 e0       	ldi	r24, 0x05	; 5
     906:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
			OLED_print_string("          ");
     90a:	85 e3       	ldi	r24, 0x35	; 53
     90c:	92 e0       	ldi	r25, 0x02	; 2
     90e:	0e 94 c0 07 	call	0xf80	; 0xf80 <OLED_print_string>
     912:	13 c0       	rjmp	.+38     	; 0x93a <__vector_1+0x146>
		}
		else if(mode == SETTINGS && arrow == 2)
     914:	0e 97       	sbiw	r24, 0x0e	; 14
     916:	89 f4       	brne	.+34     	; 0x93a <__vector_1+0x146>
     918:	80 91 06 01 	lds	r24, 0x0106
     91c:	90 91 07 01 	lds	r25, 0x0107
     920:	02 97       	sbiw	r24, 0x02	; 2
     922:	59 f4       	brne	.+22     	; 0x93a <__vector_1+0x146>
		{
			mode = BRIGHTNESS;
     924:	8d e8       	ldi	r24, 0x8D	; 141
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	90 93 53 02 	sts	0x0253, r25
     92c:	80 93 52 02 	sts	0x0252, r24
			draw_brightness(slide_left);
     930:	80 91 54 02 	lds	r24, 0x0254
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	0e 94 da 02 	call	0x5b4	; 0x5b4 <draw_brightness>
		}
	}
}
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	0f b6       	in	r0, 0x3f	; 63
     93e:	f8 94       	cli
     940:	de bf       	out	0x3e, r29	; 62
     942:	0f be       	out	0x3f, r0	; 63
     944:	cd bf       	out	0x3d, r28	; 61
     946:	df 91       	pop	r29
     948:	cf 91       	pop	r28
     94a:	ff 91       	pop	r31
     94c:	ef 91       	pop	r30
     94e:	bf 91       	pop	r27
     950:	af 91       	pop	r26
     952:	9f 91       	pop	r25
     954:	8f 91       	pop	r24
     956:	7f 91       	pop	r23
     958:	6f 91       	pop	r22
     95a:	5f 91       	pop	r21
     95c:	4f 91       	pop	r20
     95e:	3f 91       	pop	r19
     960:	2f 91       	pop	r18
     962:	0f 90       	pop	r0
     964:	0f be       	out	0x3f, r0	; 63
     966:	0f 90       	pop	r0
     968:	1f 90       	pop	r1
     96a:	18 95       	reti

0000096c <__vector_2>:

ISR(INT1_vect)
{
     96c:	1f 92       	push	r1
     96e:	0f 92       	push	r0
     970:	0f b6       	in	r0, 0x3f	; 63
     972:	0f 92       	push	r0
     974:	11 24       	eor	r1, r1
     976:	2f 93       	push	r18
     978:	3f 93       	push	r19
     97a:	4f 93       	push	r20
     97c:	5f 93       	push	r21
     97e:	6f 93       	push	r22
     980:	7f 93       	push	r23
     982:	8f 93       	push	r24
     984:	9f 93       	push	r25
     986:	af 93       	push	r26
     988:	bf 93       	push	r27
     98a:	ef 93       	push	r30
     98c:	ff 93       	push	r31
	if(mode == MAIN_MENU)
     98e:	80 91 52 02 	lds	r24, 0x0252
     992:	90 91 53 02 	lds	r25, 0x0253
     996:	81 30       	cpi	r24, 0x01	; 1
     998:	91 05       	cpc	r25, r1
     99a:	39 f4       	brne	.+14     	; 0x9aa <__vector_2+0x3e>
	{
		mode = HOME;
     99c:	10 92 53 02 	sts	0x0253, r1
     9a0:	10 92 52 02 	sts	0x0252, r1
		draw_home();
     9a4:	0e 94 02 02 	call	0x404	; 0x404 <draw_home>
     9a8:	26 c0       	rjmp	.+76     	; 0x9f6 <__vector_2+0x8a>
	}
	else if(mode == ONE_PLAYER || mode == TWO_PLAYERS || mode == HIGHSCORES || mode == SETTINGS)
     9aa:	9c 01       	movw	r18, r24
     9ac:	2b 50       	subi	r18, 0x0B	; 11
     9ae:	31 09       	sbc	r19, r1
     9b0:	24 30       	cpi	r18, 0x04	; 4
     9b2:	31 05       	cpc	r19, r1
     9b4:	78 f4       	brcc	.+30     	; 0x9d4 <__vector_2+0x68>
	{
		mode = MAIN_MENU;
     9b6:	81 e0       	ldi	r24, 0x01	; 1
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	90 93 53 02 	sts	0x0253, r25
     9be:	80 93 52 02 	sts	0x0252, r24
		arrow = 2;
     9c2:	82 e0       	ldi	r24, 0x02	; 2
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	90 93 07 01 	sts	0x0107, r25
     9ca:	80 93 06 01 	sts	0x0106, r24
		draw_main_menu();
     9ce:	0e 94 1d 02 	call	0x43a	; 0x43a <draw_main_menu>
     9d2:	11 c0       	rjmp	.+34     	; 0x9f6 <__vector_2+0x8a>
	}
	else if(mode == BRIGHTNESS)
     9d4:	8d 38       	cpi	r24, 0x8D	; 141
     9d6:	91 05       	cpc	r25, r1
     9d8:	71 f4       	brne	.+28     	; 0x9f6 <__vector_2+0x8a>
	{
		mode = SETTINGS;
     9da:	8e e0       	ldi	r24, 0x0E	; 14
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	90 93 53 02 	sts	0x0253, r25
     9e2:	80 93 52 02 	sts	0x0252, r24
		arrow = 2;
     9e6:	82 e0       	ldi	r24, 0x02	; 2
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	90 93 07 01 	sts	0x0107, r25
     9ee:	80 93 06 01 	sts	0x0106, r24
		draw_settings();
     9f2:	0e 94 b3 02 	call	0x566	; 0x566 <draw_settings>
	}
}
     9f6:	ff 91       	pop	r31
     9f8:	ef 91       	pop	r30
     9fa:	bf 91       	pop	r27
     9fc:	af 91       	pop	r26
     9fe:	9f 91       	pop	r25
     a00:	8f 91       	pop	r24
     a02:	7f 91       	pop	r23
     a04:	6f 91       	pop	r22
     a06:	5f 91       	pop	r21
     a08:	4f 91       	pop	r20
     a0a:	3f 91       	pop	r19
     a0c:	2f 91       	pop	r18
     a0e:	0f 90       	pop	r0
     a10:	0f be       	out	0x3f, r0	; 63
     a12:	0f 90       	pop	r0
     a14:	1f 90       	pop	r1
     a16:	18 95       	reti

00000a18 <ISR_slide_left>:

void ISR_slide_left()
{
     a18:	cf 93       	push	r28
     a1a:	df 93       	push	r29
	if(mode == BRIGHTNESS)
     a1c:	80 91 52 02 	lds	r24, 0x0252
     a20:	90 91 53 02 	lds	r25, 0x0253
     a24:	8d 38       	cpi	r24, 0x8D	; 141
     a26:	91 05       	cpc	r25, r1
     a28:	39 f5       	brne	.+78     	; 0xa78 <ISR_slide_left+0x60>
	{
		OLED_set_brightness(slide_left);
     a2a:	80 91 54 02 	lds	r24, 0x0254
     a2e:	0e 94 11 07 	call	0xe22	; 0xe22 <OLED_set_brightness>
		OLED_pos(3, 32);
     a32:	60 e2       	ldi	r22, 0x20	; 32
     a34:	83 e0       	ldi	r24, 0x03	; 3
     a36:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
     a3a:	c0 e4       	ldi	r28, 0x40	; 64
     a3c:	d0 e0       	ldi	r29, 0x00	; 0
		for(int i=0; i < 64; i++)
		{
			OLED_write_data(0b00000000);
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	0e 94 0e 07 	call	0xe1c	; 0xe1c <OLED_write_data>
     a44:	21 97       	sbiw	r28, 0x01	; 1
{
	if(mode == BRIGHTNESS)
	{
		OLED_set_brightness(slide_left);
		OLED_pos(3, 32);
		for(int i=0; i < 64; i++)
     a46:	20 97       	sbiw	r28, 0x00	; 0
     a48:	d1 f7       	brne	.-12     	; 0xa3e <ISR_slide_left+0x26>
		{
			OLED_write_data(0b00000000);
		}
		OLED_pos(3, 32);
     a4a:	60 e2       	ldi	r22, 0x20	; 32
     a4c:	83 e0       	ldi	r24, 0x03	; 3
     a4e:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
		for(int i=0; i < slide_left/4; i++)
     a52:	80 91 54 02 	lds	r24, 0x0254
     a56:	86 95       	lsr	r24
     a58:	86 95       	lsr	r24
     a5a:	71 f0       	breq	.+28     	; 0xa78 <ISR_slide_left+0x60>
     a5c:	c0 e0       	ldi	r28, 0x00	; 0
     a5e:	d0 e0       	ldi	r29, 0x00	; 0
		{
			OLED_write_data(0b11111111);
     a60:	8f ef       	ldi	r24, 0xFF	; 255
     a62:	0e 94 0e 07 	call	0xe1c	; 0xe1c <OLED_write_data>
		for(int i=0; i < 64; i++)
		{
			OLED_write_data(0b00000000);
		}
		OLED_pos(3, 32);
		for(int i=0; i < slide_left/4; i++)
     a66:	21 96       	adiw	r28, 0x01	; 1
     a68:	80 91 54 02 	lds	r24, 0x0254
     a6c:	86 95       	lsr	r24
     a6e:	86 95       	lsr	r24
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	c8 17       	cp	r28, r24
     a74:	d9 07       	cpc	r29, r25
     a76:	a4 f3       	brlt	.-24     	; 0xa60 <ISR_slide_left+0x48>
		{
			OLED_write_data(0b11111111);
		}
	}
}
     a78:	df 91       	pop	r29
     a7a:	cf 91       	pop	r28
     a7c:	08 95       	ret

00000a7e <ISR_joystick>:

void ISR_joystick(Position joystick)
{
     a7e:	0f 93       	push	r16
     a80:	1f 93       	push	r17
     a82:	cf 93       	push	r28
     a84:	df 93       	push	r29
     a86:	cd b7       	in	r28, 0x3d	; 61
     a88:	de b7       	in	r29, 0x3e	; 62
     a8a:	e4 97       	sbiw	r28, 0x34	; 52
     a8c:	0f b6       	in	r0, 0x3f	; 63
     a8e:	f8 94       	cli
     a90:	de bf       	out	0x3e, r29	; 62
     a92:	0f be       	out	0x3f, r0	; 63
     a94:	cd bf       	out	0x3d, r28	; 61
     a96:	2d a7       	std	Y+45, r18	; 0x2d
     a98:	3e a7       	std	Y+46, r19	; 0x2e
     a9a:	4f a7       	std	Y+47, r20	; 0x2f
     a9c:	58 ab       	std	Y+48, r21	; 0x30
     a9e:	69 ab       	std	Y+49, r22	; 0x31
     aa0:	7a ab       	std	Y+50, r23	; 0x32
     aa2:	8b ab       	std	Y+51, r24	; 0x33
     aa4:	9c ab       	std	Y+52, r25	; 0x34
	char* direction = Joystick_Direction(&joystick);
     aa6:	ce 01       	movw	r24, r28
     aa8:	8d 96       	adiw	r24, 0x2d	; 45
     aaa:	0e 94 5e 03 	call	0x6bc	; 0x6bc <Joystick_Direction>
	if(mode == MAIN_MENU && direction == "UP"){
     aae:	20 91 52 02 	lds	r18, 0x0252
     ab2:	30 91 53 02 	lds	r19, 0x0253
     ab6:	21 30       	cpi	r18, 0x01	; 1
     ab8:	31 05       	cpc	r19, r1
     aba:	09 f0       	breq	.+2      	; 0xabe <ISR_joystick+0x40>
     abc:	68 c0       	rjmp	.+208    	; 0xb8e <ISR_joystick+0x110>
     abe:	22 e0       	ldi	r18, 0x02	; 2
     ac0:	8a 32       	cpi	r24, 0x2A	; 42
     ac2:	92 07       	cpc	r25, r18
     ac4:	81 f5       	brne	.+96     	; 0xb26 <ISR_joystick+0xa8>
		if(arrow > 2)
     ac6:	80 91 06 01 	lds	r24, 0x0106
     aca:	90 91 07 01 	lds	r25, 0x0107
     ace:	83 30       	cpi	r24, 0x03	; 3
     ad0:	91 05       	cpc	r25, r1
     ad2:	a4 f0       	brlt	.+40     	; 0xafc <ISR_joystick+0x7e>
		{
			OLED_pos(arrow, 8);
     ad4:	68 e0       	ldi	r22, 0x08	; 8
     ad6:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
			OLED_erase_arrow();
     ada:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <OLED_erase_arrow>
			arrow--;
     ade:	80 91 06 01 	lds	r24, 0x0106
     ae2:	90 91 07 01 	lds	r25, 0x0107
     ae6:	01 97       	sbiw	r24, 0x01	; 1
     ae8:	90 93 07 01 	sts	0x0107, r25
     aec:	80 93 06 01 	sts	0x0106, r24
			OLED_pos(arrow, 8);
     af0:	68 e0       	ldi	r22, 0x08	; 8
     af2:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
			OLED_print_arrow();
     af6:	0e 94 de 07 	call	0xfbc	; 0xfbc <OLED_print_arrow>
     afa:	f5 c0       	rjmp	.+490    	; 0xce6 <ISR_joystick+0x268>
		}
		else if(arrow == 2)
     afc:	02 97       	sbiw	r24, 0x02	; 2
     afe:	09 f0       	breq	.+2      	; 0xb02 <ISR_joystick+0x84>
     b00:	f2 c0       	rjmp	.+484    	; 0xce6 <ISR_joystick+0x268>
		{
			OLED_pos(arrow, 8);
     b02:	68 e0       	ldi	r22, 0x08	; 8
     b04:	82 e0       	ldi	r24, 0x02	; 2
     b06:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
			OLED_erase_arrow();
     b0a:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <OLED_erase_arrow>
			arrow = 5;
     b0e:	85 e0       	ldi	r24, 0x05	; 5
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	90 93 07 01 	sts	0x0107, r25
     b16:	80 93 06 01 	sts	0x0106, r24
			OLED_pos(arrow, 8);
     b1a:	68 e0       	ldi	r22, 0x08	; 8
     b1c:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
			OLED_print_arrow();
     b20:	0e 94 de 07 	call	0xfbc	; 0xfbc <OLED_print_arrow>
     b24:	e0 c0       	rjmp	.+448    	; 0xce6 <ISR_joystick+0x268>
		}
	}
	else if(mode == MAIN_MENU && direction == "DOWN"){
     b26:	85 52       	subi	r24, 0x25	; 37
     b28:	92 40       	sbci	r25, 0x02	; 2
     b2a:	09 f0       	breq	.+2      	; 0xb2e <ISR_joystick+0xb0>
     b2c:	dc c0       	rjmp	.+440    	; 0xce6 <ISR_joystick+0x268>
		if(arrow < 5)
     b2e:	80 91 06 01 	lds	r24, 0x0106
     b32:	90 91 07 01 	lds	r25, 0x0107
     b36:	85 30       	cpi	r24, 0x05	; 5
     b38:	91 05       	cpc	r25, r1
     b3a:	a4 f4       	brge	.+40     	; 0xb64 <ISR_joystick+0xe6>
		{
			OLED_pos(arrow, 8);
     b3c:	68 e0       	ldi	r22, 0x08	; 8
     b3e:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
			OLED_erase_arrow();
     b42:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <OLED_erase_arrow>
			arrow++;
     b46:	80 91 06 01 	lds	r24, 0x0106
     b4a:	90 91 07 01 	lds	r25, 0x0107
     b4e:	01 96       	adiw	r24, 0x01	; 1
     b50:	90 93 07 01 	sts	0x0107, r25
     b54:	80 93 06 01 	sts	0x0106, r24
			OLED_pos(arrow, 8);
     b58:	68 e0       	ldi	r22, 0x08	; 8
     b5a:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
			OLED_print_arrow();
     b5e:	0e 94 de 07 	call	0xfbc	; 0xfbc <OLED_print_arrow>
     b62:	c1 c0       	rjmp	.+386    	; 0xce6 <ISR_joystick+0x268>
		}
		else if(arrow == 5)
     b64:	05 97       	sbiw	r24, 0x05	; 5
     b66:	09 f0       	breq	.+2      	; 0xb6a <ISR_joystick+0xec>
     b68:	be c0       	rjmp	.+380    	; 0xce6 <ISR_joystick+0x268>
		{
			OLED_pos(arrow, 8);
     b6a:	68 e0       	ldi	r22, 0x08	; 8
     b6c:	85 e0       	ldi	r24, 0x05	; 5
     b6e:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
			OLED_erase_arrow();
     b72:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <OLED_erase_arrow>
			arrow = 2;
     b76:	82 e0       	ldi	r24, 0x02	; 2
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	90 93 07 01 	sts	0x0107, r25
     b7e:	80 93 06 01 	sts	0x0106, r24
			OLED_pos(arrow, 8);
     b82:	68 e0       	ldi	r22, 0x08	; 8
     b84:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
			OLED_print_arrow();
     b88:	0e 94 de 07 	call	0xfbc	; 0xfbc <OLED_print_arrow>
     b8c:	ac c0       	rjmp	.+344    	; 0xce6 <ISR_joystick+0x268>
		}
	}
	else if(mode == SETTINGS && direction == "UP"){
     b8e:	2e 30       	cpi	r18, 0x0E	; 14
     b90:	31 05       	cpc	r19, r1
     b92:	09 f0       	breq	.+2      	; 0xb96 <ISR_joystick+0x118>
     b94:	6a c0       	rjmp	.+212    	; 0xc6a <ISR_joystick+0x1ec>
     b96:	22 e0       	ldi	r18, 0x02	; 2
     b98:	8a 32       	cpi	r24, 0x2A	; 42
     b9a:	92 07       	cpc	r25, r18
     b9c:	89 f5       	brne	.+98     	; 0xc00 <ISR_joystick+0x182>
		if(arrow == 3)
     b9e:	80 91 06 01 	lds	r24, 0x0106
     ba2:	90 91 07 01 	lds	r25, 0x0107
     ba6:	83 30       	cpi	r24, 0x03	; 3
     ba8:	91 05       	cpc	r25, r1
     baa:	a9 f4       	brne	.+42     	; 0xbd6 <ISR_joystick+0x158>
		{
			OLED_pos(arrow, 8);
     bac:	68 e0       	ldi	r22, 0x08	; 8
     bae:	83 e0       	ldi	r24, 0x03	; 3
     bb0:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
			OLED_erase_arrow();
     bb4:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <OLED_erase_arrow>
			arrow--;
     bb8:	80 91 06 01 	lds	r24, 0x0106
     bbc:	90 91 07 01 	lds	r25, 0x0107
     bc0:	01 97       	sbiw	r24, 0x01	; 1
     bc2:	90 93 07 01 	sts	0x0107, r25
     bc6:	80 93 06 01 	sts	0x0106, r24
			OLED_pos(arrow, 8);
     bca:	68 e0       	ldi	r22, 0x08	; 8
     bcc:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
			OLED_print_arrow();
     bd0:	0e 94 de 07 	call	0xfbc	; 0xfbc <OLED_print_arrow>
     bd4:	88 c0       	rjmp	.+272    	; 0xce6 <ISR_joystick+0x268>
		}
		else if(arrow == 2)
     bd6:	02 97       	sbiw	r24, 0x02	; 2
     bd8:	09 f0       	breq	.+2      	; 0xbdc <ISR_joystick+0x15e>
     bda:	85 c0       	rjmp	.+266    	; 0xce6 <ISR_joystick+0x268>
		{
			OLED_pos(arrow, 8);
     bdc:	68 e0       	ldi	r22, 0x08	; 8
     bde:	82 e0       	ldi	r24, 0x02	; 2
     be0:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
			OLED_erase_arrow();
     be4:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <OLED_erase_arrow>
			arrow = 3;
     be8:	83 e0       	ldi	r24, 0x03	; 3
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	90 93 07 01 	sts	0x0107, r25
     bf0:	80 93 06 01 	sts	0x0106, r24
			OLED_pos(arrow, 8);
     bf4:	68 e0       	ldi	r22, 0x08	; 8
     bf6:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
			OLED_print_arrow();
     bfa:	0e 94 de 07 	call	0xfbc	; 0xfbc <OLED_print_arrow>
     bfe:	73 c0       	rjmp	.+230    	; 0xce6 <ISR_joystick+0x268>
		}
	}
	else if(mode == SETTINGS && direction == "DOWN"){
     c00:	85 52       	subi	r24, 0x25	; 37
     c02:	92 40       	sbci	r25, 0x02	; 2
     c04:	09 f0       	breq	.+2      	; 0xc08 <ISR_joystick+0x18a>
     c06:	6f c0       	rjmp	.+222    	; 0xce6 <ISR_joystick+0x268>
		if(arrow == 2)
     c08:	80 91 06 01 	lds	r24, 0x0106
     c0c:	90 91 07 01 	lds	r25, 0x0107
     c10:	82 30       	cpi	r24, 0x02	; 2
     c12:	91 05       	cpc	r25, r1
     c14:	a9 f4       	brne	.+42     	; 0xc40 <ISR_joystick+0x1c2>
		{
			OLED_pos(arrow, 8);
     c16:	68 e0       	ldi	r22, 0x08	; 8
     c18:	82 e0       	ldi	r24, 0x02	; 2
     c1a:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
			OLED_erase_arrow();
     c1e:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <OLED_erase_arrow>
			arrow++;
     c22:	80 91 06 01 	lds	r24, 0x0106
     c26:	90 91 07 01 	lds	r25, 0x0107
     c2a:	01 96       	adiw	r24, 0x01	; 1
     c2c:	90 93 07 01 	sts	0x0107, r25
     c30:	80 93 06 01 	sts	0x0106, r24
			OLED_pos(arrow, 8);
     c34:	68 e0       	ldi	r22, 0x08	; 8
     c36:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
			OLED_print_arrow();
     c3a:	0e 94 de 07 	call	0xfbc	; 0xfbc <OLED_print_arrow>
     c3e:	53 c0       	rjmp	.+166    	; 0xce6 <ISR_joystick+0x268>
		}
		else if(arrow == 3)
     c40:	03 97       	sbiw	r24, 0x03	; 3
     c42:	09 f0       	breq	.+2      	; 0xc46 <ISR_joystick+0x1c8>
     c44:	50 c0       	rjmp	.+160    	; 0xce6 <ISR_joystick+0x268>
		{
			OLED_pos(arrow, 8);
     c46:	68 e0       	ldi	r22, 0x08	; 8
     c48:	83 e0       	ldi	r24, 0x03	; 3
     c4a:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
			OLED_erase_arrow();
     c4e:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <OLED_erase_arrow>
			arrow = 2;
     c52:	82 e0       	ldi	r24, 0x02	; 2
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	90 93 07 01 	sts	0x0107, r25
     c5a:	80 93 06 01 	sts	0x0106, r24
			OLED_pos(arrow, 8);
     c5e:	68 e0       	ldi	r22, 0x08	; 8
     c60:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
			OLED_print_arrow();
     c64:	0e 94 de 07 	call	0xfbc	; 0xfbc <OLED_print_arrow>
     c68:	3e c0       	rjmp	.+124    	; 0xce6 <ISR_joystick+0x268>
		}
	}
	else if((mode == ONE_PLAYER) || (mode == TWO_PLAYERS)){
     c6a:	2b 50       	subi	r18, 0x0B	; 11
     c6c:	31 09       	sbc	r19, r1
     c6e:	22 30       	cpi	r18, 0x02	; 2
     c70:	31 05       	cpc	r19, r1
     c72:	c8 f5       	brcc	.+114    	; 0xce6 <ISR_joystick+0x268>
		MSG joystick_message;
		MSG score_message;
		joystick_message.ID = 1;
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	9a a3       	std	Y+34, r25	; 0x22
     c7a:	89 a3       	std	Y+33, r24	; 0x21
		joystick_message.length = 2;
     c7c:	82 e0       	ldi	r24, 0x02	; 2
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	9c a3       	std	Y+36, r25	; 0x24
     c82:	8b a3       	std	Y+35, r24	; 0x23
		joystick_message.data[0] = joystick.x;
     c84:	6d a5       	ldd	r22, Y+45	; 0x2d
     c86:	7e a5       	ldd	r23, Y+46	; 0x2e
     c88:	8f a5       	ldd	r24, Y+47	; 0x2f
     c8a:	98 a9       	ldd	r25, Y+48	; 0x30
     c8c:	0e 94 33 09 	call	0x1266	; 0x1266 <__fixunssfsi>
     c90:	6d a3       	std	Y+37, r22	; 0x25
		joystick_message.data[1] = joystick.y;
     c92:	69 a9       	ldd	r22, Y+49	; 0x31
     c94:	7a a9       	ldd	r23, Y+50	; 0x32
     c96:	8b a9       	ldd	r24, Y+51	; 0x33
     c98:	9c a9       	ldd	r25, Y+52	; 0x34
     c9a:	0e 94 33 09 	call	0x1266	; 0x1266 <__fixunssfsi>
     c9e:	6e a3       	std	Y+38, r22	; 0x26
		CAN_send(&joystick_message);
     ca0:	ce 01       	movw	r24, r28
     ca2:	81 96       	adiw	r24, 0x21	; 33
     ca4:	0e 94 3e 01 	call	0x27c	; 0x27c <CAN_send>
		score_message = CAN_receive();
     ca8:	ce 01       	movw	r24, r28
     caa:	45 96       	adiw	r24, 0x15	; 21
     cac:	0e 94 8e 01 	call	0x31c	; 0x31c <CAN_receive>
		OLED_pos(5, 20);
     cb0:	64 e1       	ldi	r22, 0x14	; 20
     cb2:	85 e0       	ldi	r24, 0x05	; 5
     cb4:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
		char score_string[20];
		sprintf(score_string, "Score: %d", score_message.data[0]);
     cb8:	89 8d       	ldd	r24, Y+25	; 0x19
     cba:	1f 92       	push	r1
     cbc:	8f 93       	push	r24
     cbe:	80 e4       	ldi	r24, 0x40	; 64
     cc0:	92 e0       	ldi	r25, 0x02	; 2
     cc2:	9f 93       	push	r25
     cc4:	8f 93       	push	r24
     cc6:	8e 01       	movw	r16, r28
     cc8:	0f 5f       	subi	r16, 0xFF	; 255
     cca:	1f 4f       	sbci	r17, 0xFF	; 255
     ccc:	1f 93       	push	r17
     cce:	0f 93       	push	r16
     cd0:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <sprintf>
		OLED_print_string(score_string);
     cd4:	c8 01       	movw	r24, r16
     cd6:	0e 94 c0 07 	call	0xf80	; 0xf80 <OLED_print_string>
     cda:	0f 90       	pop	r0
     cdc:	0f 90       	pop	r0
     cde:	0f 90       	pop	r0
     ce0:	0f 90       	pop	r0
     ce2:	0f 90       	pop	r0
     ce4:	0f 90       	pop	r0
	}
}
     ce6:	e4 96       	adiw	r28, 0x34	; 52
     ce8:	0f b6       	in	r0, 0x3f	; 63
     cea:	f8 94       	cli
     cec:	de bf       	out	0x3e, r29	; 62
     cee:	0f be       	out	0x3f, r0	; 63
     cf0:	cd bf       	out	0x3d, r28	; 61
     cf2:	df 91       	pop	r29
     cf4:	cf 91       	pop	r28
     cf6:	1f 91       	pop	r17
     cf8:	0f 91       	pop	r16
     cfa:	08 95       	ret

00000cfc <main>:

int main(void)
{
     cfc:	cf 93       	push	r28
     cfe:	df 93       	push	r29
     d00:	cd b7       	in	r28, 0x3d	; 61
     d02:	de b7       	in	r29, 0x3e	; 62
     d04:	29 97       	sbiw	r28, 0x09	; 9
     d06:	0f b6       	in	r0, 0x3f	; 63
     d08:	f8 94       	cli
     d0a:	de bf       	out	0x3e, r29	; 62
     d0c:	0f be       	out	0x3f, r0	; 63
     d0e:	cd bf       	out	0x3d, r28	; 61
	/* Initialize UART */
 	UART_init(UART_BAUD);
     d10:	8f e1       	ldi	r24, 0x1F	; 31
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	0e 94 58 08 	call	0x10b0	; 0x10b0 <UART_init>
	printf("Reset\n");
     d18:	8a e4       	ldi	r24, 0x4A	; 74
     d1a:	92 e0       	ldi	r25, 0x02	; 2
     d1c:	0e 94 c3 0a 	call	0x1586	; 0x1586 <puts>
     d20:	2f e3       	ldi	r18, 0x3F	; 63
     d22:	8d e0       	ldi	r24, 0x0D	; 13
     d24:	93 e0       	ldi	r25, 0x03	; 3
     d26:	21 50       	subi	r18, 0x01	; 1
     d28:	80 40       	sbci	r24, 0x00	; 0
     d2a:	90 40       	sbci	r25, 0x00	; 0
     d2c:	e1 f7       	brne	.-8      	; 0xd26 <main+0x2a>
     d2e:	00 c0       	rjmp	.+0      	; 0xd30 <main+0x34>
     d30:	00 00       	nop
	_delay_ms(1000);
	
	/* Initialize SRAM, ADC, OLED and CAN */
	SRAM_init();
     d32:	0e 94 4c 08 	call	0x1098	; 0x1098 <SRAM_init>
	OLED_reset();
     d36:	0e 94 17 07 	call	0xe2e	; 0xe2e <OLED_reset>
	OLED_init();
     d3a:	0e 94 70 07 	call	0xee0	; 0xee0 <OLED_init>
	CAN_init();
     d3e:	0e 94 20 01 	call	0x240	; 0x240 <CAN_init>
	
	/* Draw something cool */
	draw_home();
     d42:	0e 94 02 02 	call	0x404	; 0x404 <draw_home>
	
	/* Enable interrupts */
	GICR |= (1 << INT0) | (1 << INT1);
     d46:	8b b7       	in	r24, 0x3b	; 59
     d48:	80 6c       	ori	r24, 0xC0	; 192
     d4a:	8b bf       	out	0x3b, r24	; 59
	SREG |= (1 << 7);
     d4c:	8f b7       	in	r24, 0x3f	; 63
     d4e:	80 68       	ori	r24, 0x80	; 128
     d50:	8f bf       	out	0x3f, r24	; 63
	MCUCR |= (1<< ISC00) | (1 << ISC01) | (1 << ISC10) | (1 << ISC11);
     d52:	85 b7       	in	r24, 0x35	; 53
     d54:	8f 60       	ori	r24, 0x0F	; 15
     d56:	85 bf       	out	0x35, r24	; 53
	EMCUCR &= (0 << ISC2);
     d58:	86 b7       	in	r24, 0x36	; 54
     d5a:	16 be       	out	0x36, r1	; 54
	sei();
     d5c:	78 94       	sei
	
	/* Initialize variables */
	Position joystick = Joystick_Position();
     d5e:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <Joystick_Position>
     d62:	52 2e       	mov	r5, r18
     d64:	63 2e       	mov	r6, r19
     d66:	74 2e       	mov	r7, r20
     d68:	85 2e       	mov	r8, r21
     d6a:	26 2e       	mov	r2, r22
     d6c:	37 2e       	mov	r3, r23
     d6e:	48 2e       	mov	r4, r24
     d70:	99 87       	std	Y+9, r25	; 0x09
	Position joystick_previous = joystick;
	slide_left = ADC_Convert(SLIDE_LEFT);
     d72:	86 e0       	ldi	r24, 0x06	; 6
     d74:	0e 94 15 01 	call	0x22a	; 0x22a <ADC_Convert>
     d78:	98 2e       	mov	r9, r24
     d7a:	80 93 54 02 	sts	0x0254, r24
	uint8_t previous_slide_left = slide_left;
	uint8_t slide_right = ADC_Convert(SLIDE_RIGHT);
     d7e:	87 e0       	ldi	r24, 0x07	; 7
     d80:	0e 94 15 01 	call	0x22a	; 0x22a <ADC_Convert>
	uint8_t previous_slide_right = slide_right;
	
    while(1)
    {
		joystick = Joystick_Position();
     d84:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <Joystick_Position>
     d88:	29 83       	std	Y+1, r18	; 0x01
     d8a:	3a 83       	std	Y+2, r19	; 0x02
     d8c:	4b 83       	std	Y+3, r20	; 0x03
     d8e:	5c 83       	std	Y+4, r21	; 0x04
     d90:	6d 83       	std	Y+5, r22	; 0x05
     d92:	7e 83       	std	Y+6, r23	; 0x06
     d94:	8f 83       	std	Y+7, r24	; 0x07
     d96:	98 87       	std	Y+8, r25	; 0x08
     d98:	e2 2e       	mov	r14, r18
     d9a:	f3 2e       	mov	r15, r19
     d9c:	04 2f       	mov	r16, r20
     d9e:	15 2f       	mov	r17, r21
     da0:	a6 2e       	mov	r10, r22
     da2:	b7 2e       	mov	r11, r23
     da4:	c8 2e       	mov	r12, r24
     da6:	d9 2e       	mov	r13, r25
		if((joystick.x != joystick_previous.x)||(joystick.y != joystick_previous.y))
     da8:	65 2d       	mov	r22, r5
     daa:	76 2d       	mov	r23, r6
     dac:	87 2d       	mov	r24, r7
     dae:	98 2d       	mov	r25, r8
     db0:	0e 94 c7 08 	call	0x118e	; 0x118e <__cmpsf2>
     db4:	81 11       	cpse	r24, r1
     db6:	0c c0       	rjmp	.+24     	; 0xdd0 <main+0xd4>
     db8:	2a 2d       	mov	r18, r10
     dba:	3b 2d       	mov	r19, r11
     dbc:	4c 2d       	mov	r20, r12
     dbe:	5d 2d       	mov	r21, r13
     dc0:	62 2d       	mov	r22, r2
     dc2:	73 2d       	mov	r23, r3
     dc4:	84 2d       	mov	r24, r4
     dc6:	99 85       	ldd	r25, Y+9	; 0x09
     dc8:	0e 94 c7 08 	call	0x118e	; 0x118e <__cmpsf2>
     dcc:	88 23       	and	r24, r24
     dce:	51 f0       	breq	.+20     	; 0xde4 <main+0xe8>
		{
			ISR_joystick(joystick);
     dd0:	29 81       	ldd	r18, Y+1	; 0x01
     dd2:	3a 81       	ldd	r19, Y+2	; 0x02
     dd4:	4b 81       	ldd	r20, Y+3	; 0x03
     dd6:	5c 81       	ldd	r21, Y+4	; 0x04
     dd8:	6d 81       	ldd	r22, Y+5	; 0x05
     dda:	7e 81       	ldd	r23, Y+6	; 0x06
     ddc:	8f 81       	ldd	r24, Y+7	; 0x07
     dde:	98 85       	ldd	r25, Y+8	; 0x08
     de0:	0e 94 3f 05 	call	0xa7e	; 0xa7e <ISR_joystick>
		}
		joystick_previous = joystick;
		
		slide_left = ADC_Convert(SLIDE_LEFT);
     de4:	86 e0       	ldi	r24, 0x06	; 6
     de6:	0e 94 15 01 	call	0x22a	; 0x22a <ADC_Convert>
     dea:	80 93 54 02 	sts	0x0254, r24
		if(slide_left != previous_slide_left)
     dee:	98 12       	cpse	r9, r24
		{
			ISR_slide_left();
     df0:	0e 94 0c 05 	call	0xa18	; 0xa18 <ISR_slide_left>
		}
		previous_slide_left = slide_left;
     df4:	90 90 54 02 	lds	r9, 0x0254
     df8:	8f ef       	ldi	r24, 0xFF	; 255
     dfa:	90 e7       	ldi	r25, 0x70	; 112
     dfc:	22 e0       	ldi	r18, 0x02	; 2
     dfe:	81 50       	subi	r24, 0x01	; 1
     e00:	90 40       	sbci	r25, 0x00	; 0
     e02:	20 40       	sbci	r18, 0x00	; 0
     e04:	e1 f7       	brne	.-8      	; 0xdfe <main+0x102>
     e06:	00 c0       	rjmp	.+0      	; 0xe08 <main+0x10c>
     e08:	00 00       	nop
		joystick = Joystick_Position();
		if((joystick.x != joystick_previous.x)||(joystick.y != joystick_previous.y))
		{
			ISR_joystick(joystick);
		}
		joystick_previous = joystick;
     e0a:	5e 2c       	mov	r5, r14
     e0c:	6f 2c       	mov	r6, r15
     e0e:	70 2e       	mov	r7, r16
     e10:	81 2e       	mov	r8, r17
     e12:	2a 2c       	mov	r2, r10
     e14:	3b 2c       	mov	r3, r11
     e16:	4c 2c       	mov	r4, r12
     e18:	d9 86       	std	Y+9, r13	; 0x09
     e1a:	b4 cf       	rjmp	.-152    	; 0xd84 <main+0x88>

00000e1c <OLED_write_data>:

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     e1c:	80 93 00 12 	sts	0x1200, r24
     e20:	08 95       	ret

00000e22 <OLED_set_brightness>:

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     e22:	e0 e0       	ldi	r30, 0x00	; 0
     e24:	f0 e1       	ldi	r31, 0x10	; 16
     e26:	91 e8       	ldi	r25, 0x81	; 129
     e28:	90 83       	st	Z, r25
     e2a:	80 83       	st	Z, r24
     e2c:	08 95       	ret

00000e2e <OLED_reset>:
     e2e:	80 eb       	ldi	r24, 0xB0	; 176
     e30:	80 93 00 10 	sts	0x1000, r24
     e34:	80 e8       	ldi	r24, 0x80	; 128
     e36:	90 e0       	ldi	r25, 0x00	; 0

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     e38:	e0 e0       	ldi	r30, 0x00	; 0
     e3a:	f2 e1       	ldi	r31, 0x12	; 18
     e3c:	10 82       	st	Z, r1
     e3e:	01 97       	sbiw	r24, 0x01	; 1

/* Erase the RAM line by line */
void OLED_reset()
{
	OLED_write_cmd(0xb0);
	for(int i=0; i<128; i++){
     e40:	00 97       	sbiw	r24, 0x00	; 0
     e42:	e1 f7       	brne	.-8      	; 0xe3c <OLED_reset+0xe>

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     e44:	81 eb       	ldi	r24, 0xB1	; 177
     e46:	80 93 00 10 	sts	0x1000, r24
     e4a:	80 e8       	ldi	r24, 0x80	; 128
     e4c:	90 e0       	ldi	r25, 0x00	; 0

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     e4e:	e0 e0       	ldi	r30, 0x00	; 0
     e50:	f2 e1       	ldi	r31, 0x12	; 18
     e52:	10 82       	st	Z, r1
     e54:	01 97       	sbiw	r24, 0x01	; 1
	OLED_write_cmd(0xb0);
	for(int i=0; i<128; i++){
		OLED_write_data(0b00000000);
	}
	OLED_write_cmd(0xb1);
	for(int i=0; i<128; i++){
     e56:	00 97       	sbiw	r24, 0x00	; 0
     e58:	e1 f7       	brne	.-8      	; 0xe52 <OLED_reset+0x24>

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     e5a:	82 eb       	ldi	r24, 0xB2	; 178
     e5c:	80 93 00 10 	sts	0x1000, r24
     e60:	80 e8       	ldi	r24, 0x80	; 128
     e62:	90 e0       	ldi	r25, 0x00	; 0

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     e64:	e0 e0       	ldi	r30, 0x00	; 0
     e66:	f2 e1       	ldi	r31, 0x12	; 18
     e68:	10 82       	st	Z, r1
     e6a:	01 97       	sbiw	r24, 0x01	; 1
	OLED_write_cmd(0xb1);
	for(int i=0; i<128; i++){
		OLED_write_data(0b00000000);
	}
	OLED_write_cmd(0xb2);
	for(int i=0; i<128; i++){
     e6c:	00 97       	sbiw	r24, 0x00	; 0
     e6e:	e1 f7       	brne	.-8      	; 0xe68 <OLED_reset+0x3a>

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     e70:	83 eb       	ldi	r24, 0xB3	; 179
     e72:	80 93 00 10 	sts	0x1000, r24
     e76:	80 e8       	ldi	r24, 0x80	; 128
     e78:	90 e0       	ldi	r25, 0x00	; 0

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     e7a:	e0 e0       	ldi	r30, 0x00	; 0
     e7c:	f2 e1       	ldi	r31, 0x12	; 18
     e7e:	10 82       	st	Z, r1
     e80:	01 97       	sbiw	r24, 0x01	; 1
	OLED_write_cmd(0xb2);
	for(int i=0; i<128; i++){
		OLED_write_data(0b00000000);
	}
	OLED_write_cmd(0xb3);
	for(int i=0; i<128; i++){
     e82:	00 97       	sbiw	r24, 0x00	; 0
     e84:	e1 f7       	brne	.-8      	; 0xe7e <OLED_reset+0x50>

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     e86:	84 eb       	ldi	r24, 0xB4	; 180
     e88:	80 93 00 10 	sts	0x1000, r24
     e8c:	80 e8       	ldi	r24, 0x80	; 128
     e8e:	90 e0       	ldi	r25, 0x00	; 0

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     e90:	e0 e0       	ldi	r30, 0x00	; 0
     e92:	f2 e1       	ldi	r31, 0x12	; 18
     e94:	10 82       	st	Z, r1
     e96:	01 97       	sbiw	r24, 0x01	; 1
	OLED_write_cmd(0xb3);
	for(int i=0; i<128; i++){
		OLED_write_data(0b00000000);
	}
	OLED_write_cmd(0xb4);
	for(int i=0; i<128; i++){
     e98:	00 97       	sbiw	r24, 0x00	; 0
     e9a:	e1 f7       	brne	.-8      	; 0xe94 <OLED_reset+0x66>

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     e9c:	85 eb       	ldi	r24, 0xB5	; 181
     e9e:	80 93 00 10 	sts	0x1000, r24
     ea2:	80 e8       	ldi	r24, 0x80	; 128
     ea4:	90 e0       	ldi	r25, 0x00	; 0

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     ea6:	e0 e0       	ldi	r30, 0x00	; 0
     ea8:	f2 e1       	ldi	r31, 0x12	; 18
     eaa:	10 82       	st	Z, r1
     eac:	01 97       	sbiw	r24, 0x01	; 1
	OLED_write_cmd(0xb4);
	for(int i=0; i<128; i++){
		OLED_write_data(0b00000000);
	}
	OLED_write_cmd(0xb5);
	for(int i=0; i<128; i++){
     eae:	00 97       	sbiw	r24, 0x00	; 0
     eb0:	e1 f7       	brne	.-8      	; 0xeaa <OLED_reset+0x7c>

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     eb2:	86 eb       	ldi	r24, 0xB6	; 182
     eb4:	80 93 00 10 	sts	0x1000, r24
     eb8:	80 e8       	ldi	r24, 0x80	; 128
     eba:	90 e0       	ldi	r25, 0x00	; 0

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     ebc:	e0 e0       	ldi	r30, 0x00	; 0
     ebe:	f2 e1       	ldi	r31, 0x12	; 18
     ec0:	10 82       	st	Z, r1
     ec2:	01 97       	sbiw	r24, 0x01	; 1
	OLED_write_cmd(0xb5);
	for(int i=0; i<128; i++){
		OLED_write_data(0b00000000);
	}
	OLED_write_cmd(0xb6);
	for(int i=0; i<128; i++){
     ec4:	00 97       	sbiw	r24, 0x00	; 0
     ec6:	e1 f7       	brne	.-8      	; 0xec0 <OLED_reset+0x92>

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     ec8:	87 eb       	ldi	r24, 0xB7	; 183
     eca:	80 93 00 10 	sts	0x1000, r24
     ece:	80 e8       	ldi	r24, 0x80	; 128
     ed0:	90 e0       	ldi	r25, 0x00	; 0

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     ed2:	e0 e0       	ldi	r30, 0x00	; 0
     ed4:	f2 e1       	ldi	r31, 0x12	; 18
     ed6:	10 82       	st	Z, r1
     ed8:	01 97       	sbiw	r24, 0x01	; 1
	OLED_write_cmd(0xb6);
	for(int i=0; i<128; i++){
		OLED_write_data(0b00000000);
	}
	OLED_write_cmd(0xb7);
	for(int i=0; i<128; i++){
     eda:	00 97       	sbiw	r24, 0x00	; 0
     edc:	e1 f7       	brne	.-8      	; 0xed6 <OLED_reset+0xa8>
		OLED_write_data(0b00000000);
	}
}
     ede:	08 95       	ret

00000ee0 <OLED_init>:

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     ee0:	e0 e0       	ldi	r30, 0x00	; 0
     ee2:	f0 e1       	ldi	r31, 0x10	; 16
     ee4:	8e ea       	ldi	r24, 0xAE	; 174
     ee6:	80 83       	st	Z, r24
     ee8:	81 ea       	ldi	r24, 0xA1	; 161
     eea:	80 83       	st	Z, r24
     eec:	8a ed       	ldi	r24, 0xDA	; 218
     eee:	80 83       	st	Z, r24
     ef0:	82 e1       	ldi	r24, 0x12	; 18
     ef2:	80 83       	st	Z, r24
     ef4:	88 ec       	ldi	r24, 0xC8	; 200
     ef6:	80 83       	st	Z, r24
     ef8:	88 ea       	ldi	r24, 0xA8	; 168
     efa:	80 83       	st	Z, r24
     efc:	8f e3       	ldi	r24, 0x3F	; 63
     efe:	80 83       	st	Z, r24
     f00:	85 ed       	ldi	r24, 0xD5	; 213
     f02:	80 83       	st	Z, r24
     f04:	80 e8       	ldi	r24, 0x80	; 128
     f06:	80 83       	st	Z, r24
     f08:	81 e8       	ldi	r24, 0x81	; 129
     f0a:	80 83       	st	Z, r24
     f0c:	80 e5       	ldi	r24, 0x50	; 80
     f0e:	80 83       	st	Z, r24
     f10:	89 ed       	ldi	r24, 0xD9	; 217
     f12:	80 83       	st	Z, r24
     f14:	81 e2       	ldi	r24, 0x21	; 33
     f16:	80 83       	st	Z, r24
     f18:	80 e2       	ldi	r24, 0x20	; 32
     f1a:	80 83       	st	Z, r24
     f1c:	82 e0       	ldi	r24, 0x02	; 2
     f1e:	80 83       	st	Z, r24
     f20:	8b ed       	ldi	r24, 0xDB	; 219
     f22:	80 83       	st	Z, r24
     f24:	80 e3       	ldi	r24, 0x30	; 48
     f26:	80 83       	st	Z, r24
     f28:	8d ea       	ldi	r24, 0xAD	; 173
     f2a:	80 83       	st	Z, r24
     f2c:	10 82       	st	Z, r1
     f2e:	84 ea       	ldi	r24, 0xA4	; 164
     f30:	80 83       	st	Z, r24
     f32:	86 ea       	ldi	r24, 0xA6	; 166
     f34:	80 83       	st	Z, r24
     f36:	8f ea       	ldi	r24, 0xAF	; 175
     f38:	80 83       	st	Z, r24
     f3a:	08 95       	ret

00000f3c <OLED_pos>:
}

/* Set the cursor to the given position: page is from 0 to 7, segment from 0 to 127 */
void OLED_pos(uint8_t page, uint8_t segment)
{
	OLED_write_cmd(176 + page);
     f3c:	80 55       	subi	r24, 0x50	; 80

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     f3e:	e0 e0       	ldi	r30, 0x00	; 0
     f40:	f0 e1       	ldi	r31, 0x10	; 16
     f42:	80 83       	st	Z, r24

/* Set the cursor to the given position: page is from 0 to 7, segment from 0 to 127 */
void OLED_pos(uint8_t page, uint8_t segment)
{
	OLED_write_cmd(176 + page);
	OLED_write_cmd(segment & 0x0f);
     f44:	86 2f       	mov	r24, r22
     f46:	8f 70       	andi	r24, 0x0F	; 15

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     f48:	80 83       	st	Z, r24
/* Set the cursor to the given position: page is from 0 to 7, segment from 0 to 127 */
void OLED_pos(uint8_t page, uint8_t segment)
{
	OLED_write_cmd(176 + page);
	OLED_write_cmd(segment & 0x0f);
	OLED_write_cmd(((segment & 0x70)>>4)|0x10);
     f4a:	60 77       	andi	r22, 0x70	; 112
     f4c:	62 95       	swap	r22
     f4e:	6f 70       	andi	r22, 0x0F	; 15
     f50:	60 61       	ori	r22, 0x10	; 16

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     f52:	60 83       	st	Z, r22
     f54:	08 95       	ret

00000f56 <OLED_print>:
	OLED_write_cmd(((segment & 0x70)>>4)|0x10);
}

/* Print a character from the table */
void OLED_print(char* a)
{
     f56:	88 0f       	add	r24, r24
     f58:	99 1f       	adc	r25, r25
     f5a:	88 0f       	add	r24, r24
     f5c:	99 1f       	adc	r25, r25
	int index = (int)a - 32;
	for(int i=0; i<4; i++)
     f5e:	20 e0       	ldi	r18, 0x00	; 0
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	80 51       	subi	r24, 0x10	; 16
     f64:	90 40       	sbci	r25, 0x00	; 0

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     f66:	a0 e0       	ldi	r26, 0x00	; 0
     f68:	b2 e1       	ldi	r27, 0x12	; 18
     f6a:	fc 01       	movw	r30, r24
     f6c:	e2 0f       	add	r30, r18
     f6e:	f3 1f       	adc	r31, r19
void OLED_print(char* a)
{
	int index = (int)a - 32;
	for(int i=0; i<4; i++)
	{
		OLED_write_data(pgm_read_byte(&font[index][i]));
     f70:	e4 91       	lpm	r30, Z

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     f72:	ec 93       	st	X, r30

/* Print a character from the table */
void OLED_print(char* a)
{
	int index = (int)a - 32;
	for(int i=0; i<4; i++)
     f74:	2f 5f       	subi	r18, 0xFF	; 255
     f76:	3f 4f       	sbci	r19, 0xFF	; 255
     f78:	24 30       	cpi	r18, 0x04	; 4
     f7a:	31 05       	cpc	r19, r1
     f7c:	b1 f7       	brne	.-20     	; 0xf6a <OLED_print+0x14>
	{
		OLED_write_data(pgm_read_byte(&font[index][i]));
	}
}
     f7e:	08 95       	ret

00000f80 <OLED_print_string>:

/* Print a string. If the string exceeds the screen size, stop printing. */
void OLED_print_string(char* string)
{
     f80:	0f 93       	push	r16
     f82:	1f 93       	push	r17
     f84:	cf 93       	push	r28
     f86:	df 93       	push	r29
     f88:	fc 01       	movw	r30, r24
	int i=0;
	while(string[i]!='\0' && i < 32)
     f8a:	80 81       	ld	r24, Z
     f8c:	88 23       	and	r24, r24
     f8e:	89 f0       	breq	.+34     	; 0xfb2 <OLED_print_string+0x32>
     f90:	8f 01       	movw	r16, r30
     f92:	0f 5f       	subi	r16, 0xFF	; 255
     f94:	1f 4f       	sbci	r17, 0xFF	; 255
}

/* Print a string. If the string exceeds the screen size, stop printing. */
void OLED_print_string(char* string)
{
	int i=0;
     f96:	c0 e0       	ldi	r28, 0x00	; 0
     f98:	d0 e0       	ldi	r29, 0x00	; 0
	while(string[i]!='\0' && i < 32)
	{
		OLED_print(string[i]);
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	0e 94 ab 07 	call	0xf56	; 0xf56 <OLED_print>
		i++;
     fa0:	21 96       	adiw	r28, 0x01	; 1

/* Print a string. If the string exceeds the screen size, stop printing. */
void OLED_print_string(char* string)
{
	int i=0;
	while(string[i]!='\0' && i < 32)
     fa2:	f8 01       	movw	r30, r16
     fa4:	81 91       	ld	r24, Z+
     fa6:	8f 01       	movw	r16, r30
     fa8:	88 23       	and	r24, r24
     faa:	19 f0       	breq	.+6      	; 0xfb2 <OLED_print_string+0x32>
     fac:	c0 32       	cpi	r28, 0x20	; 32
     fae:	d1 05       	cpc	r29, r1
     fb0:	a1 f7       	brne	.-24     	; 0xf9a <OLED_print_string+0x1a>
	{
		OLED_print(string[i]);
		i++;
	}
}
     fb2:	df 91       	pop	r29
     fb4:	cf 91       	pop	r28
     fb6:	1f 91       	pop	r17
     fb8:	0f 91       	pop	r16
     fba:	08 95       	ret

00000fbc <OLED_print_arrow>:

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     fbc:	e0 e0       	ldi	r30, 0x00	; 0
     fbe:	f2 e1       	ldi	r31, 0x12	; 18
     fc0:	80 e1       	ldi	r24, 0x10	; 16
     fc2:	80 83       	st	Z, r24
     fc4:	80 83       	st	Z, r24
     fc6:	80 83       	st	Z, r24
     fc8:	80 83       	st	Z, r24
     fca:	9c e7       	ldi	r25, 0x7C	; 124
     fcc:	90 83       	st	Z, r25
     fce:	98 e3       	ldi	r25, 0x38	; 56
     fd0:	90 83       	st	Z, r25
     fd2:	80 83       	st	Z, r24
     fd4:	08 95       	ret

00000fd6 <OLED_erase_arrow>:
     fd6:	e0 e0       	ldi	r30, 0x00	; 0
     fd8:	f2 e1       	ldi	r31, 0x12	; 18
     fda:	10 82       	st	Z, r1
     fdc:	10 82       	st	Z, r1
     fde:	10 82       	st	Z, r1
     fe0:	10 82       	st	Z, r1
     fe2:	10 82       	st	Z, r1
     fe4:	10 82       	st	Z, r1
     fe6:	10 82       	st	Z, r1
     fe8:	08 95       	ret

00000fea <OLED_print_home>:
     fea:	e0 e0       	ldi	r30, 0x00	; 0
     fec:	f2 e1       	ldi	r31, 0x12	; 18
     fee:	10 82       	st	Z, r1
     ff0:	88 ef       	ldi	r24, 0xF8	; 248
     ff2:	80 83       	st	Z, r24
     ff4:	9c ef       	ldi	r25, 0xFC	; 252
     ff6:	90 83       	st	Z, r25
     ff8:	26 ef       	ldi	r18, 0xF6	; 246
     ffa:	20 83       	st	Z, r18
     ffc:	3f e3       	ldi	r19, 0x3F	; 63
     ffe:	30 83       	st	Z, r19
    1000:	20 83       	st	Z, r18
    1002:	90 83       	st	Z, r25
    1004:	80 83       	st	Z, r24
    1006:	10 82       	st	Z, r1
    1008:	08 95       	ret

0000100a <OLED_print_woman>:
	OLED_write_data(0b11111000);
	OLED_write_data(0b00000000);
}

void OLED_print_woman(uint8_t page, uint8_t segment)
{
    100a:	0f 93       	push	r16
    100c:	1f 93       	push	r17
    100e:	cf 93       	push	r28
    1010:	df 93       	push	r29
    1012:	18 2f       	mov	r17, r24
    1014:	06 2f       	mov	r16, r22
	OLED_pos(page, segment);
    1016:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
    101a:	c0 e0       	ldi	r28, 0x00	; 0
    101c:	d2 e1       	ldi	r29, 0x12	; 18
    101e:	18 82       	st	Y, r1
    1020:	18 82       	st	Y, r1
    1022:	80 e1       	ldi	r24, 0x10	; 16
    1024:	88 83       	st	Y, r24
    1026:	94 e9       	ldi	r25, 0x94	; 148
    1028:	98 83       	st	Y, r25
    102a:	27 ed       	ldi	r18, 0xD7	; 215
    102c:	28 83       	st	Y, r18
    102e:	3f ef       	ldi	r19, 0xFF	; 255
    1030:	38 83       	st	Y, r19
    1032:	28 83       	st	Y, r18
    1034:	98 83       	st	Y, r25
    1036:	88 83       	st	Y, r24
    1038:	18 82       	st	Y, r1
    103a:	18 82       	st	Y, r1
	OLED_write_data(0b11010111);
	OLED_write_data(0b10010100);
	OLED_write_data(0b00010000);
	OLED_write_data(0b00000000);
	OLED_write_data(0b00000000);
	OLED_pos(page+1, segment);
    103c:	60 2f       	mov	r22, r16
    103e:	81 e0       	ldi	r24, 0x01	; 1
    1040:	81 0f       	add	r24, r17
    1042:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
    1046:	18 82       	st	Y, r1
    1048:	92 e0       	ldi	r25, 0x02	; 2
    104a:	98 83       	st	Y, r25
    104c:	83 e0       	ldi	r24, 0x03	; 3
    104e:	88 83       	st	Y, r24
    1050:	23 e2       	ldi	r18, 0x23	; 35
    1052:	28 83       	st	Y, r18
    1054:	3f e3       	ldi	r19, 0x3F	; 63
    1056:	38 83       	st	Y, r19
    1058:	88 83       	st	Y, r24
    105a:	38 83       	st	Y, r19
    105c:	28 83       	st	Y, r18
    105e:	88 83       	st	Y, r24
    1060:	98 83       	st	Y, r25
    1062:	18 82       	st	Y, r1
	OLED_write_data(0b00111111);
	OLED_write_data(0b00100011);
	OLED_write_data(0b00000011);
	OLED_write_data(0b00000010);
	OLED_write_data(0b00000000);
}
    1064:	df 91       	pop	r29
    1066:	cf 91       	pop	r28
    1068:	1f 91       	pop	r17
    106a:	0f 91       	pop	r16
    106c:	08 95       	ret

0000106e <SPI_init>:
#include <avr/io.h>

void SPI_init(void)
{
	/* Set CS, MOSI and SCK output, MISO input */
	DDRB |= (1<<PB4)| (1<<PB5)|(1<<PB7);
    106e:	87 b3       	in	r24, 0x17	; 23
    1070:	80 6b       	ori	r24, 0xB0	; 176
    1072:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1<<PB6);
    1074:	be 98       	cbi	0x17, 6	; 23
	PORTB |= (1<<4);
    1076:	c4 9a       	sbi	0x18, 4	; 24
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
    1078:	81 e5       	ldi	r24, 0x51	; 81
    107a:	8d b9       	out	0x0d, r24	; 13
    107c:	08 95       	ret

0000107e <SPI_write>:
}

void SPI_write(char cData)
{
	/* Start transmission */
	SPDR = cData;
    107e:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while (!(SPSR & (1<<SPIF)))
    1080:	77 9b       	sbis	0x0e, 7	; 14
    1082:	fe cf       	rjmp	.-4      	; 0x1080 <SPI_write+0x2>
		;
}
    1084:	08 95       	ret

00001086 <SPI_read>:

char SPI_read(void)
{
	/* Start transmission */
	SPDR = 0x00;
    1086:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while (!(SPSR & (1<<SPIF)))
    1088:	77 9b       	sbis	0x0e, 7	; 14
    108a:	fe cf       	rjmp	.-4      	; 0x1088 <SPI_read+0x2>
		;
	return SPDR;
    108c:	8f b1       	in	r24, 0x0f	; 15
}
    108e:	08 95       	ret

00001090 <SPI_on>:

void SPI_on(void)
{
	PORTB &= ~(1<<PB4);
    1090:	c4 98       	cbi	0x18, 4	; 24
    1092:	08 95       	ret

00001094 <SPI_off>:
}

void SPI_off(void)
{
	PORTB |= (1<<PB4);
    1094:	c4 9a       	sbi	0x18, 4	; 24
    1096:	08 95       	ret

00001098 <SRAM_init>:
#include <avr/io.h>

void SRAM_init(void)
{
	/* Enable external SRAM: set SRE to 1 */
	MCUCR |= (1 << SRE);
    1098:	85 b7       	in	r24, 0x35	; 53
    109a:	80 68       	ori	r24, 0x80	; 128
    109c:	85 bf       	out	0x35, r24	; 53
    109e:	08 95       	ret

000010a0 <UART_transmit>:
#include <stdio.h>
#include <avr/io.h>

void UART_transmit(unsigned char data){
	/* Wait for empty transmit buffer */
	while(!(UCSR0A&(1<<UDRE0)))
    10a0:	5d 9b       	sbis	0x0b, 5	; 11
    10a2:	fe cf       	rjmp	.-4      	; 0x10a0 <UART_transmit>
		;
	/* Put data into buffer */
	UDR0 = data;
    10a4:	8c b9       	out	0x0c, r24	; 12
    10a6:	08 95       	ret

000010a8 <UART_receive>:
}

unsigned char UART_receive(void){
	/* Wait for data to be received */
	while(!(UCSR0A&(1<<RXC0)))
    10a8:	5f 9b       	sbis	0x0b, 7	; 11
    10aa:	fe cf       	rjmp	.-4      	; 0x10a8 <UART_receive>
		;
	/* Get and return received data from buffer */
	return UDR0;
    10ac:	8c b1       	in	r24, 0x0c	; 12
}
    10ae:	08 95       	ret

000010b0 <UART_init>:

void UART_init(unsigned int ubrr){
	/* Set baud rate */
	UBRR0L = (unsigned char) ubrr;
    10b0:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    10b2:	88 e1       	ldi	r24, 0x18	; 24
    10b4:	8a b9       	out	0x0a, r24	; 10
	/* Link printf to UART transmissions */	
	fdevopen(UART_transmit,UART_receive);
    10b6:	64 e5       	ldi	r22, 0x54	; 84
    10b8:	78 e0       	ldi	r23, 0x08	; 8
    10ba:	80 e5       	ldi	r24, 0x50	; 80
    10bc:	98 e0       	ldi	r25, 0x08	; 8
    10be:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <fdevopen>
    10c2:	08 95       	ret

000010c4 <__subsf3>:
    10c4:	50 58       	subi	r21, 0x80	; 128

000010c6 <__addsf3>:
    10c6:	bb 27       	eor	r27, r27
    10c8:	aa 27       	eor	r26, r26
    10ca:	0e d0       	rcall	.+28     	; 0x10e8 <__addsf3x>
    10cc:	70 c1       	rjmp	.+736    	; 0x13ae <__fp_round>
    10ce:	61 d1       	rcall	.+706    	; 0x1392 <__fp_pscA>
    10d0:	30 f0       	brcs	.+12     	; 0x10de <__addsf3+0x18>
    10d2:	66 d1       	rcall	.+716    	; 0x13a0 <__fp_pscB>
    10d4:	20 f0       	brcs	.+8      	; 0x10de <__addsf3+0x18>
    10d6:	31 f4       	brne	.+12     	; 0x10e4 <__addsf3+0x1e>
    10d8:	9f 3f       	cpi	r25, 0xFF	; 255
    10da:	11 f4       	brne	.+4      	; 0x10e0 <__addsf3+0x1a>
    10dc:	1e f4       	brtc	.+6      	; 0x10e4 <__addsf3+0x1e>
    10de:	56 c1       	rjmp	.+684    	; 0x138c <__fp_nan>
    10e0:	0e f4       	brtc	.+2      	; 0x10e4 <__addsf3+0x1e>
    10e2:	e0 95       	com	r30
    10e4:	e7 fb       	bst	r30, 7
    10e6:	4c c1       	rjmp	.+664    	; 0x1380 <__fp_inf>

000010e8 <__addsf3x>:
    10e8:	e9 2f       	mov	r30, r25
    10ea:	72 d1       	rcall	.+740    	; 0x13d0 <__fp_split3>
    10ec:	80 f3       	brcs	.-32     	; 0x10ce <__addsf3+0x8>
    10ee:	ba 17       	cp	r27, r26
    10f0:	62 07       	cpc	r22, r18
    10f2:	73 07       	cpc	r23, r19
    10f4:	84 07       	cpc	r24, r20
    10f6:	95 07       	cpc	r25, r21
    10f8:	18 f0       	brcs	.+6      	; 0x1100 <__addsf3x+0x18>
    10fa:	71 f4       	brne	.+28     	; 0x1118 <__addsf3x+0x30>
    10fc:	9e f5       	brtc	.+102    	; 0x1164 <__addsf3x+0x7c>
    10fe:	8a c1       	rjmp	.+788    	; 0x1414 <__fp_zero>
    1100:	0e f4       	brtc	.+2      	; 0x1104 <__addsf3x+0x1c>
    1102:	e0 95       	com	r30
    1104:	0b 2e       	mov	r0, r27
    1106:	ba 2f       	mov	r27, r26
    1108:	a0 2d       	mov	r26, r0
    110a:	0b 01       	movw	r0, r22
    110c:	b9 01       	movw	r22, r18
    110e:	90 01       	movw	r18, r0
    1110:	0c 01       	movw	r0, r24
    1112:	ca 01       	movw	r24, r20
    1114:	a0 01       	movw	r20, r0
    1116:	11 24       	eor	r1, r1
    1118:	ff 27       	eor	r31, r31
    111a:	59 1b       	sub	r21, r25
    111c:	99 f0       	breq	.+38     	; 0x1144 <__addsf3x+0x5c>
    111e:	59 3f       	cpi	r21, 0xF9	; 249
    1120:	50 f4       	brcc	.+20     	; 0x1136 <__addsf3x+0x4e>
    1122:	50 3e       	cpi	r21, 0xE0	; 224
    1124:	68 f1       	brcs	.+90     	; 0x1180 <__addsf3x+0x98>
    1126:	1a 16       	cp	r1, r26
    1128:	f0 40       	sbci	r31, 0x00	; 0
    112a:	a2 2f       	mov	r26, r18
    112c:	23 2f       	mov	r18, r19
    112e:	34 2f       	mov	r19, r20
    1130:	44 27       	eor	r20, r20
    1132:	58 5f       	subi	r21, 0xF8	; 248
    1134:	f3 cf       	rjmp	.-26     	; 0x111c <__addsf3x+0x34>
    1136:	46 95       	lsr	r20
    1138:	37 95       	ror	r19
    113a:	27 95       	ror	r18
    113c:	a7 95       	ror	r26
    113e:	f0 40       	sbci	r31, 0x00	; 0
    1140:	53 95       	inc	r21
    1142:	c9 f7       	brne	.-14     	; 0x1136 <__addsf3x+0x4e>
    1144:	7e f4       	brtc	.+30     	; 0x1164 <__addsf3x+0x7c>
    1146:	1f 16       	cp	r1, r31
    1148:	ba 0b       	sbc	r27, r26
    114a:	62 0b       	sbc	r22, r18
    114c:	73 0b       	sbc	r23, r19
    114e:	84 0b       	sbc	r24, r20
    1150:	ba f0       	brmi	.+46     	; 0x1180 <__addsf3x+0x98>
    1152:	91 50       	subi	r25, 0x01	; 1
    1154:	a1 f0       	breq	.+40     	; 0x117e <__addsf3x+0x96>
    1156:	ff 0f       	add	r31, r31
    1158:	bb 1f       	adc	r27, r27
    115a:	66 1f       	adc	r22, r22
    115c:	77 1f       	adc	r23, r23
    115e:	88 1f       	adc	r24, r24
    1160:	c2 f7       	brpl	.-16     	; 0x1152 <__addsf3x+0x6a>
    1162:	0e c0       	rjmp	.+28     	; 0x1180 <__addsf3x+0x98>
    1164:	ba 0f       	add	r27, r26
    1166:	62 1f       	adc	r22, r18
    1168:	73 1f       	adc	r23, r19
    116a:	84 1f       	adc	r24, r20
    116c:	48 f4       	brcc	.+18     	; 0x1180 <__addsf3x+0x98>
    116e:	87 95       	ror	r24
    1170:	77 95       	ror	r23
    1172:	67 95       	ror	r22
    1174:	b7 95       	ror	r27
    1176:	f7 95       	ror	r31
    1178:	9e 3f       	cpi	r25, 0xFE	; 254
    117a:	08 f0       	brcs	.+2      	; 0x117e <__addsf3x+0x96>
    117c:	b3 cf       	rjmp	.-154    	; 0x10e4 <__addsf3+0x1e>
    117e:	93 95       	inc	r25
    1180:	88 0f       	add	r24, r24
    1182:	08 f0       	brcs	.+2      	; 0x1186 <__addsf3x+0x9e>
    1184:	99 27       	eor	r25, r25
    1186:	ee 0f       	add	r30, r30
    1188:	97 95       	ror	r25
    118a:	87 95       	ror	r24
    118c:	08 95       	ret

0000118e <__cmpsf2>:
    118e:	d4 d0       	rcall	.+424    	; 0x1338 <__fp_cmp>
    1190:	08 f4       	brcc	.+2      	; 0x1194 <__cmpsf2+0x6>
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	08 95       	ret

00001196 <__divsf3>:
    1196:	0c d0       	rcall	.+24     	; 0x11b0 <__divsf3x>
    1198:	0a c1       	rjmp	.+532    	; 0x13ae <__fp_round>
    119a:	02 d1       	rcall	.+516    	; 0x13a0 <__fp_pscB>
    119c:	40 f0       	brcs	.+16     	; 0x11ae <__divsf3+0x18>
    119e:	f9 d0       	rcall	.+498    	; 0x1392 <__fp_pscA>
    11a0:	30 f0       	brcs	.+12     	; 0x11ae <__divsf3+0x18>
    11a2:	21 f4       	brne	.+8      	; 0x11ac <__divsf3+0x16>
    11a4:	5f 3f       	cpi	r21, 0xFF	; 255
    11a6:	19 f0       	breq	.+6      	; 0x11ae <__divsf3+0x18>
    11a8:	eb c0       	rjmp	.+470    	; 0x1380 <__fp_inf>
    11aa:	51 11       	cpse	r21, r1
    11ac:	34 c1       	rjmp	.+616    	; 0x1416 <__fp_szero>
    11ae:	ee c0       	rjmp	.+476    	; 0x138c <__fp_nan>

000011b0 <__divsf3x>:
    11b0:	0f d1       	rcall	.+542    	; 0x13d0 <__fp_split3>
    11b2:	98 f3       	brcs	.-26     	; 0x119a <__divsf3+0x4>

000011b4 <__divsf3_pse>:
    11b4:	99 23       	and	r25, r25
    11b6:	c9 f3       	breq	.-14     	; 0x11aa <__divsf3+0x14>
    11b8:	55 23       	and	r21, r21
    11ba:	b1 f3       	breq	.-20     	; 0x11a8 <__divsf3+0x12>
    11bc:	95 1b       	sub	r25, r21
    11be:	55 0b       	sbc	r21, r21
    11c0:	bb 27       	eor	r27, r27
    11c2:	aa 27       	eor	r26, r26
    11c4:	62 17       	cp	r22, r18
    11c6:	73 07       	cpc	r23, r19
    11c8:	84 07       	cpc	r24, r20
    11ca:	38 f0       	brcs	.+14     	; 0x11da <__divsf3_pse+0x26>
    11cc:	9f 5f       	subi	r25, 0xFF	; 255
    11ce:	5f 4f       	sbci	r21, 0xFF	; 255
    11d0:	22 0f       	add	r18, r18
    11d2:	33 1f       	adc	r19, r19
    11d4:	44 1f       	adc	r20, r20
    11d6:	aa 1f       	adc	r26, r26
    11d8:	a9 f3       	breq	.-22     	; 0x11c4 <__divsf3_pse+0x10>
    11da:	33 d0       	rcall	.+102    	; 0x1242 <__divsf3_pse+0x8e>
    11dc:	0e 2e       	mov	r0, r30
    11de:	3a f0       	brmi	.+14     	; 0x11ee <__divsf3_pse+0x3a>
    11e0:	e0 e8       	ldi	r30, 0x80	; 128
    11e2:	30 d0       	rcall	.+96     	; 0x1244 <__divsf3_pse+0x90>
    11e4:	91 50       	subi	r25, 0x01	; 1
    11e6:	50 40       	sbci	r21, 0x00	; 0
    11e8:	e6 95       	lsr	r30
    11ea:	00 1c       	adc	r0, r0
    11ec:	ca f7       	brpl	.-14     	; 0x11e0 <__divsf3_pse+0x2c>
    11ee:	29 d0       	rcall	.+82     	; 0x1242 <__divsf3_pse+0x8e>
    11f0:	fe 2f       	mov	r31, r30
    11f2:	27 d0       	rcall	.+78     	; 0x1242 <__divsf3_pse+0x8e>
    11f4:	66 0f       	add	r22, r22
    11f6:	77 1f       	adc	r23, r23
    11f8:	88 1f       	adc	r24, r24
    11fa:	bb 1f       	adc	r27, r27
    11fc:	26 17       	cp	r18, r22
    11fe:	37 07       	cpc	r19, r23
    1200:	48 07       	cpc	r20, r24
    1202:	ab 07       	cpc	r26, r27
    1204:	b0 e8       	ldi	r27, 0x80	; 128
    1206:	09 f0       	breq	.+2      	; 0x120a <__divsf3_pse+0x56>
    1208:	bb 0b       	sbc	r27, r27
    120a:	80 2d       	mov	r24, r0
    120c:	bf 01       	movw	r22, r30
    120e:	ff 27       	eor	r31, r31
    1210:	93 58       	subi	r25, 0x83	; 131
    1212:	5f 4f       	sbci	r21, 0xFF	; 255
    1214:	2a f0       	brmi	.+10     	; 0x1220 <__divsf3_pse+0x6c>
    1216:	9e 3f       	cpi	r25, 0xFE	; 254
    1218:	51 05       	cpc	r21, r1
    121a:	68 f0       	brcs	.+26     	; 0x1236 <__divsf3_pse+0x82>
    121c:	b1 c0       	rjmp	.+354    	; 0x1380 <__fp_inf>
    121e:	fb c0       	rjmp	.+502    	; 0x1416 <__fp_szero>
    1220:	5f 3f       	cpi	r21, 0xFF	; 255
    1222:	ec f3       	brlt	.-6      	; 0x121e <__divsf3_pse+0x6a>
    1224:	98 3e       	cpi	r25, 0xE8	; 232
    1226:	dc f3       	brlt	.-10     	; 0x121e <__divsf3_pse+0x6a>
    1228:	86 95       	lsr	r24
    122a:	77 95       	ror	r23
    122c:	67 95       	ror	r22
    122e:	b7 95       	ror	r27
    1230:	f7 95       	ror	r31
    1232:	9f 5f       	subi	r25, 0xFF	; 255
    1234:	c9 f7       	brne	.-14     	; 0x1228 <__divsf3_pse+0x74>
    1236:	88 0f       	add	r24, r24
    1238:	91 1d       	adc	r25, r1
    123a:	96 95       	lsr	r25
    123c:	87 95       	ror	r24
    123e:	97 f9       	bld	r25, 7
    1240:	08 95       	ret
    1242:	e1 e0       	ldi	r30, 0x01	; 1
    1244:	66 0f       	add	r22, r22
    1246:	77 1f       	adc	r23, r23
    1248:	88 1f       	adc	r24, r24
    124a:	bb 1f       	adc	r27, r27
    124c:	62 17       	cp	r22, r18
    124e:	73 07       	cpc	r23, r19
    1250:	84 07       	cpc	r24, r20
    1252:	ba 07       	cpc	r27, r26
    1254:	20 f0       	brcs	.+8      	; 0x125e <__divsf3_pse+0xaa>
    1256:	62 1b       	sub	r22, r18
    1258:	73 0b       	sbc	r23, r19
    125a:	84 0b       	sbc	r24, r20
    125c:	ba 0b       	sbc	r27, r26
    125e:	ee 1f       	adc	r30, r30
    1260:	88 f7       	brcc	.-30     	; 0x1244 <__divsf3_pse+0x90>
    1262:	e0 95       	com	r30
    1264:	08 95       	ret

00001266 <__fixunssfsi>:
    1266:	bc d0       	rcall	.+376    	; 0x13e0 <__fp_splitA>
    1268:	88 f0       	brcs	.+34     	; 0x128c <__fixunssfsi+0x26>
    126a:	9f 57       	subi	r25, 0x7F	; 127
    126c:	90 f0       	brcs	.+36     	; 0x1292 <__fixunssfsi+0x2c>
    126e:	b9 2f       	mov	r27, r25
    1270:	99 27       	eor	r25, r25
    1272:	b7 51       	subi	r27, 0x17	; 23
    1274:	a0 f0       	brcs	.+40     	; 0x129e <__fixunssfsi+0x38>
    1276:	d1 f0       	breq	.+52     	; 0x12ac <__fixunssfsi+0x46>
    1278:	66 0f       	add	r22, r22
    127a:	77 1f       	adc	r23, r23
    127c:	88 1f       	adc	r24, r24
    127e:	99 1f       	adc	r25, r25
    1280:	1a f0       	brmi	.+6      	; 0x1288 <__fixunssfsi+0x22>
    1282:	ba 95       	dec	r27
    1284:	c9 f7       	brne	.-14     	; 0x1278 <__fixunssfsi+0x12>
    1286:	12 c0       	rjmp	.+36     	; 0x12ac <__fixunssfsi+0x46>
    1288:	b1 30       	cpi	r27, 0x01	; 1
    128a:	81 f0       	breq	.+32     	; 0x12ac <__fixunssfsi+0x46>
    128c:	c3 d0       	rcall	.+390    	; 0x1414 <__fp_zero>
    128e:	b1 e0       	ldi	r27, 0x01	; 1
    1290:	08 95       	ret
    1292:	c0 c0       	rjmp	.+384    	; 0x1414 <__fp_zero>
    1294:	67 2f       	mov	r22, r23
    1296:	78 2f       	mov	r23, r24
    1298:	88 27       	eor	r24, r24
    129a:	b8 5f       	subi	r27, 0xF8	; 248
    129c:	39 f0       	breq	.+14     	; 0x12ac <__fixunssfsi+0x46>
    129e:	b9 3f       	cpi	r27, 0xF9	; 249
    12a0:	cc f3       	brlt	.-14     	; 0x1294 <__fixunssfsi+0x2e>
    12a2:	86 95       	lsr	r24
    12a4:	77 95       	ror	r23
    12a6:	67 95       	ror	r22
    12a8:	b3 95       	inc	r27
    12aa:	d9 f7       	brne	.-10     	; 0x12a2 <__fixunssfsi+0x3c>
    12ac:	3e f4       	brtc	.+14     	; 0x12bc <__fixunssfsi+0x56>
    12ae:	90 95       	com	r25
    12b0:	80 95       	com	r24
    12b2:	70 95       	com	r23
    12b4:	61 95       	neg	r22
    12b6:	7f 4f       	sbci	r23, 0xFF	; 255
    12b8:	8f 4f       	sbci	r24, 0xFF	; 255
    12ba:	9f 4f       	sbci	r25, 0xFF	; 255
    12bc:	08 95       	ret

000012be <__floatunsisf>:
    12be:	e8 94       	clt
    12c0:	09 c0       	rjmp	.+18     	; 0x12d4 <__floatsisf+0x12>

000012c2 <__floatsisf>:
    12c2:	97 fb       	bst	r25, 7
    12c4:	3e f4       	brtc	.+14     	; 0x12d4 <__floatsisf+0x12>
    12c6:	90 95       	com	r25
    12c8:	80 95       	com	r24
    12ca:	70 95       	com	r23
    12cc:	61 95       	neg	r22
    12ce:	7f 4f       	sbci	r23, 0xFF	; 255
    12d0:	8f 4f       	sbci	r24, 0xFF	; 255
    12d2:	9f 4f       	sbci	r25, 0xFF	; 255
    12d4:	99 23       	and	r25, r25
    12d6:	a9 f0       	breq	.+42     	; 0x1302 <__floatsisf+0x40>
    12d8:	f9 2f       	mov	r31, r25
    12da:	96 e9       	ldi	r25, 0x96	; 150
    12dc:	bb 27       	eor	r27, r27
    12de:	93 95       	inc	r25
    12e0:	f6 95       	lsr	r31
    12e2:	87 95       	ror	r24
    12e4:	77 95       	ror	r23
    12e6:	67 95       	ror	r22
    12e8:	b7 95       	ror	r27
    12ea:	f1 11       	cpse	r31, r1
    12ec:	f8 cf       	rjmp	.-16     	; 0x12de <__floatsisf+0x1c>
    12ee:	fa f4       	brpl	.+62     	; 0x132e <__floatsisf+0x6c>
    12f0:	bb 0f       	add	r27, r27
    12f2:	11 f4       	brne	.+4      	; 0x12f8 <__floatsisf+0x36>
    12f4:	60 ff       	sbrs	r22, 0
    12f6:	1b c0       	rjmp	.+54     	; 0x132e <__floatsisf+0x6c>
    12f8:	6f 5f       	subi	r22, 0xFF	; 255
    12fa:	7f 4f       	sbci	r23, 0xFF	; 255
    12fc:	8f 4f       	sbci	r24, 0xFF	; 255
    12fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1300:	16 c0       	rjmp	.+44     	; 0x132e <__floatsisf+0x6c>
    1302:	88 23       	and	r24, r24
    1304:	11 f0       	breq	.+4      	; 0x130a <__floatsisf+0x48>
    1306:	96 e9       	ldi	r25, 0x96	; 150
    1308:	11 c0       	rjmp	.+34     	; 0x132c <__floatsisf+0x6a>
    130a:	77 23       	and	r23, r23
    130c:	21 f0       	breq	.+8      	; 0x1316 <__floatsisf+0x54>
    130e:	9e e8       	ldi	r25, 0x8E	; 142
    1310:	87 2f       	mov	r24, r23
    1312:	76 2f       	mov	r23, r22
    1314:	05 c0       	rjmp	.+10     	; 0x1320 <__floatsisf+0x5e>
    1316:	66 23       	and	r22, r22
    1318:	71 f0       	breq	.+28     	; 0x1336 <__floatsisf+0x74>
    131a:	96 e8       	ldi	r25, 0x86	; 134
    131c:	86 2f       	mov	r24, r22
    131e:	70 e0       	ldi	r23, 0x00	; 0
    1320:	60 e0       	ldi	r22, 0x00	; 0
    1322:	2a f0       	brmi	.+10     	; 0x132e <__floatsisf+0x6c>
    1324:	9a 95       	dec	r25
    1326:	66 0f       	add	r22, r22
    1328:	77 1f       	adc	r23, r23
    132a:	88 1f       	adc	r24, r24
    132c:	da f7       	brpl	.-10     	; 0x1324 <__floatsisf+0x62>
    132e:	88 0f       	add	r24, r24
    1330:	96 95       	lsr	r25
    1332:	87 95       	ror	r24
    1334:	97 f9       	bld	r25, 7
    1336:	08 95       	ret

00001338 <__fp_cmp>:
    1338:	99 0f       	add	r25, r25
    133a:	00 08       	sbc	r0, r0
    133c:	55 0f       	add	r21, r21
    133e:	aa 0b       	sbc	r26, r26
    1340:	e0 e8       	ldi	r30, 0x80	; 128
    1342:	fe ef       	ldi	r31, 0xFE	; 254
    1344:	16 16       	cp	r1, r22
    1346:	17 06       	cpc	r1, r23
    1348:	e8 07       	cpc	r30, r24
    134a:	f9 07       	cpc	r31, r25
    134c:	c0 f0       	brcs	.+48     	; 0x137e <__fp_cmp+0x46>
    134e:	12 16       	cp	r1, r18
    1350:	13 06       	cpc	r1, r19
    1352:	e4 07       	cpc	r30, r20
    1354:	f5 07       	cpc	r31, r21
    1356:	98 f0       	brcs	.+38     	; 0x137e <__fp_cmp+0x46>
    1358:	62 1b       	sub	r22, r18
    135a:	73 0b       	sbc	r23, r19
    135c:	84 0b       	sbc	r24, r20
    135e:	95 0b       	sbc	r25, r21
    1360:	39 f4       	brne	.+14     	; 0x1370 <__fp_cmp+0x38>
    1362:	0a 26       	eor	r0, r26
    1364:	61 f0       	breq	.+24     	; 0x137e <__fp_cmp+0x46>
    1366:	23 2b       	or	r18, r19
    1368:	24 2b       	or	r18, r20
    136a:	25 2b       	or	r18, r21
    136c:	21 f4       	brne	.+8      	; 0x1376 <__fp_cmp+0x3e>
    136e:	08 95       	ret
    1370:	0a 26       	eor	r0, r26
    1372:	09 f4       	brne	.+2      	; 0x1376 <__fp_cmp+0x3e>
    1374:	a1 40       	sbci	r26, 0x01	; 1
    1376:	a6 95       	lsr	r26
    1378:	8f ef       	ldi	r24, 0xFF	; 255
    137a:	81 1d       	adc	r24, r1
    137c:	81 1d       	adc	r24, r1
    137e:	08 95       	ret

00001380 <__fp_inf>:
    1380:	97 f9       	bld	r25, 7
    1382:	9f 67       	ori	r25, 0x7F	; 127
    1384:	80 e8       	ldi	r24, 0x80	; 128
    1386:	70 e0       	ldi	r23, 0x00	; 0
    1388:	60 e0       	ldi	r22, 0x00	; 0
    138a:	08 95       	ret

0000138c <__fp_nan>:
    138c:	9f ef       	ldi	r25, 0xFF	; 255
    138e:	80 ec       	ldi	r24, 0xC0	; 192
    1390:	08 95       	ret

00001392 <__fp_pscA>:
    1392:	00 24       	eor	r0, r0
    1394:	0a 94       	dec	r0
    1396:	16 16       	cp	r1, r22
    1398:	17 06       	cpc	r1, r23
    139a:	18 06       	cpc	r1, r24
    139c:	09 06       	cpc	r0, r25
    139e:	08 95       	ret

000013a0 <__fp_pscB>:
    13a0:	00 24       	eor	r0, r0
    13a2:	0a 94       	dec	r0
    13a4:	12 16       	cp	r1, r18
    13a6:	13 06       	cpc	r1, r19
    13a8:	14 06       	cpc	r1, r20
    13aa:	05 06       	cpc	r0, r21
    13ac:	08 95       	ret

000013ae <__fp_round>:
    13ae:	09 2e       	mov	r0, r25
    13b0:	03 94       	inc	r0
    13b2:	00 0c       	add	r0, r0
    13b4:	11 f4       	brne	.+4      	; 0x13ba <__fp_round+0xc>
    13b6:	88 23       	and	r24, r24
    13b8:	52 f0       	brmi	.+20     	; 0x13ce <__fp_round+0x20>
    13ba:	bb 0f       	add	r27, r27
    13bc:	40 f4       	brcc	.+16     	; 0x13ce <__fp_round+0x20>
    13be:	bf 2b       	or	r27, r31
    13c0:	11 f4       	brne	.+4      	; 0x13c6 <__fp_round+0x18>
    13c2:	60 ff       	sbrs	r22, 0
    13c4:	04 c0       	rjmp	.+8      	; 0x13ce <__fp_round+0x20>
    13c6:	6f 5f       	subi	r22, 0xFF	; 255
    13c8:	7f 4f       	sbci	r23, 0xFF	; 255
    13ca:	8f 4f       	sbci	r24, 0xFF	; 255
    13cc:	9f 4f       	sbci	r25, 0xFF	; 255
    13ce:	08 95       	ret

000013d0 <__fp_split3>:
    13d0:	57 fd       	sbrc	r21, 7
    13d2:	90 58       	subi	r25, 0x80	; 128
    13d4:	44 0f       	add	r20, r20
    13d6:	55 1f       	adc	r21, r21
    13d8:	59 f0       	breq	.+22     	; 0x13f0 <__fp_splitA+0x10>
    13da:	5f 3f       	cpi	r21, 0xFF	; 255
    13dc:	71 f0       	breq	.+28     	; 0x13fa <__fp_splitA+0x1a>
    13de:	47 95       	ror	r20

000013e0 <__fp_splitA>:
    13e0:	88 0f       	add	r24, r24
    13e2:	97 fb       	bst	r25, 7
    13e4:	99 1f       	adc	r25, r25
    13e6:	61 f0       	breq	.+24     	; 0x1400 <__fp_splitA+0x20>
    13e8:	9f 3f       	cpi	r25, 0xFF	; 255
    13ea:	79 f0       	breq	.+30     	; 0x140a <__fp_splitA+0x2a>
    13ec:	87 95       	ror	r24
    13ee:	08 95       	ret
    13f0:	12 16       	cp	r1, r18
    13f2:	13 06       	cpc	r1, r19
    13f4:	14 06       	cpc	r1, r20
    13f6:	55 1f       	adc	r21, r21
    13f8:	f2 cf       	rjmp	.-28     	; 0x13de <__fp_split3+0xe>
    13fa:	46 95       	lsr	r20
    13fc:	f1 df       	rcall	.-30     	; 0x13e0 <__fp_splitA>
    13fe:	08 c0       	rjmp	.+16     	; 0x1410 <__fp_splitA+0x30>
    1400:	16 16       	cp	r1, r22
    1402:	17 06       	cpc	r1, r23
    1404:	18 06       	cpc	r1, r24
    1406:	99 1f       	adc	r25, r25
    1408:	f1 cf       	rjmp	.-30     	; 0x13ec <__fp_splitA+0xc>
    140a:	86 95       	lsr	r24
    140c:	71 05       	cpc	r23, r1
    140e:	61 05       	cpc	r22, r1
    1410:	08 94       	sec
    1412:	08 95       	ret

00001414 <__fp_zero>:
    1414:	e8 94       	clt

00001416 <__fp_szero>:
    1416:	bb 27       	eor	r27, r27
    1418:	66 27       	eor	r22, r22
    141a:	77 27       	eor	r23, r23
    141c:	cb 01       	movw	r24, r22
    141e:	97 f9       	bld	r25, 7
    1420:	08 95       	ret

00001422 <__gesf2>:
    1422:	8a df       	rcall	.-236    	; 0x1338 <__fp_cmp>
    1424:	08 f4       	brcc	.+2      	; 0x1428 <__gesf2+0x6>
    1426:	8f ef       	ldi	r24, 0xFF	; 255
    1428:	08 95       	ret

0000142a <__mulsf3>:
    142a:	0b d0       	rcall	.+22     	; 0x1442 <__mulsf3x>
    142c:	c0 cf       	rjmp	.-128    	; 0x13ae <__fp_round>
    142e:	b1 df       	rcall	.-158    	; 0x1392 <__fp_pscA>
    1430:	28 f0       	brcs	.+10     	; 0x143c <__mulsf3+0x12>
    1432:	b6 df       	rcall	.-148    	; 0x13a0 <__fp_pscB>
    1434:	18 f0       	brcs	.+6      	; 0x143c <__mulsf3+0x12>
    1436:	95 23       	and	r25, r21
    1438:	09 f0       	breq	.+2      	; 0x143c <__mulsf3+0x12>
    143a:	a2 cf       	rjmp	.-188    	; 0x1380 <__fp_inf>
    143c:	a7 cf       	rjmp	.-178    	; 0x138c <__fp_nan>
    143e:	11 24       	eor	r1, r1
    1440:	ea cf       	rjmp	.-44     	; 0x1416 <__fp_szero>

00001442 <__mulsf3x>:
    1442:	c6 df       	rcall	.-116    	; 0x13d0 <__fp_split3>
    1444:	a0 f3       	brcs	.-24     	; 0x142e <__mulsf3+0x4>

00001446 <__mulsf3_pse>:
    1446:	95 9f       	mul	r25, r21
    1448:	d1 f3       	breq	.-12     	; 0x143e <__mulsf3+0x14>
    144a:	95 0f       	add	r25, r21
    144c:	50 e0       	ldi	r21, 0x00	; 0
    144e:	55 1f       	adc	r21, r21
    1450:	62 9f       	mul	r22, r18
    1452:	f0 01       	movw	r30, r0
    1454:	72 9f       	mul	r23, r18
    1456:	bb 27       	eor	r27, r27
    1458:	f0 0d       	add	r31, r0
    145a:	b1 1d       	adc	r27, r1
    145c:	63 9f       	mul	r22, r19
    145e:	aa 27       	eor	r26, r26
    1460:	f0 0d       	add	r31, r0
    1462:	b1 1d       	adc	r27, r1
    1464:	aa 1f       	adc	r26, r26
    1466:	64 9f       	mul	r22, r20
    1468:	66 27       	eor	r22, r22
    146a:	b0 0d       	add	r27, r0
    146c:	a1 1d       	adc	r26, r1
    146e:	66 1f       	adc	r22, r22
    1470:	82 9f       	mul	r24, r18
    1472:	22 27       	eor	r18, r18
    1474:	b0 0d       	add	r27, r0
    1476:	a1 1d       	adc	r26, r1
    1478:	62 1f       	adc	r22, r18
    147a:	73 9f       	mul	r23, r19
    147c:	b0 0d       	add	r27, r0
    147e:	a1 1d       	adc	r26, r1
    1480:	62 1f       	adc	r22, r18
    1482:	83 9f       	mul	r24, r19
    1484:	a0 0d       	add	r26, r0
    1486:	61 1d       	adc	r22, r1
    1488:	22 1f       	adc	r18, r18
    148a:	74 9f       	mul	r23, r20
    148c:	33 27       	eor	r19, r19
    148e:	a0 0d       	add	r26, r0
    1490:	61 1d       	adc	r22, r1
    1492:	23 1f       	adc	r18, r19
    1494:	84 9f       	mul	r24, r20
    1496:	60 0d       	add	r22, r0
    1498:	21 1d       	adc	r18, r1
    149a:	82 2f       	mov	r24, r18
    149c:	76 2f       	mov	r23, r22
    149e:	6a 2f       	mov	r22, r26
    14a0:	11 24       	eor	r1, r1
    14a2:	9f 57       	subi	r25, 0x7F	; 127
    14a4:	50 40       	sbci	r21, 0x00	; 0
    14a6:	8a f0       	brmi	.+34     	; 0x14ca <__mulsf3_pse+0x84>
    14a8:	e1 f0       	breq	.+56     	; 0x14e2 <__mulsf3_pse+0x9c>
    14aa:	88 23       	and	r24, r24
    14ac:	4a f0       	brmi	.+18     	; 0x14c0 <__mulsf3_pse+0x7a>
    14ae:	ee 0f       	add	r30, r30
    14b0:	ff 1f       	adc	r31, r31
    14b2:	bb 1f       	adc	r27, r27
    14b4:	66 1f       	adc	r22, r22
    14b6:	77 1f       	adc	r23, r23
    14b8:	88 1f       	adc	r24, r24
    14ba:	91 50       	subi	r25, 0x01	; 1
    14bc:	50 40       	sbci	r21, 0x00	; 0
    14be:	a9 f7       	brne	.-22     	; 0x14aa <__mulsf3_pse+0x64>
    14c0:	9e 3f       	cpi	r25, 0xFE	; 254
    14c2:	51 05       	cpc	r21, r1
    14c4:	70 f0       	brcs	.+28     	; 0x14e2 <__mulsf3_pse+0x9c>
    14c6:	5c cf       	rjmp	.-328    	; 0x1380 <__fp_inf>
    14c8:	a6 cf       	rjmp	.-180    	; 0x1416 <__fp_szero>
    14ca:	5f 3f       	cpi	r21, 0xFF	; 255
    14cc:	ec f3       	brlt	.-6      	; 0x14c8 <__mulsf3_pse+0x82>
    14ce:	98 3e       	cpi	r25, 0xE8	; 232
    14d0:	dc f3       	brlt	.-10     	; 0x14c8 <__mulsf3_pse+0x82>
    14d2:	86 95       	lsr	r24
    14d4:	77 95       	ror	r23
    14d6:	67 95       	ror	r22
    14d8:	b7 95       	ror	r27
    14da:	f7 95       	ror	r31
    14dc:	e7 95       	ror	r30
    14de:	9f 5f       	subi	r25, 0xFF	; 255
    14e0:	c1 f7       	brne	.-16     	; 0x14d2 <__mulsf3_pse+0x8c>
    14e2:	fe 2b       	or	r31, r30
    14e4:	88 0f       	add	r24, r24
    14e6:	91 1d       	adc	r25, r1
    14e8:	96 95       	lsr	r25
    14ea:	87 95       	ror	r24
    14ec:	97 f9       	bld	r25, 7
    14ee:	08 95       	ret

000014f0 <fdevopen>:
    14f0:	0f 93       	push	r16
    14f2:	1f 93       	push	r17
    14f4:	cf 93       	push	r28
    14f6:	df 93       	push	r29
    14f8:	ec 01       	movw	r28, r24
    14fa:	8b 01       	movw	r16, r22
    14fc:	00 97       	sbiw	r24, 0x00	; 0
    14fe:	31 f4       	brne	.+12     	; 0x150c <fdevopen+0x1c>
    1500:	61 15       	cp	r22, r1
    1502:	71 05       	cpc	r23, r1
    1504:	19 f4       	brne	.+6      	; 0x150c <fdevopen+0x1c>
    1506:	80 e0       	ldi	r24, 0x00	; 0
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	38 c0       	rjmp	.+112    	; 0x157c <fdevopen+0x8c>
    150c:	6e e0       	ldi	r22, 0x0E	; 14
    150e:	70 e0       	ldi	r23, 0x00	; 0
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <calloc>
    1518:	fc 01       	movw	r30, r24
    151a:	00 97       	sbiw	r24, 0x00	; 0
    151c:	a1 f3       	breq	.-24     	; 0x1506 <fdevopen+0x16>
    151e:	80 e8       	ldi	r24, 0x80	; 128
    1520:	83 83       	std	Z+3, r24	; 0x03
    1522:	01 15       	cp	r16, r1
    1524:	11 05       	cpc	r17, r1
    1526:	71 f0       	breq	.+28     	; 0x1544 <fdevopen+0x54>
    1528:	13 87       	std	Z+11, r17	; 0x0b
    152a:	02 87       	std	Z+10, r16	; 0x0a
    152c:	81 e8       	ldi	r24, 0x81	; 129
    152e:	83 83       	std	Z+3, r24	; 0x03
    1530:	80 91 55 02 	lds	r24, 0x0255
    1534:	90 91 56 02 	lds	r25, 0x0256
    1538:	89 2b       	or	r24, r25
    153a:	21 f4       	brne	.+8      	; 0x1544 <fdevopen+0x54>
    153c:	f0 93 56 02 	sts	0x0256, r31
    1540:	e0 93 55 02 	sts	0x0255, r30
    1544:	20 97       	sbiw	r28, 0x00	; 0
    1546:	c9 f0       	breq	.+50     	; 0x157a <fdevopen+0x8a>
    1548:	d1 87       	std	Z+9, r29	; 0x09
    154a:	c0 87       	std	Z+8, r28	; 0x08
    154c:	83 81       	ldd	r24, Z+3	; 0x03
    154e:	82 60       	ori	r24, 0x02	; 2
    1550:	83 83       	std	Z+3, r24	; 0x03
    1552:	80 91 57 02 	lds	r24, 0x0257
    1556:	90 91 58 02 	lds	r25, 0x0258
    155a:	89 2b       	or	r24, r25
    155c:	71 f4       	brne	.+28     	; 0x157a <fdevopen+0x8a>
    155e:	f0 93 58 02 	sts	0x0258, r31
    1562:	e0 93 57 02 	sts	0x0257, r30
    1566:	80 91 59 02 	lds	r24, 0x0259
    156a:	90 91 5a 02 	lds	r25, 0x025A
    156e:	89 2b       	or	r24, r25
    1570:	21 f4       	brne	.+8      	; 0x157a <fdevopen+0x8a>
    1572:	f0 93 5a 02 	sts	0x025A, r31
    1576:	e0 93 59 02 	sts	0x0259, r30
    157a:	cf 01       	movw	r24, r30
    157c:	df 91       	pop	r29
    157e:	cf 91       	pop	r28
    1580:	1f 91       	pop	r17
    1582:	0f 91       	pop	r16
    1584:	08 95       	ret

00001586 <puts>:
    1586:	0f 93       	push	r16
    1588:	1f 93       	push	r17
    158a:	cf 93       	push	r28
    158c:	df 93       	push	r29
    158e:	e0 91 57 02 	lds	r30, 0x0257
    1592:	f0 91 58 02 	lds	r31, 0x0258
    1596:	23 81       	ldd	r18, Z+3	; 0x03
    1598:	21 ff       	sbrs	r18, 1
    159a:	1b c0       	rjmp	.+54     	; 0x15d2 <puts+0x4c>
    159c:	ec 01       	movw	r28, r24
    159e:	00 e0       	ldi	r16, 0x00	; 0
    15a0:	10 e0       	ldi	r17, 0x00	; 0
    15a2:	89 91       	ld	r24, Y+
    15a4:	60 91 57 02 	lds	r22, 0x0257
    15a8:	70 91 58 02 	lds	r23, 0x0258
    15ac:	db 01       	movw	r26, r22
    15ae:	18 96       	adiw	r26, 0x08	; 8
    15b0:	ed 91       	ld	r30, X+
    15b2:	fc 91       	ld	r31, X
    15b4:	19 97       	sbiw	r26, 0x09	; 9
    15b6:	88 23       	and	r24, r24
    15b8:	31 f0       	breq	.+12     	; 0x15c6 <puts+0x40>
    15ba:	09 95       	icall
    15bc:	89 2b       	or	r24, r25
    15be:	89 f3       	breq	.-30     	; 0x15a2 <puts+0x1c>
    15c0:	0f ef       	ldi	r16, 0xFF	; 255
    15c2:	1f ef       	ldi	r17, 0xFF	; 255
    15c4:	ee cf       	rjmp	.-36     	; 0x15a2 <puts+0x1c>
    15c6:	8a e0       	ldi	r24, 0x0A	; 10
    15c8:	09 95       	icall
    15ca:	89 2b       	or	r24, r25
    15cc:	11 f4       	brne	.+4      	; 0x15d2 <puts+0x4c>
    15ce:	c8 01       	movw	r24, r16
    15d0:	02 c0       	rjmp	.+4      	; 0x15d6 <puts+0x50>
    15d2:	8f ef       	ldi	r24, 0xFF	; 255
    15d4:	9f ef       	ldi	r25, 0xFF	; 255
    15d6:	df 91       	pop	r29
    15d8:	cf 91       	pop	r28
    15da:	1f 91       	pop	r17
    15dc:	0f 91       	pop	r16
    15de:	08 95       	ret

000015e0 <sprintf>:
    15e0:	ae e0       	ldi	r26, 0x0E	; 14
    15e2:	b0 e0       	ldi	r27, 0x00	; 0
    15e4:	e6 ef       	ldi	r30, 0xF6	; 246
    15e6:	fa e0       	ldi	r31, 0x0A	; 10
    15e8:	0c 94 e2 0e 	jmp	0x1dc4	; 0x1dc4 <__prologue_saves__+0x1c>
    15ec:	0d 89       	ldd	r16, Y+21	; 0x15
    15ee:	1e 89       	ldd	r17, Y+22	; 0x16
    15f0:	86 e0       	ldi	r24, 0x06	; 6
    15f2:	8c 83       	std	Y+4, r24	; 0x04
    15f4:	1a 83       	std	Y+2, r17	; 0x02
    15f6:	09 83       	std	Y+1, r16	; 0x01
    15f8:	8f ef       	ldi	r24, 0xFF	; 255
    15fa:	9f e7       	ldi	r25, 0x7F	; 127
    15fc:	9e 83       	std	Y+6, r25	; 0x06
    15fe:	8d 83       	std	Y+5, r24	; 0x05
    1600:	ae 01       	movw	r20, r28
    1602:	47 5e       	subi	r20, 0xE7	; 231
    1604:	5f 4f       	sbci	r21, 0xFF	; 255
    1606:	6f 89       	ldd	r22, Y+23	; 0x17
    1608:	78 8d       	ldd	r23, Y+24	; 0x18
    160a:	ce 01       	movw	r24, r28
    160c:	01 96       	adiw	r24, 0x01	; 1
    160e:	0e 94 12 0b 	call	0x1624	; 0x1624 <vfprintf>
    1612:	ef 81       	ldd	r30, Y+7	; 0x07
    1614:	f8 85       	ldd	r31, Y+8	; 0x08
    1616:	e0 0f       	add	r30, r16
    1618:	f1 1f       	adc	r31, r17
    161a:	10 82       	st	Z, r1
    161c:	2e 96       	adiw	r28, 0x0e	; 14
    161e:	e4 e0       	ldi	r30, 0x04	; 4
    1620:	0c 94 fe 0e 	jmp	0x1dfc	; 0x1dfc <__epilogue_restores__+0x1c>

00001624 <vfprintf>:
    1624:	ac e0       	ldi	r26, 0x0C	; 12
    1626:	b0 e0       	ldi	r27, 0x00	; 0
    1628:	e8 e1       	ldi	r30, 0x18	; 24
    162a:	fb e0       	ldi	r31, 0x0B	; 11
    162c:	0c 94 d4 0e 	jmp	0x1da8	; 0x1da8 <__prologue_saves__>
    1630:	7c 01       	movw	r14, r24
    1632:	6b 01       	movw	r12, r22
    1634:	8a 01       	movw	r16, r20
    1636:	fc 01       	movw	r30, r24
    1638:	17 82       	std	Z+7, r1	; 0x07
    163a:	16 82       	std	Z+6, r1	; 0x06
    163c:	83 81       	ldd	r24, Z+3	; 0x03
    163e:	81 ff       	sbrs	r24, 1
    1640:	bd c1       	rjmp	.+890    	; 0x19bc <vfprintf+0x398>
    1642:	ce 01       	movw	r24, r28
    1644:	01 96       	adiw	r24, 0x01	; 1
    1646:	4c 01       	movw	r8, r24
    1648:	f7 01       	movw	r30, r14
    164a:	93 81       	ldd	r25, Z+3	; 0x03
    164c:	f6 01       	movw	r30, r12
    164e:	93 fd       	sbrc	r25, 3
    1650:	85 91       	lpm	r24, Z+
    1652:	93 ff       	sbrs	r25, 3
    1654:	81 91       	ld	r24, Z+
    1656:	6f 01       	movw	r12, r30
    1658:	88 23       	and	r24, r24
    165a:	09 f4       	brne	.+2      	; 0x165e <vfprintf+0x3a>
    165c:	ab c1       	rjmp	.+854    	; 0x19b4 <vfprintf+0x390>
    165e:	85 32       	cpi	r24, 0x25	; 37
    1660:	39 f4       	brne	.+14     	; 0x1670 <vfprintf+0x4c>
    1662:	93 fd       	sbrc	r25, 3
    1664:	85 91       	lpm	r24, Z+
    1666:	93 ff       	sbrs	r25, 3
    1668:	81 91       	ld	r24, Z+
    166a:	6f 01       	movw	r12, r30
    166c:	85 32       	cpi	r24, 0x25	; 37
    166e:	29 f4       	brne	.+10     	; 0x167a <vfprintf+0x56>
    1670:	b7 01       	movw	r22, r14
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <fputc>
    1678:	e7 cf       	rjmp	.-50     	; 0x1648 <vfprintf+0x24>
    167a:	51 2c       	mov	r5, r1
    167c:	31 2c       	mov	r3, r1
    167e:	20 e0       	ldi	r18, 0x00	; 0
    1680:	20 32       	cpi	r18, 0x20	; 32
    1682:	a0 f4       	brcc	.+40     	; 0x16ac <vfprintf+0x88>
    1684:	8b 32       	cpi	r24, 0x2B	; 43
    1686:	69 f0       	breq	.+26     	; 0x16a2 <vfprintf+0x7e>
    1688:	30 f4       	brcc	.+12     	; 0x1696 <vfprintf+0x72>
    168a:	80 32       	cpi	r24, 0x20	; 32
    168c:	59 f0       	breq	.+22     	; 0x16a4 <vfprintf+0x80>
    168e:	83 32       	cpi	r24, 0x23	; 35
    1690:	69 f4       	brne	.+26     	; 0x16ac <vfprintf+0x88>
    1692:	20 61       	ori	r18, 0x10	; 16
    1694:	2c c0       	rjmp	.+88     	; 0x16ee <vfprintf+0xca>
    1696:	8d 32       	cpi	r24, 0x2D	; 45
    1698:	39 f0       	breq	.+14     	; 0x16a8 <vfprintf+0x84>
    169a:	80 33       	cpi	r24, 0x30	; 48
    169c:	39 f4       	brne	.+14     	; 0x16ac <vfprintf+0x88>
    169e:	21 60       	ori	r18, 0x01	; 1
    16a0:	26 c0       	rjmp	.+76     	; 0x16ee <vfprintf+0xca>
    16a2:	22 60       	ori	r18, 0x02	; 2
    16a4:	24 60       	ori	r18, 0x04	; 4
    16a6:	23 c0       	rjmp	.+70     	; 0x16ee <vfprintf+0xca>
    16a8:	28 60       	ori	r18, 0x08	; 8
    16aa:	21 c0       	rjmp	.+66     	; 0x16ee <vfprintf+0xca>
    16ac:	27 fd       	sbrc	r18, 7
    16ae:	27 c0       	rjmp	.+78     	; 0x16fe <vfprintf+0xda>
    16b0:	30 ed       	ldi	r19, 0xD0	; 208
    16b2:	38 0f       	add	r19, r24
    16b4:	3a 30       	cpi	r19, 0x0A	; 10
    16b6:	78 f4       	brcc	.+30     	; 0x16d6 <vfprintf+0xb2>
    16b8:	26 ff       	sbrs	r18, 6
    16ba:	06 c0       	rjmp	.+12     	; 0x16c8 <vfprintf+0xa4>
    16bc:	fa e0       	ldi	r31, 0x0A	; 10
    16be:	5f 9e       	mul	r5, r31
    16c0:	30 0d       	add	r19, r0
    16c2:	11 24       	eor	r1, r1
    16c4:	53 2e       	mov	r5, r19
    16c6:	13 c0       	rjmp	.+38     	; 0x16ee <vfprintf+0xca>
    16c8:	8a e0       	ldi	r24, 0x0A	; 10
    16ca:	38 9e       	mul	r3, r24
    16cc:	30 0d       	add	r19, r0
    16ce:	11 24       	eor	r1, r1
    16d0:	33 2e       	mov	r3, r19
    16d2:	20 62       	ori	r18, 0x20	; 32
    16d4:	0c c0       	rjmp	.+24     	; 0x16ee <vfprintf+0xca>
    16d6:	8e 32       	cpi	r24, 0x2E	; 46
    16d8:	21 f4       	brne	.+8      	; 0x16e2 <vfprintf+0xbe>
    16da:	26 fd       	sbrc	r18, 6
    16dc:	6b c1       	rjmp	.+726    	; 0x19b4 <vfprintf+0x390>
    16de:	20 64       	ori	r18, 0x40	; 64
    16e0:	06 c0       	rjmp	.+12     	; 0x16ee <vfprintf+0xca>
    16e2:	8c 36       	cpi	r24, 0x6C	; 108
    16e4:	11 f4       	brne	.+4      	; 0x16ea <vfprintf+0xc6>
    16e6:	20 68       	ori	r18, 0x80	; 128
    16e8:	02 c0       	rjmp	.+4      	; 0x16ee <vfprintf+0xca>
    16ea:	88 36       	cpi	r24, 0x68	; 104
    16ec:	41 f4       	brne	.+16     	; 0x16fe <vfprintf+0xda>
    16ee:	f6 01       	movw	r30, r12
    16f0:	93 fd       	sbrc	r25, 3
    16f2:	85 91       	lpm	r24, Z+
    16f4:	93 ff       	sbrs	r25, 3
    16f6:	81 91       	ld	r24, Z+
    16f8:	6f 01       	movw	r12, r30
    16fa:	81 11       	cpse	r24, r1
    16fc:	c1 cf       	rjmp	.-126    	; 0x1680 <vfprintf+0x5c>
    16fe:	98 2f       	mov	r25, r24
    1700:	9f 7d       	andi	r25, 0xDF	; 223
    1702:	95 54       	subi	r25, 0x45	; 69
    1704:	93 30       	cpi	r25, 0x03	; 3
    1706:	28 f4       	brcc	.+10     	; 0x1712 <vfprintf+0xee>
    1708:	0c 5f       	subi	r16, 0xFC	; 252
    170a:	1f 4f       	sbci	r17, 0xFF	; 255
    170c:	ff e3       	ldi	r31, 0x3F	; 63
    170e:	f9 83       	std	Y+1, r31	; 0x01
    1710:	0d c0       	rjmp	.+26     	; 0x172c <vfprintf+0x108>
    1712:	83 36       	cpi	r24, 0x63	; 99
    1714:	31 f0       	breq	.+12     	; 0x1722 <vfprintf+0xfe>
    1716:	83 37       	cpi	r24, 0x73	; 115
    1718:	71 f0       	breq	.+28     	; 0x1736 <vfprintf+0x112>
    171a:	83 35       	cpi	r24, 0x53	; 83
    171c:	09 f0       	breq	.+2      	; 0x1720 <vfprintf+0xfc>
    171e:	5b c0       	rjmp	.+182    	; 0x17d6 <vfprintf+0x1b2>
    1720:	22 c0       	rjmp	.+68     	; 0x1766 <vfprintf+0x142>
    1722:	f8 01       	movw	r30, r16
    1724:	80 81       	ld	r24, Z
    1726:	89 83       	std	Y+1, r24	; 0x01
    1728:	0e 5f       	subi	r16, 0xFE	; 254
    172a:	1f 4f       	sbci	r17, 0xFF	; 255
    172c:	44 24       	eor	r4, r4
    172e:	43 94       	inc	r4
    1730:	51 2c       	mov	r5, r1
    1732:	54 01       	movw	r10, r8
    1734:	15 c0       	rjmp	.+42     	; 0x1760 <vfprintf+0x13c>
    1736:	38 01       	movw	r6, r16
    1738:	f2 e0       	ldi	r31, 0x02	; 2
    173a:	6f 0e       	add	r6, r31
    173c:	71 1c       	adc	r7, r1
    173e:	f8 01       	movw	r30, r16
    1740:	a0 80       	ld	r10, Z
    1742:	b1 80       	ldd	r11, Z+1	; 0x01
    1744:	26 ff       	sbrs	r18, 6
    1746:	03 c0       	rjmp	.+6      	; 0x174e <vfprintf+0x12a>
    1748:	65 2d       	mov	r22, r5
    174a:	70 e0       	ldi	r23, 0x00	; 0
    174c:	02 c0       	rjmp	.+4      	; 0x1752 <vfprintf+0x12e>
    174e:	6f ef       	ldi	r22, 0xFF	; 255
    1750:	7f ef       	ldi	r23, 0xFF	; 255
    1752:	c5 01       	movw	r24, r10
    1754:	2c 87       	std	Y+12, r18	; 0x0c
    1756:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <strnlen>
    175a:	2c 01       	movw	r4, r24
    175c:	83 01       	movw	r16, r6
    175e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1760:	2f 77       	andi	r18, 0x7F	; 127
    1762:	22 2e       	mov	r2, r18
    1764:	17 c0       	rjmp	.+46     	; 0x1794 <vfprintf+0x170>
    1766:	38 01       	movw	r6, r16
    1768:	f2 e0       	ldi	r31, 0x02	; 2
    176a:	6f 0e       	add	r6, r31
    176c:	71 1c       	adc	r7, r1
    176e:	f8 01       	movw	r30, r16
    1770:	a0 80       	ld	r10, Z
    1772:	b1 80       	ldd	r11, Z+1	; 0x01
    1774:	26 ff       	sbrs	r18, 6
    1776:	03 c0       	rjmp	.+6      	; 0x177e <vfprintf+0x15a>
    1778:	65 2d       	mov	r22, r5
    177a:	70 e0       	ldi	r23, 0x00	; 0
    177c:	02 c0       	rjmp	.+4      	; 0x1782 <vfprintf+0x15e>
    177e:	6f ef       	ldi	r22, 0xFF	; 255
    1780:	7f ef       	ldi	r23, 0xFF	; 255
    1782:	c5 01       	movw	r24, r10
    1784:	2c 87       	std	Y+12, r18	; 0x0c
    1786:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <strnlen_P>
    178a:	2c 01       	movw	r4, r24
    178c:	2c 85       	ldd	r18, Y+12	; 0x0c
    178e:	20 68       	ori	r18, 0x80	; 128
    1790:	22 2e       	mov	r2, r18
    1792:	83 01       	movw	r16, r6
    1794:	23 fc       	sbrc	r2, 3
    1796:	1b c0       	rjmp	.+54     	; 0x17ce <vfprintf+0x1aa>
    1798:	83 2d       	mov	r24, r3
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	48 16       	cp	r4, r24
    179e:	59 06       	cpc	r5, r25
    17a0:	b0 f4       	brcc	.+44     	; 0x17ce <vfprintf+0x1aa>
    17a2:	b7 01       	movw	r22, r14
    17a4:	80 e2       	ldi	r24, 0x20	; 32
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <fputc>
    17ac:	3a 94       	dec	r3
    17ae:	f4 cf       	rjmp	.-24     	; 0x1798 <vfprintf+0x174>
    17b0:	f5 01       	movw	r30, r10
    17b2:	27 fc       	sbrc	r2, 7
    17b4:	85 91       	lpm	r24, Z+
    17b6:	27 fe       	sbrs	r2, 7
    17b8:	81 91       	ld	r24, Z+
    17ba:	5f 01       	movw	r10, r30
    17bc:	b7 01       	movw	r22, r14
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <fputc>
    17c4:	31 10       	cpse	r3, r1
    17c6:	3a 94       	dec	r3
    17c8:	f1 e0       	ldi	r31, 0x01	; 1
    17ca:	4f 1a       	sub	r4, r31
    17cc:	51 08       	sbc	r5, r1
    17ce:	41 14       	cp	r4, r1
    17d0:	51 04       	cpc	r5, r1
    17d2:	71 f7       	brne	.-36     	; 0x17b0 <vfprintf+0x18c>
    17d4:	e5 c0       	rjmp	.+458    	; 0x19a0 <vfprintf+0x37c>
    17d6:	84 36       	cpi	r24, 0x64	; 100
    17d8:	11 f0       	breq	.+4      	; 0x17de <vfprintf+0x1ba>
    17da:	89 36       	cpi	r24, 0x69	; 105
    17dc:	39 f5       	brne	.+78     	; 0x182c <vfprintf+0x208>
    17de:	f8 01       	movw	r30, r16
    17e0:	27 ff       	sbrs	r18, 7
    17e2:	07 c0       	rjmp	.+14     	; 0x17f2 <vfprintf+0x1ce>
    17e4:	60 81       	ld	r22, Z
    17e6:	71 81       	ldd	r23, Z+1	; 0x01
    17e8:	82 81       	ldd	r24, Z+2	; 0x02
    17ea:	93 81       	ldd	r25, Z+3	; 0x03
    17ec:	0c 5f       	subi	r16, 0xFC	; 252
    17ee:	1f 4f       	sbci	r17, 0xFF	; 255
    17f0:	08 c0       	rjmp	.+16     	; 0x1802 <vfprintf+0x1de>
    17f2:	60 81       	ld	r22, Z
    17f4:	71 81       	ldd	r23, Z+1	; 0x01
    17f6:	88 27       	eor	r24, r24
    17f8:	77 fd       	sbrc	r23, 7
    17fa:	80 95       	com	r24
    17fc:	98 2f       	mov	r25, r24
    17fe:	0e 5f       	subi	r16, 0xFE	; 254
    1800:	1f 4f       	sbci	r17, 0xFF	; 255
    1802:	2f 76       	andi	r18, 0x6F	; 111
    1804:	b2 2e       	mov	r11, r18
    1806:	97 ff       	sbrs	r25, 7
    1808:	09 c0       	rjmp	.+18     	; 0x181c <vfprintf+0x1f8>
    180a:	90 95       	com	r25
    180c:	80 95       	com	r24
    180e:	70 95       	com	r23
    1810:	61 95       	neg	r22
    1812:	7f 4f       	sbci	r23, 0xFF	; 255
    1814:	8f 4f       	sbci	r24, 0xFF	; 255
    1816:	9f 4f       	sbci	r25, 0xFF	; 255
    1818:	20 68       	ori	r18, 0x80	; 128
    181a:	b2 2e       	mov	r11, r18
    181c:	2a e0       	ldi	r18, 0x0A	; 10
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	a4 01       	movw	r20, r8
    1822:	0e 94 76 0e 	call	0x1cec	; 0x1cec <__ultoa_invert>
    1826:	a8 2e       	mov	r10, r24
    1828:	a8 18       	sub	r10, r8
    182a:	44 c0       	rjmp	.+136    	; 0x18b4 <vfprintf+0x290>
    182c:	85 37       	cpi	r24, 0x75	; 117
    182e:	29 f4       	brne	.+10     	; 0x183a <vfprintf+0x216>
    1830:	2f 7e       	andi	r18, 0xEF	; 239
    1832:	b2 2e       	mov	r11, r18
    1834:	2a e0       	ldi	r18, 0x0A	; 10
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	25 c0       	rjmp	.+74     	; 0x1884 <vfprintf+0x260>
    183a:	f2 2f       	mov	r31, r18
    183c:	f9 7f       	andi	r31, 0xF9	; 249
    183e:	bf 2e       	mov	r11, r31
    1840:	8f 36       	cpi	r24, 0x6F	; 111
    1842:	c1 f0       	breq	.+48     	; 0x1874 <vfprintf+0x250>
    1844:	18 f4       	brcc	.+6      	; 0x184c <vfprintf+0x228>
    1846:	88 35       	cpi	r24, 0x58	; 88
    1848:	79 f0       	breq	.+30     	; 0x1868 <vfprintf+0x244>
    184a:	b4 c0       	rjmp	.+360    	; 0x19b4 <vfprintf+0x390>
    184c:	80 37       	cpi	r24, 0x70	; 112
    184e:	19 f0       	breq	.+6      	; 0x1856 <vfprintf+0x232>
    1850:	88 37       	cpi	r24, 0x78	; 120
    1852:	21 f0       	breq	.+8      	; 0x185c <vfprintf+0x238>
    1854:	af c0       	rjmp	.+350    	; 0x19b4 <vfprintf+0x390>
    1856:	2f 2f       	mov	r18, r31
    1858:	20 61       	ori	r18, 0x10	; 16
    185a:	b2 2e       	mov	r11, r18
    185c:	b4 fe       	sbrs	r11, 4
    185e:	0d c0       	rjmp	.+26     	; 0x187a <vfprintf+0x256>
    1860:	8b 2d       	mov	r24, r11
    1862:	84 60       	ori	r24, 0x04	; 4
    1864:	b8 2e       	mov	r11, r24
    1866:	09 c0       	rjmp	.+18     	; 0x187a <vfprintf+0x256>
    1868:	24 ff       	sbrs	r18, 4
    186a:	0a c0       	rjmp	.+20     	; 0x1880 <vfprintf+0x25c>
    186c:	9f 2f       	mov	r25, r31
    186e:	96 60       	ori	r25, 0x06	; 6
    1870:	b9 2e       	mov	r11, r25
    1872:	06 c0       	rjmp	.+12     	; 0x1880 <vfprintf+0x25c>
    1874:	28 e0       	ldi	r18, 0x08	; 8
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	05 c0       	rjmp	.+10     	; 0x1884 <vfprintf+0x260>
    187a:	20 e1       	ldi	r18, 0x10	; 16
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	02 c0       	rjmp	.+4      	; 0x1884 <vfprintf+0x260>
    1880:	20 e1       	ldi	r18, 0x10	; 16
    1882:	32 e0       	ldi	r19, 0x02	; 2
    1884:	f8 01       	movw	r30, r16
    1886:	b7 fe       	sbrs	r11, 7
    1888:	07 c0       	rjmp	.+14     	; 0x1898 <vfprintf+0x274>
    188a:	60 81       	ld	r22, Z
    188c:	71 81       	ldd	r23, Z+1	; 0x01
    188e:	82 81       	ldd	r24, Z+2	; 0x02
    1890:	93 81       	ldd	r25, Z+3	; 0x03
    1892:	0c 5f       	subi	r16, 0xFC	; 252
    1894:	1f 4f       	sbci	r17, 0xFF	; 255
    1896:	06 c0       	rjmp	.+12     	; 0x18a4 <vfprintf+0x280>
    1898:	60 81       	ld	r22, Z
    189a:	71 81       	ldd	r23, Z+1	; 0x01
    189c:	80 e0       	ldi	r24, 0x00	; 0
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	0e 5f       	subi	r16, 0xFE	; 254
    18a2:	1f 4f       	sbci	r17, 0xFF	; 255
    18a4:	a4 01       	movw	r20, r8
    18a6:	0e 94 76 0e 	call	0x1cec	; 0x1cec <__ultoa_invert>
    18aa:	a8 2e       	mov	r10, r24
    18ac:	a8 18       	sub	r10, r8
    18ae:	fb 2d       	mov	r31, r11
    18b0:	ff 77       	andi	r31, 0x7F	; 127
    18b2:	bf 2e       	mov	r11, r31
    18b4:	b6 fe       	sbrs	r11, 6
    18b6:	0b c0       	rjmp	.+22     	; 0x18ce <vfprintf+0x2aa>
    18b8:	2b 2d       	mov	r18, r11
    18ba:	2e 7f       	andi	r18, 0xFE	; 254
    18bc:	a5 14       	cp	r10, r5
    18be:	50 f4       	brcc	.+20     	; 0x18d4 <vfprintf+0x2b0>
    18c0:	b4 fe       	sbrs	r11, 4
    18c2:	0a c0       	rjmp	.+20     	; 0x18d8 <vfprintf+0x2b4>
    18c4:	b2 fc       	sbrc	r11, 2
    18c6:	08 c0       	rjmp	.+16     	; 0x18d8 <vfprintf+0x2b4>
    18c8:	2b 2d       	mov	r18, r11
    18ca:	2e 7e       	andi	r18, 0xEE	; 238
    18cc:	05 c0       	rjmp	.+10     	; 0x18d8 <vfprintf+0x2b4>
    18ce:	7a 2c       	mov	r7, r10
    18d0:	2b 2d       	mov	r18, r11
    18d2:	03 c0       	rjmp	.+6      	; 0x18da <vfprintf+0x2b6>
    18d4:	7a 2c       	mov	r7, r10
    18d6:	01 c0       	rjmp	.+2      	; 0x18da <vfprintf+0x2b6>
    18d8:	75 2c       	mov	r7, r5
    18da:	24 ff       	sbrs	r18, 4
    18dc:	0d c0       	rjmp	.+26     	; 0x18f8 <vfprintf+0x2d4>
    18de:	fe 01       	movw	r30, r28
    18e0:	ea 0d       	add	r30, r10
    18e2:	f1 1d       	adc	r31, r1
    18e4:	80 81       	ld	r24, Z
    18e6:	80 33       	cpi	r24, 0x30	; 48
    18e8:	11 f4       	brne	.+4      	; 0x18ee <vfprintf+0x2ca>
    18ea:	29 7e       	andi	r18, 0xE9	; 233
    18ec:	09 c0       	rjmp	.+18     	; 0x1900 <vfprintf+0x2dc>
    18ee:	22 ff       	sbrs	r18, 2
    18f0:	06 c0       	rjmp	.+12     	; 0x18fe <vfprintf+0x2da>
    18f2:	73 94       	inc	r7
    18f4:	73 94       	inc	r7
    18f6:	04 c0       	rjmp	.+8      	; 0x1900 <vfprintf+0x2dc>
    18f8:	82 2f       	mov	r24, r18
    18fa:	86 78       	andi	r24, 0x86	; 134
    18fc:	09 f0       	breq	.+2      	; 0x1900 <vfprintf+0x2dc>
    18fe:	73 94       	inc	r7
    1900:	23 fd       	sbrc	r18, 3
    1902:	13 c0       	rjmp	.+38     	; 0x192a <vfprintf+0x306>
    1904:	20 ff       	sbrs	r18, 0
    1906:	06 c0       	rjmp	.+12     	; 0x1914 <vfprintf+0x2f0>
    1908:	5a 2c       	mov	r5, r10
    190a:	73 14       	cp	r7, r3
    190c:	18 f4       	brcc	.+6      	; 0x1914 <vfprintf+0x2f0>
    190e:	53 0c       	add	r5, r3
    1910:	57 18       	sub	r5, r7
    1912:	73 2c       	mov	r7, r3
    1914:	73 14       	cp	r7, r3
    1916:	68 f4       	brcc	.+26     	; 0x1932 <vfprintf+0x30e>
    1918:	b7 01       	movw	r22, r14
    191a:	80 e2       	ldi	r24, 0x20	; 32
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	2c 87       	std	Y+12, r18	; 0x0c
    1920:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <fputc>
    1924:	73 94       	inc	r7
    1926:	2c 85       	ldd	r18, Y+12	; 0x0c
    1928:	f5 cf       	rjmp	.-22     	; 0x1914 <vfprintf+0x2f0>
    192a:	73 14       	cp	r7, r3
    192c:	10 f4       	brcc	.+4      	; 0x1932 <vfprintf+0x30e>
    192e:	37 18       	sub	r3, r7
    1930:	01 c0       	rjmp	.+2      	; 0x1934 <vfprintf+0x310>
    1932:	31 2c       	mov	r3, r1
    1934:	24 ff       	sbrs	r18, 4
    1936:	12 c0       	rjmp	.+36     	; 0x195c <vfprintf+0x338>
    1938:	b7 01       	movw	r22, r14
    193a:	80 e3       	ldi	r24, 0x30	; 48
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	2c 87       	std	Y+12, r18	; 0x0c
    1940:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <fputc>
    1944:	2c 85       	ldd	r18, Y+12	; 0x0c
    1946:	22 ff       	sbrs	r18, 2
    1948:	17 c0       	rjmp	.+46     	; 0x1978 <vfprintf+0x354>
    194a:	21 ff       	sbrs	r18, 1
    194c:	03 c0       	rjmp	.+6      	; 0x1954 <vfprintf+0x330>
    194e:	88 e5       	ldi	r24, 0x58	; 88
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	02 c0       	rjmp	.+4      	; 0x1958 <vfprintf+0x334>
    1954:	88 e7       	ldi	r24, 0x78	; 120
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	b7 01       	movw	r22, r14
    195a:	0c c0       	rjmp	.+24     	; 0x1974 <vfprintf+0x350>
    195c:	82 2f       	mov	r24, r18
    195e:	86 78       	andi	r24, 0x86	; 134
    1960:	59 f0       	breq	.+22     	; 0x1978 <vfprintf+0x354>
    1962:	21 fd       	sbrc	r18, 1
    1964:	02 c0       	rjmp	.+4      	; 0x196a <vfprintf+0x346>
    1966:	80 e2       	ldi	r24, 0x20	; 32
    1968:	01 c0       	rjmp	.+2      	; 0x196c <vfprintf+0x348>
    196a:	8b e2       	ldi	r24, 0x2B	; 43
    196c:	27 fd       	sbrc	r18, 7
    196e:	8d e2       	ldi	r24, 0x2D	; 45
    1970:	b7 01       	movw	r22, r14
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <fputc>
    1978:	a5 14       	cp	r10, r5
    197a:	38 f4       	brcc	.+14     	; 0x198a <vfprintf+0x366>
    197c:	b7 01       	movw	r22, r14
    197e:	80 e3       	ldi	r24, 0x30	; 48
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <fputc>
    1986:	5a 94       	dec	r5
    1988:	f7 cf       	rjmp	.-18     	; 0x1978 <vfprintf+0x354>
    198a:	aa 94       	dec	r10
    198c:	f4 01       	movw	r30, r8
    198e:	ea 0d       	add	r30, r10
    1990:	f1 1d       	adc	r31, r1
    1992:	80 81       	ld	r24, Z
    1994:	b7 01       	movw	r22, r14
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <fputc>
    199c:	a1 10       	cpse	r10, r1
    199e:	f5 cf       	rjmp	.-22     	; 0x198a <vfprintf+0x366>
    19a0:	33 20       	and	r3, r3
    19a2:	09 f4       	brne	.+2      	; 0x19a6 <vfprintf+0x382>
    19a4:	51 ce       	rjmp	.-862    	; 0x1648 <vfprintf+0x24>
    19a6:	b7 01       	movw	r22, r14
    19a8:	80 e2       	ldi	r24, 0x20	; 32
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <fputc>
    19b0:	3a 94       	dec	r3
    19b2:	f6 cf       	rjmp	.-20     	; 0x19a0 <vfprintf+0x37c>
    19b4:	f7 01       	movw	r30, r14
    19b6:	86 81       	ldd	r24, Z+6	; 0x06
    19b8:	97 81       	ldd	r25, Z+7	; 0x07
    19ba:	02 c0       	rjmp	.+4      	; 0x19c0 <vfprintf+0x39c>
    19bc:	8f ef       	ldi	r24, 0xFF	; 255
    19be:	9f ef       	ldi	r25, 0xFF	; 255
    19c0:	2c 96       	adiw	r28, 0x0c	; 12
    19c2:	e2 e1       	ldi	r30, 0x12	; 18
    19c4:	0c 94 f0 0e 	jmp	0x1de0	; 0x1de0 <__epilogue_restores__>

000019c8 <calloc>:
    19c8:	0f 93       	push	r16
    19ca:	1f 93       	push	r17
    19cc:	cf 93       	push	r28
    19ce:	df 93       	push	r29
    19d0:	86 9f       	mul	r24, r22
    19d2:	80 01       	movw	r16, r0
    19d4:	87 9f       	mul	r24, r23
    19d6:	10 0d       	add	r17, r0
    19d8:	96 9f       	mul	r25, r22
    19da:	10 0d       	add	r17, r0
    19dc:	11 24       	eor	r1, r1
    19de:	c8 01       	movw	r24, r16
    19e0:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <malloc>
    19e4:	ec 01       	movw	r28, r24
    19e6:	00 97       	sbiw	r24, 0x00	; 0
    19e8:	29 f0       	breq	.+10     	; 0x19f4 <calloc+0x2c>
    19ea:	a8 01       	movw	r20, r16
    19ec:	60 e0       	ldi	r22, 0x00	; 0
    19ee:	70 e0       	ldi	r23, 0x00	; 0
    19f0:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <memset>
    19f4:	ce 01       	movw	r24, r28
    19f6:	df 91       	pop	r29
    19f8:	cf 91       	pop	r28
    19fa:	1f 91       	pop	r17
    19fc:	0f 91       	pop	r16
    19fe:	08 95       	ret

00001a00 <malloc>:
    1a00:	cf 93       	push	r28
    1a02:	df 93       	push	r29
    1a04:	82 30       	cpi	r24, 0x02	; 2
    1a06:	91 05       	cpc	r25, r1
    1a08:	10 f4       	brcc	.+4      	; 0x1a0e <malloc+0xe>
    1a0a:	82 e0       	ldi	r24, 0x02	; 2
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	e0 91 5d 02 	lds	r30, 0x025D
    1a12:	f0 91 5e 02 	lds	r31, 0x025E
    1a16:	20 e0       	ldi	r18, 0x00	; 0
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	a0 e0       	ldi	r26, 0x00	; 0
    1a1c:	b0 e0       	ldi	r27, 0x00	; 0
    1a1e:	30 97       	sbiw	r30, 0x00	; 0
    1a20:	39 f1       	breq	.+78     	; 0x1a70 <malloc+0x70>
    1a22:	40 81       	ld	r20, Z
    1a24:	51 81       	ldd	r21, Z+1	; 0x01
    1a26:	48 17       	cp	r20, r24
    1a28:	59 07       	cpc	r21, r25
    1a2a:	b8 f0       	brcs	.+46     	; 0x1a5a <malloc+0x5a>
    1a2c:	48 17       	cp	r20, r24
    1a2e:	59 07       	cpc	r21, r25
    1a30:	71 f4       	brne	.+28     	; 0x1a4e <malloc+0x4e>
    1a32:	82 81       	ldd	r24, Z+2	; 0x02
    1a34:	93 81       	ldd	r25, Z+3	; 0x03
    1a36:	10 97       	sbiw	r26, 0x00	; 0
    1a38:	29 f0       	breq	.+10     	; 0x1a44 <malloc+0x44>
    1a3a:	13 96       	adiw	r26, 0x03	; 3
    1a3c:	9c 93       	st	X, r25
    1a3e:	8e 93       	st	-X, r24
    1a40:	12 97       	sbiw	r26, 0x02	; 2
    1a42:	2c c0       	rjmp	.+88     	; 0x1a9c <malloc+0x9c>
    1a44:	90 93 5e 02 	sts	0x025E, r25
    1a48:	80 93 5d 02 	sts	0x025D, r24
    1a4c:	27 c0       	rjmp	.+78     	; 0x1a9c <malloc+0x9c>
    1a4e:	21 15       	cp	r18, r1
    1a50:	31 05       	cpc	r19, r1
    1a52:	31 f0       	breq	.+12     	; 0x1a60 <malloc+0x60>
    1a54:	42 17       	cp	r20, r18
    1a56:	53 07       	cpc	r21, r19
    1a58:	18 f0       	brcs	.+6      	; 0x1a60 <malloc+0x60>
    1a5a:	a9 01       	movw	r20, r18
    1a5c:	db 01       	movw	r26, r22
    1a5e:	01 c0       	rjmp	.+2      	; 0x1a62 <malloc+0x62>
    1a60:	ef 01       	movw	r28, r30
    1a62:	9a 01       	movw	r18, r20
    1a64:	bd 01       	movw	r22, r26
    1a66:	df 01       	movw	r26, r30
    1a68:	02 80       	ldd	r0, Z+2	; 0x02
    1a6a:	f3 81       	ldd	r31, Z+3	; 0x03
    1a6c:	e0 2d       	mov	r30, r0
    1a6e:	d7 cf       	rjmp	.-82     	; 0x1a1e <malloc+0x1e>
    1a70:	21 15       	cp	r18, r1
    1a72:	31 05       	cpc	r19, r1
    1a74:	f9 f0       	breq	.+62     	; 0x1ab4 <malloc+0xb4>
    1a76:	28 1b       	sub	r18, r24
    1a78:	39 0b       	sbc	r19, r25
    1a7a:	24 30       	cpi	r18, 0x04	; 4
    1a7c:	31 05       	cpc	r19, r1
    1a7e:	80 f4       	brcc	.+32     	; 0x1aa0 <malloc+0xa0>
    1a80:	8a 81       	ldd	r24, Y+2	; 0x02
    1a82:	9b 81       	ldd	r25, Y+3	; 0x03
    1a84:	61 15       	cp	r22, r1
    1a86:	71 05       	cpc	r23, r1
    1a88:	21 f0       	breq	.+8      	; 0x1a92 <malloc+0x92>
    1a8a:	fb 01       	movw	r30, r22
    1a8c:	93 83       	std	Z+3, r25	; 0x03
    1a8e:	82 83       	std	Z+2, r24	; 0x02
    1a90:	04 c0       	rjmp	.+8      	; 0x1a9a <malloc+0x9a>
    1a92:	90 93 5e 02 	sts	0x025E, r25
    1a96:	80 93 5d 02 	sts	0x025D, r24
    1a9a:	fe 01       	movw	r30, r28
    1a9c:	32 96       	adiw	r30, 0x02	; 2
    1a9e:	44 c0       	rjmp	.+136    	; 0x1b28 <malloc+0x128>
    1aa0:	fe 01       	movw	r30, r28
    1aa2:	e2 0f       	add	r30, r18
    1aa4:	f3 1f       	adc	r31, r19
    1aa6:	81 93       	st	Z+, r24
    1aa8:	91 93       	st	Z+, r25
    1aaa:	22 50       	subi	r18, 0x02	; 2
    1aac:	31 09       	sbc	r19, r1
    1aae:	39 83       	std	Y+1, r19	; 0x01
    1ab0:	28 83       	st	Y, r18
    1ab2:	3a c0       	rjmp	.+116    	; 0x1b28 <malloc+0x128>
    1ab4:	20 91 5b 02 	lds	r18, 0x025B
    1ab8:	30 91 5c 02 	lds	r19, 0x025C
    1abc:	23 2b       	or	r18, r19
    1abe:	41 f4       	brne	.+16     	; 0x1ad0 <malloc+0xd0>
    1ac0:	20 91 02 01 	lds	r18, 0x0102
    1ac4:	30 91 03 01 	lds	r19, 0x0103
    1ac8:	30 93 5c 02 	sts	0x025C, r19
    1acc:	20 93 5b 02 	sts	0x025B, r18
    1ad0:	20 91 00 01 	lds	r18, 0x0100
    1ad4:	30 91 01 01 	lds	r19, 0x0101
    1ad8:	21 15       	cp	r18, r1
    1ada:	31 05       	cpc	r19, r1
    1adc:	41 f4       	brne	.+16     	; 0x1aee <malloc+0xee>
    1ade:	2d b7       	in	r18, 0x3d	; 61
    1ae0:	3e b7       	in	r19, 0x3e	; 62
    1ae2:	40 91 04 01 	lds	r20, 0x0104
    1ae6:	50 91 05 01 	lds	r21, 0x0105
    1aea:	24 1b       	sub	r18, r20
    1aec:	35 0b       	sbc	r19, r21
    1aee:	e0 91 5b 02 	lds	r30, 0x025B
    1af2:	f0 91 5c 02 	lds	r31, 0x025C
    1af6:	e2 17       	cp	r30, r18
    1af8:	f3 07       	cpc	r31, r19
    1afa:	a0 f4       	brcc	.+40     	; 0x1b24 <malloc+0x124>
    1afc:	2e 1b       	sub	r18, r30
    1afe:	3f 0b       	sbc	r19, r31
    1b00:	28 17       	cp	r18, r24
    1b02:	39 07       	cpc	r19, r25
    1b04:	78 f0       	brcs	.+30     	; 0x1b24 <malloc+0x124>
    1b06:	ac 01       	movw	r20, r24
    1b08:	4e 5f       	subi	r20, 0xFE	; 254
    1b0a:	5f 4f       	sbci	r21, 0xFF	; 255
    1b0c:	24 17       	cp	r18, r20
    1b0e:	35 07       	cpc	r19, r21
    1b10:	48 f0       	brcs	.+18     	; 0x1b24 <malloc+0x124>
    1b12:	4e 0f       	add	r20, r30
    1b14:	5f 1f       	adc	r21, r31
    1b16:	50 93 5c 02 	sts	0x025C, r21
    1b1a:	40 93 5b 02 	sts	0x025B, r20
    1b1e:	81 93       	st	Z+, r24
    1b20:	91 93       	st	Z+, r25
    1b22:	02 c0       	rjmp	.+4      	; 0x1b28 <malloc+0x128>
    1b24:	e0 e0       	ldi	r30, 0x00	; 0
    1b26:	f0 e0       	ldi	r31, 0x00	; 0
    1b28:	cf 01       	movw	r24, r30
    1b2a:	df 91       	pop	r29
    1b2c:	cf 91       	pop	r28
    1b2e:	08 95       	ret

00001b30 <free>:
    1b30:	cf 93       	push	r28
    1b32:	df 93       	push	r29
    1b34:	00 97       	sbiw	r24, 0x00	; 0
    1b36:	09 f4       	brne	.+2      	; 0x1b3a <free+0xa>
    1b38:	87 c0       	rjmp	.+270    	; 0x1c48 <free+0x118>
    1b3a:	fc 01       	movw	r30, r24
    1b3c:	32 97       	sbiw	r30, 0x02	; 2
    1b3e:	13 82       	std	Z+3, r1	; 0x03
    1b40:	12 82       	std	Z+2, r1	; 0x02
    1b42:	c0 91 5d 02 	lds	r28, 0x025D
    1b46:	d0 91 5e 02 	lds	r29, 0x025E
    1b4a:	20 97       	sbiw	r28, 0x00	; 0
    1b4c:	81 f4       	brne	.+32     	; 0x1b6e <free+0x3e>
    1b4e:	20 81       	ld	r18, Z
    1b50:	31 81       	ldd	r19, Z+1	; 0x01
    1b52:	28 0f       	add	r18, r24
    1b54:	39 1f       	adc	r19, r25
    1b56:	80 91 5b 02 	lds	r24, 0x025B
    1b5a:	90 91 5c 02 	lds	r25, 0x025C
    1b5e:	82 17       	cp	r24, r18
    1b60:	93 07       	cpc	r25, r19
    1b62:	79 f5       	brne	.+94     	; 0x1bc2 <free+0x92>
    1b64:	f0 93 5c 02 	sts	0x025C, r31
    1b68:	e0 93 5b 02 	sts	0x025B, r30
    1b6c:	6d c0       	rjmp	.+218    	; 0x1c48 <free+0x118>
    1b6e:	de 01       	movw	r26, r28
    1b70:	20 e0       	ldi	r18, 0x00	; 0
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	ae 17       	cp	r26, r30
    1b76:	bf 07       	cpc	r27, r31
    1b78:	50 f4       	brcc	.+20     	; 0x1b8e <free+0x5e>
    1b7a:	12 96       	adiw	r26, 0x02	; 2
    1b7c:	4d 91       	ld	r20, X+
    1b7e:	5c 91       	ld	r21, X
    1b80:	13 97       	sbiw	r26, 0x03	; 3
    1b82:	9d 01       	movw	r18, r26
    1b84:	41 15       	cp	r20, r1
    1b86:	51 05       	cpc	r21, r1
    1b88:	09 f1       	breq	.+66     	; 0x1bcc <free+0x9c>
    1b8a:	da 01       	movw	r26, r20
    1b8c:	f3 cf       	rjmp	.-26     	; 0x1b74 <free+0x44>
    1b8e:	b3 83       	std	Z+3, r27	; 0x03
    1b90:	a2 83       	std	Z+2, r26	; 0x02
    1b92:	40 81       	ld	r20, Z
    1b94:	51 81       	ldd	r21, Z+1	; 0x01
    1b96:	84 0f       	add	r24, r20
    1b98:	95 1f       	adc	r25, r21
    1b9a:	8a 17       	cp	r24, r26
    1b9c:	9b 07       	cpc	r25, r27
    1b9e:	71 f4       	brne	.+28     	; 0x1bbc <free+0x8c>
    1ba0:	8d 91       	ld	r24, X+
    1ba2:	9c 91       	ld	r25, X
    1ba4:	11 97       	sbiw	r26, 0x01	; 1
    1ba6:	84 0f       	add	r24, r20
    1ba8:	95 1f       	adc	r25, r21
    1baa:	02 96       	adiw	r24, 0x02	; 2
    1bac:	91 83       	std	Z+1, r25	; 0x01
    1bae:	80 83       	st	Z, r24
    1bb0:	12 96       	adiw	r26, 0x02	; 2
    1bb2:	8d 91       	ld	r24, X+
    1bb4:	9c 91       	ld	r25, X
    1bb6:	13 97       	sbiw	r26, 0x03	; 3
    1bb8:	93 83       	std	Z+3, r25	; 0x03
    1bba:	82 83       	std	Z+2, r24	; 0x02
    1bbc:	21 15       	cp	r18, r1
    1bbe:	31 05       	cpc	r19, r1
    1bc0:	29 f4       	brne	.+10     	; 0x1bcc <free+0x9c>
    1bc2:	f0 93 5e 02 	sts	0x025E, r31
    1bc6:	e0 93 5d 02 	sts	0x025D, r30
    1bca:	3e c0       	rjmp	.+124    	; 0x1c48 <free+0x118>
    1bcc:	d9 01       	movw	r26, r18
    1bce:	13 96       	adiw	r26, 0x03	; 3
    1bd0:	fc 93       	st	X, r31
    1bd2:	ee 93       	st	-X, r30
    1bd4:	12 97       	sbiw	r26, 0x02	; 2
    1bd6:	4d 91       	ld	r20, X+
    1bd8:	5d 91       	ld	r21, X+
    1bda:	a4 0f       	add	r26, r20
    1bdc:	b5 1f       	adc	r27, r21
    1bde:	ea 17       	cp	r30, r26
    1be0:	fb 07       	cpc	r31, r27
    1be2:	79 f4       	brne	.+30     	; 0x1c02 <free+0xd2>
    1be4:	80 81       	ld	r24, Z
    1be6:	91 81       	ldd	r25, Z+1	; 0x01
    1be8:	84 0f       	add	r24, r20
    1bea:	95 1f       	adc	r25, r21
    1bec:	02 96       	adiw	r24, 0x02	; 2
    1bee:	d9 01       	movw	r26, r18
    1bf0:	11 96       	adiw	r26, 0x01	; 1
    1bf2:	9c 93       	st	X, r25
    1bf4:	8e 93       	st	-X, r24
    1bf6:	82 81       	ldd	r24, Z+2	; 0x02
    1bf8:	93 81       	ldd	r25, Z+3	; 0x03
    1bfa:	13 96       	adiw	r26, 0x03	; 3
    1bfc:	9c 93       	st	X, r25
    1bfe:	8e 93       	st	-X, r24
    1c00:	12 97       	sbiw	r26, 0x02	; 2
    1c02:	e0 e0       	ldi	r30, 0x00	; 0
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	8a 81       	ldd	r24, Y+2	; 0x02
    1c08:	9b 81       	ldd	r25, Y+3	; 0x03
    1c0a:	00 97       	sbiw	r24, 0x00	; 0
    1c0c:	19 f0       	breq	.+6      	; 0x1c14 <free+0xe4>
    1c0e:	fe 01       	movw	r30, r28
    1c10:	ec 01       	movw	r28, r24
    1c12:	f9 cf       	rjmp	.-14     	; 0x1c06 <free+0xd6>
    1c14:	ce 01       	movw	r24, r28
    1c16:	02 96       	adiw	r24, 0x02	; 2
    1c18:	28 81       	ld	r18, Y
    1c1a:	39 81       	ldd	r19, Y+1	; 0x01
    1c1c:	82 0f       	add	r24, r18
    1c1e:	93 1f       	adc	r25, r19
    1c20:	20 91 5b 02 	lds	r18, 0x025B
    1c24:	30 91 5c 02 	lds	r19, 0x025C
    1c28:	28 17       	cp	r18, r24
    1c2a:	39 07       	cpc	r19, r25
    1c2c:	69 f4       	brne	.+26     	; 0x1c48 <free+0x118>
    1c2e:	30 97       	sbiw	r30, 0x00	; 0
    1c30:	29 f4       	brne	.+10     	; 0x1c3c <free+0x10c>
    1c32:	10 92 5e 02 	sts	0x025E, r1
    1c36:	10 92 5d 02 	sts	0x025D, r1
    1c3a:	02 c0       	rjmp	.+4      	; 0x1c40 <free+0x110>
    1c3c:	13 82       	std	Z+3, r1	; 0x03
    1c3e:	12 82       	std	Z+2, r1	; 0x02
    1c40:	d0 93 5c 02 	sts	0x025C, r29
    1c44:	c0 93 5b 02 	sts	0x025B, r28
    1c48:	df 91       	pop	r29
    1c4a:	cf 91       	pop	r28
    1c4c:	08 95       	ret

00001c4e <strnlen_P>:
    1c4e:	fc 01       	movw	r30, r24
    1c50:	05 90       	lpm	r0, Z+
    1c52:	61 50       	subi	r22, 0x01	; 1
    1c54:	70 40       	sbci	r23, 0x00	; 0
    1c56:	01 10       	cpse	r0, r1
    1c58:	d8 f7       	brcc	.-10     	; 0x1c50 <strnlen_P+0x2>
    1c5a:	80 95       	com	r24
    1c5c:	90 95       	com	r25
    1c5e:	8e 0f       	add	r24, r30
    1c60:	9f 1f       	adc	r25, r31
    1c62:	08 95       	ret

00001c64 <memset>:
    1c64:	dc 01       	movw	r26, r24
    1c66:	01 c0       	rjmp	.+2      	; 0x1c6a <memset+0x6>
    1c68:	6d 93       	st	X+, r22
    1c6a:	41 50       	subi	r20, 0x01	; 1
    1c6c:	50 40       	sbci	r21, 0x00	; 0
    1c6e:	e0 f7       	brcc	.-8      	; 0x1c68 <memset+0x4>
    1c70:	08 95       	ret

00001c72 <strnlen>:
    1c72:	fc 01       	movw	r30, r24
    1c74:	61 50       	subi	r22, 0x01	; 1
    1c76:	70 40       	sbci	r23, 0x00	; 0
    1c78:	01 90       	ld	r0, Z+
    1c7a:	01 10       	cpse	r0, r1
    1c7c:	d8 f7       	brcc	.-10     	; 0x1c74 <strnlen+0x2>
    1c7e:	80 95       	com	r24
    1c80:	90 95       	com	r25
    1c82:	8e 0f       	add	r24, r30
    1c84:	9f 1f       	adc	r25, r31
    1c86:	08 95       	ret

00001c88 <fputc>:
    1c88:	0f 93       	push	r16
    1c8a:	1f 93       	push	r17
    1c8c:	cf 93       	push	r28
    1c8e:	df 93       	push	r29
    1c90:	18 2f       	mov	r17, r24
    1c92:	09 2f       	mov	r16, r25
    1c94:	eb 01       	movw	r28, r22
    1c96:	8b 81       	ldd	r24, Y+3	; 0x03
    1c98:	81 fd       	sbrc	r24, 1
    1c9a:	03 c0       	rjmp	.+6      	; 0x1ca2 <fputc+0x1a>
    1c9c:	8f ef       	ldi	r24, 0xFF	; 255
    1c9e:	9f ef       	ldi	r25, 0xFF	; 255
    1ca0:	20 c0       	rjmp	.+64     	; 0x1ce2 <fputc+0x5a>
    1ca2:	82 ff       	sbrs	r24, 2
    1ca4:	10 c0       	rjmp	.+32     	; 0x1cc6 <fputc+0x3e>
    1ca6:	4e 81       	ldd	r20, Y+6	; 0x06
    1ca8:	5f 81       	ldd	r21, Y+7	; 0x07
    1caa:	2c 81       	ldd	r18, Y+4	; 0x04
    1cac:	3d 81       	ldd	r19, Y+5	; 0x05
    1cae:	42 17       	cp	r20, r18
    1cb0:	53 07       	cpc	r21, r19
    1cb2:	7c f4       	brge	.+30     	; 0x1cd2 <fputc+0x4a>
    1cb4:	e8 81       	ld	r30, Y
    1cb6:	f9 81       	ldd	r31, Y+1	; 0x01
    1cb8:	9f 01       	movw	r18, r30
    1cba:	2f 5f       	subi	r18, 0xFF	; 255
    1cbc:	3f 4f       	sbci	r19, 0xFF	; 255
    1cbe:	39 83       	std	Y+1, r19	; 0x01
    1cc0:	28 83       	st	Y, r18
    1cc2:	10 83       	st	Z, r17
    1cc4:	06 c0       	rjmp	.+12     	; 0x1cd2 <fputc+0x4a>
    1cc6:	e8 85       	ldd	r30, Y+8	; 0x08
    1cc8:	f9 85       	ldd	r31, Y+9	; 0x09
    1cca:	81 2f       	mov	r24, r17
    1ccc:	09 95       	icall
    1cce:	89 2b       	or	r24, r25
    1cd0:	29 f7       	brne	.-54     	; 0x1c9c <fputc+0x14>
    1cd2:	2e 81       	ldd	r18, Y+6	; 0x06
    1cd4:	3f 81       	ldd	r19, Y+7	; 0x07
    1cd6:	2f 5f       	subi	r18, 0xFF	; 255
    1cd8:	3f 4f       	sbci	r19, 0xFF	; 255
    1cda:	3f 83       	std	Y+7, r19	; 0x07
    1cdc:	2e 83       	std	Y+6, r18	; 0x06
    1cde:	81 2f       	mov	r24, r17
    1ce0:	90 2f       	mov	r25, r16
    1ce2:	df 91       	pop	r29
    1ce4:	cf 91       	pop	r28
    1ce6:	1f 91       	pop	r17
    1ce8:	0f 91       	pop	r16
    1cea:	08 95       	ret

00001cec <__ultoa_invert>:
    1cec:	fa 01       	movw	r30, r20
    1cee:	aa 27       	eor	r26, r26
    1cf0:	28 30       	cpi	r18, 0x08	; 8
    1cf2:	51 f1       	breq	.+84     	; 0x1d48 <__ultoa_invert+0x5c>
    1cf4:	20 31       	cpi	r18, 0x10	; 16
    1cf6:	81 f1       	breq	.+96     	; 0x1d58 <__ultoa_invert+0x6c>
    1cf8:	e8 94       	clt
    1cfa:	6f 93       	push	r22
    1cfc:	6e 7f       	andi	r22, 0xFE	; 254
    1cfe:	6e 5f       	subi	r22, 0xFE	; 254
    1d00:	7f 4f       	sbci	r23, 0xFF	; 255
    1d02:	8f 4f       	sbci	r24, 0xFF	; 255
    1d04:	9f 4f       	sbci	r25, 0xFF	; 255
    1d06:	af 4f       	sbci	r26, 0xFF	; 255
    1d08:	b1 e0       	ldi	r27, 0x01	; 1
    1d0a:	3e d0       	rcall	.+124    	; 0x1d88 <__ultoa_invert+0x9c>
    1d0c:	b4 e0       	ldi	r27, 0x04	; 4
    1d0e:	3c d0       	rcall	.+120    	; 0x1d88 <__ultoa_invert+0x9c>
    1d10:	67 0f       	add	r22, r23
    1d12:	78 1f       	adc	r23, r24
    1d14:	89 1f       	adc	r24, r25
    1d16:	9a 1f       	adc	r25, r26
    1d18:	a1 1d       	adc	r26, r1
    1d1a:	68 0f       	add	r22, r24
    1d1c:	79 1f       	adc	r23, r25
    1d1e:	8a 1f       	adc	r24, r26
    1d20:	91 1d       	adc	r25, r1
    1d22:	a1 1d       	adc	r26, r1
    1d24:	6a 0f       	add	r22, r26
    1d26:	71 1d       	adc	r23, r1
    1d28:	81 1d       	adc	r24, r1
    1d2a:	91 1d       	adc	r25, r1
    1d2c:	a1 1d       	adc	r26, r1
    1d2e:	20 d0       	rcall	.+64     	; 0x1d70 <__ultoa_invert+0x84>
    1d30:	09 f4       	brne	.+2      	; 0x1d34 <__ultoa_invert+0x48>
    1d32:	68 94       	set
    1d34:	3f 91       	pop	r19
    1d36:	2a e0       	ldi	r18, 0x0A	; 10
    1d38:	26 9f       	mul	r18, r22
    1d3a:	11 24       	eor	r1, r1
    1d3c:	30 19       	sub	r19, r0
    1d3e:	30 5d       	subi	r19, 0xD0	; 208
    1d40:	31 93       	st	Z+, r19
    1d42:	de f6       	brtc	.-74     	; 0x1cfa <__ultoa_invert+0xe>
    1d44:	cf 01       	movw	r24, r30
    1d46:	08 95       	ret
    1d48:	46 2f       	mov	r20, r22
    1d4a:	47 70       	andi	r20, 0x07	; 7
    1d4c:	40 5d       	subi	r20, 0xD0	; 208
    1d4e:	41 93       	st	Z+, r20
    1d50:	b3 e0       	ldi	r27, 0x03	; 3
    1d52:	0f d0       	rcall	.+30     	; 0x1d72 <__ultoa_invert+0x86>
    1d54:	c9 f7       	brne	.-14     	; 0x1d48 <__ultoa_invert+0x5c>
    1d56:	f6 cf       	rjmp	.-20     	; 0x1d44 <__ultoa_invert+0x58>
    1d58:	46 2f       	mov	r20, r22
    1d5a:	4f 70       	andi	r20, 0x0F	; 15
    1d5c:	40 5d       	subi	r20, 0xD0	; 208
    1d5e:	4a 33       	cpi	r20, 0x3A	; 58
    1d60:	18 f0       	brcs	.+6      	; 0x1d68 <__ultoa_invert+0x7c>
    1d62:	49 5d       	subi	r20, 0xD9	; 217
    1d64:	31 fd       	sbrc	r19, 1
    1d66:	40 52       	subi	r20, 0x20	; 32
    1d68:	41 93       	st	Z+, r20
    1d6a:	02 d0       	rcall	.+4      	; 0x1d70 <__ultoa_invert+0x84>
    1d6c:	a9 f7       	brne	.-22     	; 0x1d58 <__ultoa_invert+0x6c>
    1d6e:	ea cf       	rjmp	.-44     	; 0x1d44 <__ultoa_invert+0x58>
    1d70:	b4 e0       	ldi	r27, 0x04	; 4
    1d72:	a6 95       	lsr	r26
    1d74:	97 95       	ror	r25
    1d76:	87 95       	ror	r24
    1d78:	77 95       	ror	r23
    1d7a:	67 95       	ror	r22
    1d7c:	ba 95       	dec	r27
    1d7e:	c9 f7       	brne	.-14     	; 0x1d72 <__ultoa_invert+0x86>
    1d80:	00 97       	sbiw	r24, 0x00	; 0
    1d82:	61 05       	cpc	r22, r1
    1d84:	71 05       	cpc	r23, r1
    1d86:	08 95       	ret
    1d88:	9b 01       	movw	r18, r22
    1d8a:	ac 01       	movw	r20, r24
    1d8c:	0a 2e       	mov	r0, r26
    1d8e:	06 94       	lsr	r0
    1d90:	57 95       	ror	r21
    1d92:	47 95       	ror	r20
    1d94:	37 95       	ror	r19
    1d96:	27 95       	ror	r18
    1d98:	ba 95       	dec	r27
    1d9a:	c9 f7       	brne	.-14     	; 0x1d8e <__ultoa_invert+0xa2>
    1d9c:	62 0f       	add	r22, r18
    1d9e:	73 1f       	adc	r23, r19
    1da0:	84 1f       	adc	r24, r20
    1da2:	95 1f       	adc	r25, r21
    1da4:	a0 1d       	adc	r26, r0
    1da6:	08 95       	ret

00001da8 <__prologue_saves__>:
    1da8:	2f 92       	push	r2
    1daa:	3f 92       	push	r3
    1dac:	4f 92       	push	r4
    1dae:	5f 92       	push	r5
    1db0:	6f 92       	push	r6
    1db2:	7f 92       	push	r7
    1db4:	8f 92       	push	r8
    1db6:	9f 92       	push	r9
    1db8:	af 92       	push	r10
    1dba:	bf 92       	push	r11
    1dbc:	cf 92       	push	r12
    1dbe:	df 92       	push	r13
    1dc0:	ef 92       	push	r14
    1dc2:	ff 92       	push	r15
    1dc4:	0f 93       	push	r16
    1dc6:	1f 93       	push	r17
    1dc8:	cf 93       	push	r28
    1dca:	df 93       	push	r29
    1dcc:	cd b7       	in	r28, 0x3d	; 61
    1dce:	de b7       	in	r29, 0x3e	; 62
    1dd0:	ca 1b       	sub	r28, r26
    1dd2:	db 0b       	sbc	r29, r27
    1dd4:	0f b6       	in	r0, 0x3f	; 63
    1dd6:	f8 94       	cli
    1dd8:	de bf       	out	0x3e, r29	; 62
    1dda:	0f be       	out	0x3f, r0	; 63
    1ddc:	cd bf       	out	0x3d, r28	; 61
    1dde:	09 94       	ijmp

00001de0 <__epilogue_restores__>:
    1de0:	2a 88       	ldd	r2, Y+18	; 0x12
    1de2:	39 88       	ldd	r3, Y+17	; 0x11
    1de4:	48 88       	ldd	r4, Y+16	; 0x10
    1de6:	5f 84       	ldd	r5, Y+15	; 0x0f
    1de8:	6e 84       	ldd	r6, Y+14	; 0x0e
    1dea:	7d 84       	ldd	r7, Y+13	; 0x0d
    1dec:	8c 84       	ldd	r8, Y+12	; 0x0c
    1dee:	9b 84       	ldd	r9, Y+11	; 0x0b
    1df0:	aa 84       	ldd	r10, Y+10	; 0x0a
    1df2:	b9 84       	ldd	r11, Y+9	; 0x09
    1df4:	c8 84       	ldd	r12, Y+8	; 0x08
    1df6:	df 80       	ldd	r13, Y+7	; 0x07
    1df8:	ee 80       	ldd	r14, Y+6	; 0x06
    1dfa:	fd 80       	ldd	r15, Y+5	; 0x05
    1dfc:	0c 81       	ldd	r16, Y+4	; 0x04
    1dfe:	1b 81       	ldd	r17, Y+3	; 0x03
    1e00:	aa 81       	ldd	r26, Y+2	; 0x02
    1e02:	b9 81       	ldd	r27, Y+1	; 0x01
    1e04:	ce 0f       	add	r28, r30
    1e06:	d1 1d       	adc	r29, r1
    1e08:	0f b6       	in	r0, 0x3f	; 63
    1e0a:	f8 94       	cli
    1e0c:	de bf       	out	0x3e, r29	; 62
    1e0e:	0f be       	out	0x3f, r0	; 63
    1e10:	cd bf       	out	0x3d, r28	; 61
    1e12:	ed 01       	movw	r28, r26
    1e14:	08 95       	ret

00001e16 <_exit>:
    1e16:	f8 94       	cli

00001e18 <__stop_program>:
    1e18:	ff cf       	rjmp	.-2      	; 0x1e18 <__stop_program>
