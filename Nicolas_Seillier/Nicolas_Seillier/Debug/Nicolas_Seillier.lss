
Nicolas_Seillier.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000166  00800100  00001cb6  00001d4a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001cb6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800266  00800266  00001eb0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001eb0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000270  00000000  00000000  00001f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000320f  00000000  00000000  0000217c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000dc7  00000000  00000000  0000538b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000daf  00000000  00000000  00006152  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000594  00000000  00000000  00006f04  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000062a  00000000  00000000  00007498  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001080  00000000  00000000  00007ac2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001e8  00000000  00000000  00008b42  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__ctors_end>
       4:	0c 94 86 03 	jmp	0x70c	; 0x70c <__vector_1>
       8:	0c 94 19 04 	jmp	0x832	; 0x832 <__vector_2>
       c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      10:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      14:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      18:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      1c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      20:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      24:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      28:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      2c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      30:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      34:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      38:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      3c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      40:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      44:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      48:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      4c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      50:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      54:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      58:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      5c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      60:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      64:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      68:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      6c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	00 00       	nop
      72:	00 00       	nop
      74:	00 5c       	subi	r16, 0xC0	; 192
      76:	00 00       	nop
      78:	0c 00       	.word	0x000c	; ????
      7a:	0c 00       	.word	0x000c	; ????
      7c:	7c 28       	or	r7, r12
      7e:	7c 28       	or	r7, r12
      80:	58 dc       	rcall	.-1872   	; 0xfffff932 <__eeprom_end+0xff7ef932>
      82:	68 00       	.word	0x0068	; ????
      84:	24 10       	cpse	r2, r4
      86:	48 00       	.word	0x0048	; ????
      88:	28 54       	subi	r18, 0x48	; 72
      8a:	28 40       	sbci	r18, 0x08	; 8
      8c:	00 0c       	add	r0, r0
      8e:	00 00       	nop
      90:	00 78       	andi	r16, 0x80	; 128
      92:	84 00       	.word	0x0084	; ????
      94:	84 78       	andi	r24, 0x84	; 132
      96:	00 00       	nop
      98:	54 38       	cpi	r21, 0x84	; 132
      9a:	54 00       	.word	0x0054	; ????
      9c:	10 7c       	andi	r17, 0xC0	; 192
      9e:	10 00       	.word	0x0010	; ????
      a0:	80 40       	sbci	r24, 0x00	; 0
      a2:	00 00       	nop
      a4:	10 10       	cpse	r1, r0
      a6:	10 00       	.word	0x0010	; ????
      a8:	00 40       	sbci	r16, 0x00	; 0
      aa:	00 00       	nop
      ac:	60 10       	cpse	r6, r0
      ae:	0c 00       	.word	0x000c	; ????
      b0:	38 54       	subi	r19, 0x48	; 72
      b2:	38 00       	.word	0x0038	; ????
      b4:	48 7c       	andi	r20, 0xC8	; 200
      b6:	40 00       	.word	0x0040	; ????
      b8:	48 64       	ori	r20, 0x48	; 72
      ba:	58 00       	.word	0x0058	; ????
      bc:	44 54       	subi	r20, 0x44	; 68
      be:	2c 00       	.word	0x002c	; ????
      c0:	1c 10       	cpse	r1, r12
      c2:	7c 00       	.word	0x007c	; ????
      c4:	5c 54       	subi	r21, 0x4C	; 76
      c6:	24 00       	.word	0x0024	; ????
      c8:	38 54       	subi	r19, 0x48	; 72
      ca:	24 00       	.word	0x0024	; ????
      cc:	64 14       	cp	r6, r4
      ce:	0c 00       	.word	0x000c	; ????
      d0:	68 54       	subi	r22, 0x48	; 72
      d2:	2c 00       	.word	0x002c	; ????
      d4:	48 54       	subi	r20, 0x48	; 72
      d6:	38 00       	.word	0x0038	; ????
      d8:	00 48       	sbci	r16, 0x80	; 128
      da:	00 00       	nop
      dc:	80 48       	sbci	r24, 0x80	; 128
      de:	00 00       	nop
      e0:	10 28       	or	r1, r0
      e2:	44 00       	.word	0x0044	; ????
      e4:	28 28       	or	r2, r8
      e6:	28 00       	.word	0x0028	; ????
      e8:	44 28       	or	r4, r4
      ea:	10 00       	.word	0x0010	; ????
      ec:	04 54       	subi	r16, 0x44	; 68
      ee:	08 00       	.word	0x0008	; ????
      f0:	38 44       	sbci	r19, 0x48	; 72
      f2:	5c 00       	.word	0x005c	; ????
      f4:	78 14       	cp	r7, r8
      f6:	78 00       	.word	0x0078	; ????
      f8:	7c 54       	subi	r23, 0x4C	; 76
      fa:	28 00       	.word	0x0028	; ????
      fc:	38 44       	sbci	r19, 0x48	; 72
      fe:	28 00       	.word	0x0028	; ????
     100:	7c 44       	sbci	r23, 0x4C	; 76
     102:	38 00       	.word	0x0038	; ????
     104:	7c 54       	subi	r23, 0x4C	; 76
     106:	44 00       	.word	0x0044	; ????
     108:	7c 14       	cp	r7, r12
     10a:	04 00       	.word	0x0004	; ????
     10c:	38 44       	sbci	r19, 0x48	; 72
     10e:	74 00       	.word	0x0074	; ????
     110:	7c 10       	cpse	r7, r12
     112:	7c 00       	.word	0x007c	; ????
     114:	44 7c       	andi	r20, 0xC4	; 196
     116:	44 00       	.word	0x0044	; ????
     118:	20 40       	sbci	r18, 0x00	; 0
     11a:	3c 00       	.word	0x003c	; ????
     11c:	7c 10       	cpse	r7, r12
     11e:	6c 00       	.word	0x006c	; ????
     120:	7c 40       	sbci	r23, 0x0C	; 12
     122:	40 00       	.word	0x0040	; ????
     124:	7c 18       	sub	r7, r12
     126:	7c 00       	.word	0x007c	; ????
     128:	78 10       	cpse	r7, r8
     12a:	3c 00       	.word	0x003c	; ????
     12c:	38 44       	sbci	r19, 0x48	; 72
     12e:	38 00       	.word	0x0038	; ????
     130:	7c 14       	cp	r7, r12
     132:	08 00       	.word	0x0008	; ????
     134:	38 44       	sbci	r19, 0x48	; 72
     136:	b8 00       	.word	0x00b8	; ????
     138:	7c 14       	cp	r7, r12
     13a:	68 00       	.word	0x0068	; ????
     13c:	48 54       	subi	r20, 0x48	; 72
     13e:	24 00       	.word	0x0024	; ????
     140:	04 7c       	andi	r16, 0xC4	; 196
     142:	04 00       	.word	0x0004	; ????
     144:	7c 40       	sbci	r23, 0x0C	; 12
     146:	7c 00       	.word	0x007c	; ????
     148:	3c 60       	ori	r19, 0x0C	; 12
     14a:	3c 00       	.word	0x003c	; ????
     14c:	7c 30       	cpi	r23, 0x0C	; 12
     14e:	7c 00       	.word	0x007c	; ????
     150:	6c 10       	cpse	r6, r12
     152:	6c 00       	.word	0x006c	; ????
     154:	0c 70       	andi	r16, 0x0C	; 12
     156:	0c 00       	.word	0x000c	; ????
     158:	64 54       	subi	r22, 0x44	; 68
     15a:	4c 00       	.word	0x004c	; ????
     15c:	00 7c       	andi	r16, 0xC0	; 192
     15e:	44 00       	.word	0x0044	; ????
     160:	0c 10       	cpse	r0, r12
     162:	60 00       	.word	0x0060	; ????
     164:	44 7c       	andi	r20, 0xC4	; 196
     166:	00 00       	nop
     168:	08 04       	cpc	r0, r8
     16a:	08 00       	.word	0x0008	; ????
     16c:	80 80       	ld	r8, Z
     16e:	80 00       	.word	0x0080	; ????
     170:	00 04       	cpc	r0, r0
     172:	08 00       	.word	0x0008	; ????
     174:	30 48       	sbci	r19, 0x80	; 128
     176:	78 00       	.word	0x0078	; ????
     178:	7c 48       	sbci	r23, 0x8C	; 140
     17a:	30 00       	.word	0x0030	; ????
     17c:	30 48       	sbci	r19, 0x80	; 128
     17e:	48 00       	.word	0x0048	; ????
     180:	30 48       	sbci	r19, 0x80	; 128
     182:	7c 00       	.word	0x007c	; ????
     184:	30 68       	ori	r19, 0x80	; 128
     186:	50 00       	.word	0x0050	; ????
     188:	10 78       	andi	r17, 0x80	; 128
     18a:	14 00       	.word	0x0014	; ????
     18c:	90 a8       	ldd	r9, Z+48	; 0x30
     18e:	78 00       	.word	0x0078	; ????
     190:	7c 08       	sbc	r7, r12
     192:	70 00       	.word	0x0070	; ????
     194:	50 74       	andi	r21, 0x40	; 64
     196:	40 00       	.word	0x0040	; ????
     198:	80 80       	ld	r8, Z
     19a:	74 00       	.word	0x0074	; ????
     19c:	7c 10       	cpse	r7, r12
     19e:	68 00       	.word	0x0068	; ????
     1a0:	44 7c       	andi	r20, 0xC4	; 196
     1a2:	40 00       	.word	0x0040	; ????
     1a4:	78 10       	cpse	r7, r8
     1a6:	78 00       	.word	0x0078	; ????
     1a8:	78 08       	sbc	r7, r8
     1aa:	70 00       	.word	0x0070	; ????
     1ac:	30 48       	sbci	r19, 0x80	; 128
     1ae:	30 00       	.word	0x0030	; ????
     1b0:	f8 28       	or	r15, r8
     1b2:	10 00       	.word	0x0010	; ????
     1b4:	30 48       	sbci	r19, 0x80	; 128
     1b6:	f8 00       	.word	0x00f8	; ????
     1b8:	78 10       	cpse	r7, r8
     1ba:	08 00       	.word	0x0008	; ????
     1bc:	50 58       	subi	r21, 0x80	; 128
     1be:	28 00       	.word	0x0028	; ????
     1c0:	08 3c       	cpi	r16, 0xC8	; 200
     1c2:	48 00       	.word	0x0048	; ????
     1c4:	38 40       	sbci	r19, 0x08	; 8
     1c6:	78 00       	.word	0x0078	; ????
     1c8:	38 40       	sbci	r19, 0x08	; 8
     1ca:	38 00       	.word	0x0038	; ????
     1cc:	78 20       	and	r7, r8
     1ce:	78 00       	.word	0x0078	; ????
     1d0:	48 30       	cpi	r20, 0x08	; 8
     1d2:	48 00       	.word	0x0048	; ????
     1d4:	98 a0       	ldd	r9, Y+32	; 0x20
     1d6:	78 00       	.word	0x0078	; ????
     1d8:	48 68       	ori	r20, 0x88	; 136
     1da:	58 00       	.word	0x0058	; ????
     1dc:	10 78       	andi	r17, 0x80	; 128
     1de:	84 00       	.word	0x0084	; ????
     1e0:	00 7c       	andi	r16, 0xC0	; 192
     1e2:	00 00       	nop
     1e4:	84 78       	andi	r24, 0x84	; 132
     1e6:	10 00       	.word	0x0010	; ????
     1e8:	08 04       	cpc	r0, r8
     1ea:	08 04       	cpc	r0, r8

000001ec <__ctors_end>:
     1ec:	11 24       	eor	r1, r1
     1ee:	1f be       	out	0x3f, r1	; 63
     1f0:	cf ef       	ldi	r28, 0xFF	; 255
     1f2:	d4 e0       	ldi	r29, 0x04	; 4
     1f4:	de bf       	out	0x3e, r29	; 62
     1f6:	cd bf       	out	0x3d, r28	; 61

000001f8 <__do_copy_data>:
     1f8:	12 e0       	ldi	r17, 0x02	; 2
     1fa:	a0 e0       	ldi	r26, 0x00	; 0
     1fc:	b1 e0       	ldi	r27, 0x01	; 1
     1fe:	e6 eb       	ldi	r30, 0xB6	; 182
     200:	fc e1       	ldi	r31, 0x1C	; 28
     202:	02 c0       	rjmp	.+4      	; 0x208 <__do_copy_data+0x10>
     204:	05 90       	lpm	r0, Z+
     206:	0d 92       	st	X+, r0
     208:	a6 36       	cpi	r26, 0x66	; 102
     20a:	b1 07       	cpc	r27, r17
     20c:	d9 f7       	brne	.-10     	; 0x204 <__do_copy_data+0xc>

0000020e <__do_clear_bss>:
     20e:	22 e0       	ldi	r18, 0x02	; 2
     210:	a6 e6       	ldi	r26, 0x66	; 102
     212:	b2 e0       	ldi	r27, 0x02	; 2
     214:	01 c0       	rjmp	.+2      	; 0x218 <.do_clear_bss_start>

00000216 <.do_clear_bss_loop>:
     216:	1d 92       	st	X+, r1

00000218 <.do_clear_bss_start>:
     218:	a5 37       	cpi	r26, 0x75	; 117
     21a:	b2 07       	cpc	r27, r18
     21c:	e1 f7       	brne	.-8      	; 0x216 <.do_clear_bss_loop>
     21e:	0e 94 d6 05 	call	0xbac	; 0xbac <main>
     222:	0c 94 59 0e 	jmp	0x1cb2	; 0x1cb2 <_exit>

00000226 <__bad_interrupt>:
     226:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000022a <ADC_Convert>:

uint8_t ADC_Convert(uint8_t channel)
{
	/* Start conversion on the selected channel: write on command pins */
	volatile char* adc = (char *) ADC;
	adc[0] = channel;
     22a:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     22e:	83 ef       	ldi	r24, 0xF3	; 243
     230:	91 e0       	ldi	r25, 0x01	; 1
     232:	01 97       	sbiw	r24, 0x01	; 1
     234:	f1 f7       	brne	.-4      	; 0x232 <ADC_Convert+0x8>
     236:	00 c0       	rjmp	.+0      	; 0x238 <ADC_Convert+0xe>
     238:	00 00       	nop
	/* Wait for the conversion to be performed */
	_delay_ms(2);
	/* Read the result */
	return adc[0];
     23a:	80 91 00 14 	lds	r24, 0x1400
}
     23e:	08 95       	ret

00000240 <CAN_init>:
#include "MCP251DEFS.h"
#include "CAN.h"

void CAN_init()
{
	SPI_Init();
     240:	0e 94 93 07 	call	0xf26	; 0xf26 <SPI_Init>
	MCP2515_RESET();
     244:	0e 94 36 03 	call	0x66c	; 0x66c <MCP2515_RESET>
     248:	87 ea       	ldi	r24, 0xA7	; 167
     24a:	91 e6       	ldi	r25, 0x61	; 97
     24c:	01 97       	sbiw	r24, 0x01	; 1
     24e:	f1 f7       	brne	.-4      	; 0x24c <CAN_init+0xc>
     250:	00 c0       	rjmp	.+0      	; 0x252 <CAN_init+0x12>
     252:	00 00       	nop
	uint8_t	value;
	
	//MCP2515_BIT_MODIFY(MCP_RXB0D0, 0b01100100, 0xFF);
	
	/*normal mode*/
	MCP2515_BIT_MODIFY(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	60 ee       	ldi	r22, 0xE0	; 224
     258:	8f e0       	ldi	r24, 0x0F	; 15
     25a:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <MCP2515_BIT_MODIFY>
	
	value = MCP2515_READ(MCP_CANSTAT);
     25e:	8e e0       	ldi	r24, 0x0E	; 14
     260:	0e 94 3e 03 	call	0x67c	; 0x67c <MCP2515_READ>
	if ((value & MODE_MASK)  != MODE_NORMAL) {
     264:	80 7e       	andi	r24, 0xE0	; 224
     266:	21 f0       	breq	.+8      	; 0x270 <CAN_init+0x30>
		printf("MCP2515 is in normal mode \n");
     268:	88 e0       	ldi	r24, 0x08	; 8
     26a:	91 e0       	ldi	r25, 0x01	; 1
     26c:	0e 94 33 0a 	call	0x1466	; 0x1466 <puts>
	}
	
	/*enable interrupts*/
	MCP2515_BIT_MODIFY(MCP_CANINTE, 0b00000001, 0b00000001);
     270:	41 e0       	ldi	r20, 0x01	; 1
     272:	61 e0       	ldi	r22, 0x01	; 1
     274:	8b e2       	ldi	r24, 0x2B	; 43
     276:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <MCP2515_BIT_MODIFY>
     27a:	08 95       	ret

0000027c <CAN_send>:
}

void CAN_send(MSG* message)
{	
     27c:	ef 92       	push	r14
     27e:	ff 92       	push	r15
     280:	0f 93       	push	r16
     282:	1f 93       	push	r17
     284:	cf 93       	push	r28
     286:	df 93       	push	r29
     288:	7c 01       	movw	r14, r24
	/*wait until the previous message is sent*/
	while(MCP2515_READ(MCP_TXB0CTRL) & 0x04 == 0x4)
     28a:	80 e3       	ldi	r24, 0x30	; 48
     28c:	0e 94 3e 03 	call	0x67c	; 0x67c <MCP2515_READ>
     290:	80 fd       	sbrc	r24, 0
     292:	fb cf       	rjmp	.-10     	; 0x28a <CAN_send+0xe>
		;
	
	/*write ID*/
	int ID_l = (message->ID & 0x07) << 5;
     294:	f7 01       	movw	r30, r14
     296:	40 81       	ld	r20, Z
     298:	51 81       	ldd	r21, Z+1	; 0x01
     29a:	44 0f       	add	r20, r20
     29c:	55 1f       	adc	r21, r21
     29e:	42 95       	swap	r20
     2a0:	52 95       	swap	r21
     2a2:	50 7f       	andi	r21, 0xF0	; 240
     2a4:	54 27       	eor	r21, r20
     2a6:	40 7f       	andi	r20, 0xF0	; 240
     2a8:	54 27       	eor	r21, r20
     2aa:	55 27       	eor	r21, r21
	MCP2515_BIT_MODIFY(MCP_TXB0SIDL,0xE0,ID_l);
     2ac:	60 ee       	ldi	r22, 0xE0	; 224
     2ae:	82 e3       	ldi	r24, 0x32	; 50
     2b0:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <MCP2515_BIT_MODIFY>
	
	int ID_h = (message->ID & 0xFFF8) >> 3;
     2b4:	f7 01       	movw	r30, r14
     2b6:	60 81       	ld	r22, Z
     2b8:	71 81       	ldd	r23, Z+1	; 0x01
     2ba:	76 95       	lsr	r23
     2bc:	67 95       	ror	r22
     2be:	76 95       	lsr	r23
     2c0:	67 95       	ror	r22
     2c2:	76 95       	lsr	r23
     2c4:	67 95       	ror	r22
	MCP2515_WRITE(MCP_TXB0SIDH,ID_h);
     2c6:	81 e3       	ldi	r24, 0x31	; 49
     2c8:	0e 94 50 03 	call	0x6a0	; 0x6a0 <MCP2515_WRITE>
	
	/*write data length*/
	int length = message->length;
	MCP2515_BIT_MODIFY(MCP_TXB0DLC,0x0F,length);
     2cc:	f7 01       	movw	r30, r14
     2ce:	42 81       	ldd	r20, Z+2	; 0x02
     2d0:	6f e0       	ldi	r22, 0x0F	; 15
     2d2:	85 e3       	ldi	r24, 0x35	; 53
     2d4:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <MCP2515_BIT_MODIFY>
	
	/*write the message in the chosen buffer*/
	for (int i=0; i<message->length; i++)
     2d8:	f7 01       	movw	r30, r14
     2da:	82 81       	ldd	r24, Z+2	; 0x02
     2dc:	93 81       	ldd	r25, Z+3	; 0x03
     2de:	18 16       	cp	r1, r24
     2e0:	19 06       	cpc	r1, r25
     2e2:	9c f4       	brge	.+38     	; 0x30a <CAN_send+0x8e>
     2e4:	87 01       	movw	r16, r14
     2e6:	0c 5f       	subi	r16, 0xFC	; 252
     2e8:	1f 4f       	sbci	r17, 0xFF	; 255
     2ea:	c0 e0       	ldi	r28, 0x00	; 0
     2ec:	d0 e0       	ldi	r29, 0x00	; 0
	{
		MCP2515_WRITE(MCP_TXB0D0+i,message->data[i]);
     2ee:	f8 01       	movw	r30, r16
     2f0:	61 91       	ld	r22, Z+
     2f2:	8f 01       	movw	r16, r30
     2f4:	8c 2f       	mov	r24, r28
     2f6:	8a 5c       	subi	r24, 0xCA	; 202
     2f8:	0e 94 50 03 	call	0x6a0	; 0x6a0 <MCP2515_WRITE>
	/*write data length*/
	int length = message->length;
	MCP2515_BIT_MODIFY(MCP_TXB0DLC,0x0F,length);
	
	/*write the message in the chosen buffer*/
	for (int i=0; i<message->length; i++)
     2fc:	21 96       	adiw	r28, 0x01	; 1
     2fe:	f7 01       	movw	r30, r14
     300:	22 81       	ldd	r18, Z+2	; 0x02
     302:	33 81       	ldd	r19, Z+3	; 0x03
     304:	c2 17       	cp	r28, r18
     306:	d3 07       	cpc	r29, r19
     308:	94 f3       	brlt	.-28     	; 0x2ee <CAN_send+0x72>
	{
		MCP2515_WRITE(MCP_TXB0D0+i,message->data[i]);
	}
	
	MCP2515_REQUEST_TO_SEND();
     30a:	0e 94 64 03 	call	0x6c8	; 0x6c8 <MCP2515_REQUEST_TO_SEND>
}
     30e:	df 91       	pop	r29
     310:	cf 91       	pop	r28
     312:	1f 91       	pop	r17
     314:	0f 91       	pop	r16
     316:	ff 90       	pop	r15
     318:	ef 90       	pop	r14
     31a:	08 95       	ret

0000031c <draw_home>:
#include "OLED.h"
#include "Framework.h"

void draw_home()
{
	OLED_Reset();
     31c:	0e 94 73 06 	call	0xce6	; 0xce6 <OLED_Reset>
	OLED_pos(1, 4);
     320:	64 e0       	ldi	r22, 0x04	; 4
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <OLED_pos>
	OLED_print_string("Welcome to the best ping pong");
     328:	83 e2       	ldi	r24, 0x23	; 35
     32a:	91 e0       	ldi	r25, 0x01	; 1
     32c:	0e 94 1c 07 	call	0xe38	; 0xe38 <OLED_print_string>
	OLED_pos(3, 28);
     330:	6c e1       	ldi	r22, 0x1C	; 28
     332:	83 e0       	ldi	r24, 0x03	; 3
     334:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <OLED_pos>
	OLED_print_string("game in the world!");
     338:	81 e4       	ldi	r24, 0x41	; 65
     33a:	91 e0       	ldi	r25, 0x01	; 1
     33c:	0e 94 1c 07 	call	0xe38	; 0xe38 <OLED_print_string>
	OLED_pos(7, 20);
     340:	64 e1       	ldi	r22, 0x14	; 20
     342:	87 e0       	ldi	r24, 0x07	; 7
     344:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <OLED_pos>
	OLED_print_string("Touch right to start!");
     348:	84 e5       	ldi	r24, 0x54	; 84
     34a:	91 e0       	ldi	r25, 0x01	; 1
     34c:	0e 94 1c 07 	call	0xe38	; 0xe38 <OLED_print_string>
     350:	08 95       	ret

00000352 <draw_main_menu>:
}

void draw_main_menu()
{
	OLED_Reset();
     352:	0e 94 73 06 	call	0xce6	; 0xce6 <OLED_Reset>
	OLED_pos(0, 46);
     356:	6e e2       	ldi	r22, 0x2E	; 46
     358:	80 e0       	ldi	r24, 0x00	; 0
     35a:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <OLED_pos>
	OLED_print_string("Main menu");	
     35e:	8a e6       	ldi	r24, 0x6A	; 106
     360:	91 e0       	ldi	r25, 0x01	; 1
     362:	0e 94 1c 07 	call	0xe38	; 0xe38 <OLED_print_string>
	OLED_pos(2, 8);
     366:	68 e0       	ldi	r22, 0x08	; 8
     368:	82 e0       	ldi	r24, 0x02	; 2
     36a:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <OLED_pos>
	OLED_print_arrow();
     36e:	0e 94 3a 07 	call	0xe74	; 0xe74 <OLED_print_arrow>
	OLED_pos(2, 20);
     372:	64 e1       	ldi	r22, 0x14	; 20
     374:	82 e0       	ldi	r24, 0x02	; 2
     376:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <OLED_pos>
	OLED_print_string("One-player mode");
     37a:	84 e7       	ldi	r24, 0x74	; 116
     37c:	91 e0       	ldi	r25, 0x01	; 1
     37e:	0e 94 1c 07 	call	0xe38	; 0xe38 <OLED_print_string>
	OLED_pos(3, 20);
     382:	64 e1       	ldi	r22, 0x14	; 20
     384:	83 e0       	ldi	r24, 0x03	; 3
     386:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <OLED_pos>
	OLED_print_string("Two-players mode");
     38a:	84 e8       	ldi	r24, 0x84	; 132
     38c:	91 e0       	ldi	r25, 0x01	; 1
     38e:	0e 94 1c 07 	call	0xe38	; 0xe38 <OLED_print_string>
	OLED_pos(4, 20);
     392:	64 e1       	ldi	r22, 0x14	; 20
     394:	84 e0       	ldi	r24, 0x04	; 4
     396:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <OLED_pos>
	OLED_print_string("Highscores");
     39a:	85 e9       	ldi	r24, 0x95	; 149
     39c:	91 e0       	ldi	r25, 0x01	; 1
     39e:	0e 94 1c 07 	call	0xe38	; 0xe38 <OLED_print_string>
	OLED_pos(5, 20);
     3a2:	64 e1       	ldi	r22, 0x14	; 20
     3a4:	85 e0       	ldi	r24, 0x05	; 5
     3a6:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <OLED_pos>
	OLED_print_string("Settings");
     3aa:	80 ea       	ldi	r24, 0xA0	; 160
     3ac:	91 e0       	ldi	r25, 0x01	; 1
     3ae:	0e 94 1c 07 	call	0xe38	; 0xe38 <OLED_print_string>
	OLED_pos(7, 48);
     3b2:	60 e3       	ldi	r22, 0x30	; 48
     3b4:	87 e0       	ldi	r24, 0x07	; 7
     3b6:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <OLED_pos>
	OLED_print_string("Touch right to enter");
     3ba:	89 ea       	ldi	r24, 0xA9	; 169
     3bc:	91 e0       	ldi	r25, 0x01	; 1
     3be:	0e 94 1c 07 	call	0xe38	; 0xe38 <OLED_print_string>
	OLED_pos(7,0);
     3c2:	60 e0       	ldi	r22, 0x00	; 0
     3c4:	87 e0       	ldi	r24, 0x07	; 7
     3c6:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <OLED_pos>
	OLED_print_home();
     3ca:	0e 94 51 07 	call	0xea2	; 0xea2 <OLED_print_home>
     3ce:	08 95       	ret

000003d0 <draw_one_player>:
}

void draw_one_player()
{
	OLED_Reset();
     3d0:	0e 94 73 06 	call	0xce6	; 0xce6 <OLED_Reset>
	OLED_pos(0, 32);
     3d4:	60 e2       	ldi	r22, 0x20	; 32
     3d6:	80 e0       	ldi	r24, 0x00	; 0
     3d8:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <OLED_pos>
	OLED_print_string("One-player mode");
     3dc:	84 e7       	ldi	r24, 0x74	; 116
     3de:	91 e0       	ldi	r25, 0x01	; 1
     3e0:	0e 94 1c 07 	call	0xe38	; 0xe38 <OLED_print_string>
	OLED_print_woman(3,58);
     3e4:	6a e3       	ldi	r22, 0x3A	; 58
     3e6:	83 e0       	ldi	r24, 0x03	; 3
     3e8:	0e 94 61 07 	call	0xec2	; 0xec2 <OLED_print_woman>
	OLED_pos(7,0);
     3ec:	60 e0       	ldi	r22, 0x00	; 0
     3ee:	87 e0       	ldi	r24, 0x07	; 7
     3f0:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <OLED_pos>
	OLED_print_home();
     3f4:	0e 94 51 07 	call	0xea2	; 0xea2 <OLED_print_home>
     3f8:	08 95       	ret

000003fa <draw_two_players>:
}

void draw_two_players()
{
	OLED_Reset();
     3fa:	0e 94 73 06 	call	0xce6	; 0xce6 <OLED_Reset>
	OLED_pos(0, 32);
     3fe:	60 e2       	ldi	r22, 0x20	; 32
     400:	80 e0       	ldi	r24, 0x00	; 0
     402:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <OLED_pos>
	OLED_print_string("Two-players mode");
     406:	84 e8       	ldi	r24, 0x84	; 132
     408:	91 e0       	ldi	r25, 0x01	; 1
     40a:	0e 94 1c 07 	call	0xe38	; 0xe38 <OLED_print_string>
	OLED_print_woman(3,29);
     40e:	6d e1       	ldi	r22, 0x1D	; 29
     410:	83 e0       	ldi	r24, 0x03	; 3
     412:	0e 94 61 07 	call	0xec2	; 0xec2 <OLED_print_woman>
	OLED_print_woman(3,87);
     416:	67 e5       	ldi	r22, 0x57	; 87
     418:	83 e0       	ldi	r24, 0x03	; 3
     41a:	0e 94 61 07 	call	0xec2	; 0xec2 <OLED_print_woman>
	OLED_pos(7,0);
     41e:	60 e0       	ldi	r22, 0x00	; 0
     420:	87 e0       	ldi	r24, 0x07	; 7
     422:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <OLED_pos>
	OLED_print_home();
     426:	0e 94 51 07 	call	0xea2	; 0xea2 <OLED_print_home>
     42a:	08 95       	ret

0000042c <draw_highscores>:
}

void draw_highscores()
{
	OLED_Reset();
     42c:	0e 94 73 06 	call	0xce6	; 0xce6 <OLED_Reset>
	OLED_pos(0, 44);
     430:	6c e2       	ldi	r22, 0x2C	; 44
     432:	80 e0       	ldi	r24, 0x00	; 0
     434:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <OLED_pos>
	OLED_print_string("Highscores");
     438:	85 e9       	ldi	r24, 0x95	; 149
     43a:	91 e0       	ldi	r25, 0x01	; 1
     43c:	0e 94 1c 07 	call	0xe38	; 0xe38 <OLED_print_string>
	OLED_pos(2, 20);
     440:	64 e1       	ldi	r22, 0x14	; 20
     442:	82 e0       	ldi	r24, 0x02	; 2
     444:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <OLED_pos>
	OLED_print_string("1. 650 points");
     448:	8e eb       	ldi	r24, 0xBE	; 190
     44a:	91 e0       	ldi	r25, 0x01	; 1
     44c:	0e 94 1c 07 	call	0xe38	; 0xe38 <OLED_print_string>
	OLED_pos(3, 20);
     450:	64 e1       	ldi	r22, 0x14	; 20
     452:	83 e0       	ldi	r24, 0x03	; 3
     454:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <OLED_pos>
	OLED_print_string("2. 422 points");
     458:	8c ec       	ldi	r24, 0xCC	; 204
     45a:	91 e0       	ldi	r25, 0x01	; 1
     45c:	0e 94 1c 07 	call	0xe38	; 0xe38 <OLED_print_string>
	OLED_pos(4, 20);
     460:	64 e1       	ldi	r22, 0x14	; 20
     462:	84 e0       	ldi	r24, 0x04	; 4
     464:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <OLED_pos>
	OLED_print_string("3. 200 points");
     468:	8a ed       	ldi	r24, 0xDA	; 218
     46a:	91 e0       	ldi	r25, 0x01	; 1
     46c:	0e 94 1c 07 	call	0xe38	; 0xe38 <OLED_print_string>
	OLED_pos(7,0);
     470:	60 e0       	ldi	r22, 0x00	; 0
     472:	87 e0       	ldi	r24, 0x07	; 7
     474:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <OLED_pos>
	OLED_print_home();
     478:	0e 94 51 07 	call	0xea2	; 0xea2 <OLED_print_home>
     47c:	08 95       	ret

0000047e <draw_settings>:
}

void draw_settings()
{
	OLED_Reset();
     47e:	0e 94 73 06 	call	0xce6	; 0xce6 <OLED_Reset>
	OLED_pos(0, 48);
     482:	60 e3       	ldi	r22, 0x30	; 48
     484:	80 e0       	ldi	r24, 0x00	; 0
     486:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <OLED_pos>
	OLED_print_string("Settings");
     48a:	80 ea       	ldi	r24, 0xA0	; 160
     48c:	91 e0       	ldi	r25, 0x01	; 1
     48e:	0e 94 1c 07 	call	0xe38	; 0xe38 <OLED_print_string>
	OLED_pos(2, 8);
     492:	68 e0       	ldi	r22, 0x08	; 8
     494:	82 e0       	ldi	r24, 0x02	; 2
     496:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <OLED_pos>
	OLED_print_arrow();
     49a:	0e 94 3a 07 	call	0xe74	; 0xe74 <OLED_print_arrow>
	OLED_pos(2, 20);
     49e:	64 e1       	ldi	r22, 0x14	; 20
     4a0:	82 e0       	ldi	r24, 0x02	; 2
     4a2:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <OLED_pos>
	OLED_print_string("Brightness");
     4a6:	88 ee       	ldi	r24, 0xE8	; 232
     4a8:	91 e0       	ldi	r25, 0x01	; 1
     4aa:	0e 94 1c 07 	call	0xe38	; 0xe38 <OLED_print_string>
	OLED_pos(3, 20);
     4ae:	64 e1       	ldi	r22, 0x14	; 20
     4b0:	83 e0       	ldi	r24, 0x03	; 3
     4b2:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <OLED_pos>
	OLED_print_string("Sound");
     4b6:	83 ef       	ldi	r24, 0xF3	; 243
     4b8:	91 e0       	ldi	r25, 0x01	; 1
     4ba:	0e 94 1c 07 	call	0xe38	; 0xe38 <OLED_print_string>
	OLED_pos(7,0);
     4be:	60 e0       	ldi	r22, 0x00	; 0
     4c0:	87 e0       	ldi	r24, 0x07	; 7
     4c2:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <OLED_pos>
	OLED_print_home();
     4c6:	0e 94 51 07 	call	0xea2	; 0xea2 <OLED_print_home>
     4ca:	08 95       	ret

000004cc <draw_brightness>:
}

void draw_brightness()
{
	OLED_Reset();
     4cc:	0e 94 73 06 	call	0xce6	; 0xce6 <OLED_Reset>
	OLED_pos(0, 44);
     4d0:	6c e2       	ldi	r22, 0x2C	; 44
     4d2:	80 e0       	ldi	r24, 0x00	; 0
     4d4:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <OLED_pos>
	OLED_print_string("Brightness");
     4d8:	88 ee       	ldi	r24, 0xE8	; 232
     4da:	91 e0       	ldi	r25, 0x01	; 1
     4dc:	0e 94 1c 07 	call	0xe38	; 0xe38 <OLED_print_string>
	OLED_pos(5, 0);
     4e0:	60 e0       	ldi	r22, 0x00	; 0
     4e2:	85 e0       	ldi	r24, 0x05	; 5
     4e4:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <OLED_pos>
	OLED_print_string("Use left slide to set brightness");
     4e8:	89 ef       	ldi	r24, 0xF9	; 249
     4ea:	91 e0       	ldi	r25, 0x01	; 1
     4ec:	0e 94 1c 07 	call	0xe38	; 0xe38 <OLED_print_string>
	OLED_pos(7,0);
     4f0:	60 e0       	ldi	r22, 0x00	; 0
     4f2:	87 e0       	ldi	r24, 0x07	; 7
     4f4:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <OLED_pos>
	OLED_print_home();
     4f8:	0e 94 51 07 	call	0xea2	; 0xea2 <OLED_print_home>
     4fc:	08 95       	ret

000004fe <Joystick_Position>:

#define JOYSTICK_VERTICAL 0x4
#define JOYSTICK_HORIZONTAL 0x5

Position Joystick_Position()
{
     4fe:	0f 93       	push	r16
     500:	1f 93       	push	r17
     502:	cf 93       	push	r28
     504:	df 93       	push	r29
     506:	cd b7       	in	r28, 0x3d	; 61
     508:	de b7       	in	r29, 0x3e	; 62
     50a:	28 97       	sbiw	r28, 0x08	; 8
     50c:	0f b6       	in	r0, 0x3f	; 63
     50e:	f8 94       	cli
     510:	de bf       	out	0x3e, r29	; 62
     512:	0f be       	out	0x3f, r0	; 63
     514:	cd bf       	out	0x3d, r28	; 61
	uint8_t joystick_horizontal = ADC_Convert(JOYSTICK_HORIZONTAL);
     516:	85 e0       	ldi	r24, 0x05	; 5
     518:	0e 94 15 01 	call	0x22a	; 0x22a <ADC_Convert>
     51c:	18 2f       	mov	r17, r24
	uint8_t joystick_vertical = ADC_Convert(JOYSTICK_VERTICAL);
     51e:	84 e0       	ldi	r24, 0x04	; 4
     520:	0e 94 15 01 	call	0x22a	; 0x22a <ADC_Convert>
     524:	08 2f       	mov	r16, r24
	float X = joystick_horizontal;
     526:	61 2f       	mov	r22, r17
     528:	70 e0       	ldi	r23, 0x00	; 0
     52a:	80 e0       	ldi	r24, 0x00	; 0
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	0e 94 bb 08 	call	0x1176	; 0x1176 <__floatunsisf>
	float Y = joystick_vertical;
	
	Position joystick;
	joystick.x = (X / 255.0) * 200.0 - 100.0;
     532:	20 e0       	ldi	r18, 0x00	; 0
     534:	30 e0       	ldi	r19, 0x00	; 0
     536:	4f e7       	ldi	r20, 0x7F	; 127
     538:	53 e4       	ldi	r21, 0x43	; 67
     53a:	0e 94 27 08 	call	0x104e	; 0x104e <__divsf3>
     53e:	20 e0       	ldi	r18, 0x00	; 0
     540:	30 e0       	ldi	r19, 0x00	; 0
     542:	48 e4       	ldi	r20, 0x48	; 72
     544:	53 e4       	ldi	r21, 0x43	; 67
     546:	0e 94 71 09 	call	0x12e2	; 0x12e2 <__mulsf3>
     54a:	20 e0       	ldi	r18, 0x00	; 0
     54c:	30 e0       	ldi	r19, 0x00	; 0
     54e:	48 ec       	ldi	r20, 0xC8	; 200
     550:	52 e4       	ldi	r21, 0x42	; 66
     552:	0e 94 be 07 	call	0xf7c	; 0xf7c <__subsf3>
     556:	48 2f       	mov	r20, r24
     558:	59 2f       	mov	r21, r25
	joystick.y = (Y / 255.0) * 200.0 - 100.0;
	return joystick;
     55a:	16 2f       	mov	r17, r22
     55c:	86 2f       	mov	r24, r22
     55e:	97 2f       	mov	r25, r23
     560:	a4 2f       	mov	r26, r20
     562:	b5 2f       	mov	r27, r21
     564:	89 83       	std	Y+1, r24	; 0x01
     566:	9a 83       	std	Y+2, r25	; 0x02
     568:	ab 83       	std	Y+3, r26	; 0x03
     56a:	bc 83       	std	Y+4, r27	; 0x04
Position Joystick_Position()
{
	uint8_t joystick_horizontal = ADC_Convert(JOYSTICK_HORIZONTAL);
	uint8_t joystick_vertical = ADC_Convert(JOYSTICK_VERTICAL);
	float X = joystick_horizontal;
	float Y = joystick_vertical;
     56c:	60 2f       	mov	r22, r16
     56e:	70 e0       	ldi	r23, 0x00	; 0
     570:	80 e0       	ldi	r24, 0x00	; 0
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	0e 94 bb 08 	call	0x1176	; 0x1176 <__floatunsisf>
	
	Position joystick;
	joystick.x = (X / 255.0) * 200.0 - 100.0;
	joystick.y = (Y / 255.0) * 200.0 - 100.0;
     578:	20 e0       	ldi	r18, 0x00	; 0
     57a:	30 e0       	ldi	r19, 0x00	; 0
     57c:	4f e7       	ldi	r20, 0x7F	; 127
     57e:	53 e4       	ldi	r21, 0x43	; 67
     580:	0e 94 27 08 	call	0x104e	; 0x104e <__divsf3>
     584:	20 e0       	ldi	r18, 0x00	; 0
     586:	30 e0       	ldi	r19, 0x00	; 0
     588:	48 e4       	ldi	r20, 0x48	; 72
     58a:	53 e4       	ldi	r21, 0x43	; 67
     58c:	0e 94 71 09 	call	0x12e2	; 0x12e2 <__mulsf3>
     590:	20 e0       	ldi	r18, 0x00	; 0
     592:	30 e0       	ldi	r19, 0x00	; 0
     594:	48 ec       	ldi	r20, 0xC8	; 200
     596:	52 e4       	ldi	r21, 0x42	; 66
     598:	0e 94 be 07 	call	0xf7c	; 0xf7c <__subsf3>
     59c:	e6 2f       	mov	r30, r22
	return joystick;
     59e:	46 2f       	mov	r20, r22
     5a0:	57 2f       	mov	r21, r23
     5a2:	68 2f       	mov	r22, r24
     5a4:	79 2f       	mov	r23, r25
     5a6:	4d 83       	std	Y+5, r20	; 0x05
     5a8:	5e 83       	std	Y+6, r21	; 0x06
     5aa:	6f 83       	std	Y+7, r22	; 0x07
     5ac:	78 87       	std	Y+8, r23	; 0x08
     5ae:	21 2f       	mov	r18, r17
     5b0:	3a 81       	ldd	r19, Y+2	; 0x02
     5b2:	4b 81       	ldd	r20, Y+3	; 0x03
     5b4:	5c 81       	ldd	r21, Y+4	; 0x04
     5b6:	6e 2f       	mov	r22, r30
     5b8:	7e 81       	ldd	r23, Y+6	; 0x06
}
     5ba:	8f 81       	ldd	r24, Y+7	; 0x07
     5bc:	98 85       	ldd	r25, Y+8	; 0x08
     5be:	28 96       	adiw	r28, 0x08	; 8
     5c0:	0f b6       	in	r0, 0x3f	; 63
     5c2:	f8 94       	cli
     5c4:	de bf       	out	0x3e, r29	; 62
     5c6:	0f be       	out	0x3f, r0	; 63
     5c8:	cd bf       	out	0x3d, r28	; 61
     5ca:	df 91       	pop	r29
     5cc:	cf 91       	pop	r28
     5ce:	1f 91       	pop	r17
     5d0:	0f 91       	pop	r16
     5d2:	08 95       	ret

000005d4 <Joystick_Direction>:

char* Joystick_Direction(Position* joystick)
{
     5d4:	cf 92       	push	r12
     5d6:	df 92       	push	r13
     5d8:	ef 92       	push	r14
     5da:	ff 92       	push	r15
     5dc:	cf 93       	push	r28
     5de:	df 93       	push	r29
     5e0:	ec 01       	movw	r28, r24
	if(joystick->x < -71)
     5e2:	c8 80       	ld	r12, Y
     5e4:	d9 80       	ldd	r13, Y+1	; 0x01
     5e6:	ea 80       	ldd	r14, Y+2	; 0x02
     5e8:	fb 80       	ldd	r15, Y+3	; 0x03
     5ea:	20 e0       	ldi	r18, 0x00	; 0
     5ec:	30 e0       	ldi	r19, 0x00	; 0
     5ee:	4e e8       	ldi	r20, 0x8E	; 142
     5f0:	52 ec       	ldi	r21, 0xC2	; 194
     5f2:	c7 01       	movw	r24, r14
     5f4:	b6 01       	movw	r22, r12
     5f6:	0e 94 23 08 	call	0x1046	; 0x1046 <__cmpsf2>
     5fa:	88 23       	and	r24, r24
     5fc:	2c f1       	brlt	.+74     	; 0x648 <Joystick_Direction+0x74>
	return "LEFT";
	else if(joystick->x > 71)
     5fe:	20 e0       	ldi	r18, 0x00	; 0
     600:	30 e0       	ldi	r19, 0x00	; 0
     602:	4e e8       	ldi	r20, 0x8E	; 142
     604:	52 e4       	ldi	r21, 0x42	; 66
     606:	c7 01       	movw	r24, r14
     608:	b6 01       	movw	r22, r12
     60a:	0e 94 6d 09 	call	0x12da	; 0x12da <__gesf2>
     60e:	18 16       	cp	r1, r24
     610:	f4 f0       	brlt	.+60     	; 0x64e <Joystick_Direction+0x7a>
	return "RIGHT";
	
	if(joystick->y < -71)
     612:	cc 80       	ldd	r12, Y+4	; 0x04
     614:	dd 80       	ldd	r13, Y+5	; 0x05
     616:	ee 80       	ldd	r14, Y+6	; 0x06
     618:	ff 80       	ldd	r15, Y+7	; 0x07
     61a:	20 e0       	ldi	r18, 0x00	; 0
     61c:	30 e0       	ldi	r19, 0x00	; 0
     61e:	4e e8       	ldi	r20, 0x8E	; 142
     620:	52 ec       	ldi	r21, 0xC2	; 194
     622:	c7 01       	movw	r24, r14
     624:	b6 01       	movw	r22, r12
     626:	0e 94 23 08 	call	0x1046	; 0x1046 <__cmpsf2>
     62a:	88 23       	and	r24, r24
     62c:	9c f0       	brlt	.+38     	; 0x654 <Joystick_Direction+0x80>
	return "DOWN";
	else if(joystick->y > 71)
     62e:	20 e0       	ldi	r18, 0x00	; 0
     630:	30 e0       	ldi	r19, 0x00	; 0
     632:	4e e8       	ldi	r20, 0x8E	; 142
     634:	52 e4       	ldi	r21, 0x42	; 66
     636:	c7 01       	movw	r24, r14
     638:	b6 01       	movw	r22, r12
     63a:	0e 94 6d 09 	call	0x12da	; 0x12da <__gesf2>
     63e:	18 16       	cp	r1, r24
     640:	64 f4       	brge	.+24     	; 0x65a <Joystick_Direction+0x86>
	return "UP";
     642:	8a e2       	ldi	r24, 0x2A	; 42
     644:	92 e0       	ldi	r25, 0x02	; 2
     646:	0b c0       	rjmp	.+22     	; 0x65e <Joystick_Direction+0x8a>
}

char* Joystick_Direction(Position* joystick)
{
	if(joystick->x < -71)
	return "LEFT";
     648:	8a e1       	ldi	r24, 0x1A	; 26
     64a:	92 e0       	ldi	r25, 0x02	; 2
     64c:	08 c0       	rjmp	.+16     	; 0x65e <Joystick_Direction+0x8a>
	else if(joystick->x > 71)
	return "RIGHT";
     64e:	8f e1       	ldi	r24, 0x1F	; 31
     650:	92 e0       	ldi	r25, 0x02	; 2
     652:	05 c0       	rjmp	.+10     	; 0x65e <Joystick_Direction+0x8a>
	
	if(joystick->y < -71)
	return "DOWN";
     654:	85 e2       	ldi	r24, 0x25	; 37
     656:	92 e0       	ldi	r25, 0x02	; 2
     658:	02 c0       	rjmp	.+4      	; 0x65e <Joystick_Direction+0x8a>
	else if(joystick->y > 71)
	return "UP";
	
	return "NEUTRAL";
     65a:	8d e2       	ldi	r24, 0x2D	; 45
     65c:	92 e0       	ldi	r25, 0x02	; 2
     65e:	df 91       	pop	r29
     660:	cf 91       	pop	r28
     662:	ff 90       	pop	r15
     664:	ef 90       	pop	r14
     666:	df 90       	pop	r13
     668:	cf 90       	pop	r12
     66a:	08 95       	ret

0000066c <MCP2515_RESET>:
#include "SPI.h"
#include "MCP251DEFS.h"

void MCP2515_RESET()
{
	SPI_on();
     66c:	0e 94 a4 07 	call	0xf48	; 0xf48 <SPI_on>
	SPI_write(MCP_RESET);
     670:	80 ec       	ldi	r24, 0xC0	; 192
     672:	0e 94 9b 07 	call	0xf36	; 0xf36 <SPI_write>
	SPI_off();
     676:	0e 94 a6 07 	call	0xf4c	; 0xf4c <SPI_off>
     67a:	08 95       	ret

0000067c <MCP2515_READ>:
}

char MCP2515_READ(uint8_t address)
{
     67c:	cf 93       	push	r28
     67e:	c8 2f       	mov	r28, r24
	SPI_on(); 
     680:	0e 94 a4 07 	call	0xf48	; 0xf48 <SPI_on>
	SPI_write(MCP_READ);
     684:	83 e0       	ldi	r24, 0x03	; 3
     686:	0e 94 9b 07 	call	0xf36	; 0xf36 <SPI_write>
	SPI_write(address);
     68a:	8c 2f       	mov	r24, r28
     68c:	0e 94 9b 07 	call	0xf36	; 0xf36 <SPI_write>
	char data = SPI_read();
     690:	0e 94 9f 07 	call	0xf3e	; 0xf3e <SPI_read>
     694:	c8 2f       	mov	r28, r24
	SPI_off();
     696:	0e 94 a6 07 	call	0xf4c	; 0xf4c <SPI_off>
	return data;
}
     69a:	8c 2f       	mov	r24, r28
     69c:	cf 91       	pop	r28
     69e:	08 95       	ret

000006a0 <MCP2515_WRITE>:

void MCP2515_WRITE(uint8_t address, uint8_t data)
{
     6a0:	cf 93       	push	r28
     6a2:	df 93       	push	r29
     6a4:	d8 2f       	mov	r29, r24
     6a6:	c6 2f       	mov	r28, r22
	SPI_on();
     6a8:	0e 94 a4 07 	call	0xf48	; 0xf48 <SPI_on>
	SPI_write(MCP_WRITE);
     6ac:	82 e0       	ldi	r24, 0x02	; 2
     6ae:	0e 94 9b 07 	call	0xf36	; 0xf36 <SPI_write>
	SPI_write(address);
     6b2:	8d 2f       	mov	r24, r29
     6b4:	0e 94 9b 07 	call	0xf36	; 0xf36 <SPI_write>
	SPI_write(data);
     6b8:	8c 2f       	mov	r24, r28
     6ba:	0e 94 9b 07 	call	0xf36	; 0xf36 <SPI_write>
	SPI_off();
     6be:	0e 94 a6 07 	call	0xf4c	; 0xf4c <SPI_off>
	
}
     6c2:	df 91       	pop	r29
     6c4:	cf 91       	pop	r28
     6c6:	08 95       	ret

000006c8 <MCP2515_REQUEST_TO_SEND>:

void MCP2515_REQUEST_TO_SEND()
{
	SPI_on();
     6c8:	0e 94 a4 07 	call	0xf48	; 0xf48 <SPI_on>
	SPI_write(MCP_RTS_TX0);
     6cc:	81 e8       	ldi	r24, 0x81	; 129
     6ce:	0e 94 9b 07 	call	0xf36	; 0xf36 <SPI_write>
	SPI_off();
     6d2:	0e 94 a6 07 	call	0xf4c	; 0xf4c <SPI_off>
     6d6:	08 95       	ret

000006d8 <MCP2515_BIT_MODIFY>:
	SPI_off();
	return data;
}

void MCP2515_BIT_MODIFY(uint8_t address, uint8_t mask, uint8_t data)
{
     6d8:	1f 93       	push	r17
     6da:	cf 93       	push	r28
     6dc:	df 93       	push	r29
     6de:	18 2f       	mov	r17, r24
     6e0:	d6 2f       	mov	r29, r22
     6e2:	c4 2f       	mov	r28, r20
	SPI_on();
     6e4:	0e 94 a4 07 	call	0xf48	; 0xf48 <SPI_on>
	SPI_write(MCP_BITMOD);
     6e8:	85 e0       	ldi	r24, 0x05	; 5
     6ea:	0e 94 9b 07 	call	0xf36	; 0xf36 <SPI_write>
	SPI_write(address);
     6ee:	81 2f       	mov	r24, r17
     6f0:	0e 94 9b 07 	call	0xf36	; 0xf36 <SPI_write>
	SPI_write(mask);
     6f4:	8d 2f       	mov	r24, r29
     6f6:	0e 94 9b 07 	call	0xf36	; 0xf36 <SPI_write>
	SPI_write(data);
     6fa:	8c 2f       	mov	r24, r28
     6fc:	0e 94 9b 07 	call	0xf36	; 0xf36 <SPI_write>
	SPI_off();	
     700:	0e 94 a6 07 	call	0xf4c	; 0xf4c <SPI_off>
     704:	df 91       	pop	r29
     706:	cf 91       	pop	r28
     708:	1f 91       	pop	r17
     70a:	08 95       	ret

0000070c <__vector_1>:
int arrow = 2 ;
int i = 0;
uint8_t slide_left;

ISR(INT0_vect)
{
     70c:	1f 92       	push	r1
     70e:	0f 92       	push	r0
     710:	0f b6       	in	r0, 0x3f	; 63
     712:	0f 92       	push	r0
     714:	11 24       	eor	r1, r1
     716:	2f 93       	push	r18
     718:	3f 93       	push	r19
     71a:	4f 93       	push	r20
     71c:	5f 93       	push	r21
     71e:	6f 93       	push	r22
     720:	7f 93       	push	r23
     722:	8f 93       	push	r24
     724:	9f 93       	push	r25
     726:	af 93       	push	r26
     728:	bf 93       	push	r27
     72a:	ef 93       	push	r30
     72c:	ff 93       	push	r31
	if(i < 3)
     72e:	80 91 66 02 	lds	r24, 0x0266
     732:	90 91 67 02 	lds	r25, 0x0267
     736:	83 30       	cpi	r24, 0x03	; 3
     738:	91 05       	cpc	r25, r1
     73a:	34 f4       	brge	.+12     	; 0x748 <__vector_1+0x3c>
	{
		i++;
     73c:	01 96       	adiw	r24, 0x01	; 1
     73e:	90 93 67 02 	sts	0x0267, r25
     742:	80 93 66 02 	sts	0x0266, r24
     746:	64 c0       	rjmp	.+200    	; 0x810 <__vector_1+0x104>
	}
	else
	{
		if(mode == HOME)
     748:	80 91 68 02 	lds	r24, 0x0268
     74c:	90 91 69 02 	lds	r25, 0x0269
     750:	00 97       	sbiw	r24, 0x00	; 0
     752:	79 f4       	brne	.+30     	; 0x772 <__vector_1+0x66>
		{
			mode = MAIN_MENU;
     754:	81 e0       	ldi	r24, 0x01	; 1
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	90 93 69 02 	sts	0x0269, r25
     75c:	80 93 68 02 	sts	0x0268, r24
			arrow = 2;
     760:	82 e0       	ldi	r24, 0x02	; 2
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	90 93 07 01 	sts	0x0107, r25
     768:	80 93 06 01 	sts	0x0106, r24
			draw_main_menu();
     76c:	0e 94 a9 01 	call	0x352	; 0x352 <draw_main_menu>
     770:	4f c0       	rjmp	.+158    	; 0x810 <__vector_1+0x104>
		}
		else if(mode == MAIN_MENU && arrow == 2)
     772:	81 30       	cpi	r24, 0x01	; 1
     774:	91 05       	cpc	r25, r1
     776:	c9 f5       	brne	.+114    	; 0x7ea <__vector_1+0xde>
     778:	80 91 06 01 	lds	r24, 0x0106
     77c:	90 91 07 01 	lds	r25, 0x0107
     780:	82 30       	cpi	r24, 0x02	; 2
     782:	91 05       	cpc	r25, r1
     784:	49 f4       	brne	.+18     	; 0x798 <__vector_1+0x8c>
		{
			mode = ONE_PLAYER;
     786:	8b e0       	ldi	r24, 0x0B	; 11
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	90 93 69 02 	sts	0x0269, r25
     78e:	80 93 68 02 	sts	0x0268, r24
			draw_one_player();
     792:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <draw_one_player>
     796:	3c c0       	rjmp	.+120    	; 0x810 <__vector_1+0x104>
		}
		else if(mode == MAIN_MENU && arrow == 3)
     798:	83 30       	cpi	r24, 0x03	; 3
     79a:	91 05       	cpc	r25, r1
     79c:	49 f4       	brne	.+18     	; 0x7b0 <__vector_1+0xa4>
		{
			mode = TWO_PLAYERS;
     79e:	8c e0       	ldi	r24, 0x0C	; 12
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	90 93 69 02 	sts	0x0269, r25
     7a6:	80 93 68 02 	sts	0x0268, r24
			draw_two_players();
     7aa:	0e 94 fd 01 	call	0x3fa	; 0x3fa <draw_two_players>
     7ae:	30 c0       	rjmp	.+96     	; 0x810 <__vector_1+0x104>
		}
		else if(mode == MAIN_MENU && arrow == 4)
     7b0:	84 30       	cpi	r24, 0x04	; 4
     7b2:	91 05       	cpc	r25, r1
     7b4:	49 f4       	brne	.+18     	; 0x7c8 <__vector_1+0xbc>
		{
			mode = HIGHSCORES;
     7b6:	8d e0       	ldi	r24, 0x0D	; 13
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	90 93 69 02 	sts	0x0269, r25
     7be:	80 93 68 02 	sts	0x0268, r24
			draw_highscores();
     7c2:	0e 94 16 02 	call	0x42c	; 0x42c <draw_highscores>
     7c6:	24 c0       	rjmp	.+72     	; 0x810 <__vector_1+0x104>
		}
		else if(mode == MAIN_MENU && arrow == 5)
     7c8:	05 97       	sbiw	r24, 0x05	; 5
     7ca:	11 f5       	brne	.+68     	; 0x810 <__vector_1+0x104>
		{
			mode = SETTINGS;
     7cc:	8e e0       	ldi	r24, 0x0E	; 14
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	90 93 69 02 	sts	0x0269, r25
     7d4:	80 93 68 02 	sts	0x0268, r24
			arrow = 2;
     7d8:	82 e0       	ldi	r24, 0x02	; 2
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	90 93 07 01 	sts	0x0107, r25
     7e0:	80 93 06 01 	sts	0x0106, r24
			draw_settings();
     7e4:	0e 94 3f 02 	call	0x47e	; 0x47e <draw_settings>
     7e8:	13 c0       	rjmp	.+38     	; 0x810 <__vector_1+0x104>
		}
		else if(mode == SETTINGS && arrow == 2)
     7ea:	0e 97       	sbiw	r24, 0x0e	; 14
     7ec:	89 f4       	brne	.+34     	; 0x810 <__vector_1+0x104>
     7ee:	80 91 06 01 	lds	r24, 0x0106
     7f2:	90 91 07 01 	lds	r25, 0x0107
     7f6:	02 97       	sbiw	r24, 0x02	; 2
     7f8:	59 f4       	brne	.+22     	; 0x810 <__vector_1+0x104>
		{
			mode = BRIGHTNESS;
     7fa:	8d e8       	ldi	r24, 0x8D	; 141
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	90 93 69 02 	sts	0x0269, r25
     802:	80 93 68 02 	sts	0x0268, r24
			draw_brightness(slide_left);
     806:	80 91 6a 02 	lds	r24, 0x026A
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	0e 94 66 02 	call	0x4cc	; 0x4cc <draw_brightness>
		}
	}
}
     810:	ff 91       	pop	r31
     812:	ef 91       	pop	r30
     814:	bf 91       	pop	r27
     816:	af 91       	pop	r26
     818:	9f 91       	pop	r25
     81a:	8f 91       	pop	r24
     81c:	7f 91       	pop	r23
     81e:	6f 91       	pop	r22
     820:	5f 91       	pop	r21
     822:	4f 91       	pop	r20
     824:	3f 91       	pop	r19
     826:	2f 91       	pop	r18
     828:	0f 90       	pop	r0
     82a:	0f be       	out	0x3f, r0	; 63
     82c:	0f 90       	pop	r0
     82e:	1f 90       	pop	r1
     830:	18 95       	reti

00000832 <__vector_2>:

ISR(INT1_vect)
{
     832:	1f 92       	push	r1
     834:	0f 92       	push	r0
     836:	0f b6       	in	r0, 0x3f	; 63
     838:	0f 92       	push	r0
     83a:	11 24       	eor	r1, r1
     83c:	2f 93       	push	r18
     83e:	3f 93       	push	r19
     840:	4f 93       	push	r20
     842:	5f 93       	push	r21
     844:	6f 93       	push	r22
     846:	7f 93       	push	r23
     848:	8f 93       	push	r24
     84a:	9f 93       	push	r25
     84c:	af 93       	push	r26
     84e:	bf 93       	push	r27
     850:	ef 93       	push	r30
     852:	ff 93       	push	r31
	if(mode == MAIN_MENU)
     854:	80 91 68 02 	lds	r24, 0x0268
     858:	90 91 69 02 	lds	r25, 0x0269
     85c:	81 30       	cpi	r24, 0x01	; 1
     85e:	91 05       	cpc	r25, r1
     860:	39 f4       	brne	.+14     	; 0x870 <__vector_2+0x3e>
	{
		mode = HOME;
     862:	10 92 69 02 	sts	0x0269, r1
     866:	10 92 68 02 	sts	0x0268, r1
		draw_home();
     86a:	0e 94 8e 01 	call	0x31c	; 0x31c <draw_home>
     86e:	26 c0       	rjmp	.+76     	; 0x8bc <__vector_2+0x8a>
	}
	else if(mode == ONE_PLAYER || mode == TWO_PLAYERS || mode == HIGHSCORES || mode == SETTINGS)
     870:	9c 01       	movw	r18, r24
     872:	2b 50       	subi	r18, 0x0B	; 11
     874:	31 09       	sbc	r19, r1
     876:	24 30       	cpi	r18, 0x04	; 4
     878:	31 05       	cpc	r19, r1
     87a:	78 f4       	brcc	.+30     	; 0x89a <__vector_2+0x68>
	{
		mode = MAIN_MENU;
     87c:	81 e0       	ldi	r24, 0x01	; 1
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	90 93 69 02 	sts	0x0269, r25
     884:	80 93 68 02 	sts	0x0268, r24
		arrow = 2;
     888:	82 e0       	ldi	r24, 0x02	; 2
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	90 93 07 01 	sts	0x0107, r25
     890:	80 93 06 01 	sts	0x0106, r24
		draw_main_menu();
     894:	0e 94 a9 01 	call	0x352	; 0x352 <draw_main_menu>
     898:	11 c0       	rjmp	.+34     	; 0x8bc <__vector_2+0x8a>
	}
	else if(mode == BRIGHTNESS)
     89a:	8d 38       	cpi	r24, 0x8D	; 141
     89c:	91 05       	cpc	r25, r1
     89e:	71 f4       	brne	.+28     	; 0x8bc <__vector_2+0x8a>
	{
		mode = SETTINGS;
     8a0:	8e e0       	ldi	r24, 0x0E	; 14
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	90 93 69 02 	sts	0x0269, r25
     8a8:	80 93 68 02 	sts	0x0268, r24
		arrow = 2;
     8ac:	82 e0       	ldi	r24, 0x02	; 2
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	90 93 07 01 	sts	0x0107, r25
     8b4:	80 93 06 01 	sts	0x0106, r24
		draw_settings();
     8b8:	0e 94 3f 02 	call	0x47e	; 0x47e <draw_settings>
	}
}
     8bc:	ff 91       	pop	r31
     8be:	ef 91       	pop	r30
     8c0:	bf 91       	pop	r27
     8c2:	af 91       	pop	r26
     8c4:	9f 91       	pop	r25
     8c6:	8f 91       	pop	r24
     8c8:	7f 91       	pop	r23
     8ca:	6f 91       	pop	r22
     8cc:	5f 91       	pop	r21
     8ce:	4f 91       	pop	r20
     8d0:	3f 91       	pop	r19
     8d2:	2f 91       	pop	r18
     8d4:	0f 90       	pop	r0
     8d6:	0f be       	out	0x3f, r0	; 63
     8d8:	0f 90       	pop	r0
     8da:	1f 90       	pop	r1
     8dc:	18 95       	reti

000008de <ISR_slide_left>:
{
	//printf("Interrupted by right slide!\n");
}

void ISR_slide_left()
{
     8de:	cf 93       	push	r28
     8e0:	df 93       	push	r29
	if(mode == BRIGHTNESS)
     8e2:	80 91 68 02 	lds	r24, 0x0268
     8e6:	90 91 69 02 	lds	r25, 0x0269
     8ea:	8d 38       	cpi	r24, 0x8D	; 141
     8ec:	91 05       	cpc	r25, r1
     8ee:	39 f5       	brne	.+78     	; 0x93e <ISR_slide_left+0x60>
	{
		OLED_set_brightness(slide_left);
     8f0:	80 91 6a 02 	lds	r24, 0x026A
     8f4:	0e 94 6d 06 	call	0xcda	; 0xcda <OLED_set_brightness>
		OLED_pos(3, 32);
     8f8:	60 e2       	ldi	r22, 0x20	; 32
     8fa:	83 e0       	ldi	r24, 0x03	; 3
     8fc:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <OLED_pos>
     900:	c0 e4       	ldi	r28, 0x40	; 64
     902:	d0 e0       	ldi	r29, 0x00	; 0
		for(int i=0; i < 64; i++)
		{
			OLED_write_data(0b00000000);
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <OLED_write_data>
     90a:	21 97       	sbiw	r28, 0x01	; 1
{
	if(mode == BRIGHTNESS)
	{
		OLED_set_brightness(slide_left);
		OLED_pos(3, 32);
		for(int i=0; i < 64; i++)
     90c:	20 97       	sbiw	r28, 0x00	; 0
     90e:	d1 f7       	brne	.-12     	; 0x904 <ISR_slide_left+0x26>
		{
			OLED_write_data(0b00000000);
		}
		OLED_pos(3, 32);
     910:	60 e2       	ldi	r22, 0x20	; 32
     912:	83 e0       	ldi	r24, 0x03	; 3
     914:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <OLED_pos>
		for(int i=0; i < slide_left/4; i++)
     918:	80 91 6a 02 	lds	r24, 0x026A
     91c:	86 95       	lsr	r24
     91e:	86 95       	lsr	r24
     920:	71 f0       	breq	.+28     	; 0x93e <ISR_slide_left+0x60>
     922:	c0 e0       	ldi	r28, 0x00	; 0
     924:	d0 e0       	ldi	r29, 0x00	; 0
		{
			OLED_write_data(0b11111111);
     926:	8f ef       	ldi	r24, 0xFF	; 255
     928:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <OLED_write_data>
		for(int i=0; i < 64; i++)
		{
			OLED_write_data(0b00000000);
		}
		OLED_pos(3, 32);
		for(int i=0; i < slide_left/4; i++)
     92c:	21 96       	adiw	r28, 0x01	; 1
     92e:	80 91 6a 02 	lds	r24, 0x026A
     932:	86 95       	lsr	r24
     934:	86 95       	lsr	r24
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	c8 17       	cp	r28, r24
     93a:	d9 07       	cpc	r29, r25
     93c:	a4 f3       	brlt	.-24     	; 0x926 <ISR_slide_left+0x48>
		{
			OLED_write_data(0b11111111);
		}
	}
}
     93e:	df 91       	pop	r29
     940:	cf 91       	pop	r28
     942:	08 95       	ret

00000944 <ISR_joystick>:

void ISR_joystick(Position joystick)
{
     944:	1f 93       	push	r17
     946:	cf 93       	push	r28
     948:	df 93       	push	r29
     94a:	cd b7       	in	r28, 0x3d	; 61
     94c:	de b7       	in	r29, 0x3e	; 62
     94e:	64 97       	sbiw	r28, 0x14	; 20
     950:	0f b6       	in	r0, 0x3f	; 63
     952:	f8 94       	cli
     954:	de bf       	out	0x3e, r29	; 62
     956:	0f be       	out	0x3f, r0	; 63
     958:	cd bf       	out	0x3d, r28	; 61
     95a:	2d 87       	std	Y+13, r18	; 0x0d
     95c:	3e 87       	std	Y+14, r19	; 0x0e
     95e:	4f 87       	std	Y+15, r20	; 0x0f
     960:	58 8b       	std	Y+16, r21	; 0x10
     962:	69 8b       	std	Y+17, r22	; 0x11
     964:	7a 8b       	std	Y+18, r23	; 0x12
     966:	8b 8b       	std	Y+19, r24	; 0x13
     968:	9c 8b       	std	Y+20, r25	; 0x14
	char* direction = Joystick_Direction(&joystick);
     96a:	ce 01       	movw	r24, r28
     96c:	0d 96       	adiw	r24, 0x0d	; 13
     96e:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <Joystick_Direction>
	if(mode == MAIN_MENU && direction == "UP"){
     972:	20 91 68 02 	lds	r18, 0x0268
     976:	30 91 69 02 	lds	r19, 0x0269
     97a:	21 30       	cpi	r18, 0x01	; 1
     97c:	31 05       	cpc	r19, r1
     97e:	09 f0       	breq	.+2      	; 0x982 <ISR_joystick+0x3e>
     980:	68 c0       	rjmp	.+208    	; 0xa52 <ISR_joystick+0x10e>
     982:	22 e0       	ldi	r18, 0x02	; 2
     984:	8a 32       	cpi	r24, 0x2A	; 42
     986:	92 07       	cpc	r25, r18
     988:	81 f5       	brne	.+96     	; 0x9ea <ISR_joystick+0xa6>
		if(arrow > 2)
     98a:	80 91 06 01 	lds	r24, 0x0106
     98e:	90 91 07 01 	lds	r25, 0x0107
     992:	83 30       	cpi	r24, 0x03	; 3
     994:	91 05       	cpc	r25, r1
     996:	a4 f0       	brlt	.+40     	; 0x9c0 <ISR_joystick+0x7c>
		{
			OLED_pos(arrow, 8);
     998:	68 e0       	ldi	r22, 0x08	; 8
     99a:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <OLED_pos>
			OLED_erase_arrow();
     99e:	0e 94 47 07 	call	0xe8e	; 0xe8e <OLED_erase_arrow>
			arrow--;
     9a2:	80 91 06 01 	lds	r24, 0x0106
     9a6:	90 91 07 01 	lds	r25, 0x0107
     9aa:	01 97       	sbiw	r24, 0x01	; 1
     9ac:	90 93 07 01 	sts	0x0107, r25
     9b0:	80 93 06 01 	sts	0x0106, r24
			OLED_pos(arrow, 8);
     9b4:	68 e0       	ldi	r22, 0x08	; 8
     9b6:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <OLED_pos>
			OLED_print_arrow();
     9ba:	0e 94 3a 07 	call	0xe74	; 0xe74 <OLED_print_arrow>
     9be:	ec c0       	rjmp	.+472    	; 0xb98 <ISR_joystick+0x254>
		}
		else if(arrow == 2)
     9c0:	02 97       	sbiw	r24, 0x02	; 2
     9c2:	09 f0       	breq	.+2      	; 0x9c6 <ISR_joystick+0x82>
     9c4:	e9 c0       	rjmp	.+466    	; 0xb98 <ISR_joystick+0x254>
		{
			OLED_pos(arrow, 8);
     9c6:	68 e0       	ldi	r22, 0x08	; 8
     9c8:	82 e0       	ldi	r24, 0x02	; 2
     9ca:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <OLED_pos>
			OLED_erase_arrow();
     9ce:	0e 94 47 07 	call	0xe8e	; 0xe8e <OLED_erase_arrow>
			arrow = 5;
     9d2:	85 e0       	ldi	r24, 0x05	; 5
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	90 93 07 01 	sts	0x0107, r25
     9da:	80 93 06 01 	sts	0x0106, r24
			OLED_pos(arrow, 8);
     9de:	68 e0       	ldi	r22, 0x08	; 8
     9e0:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <OLED_pos>
			OLED_print_arrow();
     9e4:	0e 94 3a 07 	call	0xe74	; 0xe74 <OLED_print_arrow>
     9e8:	d7 c0       	rjmp	.+430    	; 0xb98 <ISR_joystick+0x254>
		}
	}
	else if(mode == MAIN_MENU && direction == "DOWN"){
     9ea:	85 52       	subi	r24, 0x25	; 37
     9ec:	92 40       	sbci	r25, 0x02	; 2
     9ee:	09 f0       	breq	.+2      	; 0x9f2 <ISR_joystick+0xae>
     9f0:	d3 c0       	rjmp	.+422    	; 0xb98 <ISR_joystick+0x254>
		if(arrow < 5)
     9f2:	80 91 06 01 	lds	r24, 0x0106
     9f6:	90 91 07 01 	lds	r25, 0x0107
     9fa:	85 30       	cpi	r24, 0x05	; 5
     9fc:	91 05       	cpc	r25, r1
     9fe:	a4 f4       	brge	.+40     	; 0xa28 <ISR_joystick+0xe4>
		{
			OLED_pos(arrow, 8);
     a00:	68 e0       	ldi	r22, 0x08	; 8
     a02:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <OLED_pos>
			OLED_erase_arrow();
     a06:	0e 94 47 07 	call	0xe8e	; 0xe8e <OLED_erase_arrow>
			arrow++;
     a0a:	80 91 06 01 	lds	r24, 0x0106
     a0e:	90 91 07 01 	lds	r25, 0x0107
     a12:	01 96       	adiw	r24, 0x01	; 1
     a14:	90 93 07 01 	sts	0x0107, r25
     a18:	80 93 06 01 	sts	0x0106, r24
			OLED_pos(arrow, 8);
     a1c:	68 e0       	ldi	r22, 0x08	; 8
     a1e:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <OLED_pos>
			OLED_print_arrow();
     a22:	0e 94 3a 07 	call	0xe74	; 0xe74 <OLED_print_arrow>
     a26:	b8 c0       	rjmp	.+368    	; 0xb98 <ISR_joystick+0x254>
		}
		else if(arrow == 5)
     a28:	05 97       	sbiw	r24, 0x05	; 5
     a2a:	09 f0       	breq	.+2      	; 0xa2e <ISR_joystick+0xea>
     a2c:	b5 c0       	rjmp	.+362    	; 0xb98 <ISR_joystick+0x254>
		{
			OLED_pos(arrow, 8);
     a2e:	68 e0       	ldi	r22, 0x08	; 8
     a30:	85 e0       	ldi	r24, 0x05	; 5
     a32:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <OLED_pos>
			OLED_erase_arrow();
     a36:	0e 94 47 07 	call	0xe8e	; 0xe8e <OLED_erase_arrow>
			arrow = 2;
     a3a:	82 e0       	ldi	r24, 0x02	; 2
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	90 93 07 01 	sts	0x0107, r25
     a42:	80 93 06 01 	sts	0x0106, r24
			OLED_pos(arrow, 8);
     a46:	68 e0       	ldi	r22, 0x08	; 8
     a48:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <OLED_pos>
			OLED_print_arrow();
     a4c:	0e 94 3a 07 	call	0xe74	; 0xe74 <OLED_print_arrow>
     a50:	a3 c0       	rjmp	.+326    	; 0xb98 <ISR_joystick+0x254>
		}
	}
	else if(mode == SETTINGS && direction == "UP"){
     a52:	2e 30       	cpi	r18, 0x0E	; 14
     a54:	31 05       	cpc	r19, r1
     a56:	09 f0       	breq	.+2      	; 0xa5a <ISR_joystick+0x116>
     a58:	6a c0       	rjmp	.+212    	; 0xb2e <ISR_joystick+0x1ea>
     a5a:	22 e0       	ldi	r18, 0x02	; 2
     a5c:	8a 32       	cpi	r24, 0x2A	; 42
     a5e:	92 07       	cpc	r25, r18
     a60:	89 f5       	brne	.+98     	; 0xac4 <ISR_joystick+0x180>
		if(arrow == 3)
     a62:	80 91 06 01 	lds	r24, 0x0106
     a66:	90 91 07 01 	lds	r25, 0x0107
     a6a:	83 30       	cpi	r24, 0x03	; 3
     a6c:	91 05       	cpc	r25, r1
     a6e:	a9 f4       	brne	.+42     	; 0xa9a <ISR_joystick+0x156>
		{
			OLED_pos(arrow, 8);
     a70:	68 e0       	ldi	r22, 0x08	; 8
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <OLED_pos>
			OLED_erase_arrow();
     a78:	0e 94 47 07 	call	0xe8e	; 0xe8e <OLED_erase_arrow>
			arrow--;
     a7c:	80 91 06 01 	lds	r24, 0x0106
     a80:	90 91 07 01 	lds	r25, 0x0107
     a84:	01 97       	sbiw	r24, 0x01	; 1
     a86:	90 93 07 01 	sts	0x0107, r25
     a8a:	80 93 06 01 	sts	0x0106, r24
			OLED_pos(arrow, 8);
     a8e:	68 e0       	ldi	r22, 0x08	; 8
     a90:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <OLED_pos>
			OLED_print_arrow();
     a94:	0e 94 3a 07 	call	0xe74	; 0xe74 <OLED_print_arrow>
     a98:	7f c0       	rjmp	.+254    	; 0xb98 <ISR_joystick+0x254>
		}
		else if(arrow == 2)
     a9a:	02 97       	sbiw	r24, 0x02	; 2
     a9c:	09 f0       	breq	.+2      	; 0xaa0 <ISR_joystick+0x15c>
     a9e:	7c c0       	rjmp	.+248    	; 0xb98 <ISR_joystick+0x254>
		{
			OLED_pos(arrow, 8);
     aa0:	68 e0       	ldi	r22, 0x08	; 8
     aa2:	82 e0       	ldi	r24, 0x02	; 2
     aa4:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <OLED_pos>
			OLED_erase_arrow();
     aa8:	0e 94 47 07 	call	0xe8e	; 0xe8e <OLED_erase_arrow>
			arrow = 3;
     aac:	83 e0       	ldi	r24, 0x03	; 3
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	90 93 07 01 	sts	0x0107, r25
     ab4:	80 93 06 01 	sts	0x0106, r24
			OLED_pos(arrow, 8);
     ab8:	68 e0       	ldi	r22, 0x08	; 8
     aba:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <OLED_pos>
			OLED_print_arrow();
     abe:	0e 94 3a 07 	call	0xe74	; 0xe74 <OLED_print_arrow>
     ac2:	6a c0       	rjmp	.+212    	; 0xb98 <ISR_joystick+0x254>
		}
	}
	else if(mode == SETTINGS && direction == "DOWN"){
     ac4:	85 52       	subi	r24, 0x25	; 37
     ac6:	92 40       	sbci	r25, 0x02	; 2
     ac8:	09 f0       	breq	.+2      	; 0xacc <ISR_joystick+0x188>
     aca:	66 c0       	rjmp	.+204    	; 0xb98 <ISR_joystick+0x254>
		if(arrow == 2)
     acc:	80 91 06 01 	lds	r24, 0x0106
     ad0:	90 91 07 01 	lds	r25, 0x0107
     ad4:	82 30       	cpi	r24, 0x02	; 2
     ad6:	91 05       	cpc	r25, r1
     ad8:	a9 f4       	brne	.+42     	; 0xb04 <ISR_joystick+0x1c0>
		{
			OLED_pos(arrow, 8);
     ada:	68 e0       	ldi	r22, 0x08	; 8
     adc:	82 e0       	ldi	r24, 0x02	; 2
     ade:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <OLED_pos>
			OLED_erase_arrow();
     ae2:	0e 94 47 07 	call	0xe8e	; 0xe8e <OLED_erase_arrow>
			arrow++;
     ae6:	80 91 06 01 	lds	r24, 0x0106
     aea:	90 91 07 01 	lds	r25, 0x0107
     aee:	01 96       	adiw	r24, 0x01	; 1
     af0:	90 93 07 01 	sts	0x0107, r25
     af4:	80 93 06 01 	sts	0x0106, r24
			OLED_pos(arrow, 8);
     af8:	68 e0       	ldi	r22, 0x08	; 8
     afa:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <OLED_pos>
			OLED_print_arrow();
     afe:	0e 94 3a 07 	call	0xe74	; 0xe74 <OLED_print_arrow>
     b02:	4a c0       	rjmp	.+148    	; 0xb98 <ISR_joystick+0x254>
		}
		else if(arrow == 3)
     b04:	03 97       	sbiw	r24, 0x03	; 3
     b06:	09 f0       	breq	.+2      	; 0xb0a <ISR_joystick+0x1c6>
     b08:	47 c0       	rjmp	.+142    	; 0xb98 <ISR_joystick+0x254>
		{
			OLED_pos(arrow, 8);
     b0a:	68 e0       	ldi	r22, 0x08	; 8
     b0c:	83 e0       	ldi	r24, 0x03	; 3
     b0e:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <OLED_pos>
			OLED_erase_arrow();
     b12:	0e 94 47 07 	call	0xe8e	; 0xe8e <OLED_erase_arrow>
			arrow = 2;
     b16:	82 e0       	ldi	r24, 0x02	; 2
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	90 93 07 01 	sts	0x0107, r25
     b1e:	80 93 06 01 	sts	0x0106, r24
			OLED_pos(arrow, 8);
     b22:	68 e0       	ldi	r22, 0x08	; 8
     b24:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <OLED_pos>
			OLED_print_arrow();
     b28:	0e 94 3a 07 	call	0xe74	; 0xe74 <OLED_print_arrow>
     b2c:	35 c0       	rjmp	.+106    	; 0xb98 <ISR_joystick+0x254>
		}
	}
	else if((mode == ONE_PLAYER) || (mode == TWO_PLAYERS)){
     b2e:	2b 50       	subi	r18, 0x0B	; 11
     b30:	31 09       	sbc	r19, r1
     b32:	22 30       	cpi	r18, 0x02	; 2
     b34:	31 05       	cpc	r19, r1
     b36:	80 f5       	brcc	.+96     	; 0xb98 <ISR_joystick+0x254>
		MSG joystick_message;
		joystick_message.ID = 1;
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	9a 83       	std	Y+2, r25	; 0x02
     b3e:	89 83       	std	Y+1, r24	; 0x01
		joystick_message.length = 2;
     b40:	82 e0       	ldi	r24, 0x02	; 2
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	9c 83       	std	Y+4, r25	; 0x04
     b46:	8b 83       	std	Y+3, r24	; 0x03
		joystick_message.data[0] = joystick.x;
     b48:	6d 85       	ldd	r22, Y+13	; 0x0d
     b4a:	7e 85       	ldd	r23, Y+14	; 0x0e
     b4c:	8f 85       	ldd	r24, Y+15	; 0x0f
     b4e:	98 89       	ldd	r25, Y+16	; 0x10
     b50:	0e 94 8f 08 	call	0x111e	; 0x111e <__fixunssfsi>
     b54:	16 2f       	mov	r17, r22
     b56:	6d 83       	std	Y+5, r22	; 0x05
		joystick_message.data[1] = joystick.y;
     b58:	69 89       	ldd	r22, Y+17	; 0x11
     b5a:	7a 89       	ldd	r23, Y+18	; 0x12
     b5c:	8b 89       	ldd	r24, Y+19	; 0x13
     b5e:	9c 89       	ldd	r25, Y+20	; 0x14
     b60:	0e 94 8f 08 	call	0x111e	; 0x111e <__fixunssfsi>
     b64:	6e 83       	std	Y+6, r22	; 0x06
		printf("Sending: ID: %d, length: %d, x: %i, y:%i\n", joystick_message.ID, joystick_message.length, joystick_message.data[0], joystick_message.data[1]);
     b66:	1f 92       	push	r1
     b68:	6f 93       	push	r22
     b6a:	1f 92       	push	r1
     b6c:	1f 93       	push	r17
     b6e:	1f 92       	push	r1
     b70:	82 e0       	ldi	r24, 0x02	; 2
     b72:	8f 93       	push	r24
     b74:	1f 92       	push	r1
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	8f 93       	push	r24
     b7a:	85 e3       	ldi	r24, 0x35	; 53
     b7c:	92 e0       	ldi	r25, 0x02	; 2
     b7e:	9f 93       	push	r25
     b80:	8f 93       	push	r24
     b82:	0e 94 1f 0a 	call	0x143e	; 0x143e <printf>
		CAN_send(&joystick_message);
     b86:	ce 01       	movw	r24, r28
     b88:	01 96       	adiw	r24, 0x01	; 1
     b8a:	0e 94 3e 01 	call	0x27c	; 0x27c <CAN_send>
     b8e:	0f b6       	in	r0, 0x3f	; 63
     b90:	f8 94       	cli
     b92:	de bf       	out	0x3e, r29	; 62
     b94:	0f be       	out	0x3f, r0	; 63
     b96:	cd bf       	out	0x3d, r28	; 61
	}
}
     b98:	64 96       	adiw	r28, 0x14	; 20
     b9a:	0f b6       	in	r0, 0x3f	; 63
     b9c:	f8 94       	cli
     b9e:	de bf       	out	0x3e, r29	; 62
     ba0:	0f be       	out	0x3f, r0	; 63
     ba2:	cd bf       	out	0x3d, r28	; 61
     ba4:	df 91       	pop	r29
     ba6:	cf 91       	pop	r28
     ba8:	1f 91       	pop	r17
     baa:	08 95       	ret

00000bac <main>:

int main(void)
{
     bac:	cf 93       	push	r28
     bae:	df 93       	push	r29
     bb0:	cd b7       	in	r28, 0x3d	; 61
     bb2:	de b7       	in	r29, 0x3e	; 62
     bb4:	29 97       	sbiw	r28, 0x09	; 9
     bb6:	0f b6       	in	r0, 0x3f	; 63
     bb8:	f8 94       	cli
     bba:	de bf       	out	0x3e, r29	; 62
     bbc:	0f be       	out	0x3f, r0	; 63
     bbe:	cd bf       	out	0x3d, r28	; 61
	/* Initialize UART */
 	UART_Init(UART_BAUD);
     bc0:	8f e1       	ldi	r24, 0x1F	; 31
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	0e 94 b4 07 	call	0xf68	; 0xf68 <UART_Init>
	printf("Reset\n");
     bc8:	8f e5       	ldi	r24, 0x5F	; 95
     bca:	92 e0       	ldi	r25, 0x02	; 2
     bcc:	0e 94 33 0a 	call	0x1466	; 0x1466 <puts>
     bd0:	2f e3       	ldi	r18, 0x3F	; 63
     bd2:	8d e0       	ldi	r24, 0x0D	; 13
     bd4:	93 e0       	ldi	r25, 0x03	; 3
     bd6:	21 50       	subi	r18, 0x01	; 1
     bd8:	80 40       	sbci	r24, 0x00	; 0
     bda:	90 40       	sbci	r25, 0x00	; 0
     bdc:	e1 f7       	brne	.-8      	; 0xbd6 <main+0x2a>
     bde:	00 c0       	rjmp	.+0      	; 0xbe0 <main+0x34>
     be0:	00 00       	nop
	_delay_ms(1000);
	
	/* Initialize SRAM, ADC, OLED and CAN */
	SRAM_Init();
     be2:	0e 94 a8 07 	call	0xf50	; 0xf50 <SRAM_Init>
	OLED_Reset();
     be6:	0e 94 73 06 	call	0xce6	; 0xce6 <OLED_Reset>
	OLED_Init();
     bea:	0e 94 cc 06 	call	0xd98	; 0xd98 <OLED_Init>
	CAN_init();
     bee:	0e 94 20 01 	call	0x240	; 0x240 <CAN_init>
	
	/* Draw something cool */
	draw_home();
     bf2:	0e 94 8e 01 	call	0x31c	; 0x31c <draw_home>
	
	/* Enable interrupts */
	GICR |= (1 << INT0) | (1 << INT1); //| (1 << INT2);
     bf6:	8b b7       	in	r24, 0x3b	; 59
     bf8:	80 6c       	ori	r24, 0xC0	; 192
     bfa:	8b bf       	out	0x3b, r24	; 59
	SREG |= (1 << 7);
     bfc:	8f b7       	in	r24, 0x3f	; 63
     bfe:	80 68       	ori	r24, 0x80	; 128
     c00:	8f bf       	out	0x3f, r24	; 63
	MCUCR |= (1<< ISC00) | (1 << ISC01) | (1 << ISC10) | (1 << ISC11);
     c02:	85 b7       	in	r24, 0x35	; 53
     c04:	8f 60       	ori	r24, 0x0F	; 15
     c06:	85 bf       	out	0x35, r24	; 53
	EMCUCR &= (0 << ISC2);
     c08:	86 b7       	in	r24, 0x36	; 54
     c0a:	16 be       	out	0x36, r1	; 54
	sei();
     c0c:	78 94       	sei
	
	/* Variables initialization */
	Position joystick = Joystick_Position();
     c0e:	0e 94 7f 02 	call	0x4fe	; 0x4fe <Joystick_Position>
     c12:	52 2e       	mov	r5, r18
     c14:	63 2e       	mov	r6, r19
     c16:	74 2e       	mov	r7, r20
     c18:	85 2e       	mov	r8, r21
     c1a:	26 2e       	mov	r2, r22
     c1c:	37 2e       	mov	r3, r23
     c1e:	48 2e       	mov	r4, r24
     c20:	99 87       	std	Y+9, r25	; 0x09
	Position joystick_previous = joystick;
	slide_left = ADC_Convert(SLIDE_LEFT);
     c22:	86 e0       	ldi	r24, 0x06	; 6
     c24:	0e 94 15 01 	call	0x22a	; 0x22a <ADC_Convert>
     c28:	98 2e       	mov	r9, r24
     c2a:	80 93 6a 02 	sts	0x026A, r24
	uint8_t previous_slide_left = slide_left;
	uint8_t slide_right = ADC_Convert(SLIDE_RIGHT);
     c2e:	87 e0       	ldi	r24, 0x07	; 7
     c30:	0e 94 15 01 	call	0x22a	; 0x22a <ADC_Convert>
		printf("Receiving: ID: %d, length: %d, data: %d\n", received_test.ID, received_test.length, received_test.data[0]);
	}*/
	
    while(1)
    {
		joystick = Joystick_Position();
     c34:	0e 94 7f 02 	call	0x4fe	; 0x4fe <Joystick_Position>
     c38:	29 83       	std	Y+1, r18	; 0x01
     c3a:	3a 83       	std	Y+2, r19	; 0x02
     c3c:	4b 83       	std	Y+3, r20	; 0x03
     c3e:	5c 83       	std	Y+4, r21	; 0x04
     c40:	6d 83       	std	Y+5, r22	; 0x05
     c42:	7e 83       	std	Y+6, r23	; 0x06
     c44:	8f 83       	std	Y+7, r24	; 0x07
     c46:	98 87       	std	Y+8, r25	; 0x08
     c48:	e2 2e       	mov	r14, r18
     c4a:	f3 2e       	mov	r15, r19
     c4c:	04 2f       	mov	r16, r20
     c4e:	15 2f       	mov	r17, r21
     c50:	a6 2e       	mov	r10, r22
     c52:	b7 2e       	mov	r11, r23
     c54:	c8 2e       	mov	r12, r24
     c56:	d9 2e       	mov	r13, r25
		if((joystick.x != joystick_previous.x)||(joystick.y != joystick_previous.y))
     c58:	65 2d       	mov	r22, r5
     c5a:	76 2d       	mov	r23, r6
     c5c:	87 2d       	mov	r24, r7
     c5e:	98 2d       	mov	r25, r8
     c60:	0e 94 23 08 	call	0x1046	; 0x1046 <__cmpsf2>
     c64:	81 11       	cpse	r24, r1
     c66:	0c c0       	rjmp	.+24     	; 0xc80 <main+0xd4>
     c68:	2a 2d       	mov	r18, r10
     c6a:	3b 2d       	mov	r19, r11
     c6c:	4c 2d       	mov	r20, r12
     c6e:	5d 2d       	mov	r21, r13
     c70:	62 2d       	mov	r22, r2
     c72:	73 2d       	mov	r23, r3
     c74:	84 2d       	mov	r24, r4
     c76:	99 85       	ldd	r25, Y+9	; 0x09
     c78:	0e 94 23 08 	call	0x1046	; 0x1046 <__cmpsf2>
     c7c:	88 23       	and	r24, r24
     c7e:	51 f0       	breq	.+20     	; 0xc94 <main+0xe8>
		{
			ISR_joystick(joystick);
     c80:	29 81       	ldd	r18, Y+1	; 0x01
     c82:	3a 81       	ldd	r19, Y+2	; 0x02
     c84:	4b 81       	ldd	r20, Y+3	; 0x03
     c86:	5c 81       	ldd	r21, Y+4	; 0x04
     c88:	6d 81       	ldd	r22, Y+5	; 0x05
     c8a:	7e 81       	ldd	r23, Y+6	; 0x06
     c8c:	8f 81       	ldd	r24, Y+7	; 0x07
     c8e:	98 85       	ldd	r25, Y+8	; 0x08
     c90:	0e 94 a2 04 	call	0x944	; 0x944 <ISR_joystick>
		}
		joystick_previous = joystick;
		
		slide_left = ADC_Convert(SLIDE_LEFT);
     c94:	86 e0       	ldi	r24, 0x06	; 6
     c96:	0e 94 15 01 	call	0x22a	; 0x22a <ADC_Convert>
     c9a:	80 93 6a 02 	sts	0x026A, r24
		if(slide_left != previous_slide_left)
     c9e:	98 12       	cpse	r9, r24
		{
			ISR_slide_left();
     ca0:	0e 94 6f 04 	call	0x8de	; 0x8de <ISR_slide_left>
		}
		previous_slide_left = slide_left;
     ca4:	90 90 6a 02 	lds	r9, 0x026A
		 
		slide_right = ADC_Convert(SLIDE_RIGHT);
     ca8:	87 e0       	ldi	r24, 0x07	; 7
     caa:	0e 94 15 01 	call	0x22a	; 0x22a <ADC_Convert>
		{
			ISR_slide_right();
		}
		previous_slide_right = slide_right;
		
		if(JOYSTICK_BUTTON == 1)
     cae:	86 b3       	in	r24, 0x16	; 22
     cb0:	8f ef       	ldi	r24, 0xFF	; 255
     cb2:	90 e7       	ldi	r25, 0x70	; 112
     cb4:	22 e0       	ldi	r18, 0x02	; 2
     cb6:	81 50       	subi	r24, 0x01	; 1
     cb8:	90 40       	sbci	r25, 0x00	; 0
     cba:	20 40       	sbci	r18, 0x00	; 0
     cbc:	e1 f7       	brne	.-8      	; 0xcb6 <main+0x10a>
     cbe:	00 c0       	rjmp	.+0      	; 0xcc0 <main+0x114>
     cc0:	00 00       	nop
		joystick = Joystick_Position();
		if((joystick.x != joystick_previous.x)||(joystick.y != joystick_previous.y))
		{
			ISR_joystick(joystick);
		}
		joystick_previous = joystick;
     cc2:	5e 2c       	mov	r5, r14
     cc4:	6f 2c       	mov	r6, r15
     cc6:	70 2e       	mov	r7, r16
     cc8:	81 2e       	mov	r8, r17
     cca:	2a 2c       	mov	r2, r10
     ccc:	3b 2c       	mov	r3, r11
     cce:	4c 2c       	mov	r4, r12
     cd0:	d9 86       	std	Y+9, r13	; 0x09
     cd2:	b0 cf       	rjmp	.-160    	; 0xc34 <main+0x88>

00000cd4 <OLED_write_data>:

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     cd4:	80 93 00 12 	sts	0x1200, r24
     cd8:	08 95       	ret

00000cda <OLED_set_brightness>:

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     cda:	e0 e0       	ldi	r30, 0x00	; 0
     cdc:	f0 e1       	ldi	r31, 0x10	; 16
     cde:	91 e8       	ldi	r25, 0x81	; 129
     ce0:	90 83       	st	Z, r25
     ce2:	80 83       	st	Z, r24
     ce4:	08 95       	ret

00000ce6 <OLED_Reset>:
     ce6:	80 eb       	ldi	r24, 0xB0	; 176
     ce8:	80 93 00 10 	sts	0x1000, r24
     cec:	80 e8       	ldi	r24, 0x80	; 128
     cee:	90 e0       	ldi	r25, 0x00	; 0

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     cf0:	e0 e0       	ldi	r30, 0x00	; 0
     cf2:	f2 e1       	ldi	r31, 0x12	; 18
     cf4:	10 82       	st	Z, r1
     cf6:	01 97       	sbiw	r24, 0x01	; 1

/* Erase the RAM line by line */
void OLED_Reset()
{
	OLED_write_cmd(0xb0);
	for(int i=0; i<128; i++){
     cf8:	00 97       	sbiw	r24, 0x00	; 0
     cfa:	e1 f7       	brne	.-8      	; 0xcf4 <OLED_Reset+0xe>

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     cfc:	81 eb       	ldi	r24, 0xB1	; 177
     cfe:	80 93 00 10 	sts	0x1000, r24
     d02:	80 e8       	ldi	r24, 0x80	; 128
     d04:	90 e0       	ldi	r25, 0x00	; 0

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     d06:	e0 e0       	ldi	r30, 0x00	; 0
     d08:	f2 e1       	ldi	r31, 0x12	; 18
     d0a:	10 82       	st	Z, r1
     d0c:	01 97       	sbiw	r24, 0x01	; 1
	OLED_write_cmd(0xb0);
	for(int i=0; i<128; i++){
		OLED_write_data(0b00000000);
	}
	OLED_write_cmd(0xb1);
	for(int i=0; i<128; i++){
     d0e:	00 97       	sbiw	r24, 0x00	; 0
     d10:	e1 f7       	brne	.-8      	; 0xd0a <OLED_Reset+0x24>

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     d12:	82 eb       	ldi	r24, 0xB2	; 178
     d14:	80 93 00 10 	sts	0x1000, r24
     d18:	80 e8       	ldi	r24, 0x80	; 128
     d1a:	90 e0       	ldi	r25, 0x00	; 0

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     d1c:	e0 e0       	ldi	r30, 0x00	; 0
     d1e:	f2 e1       	ldi	r31, 0x12	; 18
     d20:	10 82       	st	Z, r1
     d22:	01 97       	sbiw	r24, 0x01	; 1
	OLED_write_cmd(0xb1);
	for(int i=0; i<128; i++){
		OLED_write_data(0b00000000);
	}
	OLED_write_cmd(0xb2);
	for(int i=0; i<128; i++){
     d24:	00 97       	sbiw	r24, 0x00	; 0
     d26:	e1 f7       	brne	.-8      	; 0xd20 <OLED_Reset+0x3a>

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     d28:	83 eb       	ldi	r24, 0xB3	; 179
     d2a:	80 93 00 10 	sts	0x1000, r24
     d2e:	80 e8       	ldi	r24, 0x80	; 128
     d30:	90 e0       	ldi	r25, 0x00	; 0

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     d32:	e0 e0       	ldi	r30, 0x00	; 0
     d34:	f2 e1       	ldi	r31, 0x12	; 18
     d36:	10 82       	st	Z, r1
     d38:	01 97       	sbiw	r24, 0x01	; 1
	OLED_write_cmd(0xb2);
	for(int i=0; i<128; i++){
		OLED_write_data(0b00000000);
	}
	OLED_write_cmd(0xb3);
	for(int i=0; i<128; i++){
     d3a:	00 97       	sbiw	r24, 0x00	; 0
     d3c:	e1 f7       	brne	.-8      	; 0xd36 <OLED_Reset+0x50>

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     d3e:	84 eb       	ldi	r24, 0xB4	; 180
     d40:	80 93 00 10 	sts	0x1000, r24
     d44:	80 e8       	ldi	r24, 0x80	; 128
     d46:	90 e0       	ldi	r25, 0x00	; 0

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     d48:	e0 e0       	ldi	r30, 0x00	; 0
     d4a:	f2 e1       	ldi	r31, 0x12	; 18
     d4c:	10 82       	st	Z, r1
     d4e:	01 97       	sbiw	r24, 0x01	; 1
	OLED_write_cmd(0xb3);
	for(int i=0; i<128; i++){
		OLED_write_data(0b00000000);
	}
	OLED_write_cmd(0xb4);
	for(int i=0; i<128; i++){
     d50:	00 97       	sbiw	r24, 0x00	; 0
     d52:	e1 f7       	brne	.-8      	; 0xd4c <OLED_Reset+0x66>

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     d54:	85 eb       	ldi	r24, 0xB5	; 181
     d56:	80 93 00 10 	sts	0x1000, r24
     d5a:	80 e8       	ldi	r24, 0x80	; 128
     d5c:	90 e0       	ldi	r25, 0x00	; 0

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     d5e:	e0 e0       	ldi	r30, 0x00	; 0
     d60:	f2 e1       	ldi	r31, 0x12	; 18
     d62:	10 82       	st	Z, r1
     d64:	01 97       	sbiw	r24, 0x01	; 1
	OLED_write_cmd(0xb4);
	for(int i=0; i<128; i++){
		OLED_write_data(0b00000000);
	}
	OLED_write_cmd(0xb5);
	for(int i=0; i<128; i++){
     d66:	00 97       	sbiw	r24, 0x00	; 0
     d68:	e1 f7       	brne	.-8      	; 0xd62 <OLED_Reset+0x7c>

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     d6a:	86 eb       	ldi	r24, 0xB6	; 182
     d6c:	80 93 00 10 	sts	0x1000, r24
     d70:	80 e8       	ldi	r24, 0x80	; 128
     d72:	90 e0       	ldi	r25, 0x00	; 0

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     d74:	e0 e0       	ldi	r30, 0x00	; 0
     d76:	f2 e1       	ldi	r31, 0x12	; 18
     d78:	10 82       	st	Z, r1
     d7a:	01 97       	sbiw	r24, 0x01	; 1
	OLED_write_cmd(0xb5);
	for(int i=0; i<128; i++){
		OLED_write_data(0b00000000);
	}
	OLED_write_cmd(0xb6);
	for(int i=0; i<128; i++){
     d7c:	00 97       	sbiw	r24, 0x00	; 0
     d7e:	e1 f7       	brne	.-8      	; 0xd78 <OLED_Reset+0x92>

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     d80:	87 eb       	ldi	r24, 0xB7	; 183
     d82:	80 93 00 10 	sts	0x1000, r24
     d86:	80 e8       	ldi	r24, 0x80	; 128
     d88:	90 e0       	ldi	r25, 0x00	; 0

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     d8a:	e0 e0       	ldi	r30, 0x00	; 0
     d8c:	f2 e1       	ldi	r31, 0x12	; 18
     d8e:	10 82       	st	Z, r1
     d90:	01 97       	sbiw	r24, 0x01	; 1
	OLED_write_cmd(0xb6);
	for(int i=0; i<128; i++){
		OLED_write_data(0b00000000);
	}
	OLED_write_cmd(0xb7);
	for(int i=0; i<128; i++){
     d92:	00 97       	sbiw	r24, 0x00	; 0
     d94:	e1 f7       	brne	.-8      	; 0xd8e <OLED_Reset+0xa8>
		OLED_write_data(0b00000000);
	}
}
     d96:	08 95       	ret

00000d98 <OLED_Init>:

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     d98:	e0 e0       	ldi	r30, 0x00	; 0
     d9a:	f0 e1       	ldi	r31, 0x10	; 16
     d9c:	8e ea       	ldi	r24, 0xAE	; 174
     d9e:	80 83       	st	Z, r24
     da0:	81 ea       	ldi	r24, 0xA1	; 161
     da2:	80 83       	st	Z, r24
     da4:	8a ed       	ldi	r24, 0xDA	; 218
     da6:	80 83       	st	Z, r24
     da8:	82 e1       	ldi	r24, 0x12	; 18
     daa:	80 83       	st	Z, r24
     dac:	88 ec       	ldi	r24, 0xC8	; 200
     dae:	80 83       	st	Z, r24
     db0:	88 ea       	ldi	r24, 0xA8	; 168
     db2:	80 83       	st	Z, r24
     db4:	8f e3       	ldi	r24, 0x3F	; 63
     db6:	80 83       	st	Z, r24
     db8:	85 ed       	ldi	r24, 0xD5	; 213
     dba:	80 83       	st	Z, r24
     dbc:	80 e8       	ldi	r24, 0x80	; 128
     dbe:	80 83       	st	Z, r24
     dc0:	81 e8       	ldi	r24, 0x81	; 129
     dc2:	80 83       	st	Z, r24
     dc4:	80 e5       	ldi	r24, 0x50	; 80
     dc6:	80 83       	st	Z, r24
     dc8:	89 ed       	ldi	r24, 0xD9	; 217
     dca:	80 83       	st	Z, r24
     dcc:	81 e2       	ldi	r24, 0x21	; 33
     dce:	80 83       	st	Z, r24
     dd0:	80 e2       	ldi	r24, 0x20	; 32
     dd2:	80 83       	st	Z, r24
     dd4:	82 e0       	ldi	r24, 0x02	; 2
     dd6:	80 83       	st	Z, r24
     dd8:	8b ed       	ldi	r24, 0xDB	; 219
     dda:	80 83       	st	Z, r24
     ddc:	80 e3       	ldi	r24, 0x30	; 48
     dde:	80 83       	st	Z, r24
     de0:	8d ea       	ldi	r24, 0xAD	; 173
     de2:	80 83       	st	Z, r24
     de4:	10 82       	st	Z, r1
     de6:	84 ea       	ldi	r24, 0xA4	; 164
     de8:	80 83       	st	Z, r24
     dea:	86 ea       	ldi	r24, 0xA6	; 166
     dec:	80 83       	st	Z, r24
     dee:	8f ea       	ldi	r24, 0xAF	; 175
     df0:	80 83       	st	Z, r24
     df2:	08 95       	ret

00000df4 <OLED_pos>:
}

/* Set the cursor to the given position: page is from 0 to 7, segment from 0 to 127 */
void OLED_pos(uint8_t page, uint8_t segment)
{
	OLED_write_cmd(176 + page);
     df4:	80 55       	subi	r24, 0x50	; 80

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     df6:	e0 e0       	ldi	r30, 0x00	; 0
     df8:	f0 e1       	ldi	r31, 0x10	; 16
     dfa:	80 83       	st	Z, r24

/* Set the cursor to the given position: page is from 0 to 7, segment from 0 to 127 */
void OLED_pos(uint8_t page, uint8_t segment)
{
	OLED_write_cmd(176 + page);
	OLED_write_cmd(segment & 0x0f);
     dfc:	86 2f       	mov	r24, r22
     dfe:	8f 70       	andi	r24, 0x0F	; 15

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     e00:	80 83       	st	Z, r24
/* Set the cursor to the given position: page is from 0 to 7, segment from 0 to 127 */
void OLED_pos(uint8_t page, uint8_t segment)
{
	OLED_write_cmd(176 + page);
	OLED_write_cmd(segment & 0x0f);
	OLED_write_cmd(((segment & 0x70)>>4)|0x10);
     e02:	60 77       	andi	r22, 0x70	; 112
     e04:	62 95       	swap	r22
     e06:	6f 70       	andi	r22, 0x0F	; 15
     e08:	60 61       	ori	r22, 0x10	; 16

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     e0a:	60 83       	st	Z, r22
     e0c:	08 95       	ret

00000e0e <OLED_print>:
	OLED_write_cmd(((segment & 0x70)>>4)|0x10);
}

/* Print a character from the table */
void OLED_print(char* a)
{
     e0e:	88 0f       	add	r24, r24
     e10:	99 1f       	adc	r25, r25
     e12:	88 0f       	add	r24, r24
     e14:	99 1f       	adc	r25, r25
	int index = (int)a - 32;
	for(int i=0; i<4; i++)
     e16:	20 e0       	ldi	r18, 0x00	; 0
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	80 51       	subi	r24, 0x10	; 16
     e1c:	90 40       	sbci	r25, 0x00	; 0

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     e1e:	a0 e0       	ldi	r26, 0x00	; 0
     e20:	b2 e1       	ldi	r27, 0x12	; 18
     e22:	fc 01       	movw	r30, r24
     e24:	e2 0f       	add	r30, r18
     e26:	f3 1f       	adc	r31, r19
void OLED_print(char* a)
{
	int index = (int)a - 32;
	for(int i=0; i<4; i++)
	{
		OLED_write_data(pgm_read_byte(&font[index][i]));
     e28:	e4 91       	lpm	r30, Z

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     e2a:	ec 93       	st	X, r30

/* Print a character from the table */
void OLED_print(char* a)
{
	int index = (int)a - 32;
	for(int i=0; i<4; i++)
     e2c:	2f 5f       	subi	r18, 0xFF	; 255
     e2e:	3f 4f       	sbci	r19, 0xFF	; 255
     e30:	24 30       	cpi	r18, 0x04	; 4
     e32:	31 05       	cpc	r19, r1
     e34:	b1 f7       	brne	.-20     	; 0xe22 <OLED_print+0x14>
	{
		OLED_write_data(pgm_read_byte(&font[index][i]));
	}
}
     e36:	08 95       	ret

00000e38 <OLED_print_string>:

/* Print a string. If the string exceeds the screen size, stop printing. */
void OLED_print_string(char* string)
{
     e38:	0f 93       	push	r16
     e3a:	1f 93       	push	r17
     e3c:	cf 93       	push	r28
     e3e:	df 93       	push	r29
     e40:	fc 01       	movw	r30, r24
	int i=0;
	while(string[i]!='\0' && i < 32)
     e42:	80 81       	ld	r24, Z
     e44:	88 23       	and	r24, r24
     e46:	89 f0       	breq	.+34     	; 0xe6a <OLED_print_string+0x32>
     e48:	8f 01       	movw	r16, r30
     e4a:	0f 5f       	subi	r16, 0xFF	; 255
     e4c:	1f 4f       	sbci	r17, 0xFF	; 255
}

/* Print a string. If the string exceeds the screen size, stop printing. */
void OLED_print_string(char* string)
{
	int i=0;
     e4e:	c0 e0       	ldi	r28, 0x00	; 0
     e50:	d0 e0       	ldi	r29, 0x00	; 0
	while(string[i]!='\0' && i < 32)
	{
		OLED_print(string[i]);
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	0e 94 07 07 	call	0xe0e	; 0xe0e <OLED_print>
		i++;
     e58:	21 96       	adiw	r28, 0x01	; 1

/* Print a string. If the string exceeds the screen size, stop printing. */
void OLED_print_string(char* string)
{
	int i=0;
	while(string[i]!='\0' && i < 32)
     e5a:	f8 01       	movw	r30, r16
     e5c:	81 91       	ld	r24, Z+
     e5e:	8f 01       	movw	r16, r30
     e60:	88 23       	and	r24, r24
     e62:	19 f0       	breq	.+6      	; 0xe6a <OLED_print_string+0x32>
     e64:	c0 32       	cpi	r28, 0x20	; 32
     e66:	d1 05       	cpc	r29, r1
     e68:	a1 f7       	brne	.-24     	; 0xe52 <OLED_print_string+0x1a>
	{
		OLED_print(string[i]);
		i++;
	}
}
     e6a:	df 91       	pop	r29
     e6c:	cf 91       	pop	r28
     e6e:	1f 91       	pop	r17
     e70:	0f 91       	pop	r16
     e72:	08 95       	ret

00000e74 <OLED_print_arrow>:

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     e74:	e0 e0       	ldi	r30, 0x00	; 0
     e76:	f2 e1       	ldi	r31, 0x12	; 18
     e78:	80 e1       	ldi	r24, 0x10	; 16
     e7a:	80 83       	st	Z, r24
     e7c:	80 83       	st	Z, r24
     e7e:	80 83       	st	Z, r24
     e80:	80 83       	st	Z, r24
     e82:	9c e7       	ldi	r25, 0x7C	; 124
     e84:	90 83       	st	Z, r25
     e86:	98 e3       	ldi	r25, 0x38	; 56
     e88:	90 83       	st	Z, r25
     e8a:	80 83       	st	Z, r24
     e8c:	08 95       	ret

00000e8e <OLED_erase_arrow>:
     e8e:	e0 e0       	ldi	r30, 0x00	; 0
     e90:	f2 e1       	ldi	r31, 0x12	; 18
     e92:	10 82       	st	Z, r1
     e94:	10 82       	st	Z, r1
     e96:	10 82       	st	Z, r1
     e98:	10 82       	st	Z, r1
     e9a:	10 82       	st	Z, r1
     e9c:	10 82       	st	Z, r1
     e9e:	10 82       	st	Z, r1
     ea0:	08 95       	ret

00000ea2 <OLED_print_home>:
     ea2:	e0 e0       	ldi	r30, 0x00	; 0
     ea4:	f2 e1       	ldi	r31, 0x12	; 18
     ea6:	10 82       	st	Z, r1
     ea8:	88 ef       	ldi	r24, 0xF8	; 248
     eaa:	80 83       	st	Z, r24
     eac:	9c ef       	ldi	r25, 0xFC	; 252
     eae:	90 83       	st	Z, r25
     eb0:	26 ef       	ldi	r18, 0xF6	; 246
     eb2:	20 83       	st	Z, r18
     eb4:	3f e3       	ldi	r19, 0x3F	; 63
     eb6:	30 83       	st	Z, r19
     eb8:	20 83       	st	Z, r18
     eba:	90 83       	st	Z, r25
     ebc:	80 83       	st	Z, r24
     ebe:	10 82       	st	Z, r1
     ec0:	08 95       	ret

00000ec2 <OLED_print_woman>:
	OLED_write_data(0b11111000);
	OLED_write_data(0b00000000);
}

void OLED_print_woman(uint8_t page, uint8_t segment)
{
     ec2:	0f 93       	push	r16
     ec4:	1f 93       	push	r17
     ec6:	cf 93       	push	r28
     ec8:	df 93       	push	r29
     eca:	18 2f       	mov	r17, r24
     ecc:	06 2f       	mov	r16, r22
	OLED_pos(page, segment);
     ece:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <OLED_pos>

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     ed2:	c0 e0       	ldi	r28, 0x00	; 0
     ed4:	d2 e1       	ldi	r29, 0x12	; 18
     ed6:	18 82       	st	Y, r1
     ed8:	18 82       	st	Y, r1
     eda:	80 e1       	ldi	r24, 0x10	; 16
     edc:	88 83       	st	Y, r24
     ede:	94 e9       	ldi	r25, 0x94	; 148
     ee0:	98 83       	st	Y, r25
     ee2:	27 ed       	ldi	r18, 0xD7	; 215
     ee4:	28 83       	st	Y, r18
     ee6:	3f ef       	ldi	r19, 0xFF	; 255
     ee8:	38 83       	st	Y, r19
     eea:	28 83       	st	Y, r18
     eec:	98 83       	st	Y, r25
     eee:	88 83       	st	Y, r24
     ef0:	18 82       	st	Y, r1
     ef2:	18 82       	st	Y, r1
	OLED_write_data(0b11010111);
	OLED_write_data(0b10010100);
	OLED_write_data(0b00010000);
	OLED_write_data(0b00000000);
	OLED_write_data(0b00000000);
	OLED_pos(page+1, segment);
     ef4:	60 2f       	mov	r22, r16
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	81 0f       	add	r24, r17
     efa:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <OLED_pos>

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     efe:	18 82       	st	Y, r1
     f00:	92 e0       	ldi	r25, 0x02	; 2
     f02:	98 83       	st	Y, r25
     f04:	83 e0       	ldi	r24, 0x03	; 3
     f06:	88 83       	st	Y, r24
     f08:	23 e2       	ldi	r18, 0x23	; 35
     f0a:	28 83       	st	Y, r18
     f0c:	3f e3       	ldi	r19, 0x3F	; 63
     f0e:	38 83       	st	Y, r19
     f10:	88 83       	st	Y, r24
     f12:	38 83       	st	Y, r19
     f14:	28 83       	st	Y, r18
     f16:	88 83       	st	Y, r24
     f18:	98 83       	st	Y, r25
     f1a:	18 82       	st	Y, r1
	OLED_write_data(0b00111111);
	OLED_write_data(0b00100011);
	OLED_write_data(0b00000011);
	OLED_write_data(0b00000010);
	OLED_write_data(0b00000000);
}
     f1c:	df 91       	pop	r29
     f1e:	cf 91       	pop	r28
     f20:	1f 91       	pop	r17
     f22:	0f 91       	pop	r16
     f24:	08 95       	ret

00000f26 <SPI_Init>:
#include <avr/io.h>

void SPI_Init(void)
{
	/* Set CS, MOSI and SCK output, MISO input */
	DDRB |= (1<<PB4)| (1<<PB5)|(1<<PB7);
     f26:	87 b3       	in	r24, 0x17	; 23
     f28:	80 6b       	ori	r24, 0xB0	; 176
     f2a:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1<<PB6);
     f2c:	be 98       	cbi	0x17, 6	; 23
	PORTB |= (1<<4);
     f2e:	c4 9a       	sbi	0x18, 4	; 24
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     f30:	81 e5       	ldi	r24, 0x51	; 81
     f32:	8d b9       	out	0x0d, r24	; 13
     f34:	08 95       	ret

00000f36 <SPI_write>:
}

void SPI_write(char cData)
{
	/* Start transmission */
	SPDR = cData;
     f36:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while (!(SPSR & (1<<SPIF)))
     f38:	77 9b       	sbis	0x0e, 7	; 14
     f3a:	fe cf       	rjmp	.-4      	; 0xf38 <SPI_write+0x2>
		;
}
     f3c:	08 95       	ret

00000f3e <SPI_read>:

char SPI_read(void)
{
	/* Start transmission */
	SPDR = 0x00;
     f3e:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while (!(SPSR & (1<<SPIF)))
     f40:	77 9b       	sbis	0x0e, 7	; 14
     f42:	fe cf       	rjmp	.-4      	; 0xf40 <SPI_read+0x2>
		;
	return SPDR;
     f44:	8f b1       	in	r24, 0x0f	; 15
}
     f46:	08 95       	ret

00000f48 <SPI_on>:

void SPI_on(void)
{
	PORTB &= ~(1<<PB4);
     f48:	c4 98       	cbi	0x18, 4	; 24
     f4a:	08 95       	ret

00000f4c <SPI_off>:
}

void SPI_off(void)
{
	PORTB |= (1<<PB4);
     f4c:	c4 9a       	sbi	0x18, 4	; 24
     f4e:	08 95       	ret

00000f50 <SRAM_Init>:
#include <avr/io.h>

void SRAM_Init(void)
{
	/* Enable external SRAM: set SRE to 1 */
	MCUCR |= (1 << SRE);
     f50:	85 b7       	in	r24, 0x35	; 53
     f52:	80 68       	ori	r24, 0x80	; 128
     f54:	85 bf       	out	0x35, r24	; 53
     f56:	08 95       	ret

00000f58 <UART_Transmit>:
#include <stdio.h>
#include <avr/io.h>

void UART_Transmit(unsigned char data){
	/* Wait for empty transmit buffer */
	while(!(UCSR0A&(1<<UDRE0)))
     f58:	5d 9b       	sbis	0x0b, 5	; 11
     f5a:	fe cf       	rjmp	.-4      	; 0xf58 <UART_Transmit>
		;
	/* Put data into buffer */
	UDR0 = data;
     f5c:	8c b9       	out	0x0c, r24	; 12
     f5e:	08 95       	ret

00000f60 <UART_Receive>:
}

unsigned char UART_Receive(void){
	/* Wait for data to be received */
	while(!(UCSR0A&(1<<RXC0)))
     f60:	5f 9b       	sbis	0x0b, 7	; 11
     f62:	fe cf       	rjmp	.-4      	; 0xf60 <UART_Receive>
		;
	/* Get and return received data from buffer */
	return UDR0;
     f64:	8c b1       	in	r24, 0x0c	; 12
}
     f66:	08 95       	ret

00000f68 <UART_Init>:

void UART_Init(unsigned int ubrr){
	/* Set baud rate */
	UBRR0L = (unsigned char) ubrr;
     f68:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     f6a:	88 e1       	ldi	r24, 0x18	; 24
     f6c:	8a b9       	out	0x0a, r24	; 10
	/* Link printf to UART transmissions */	
	fdevopen(UART_Transmit,UART_Receive);
     f6e:	60 eb       	ldi	r22, 0xB0	; 176
     f70:	77 e0       	ldi	r23, 0x07	; 7
     f72:	8c ea       	ldi	r24, 0xAC	; 172
     f74:	97 e0       	ldi	r25, 0x07	; 7
     f76:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <fdevopen>
     f7a:	08 95       	ret

00000f7c <__subsf3>:
     f7c:	50 58       	subi	r21, 0x80	; 128

00000f7e <__addsf3>:
     f7e:	bb 27       	eor	r27, r27
     f80:	aa 27       	eor	r26, r26
     f82:	0e d0       	rcall	.+28     	; 0xfa0 <__addsf3x>
     f84:	70 c1       	rjmp	.+736    	; 0x1266 <__fp_round>
     f86:	61 d1       	rcall	.+706    	; 0x124a <__fp_pscA>
     f88:	30 f0       	brcs	.+12     	; 0xf96 <__addsf3+0x18>
     f8a:	66 d1       	rcall	.+716    	; 0x1258 <__fp_pscB>
     f8c:	20 f0       	brcs	.+8      	; 0xf96 <__addsf3+0x18>
     f8e:	31 f4       	brne	.+12     	; 0xf9c <__addsf3+0x1e>
     f90:	9f 3f       	cpi	r25, 0xFF	; 255
     f92:	11 f4       	brne	.+4      	; 0xf98 <__addsf3+0x1a>
     f94:	1e f4       	brtc	.+6      	; 0xf9c <__addsf3+0x1e>
     f96:	56 c1       	rjmp	.+684    	; 0x1244 <__fp_nan>
     f98:	0e f4       	brtc	.+2      	; 0xf9c <__addsf3+0x1e>
     f9a:	e0 95       	com	r30
     f9c:	e7 fb       	bst	r30, 7
     f9e:	4c c1       	rjmp	.+664    	; 0x1238 <__fp_inf>

00000fa0 <__addsf3x>:
     fa0:	e9 2f       	mov	r30, r25
     fa2:	72 d1       	rcall	.+740    	; 0x1288 <__fp_split3>
     fa4:	80 f3       	brcs	.-32     	; 0xf86 <__addsf3+0x8>
     fa6:	ba 17       	cp	r27, r26
     fa8:	62 07       	cpc	r22, r18
     faa:	73 07       	cpc	r23, r19
     fac:	84 07       	cpc	r24, r20
     fae:	95 07       	cpc	r25, r21
     fb0:	18 f0       	brcs	.+6      	; 0xfb8 <__addsf3x+0x18>
     fb2:	71 f4       	brne	.+28     	; 0xfd0 <__addsf3x+0x30>
     fb4:	9e f5       	brtc	.+102    	; 0x101c <__addsf3x+0x7c>
     fb6:	8a c1       	rjmp	.+788    	; 0x12cc <__fp_zero>
     fb8:	0e f4       	brtc	.+2      	; 0xfbc <__addsf3x+0x1c>
     fba:	e0 95       	com	r30
     fbc:	0b 2e       	mov	r0, r27
     fbe:	ba 2f       	mov	r27, r26
     fc0:	a0 2d       	mov	r26, r0
     fc2:	0b 01       	movw	r0, r22
     fc4:	b9 01       	movw	r22, r18
     fc6:	90 01       	movw	r18, r0
     fc8:	0c 01       	movw	r0, r24
     fca:	ca 01       	movw	r24, r20
     fcc:	a0 01       	movw	r20, r0
     fce:	11 24       	eor	r1, r1
     fd0:	ff 27       	eor	r31, r31
     fd2:	59 1b       	sub	r21, r25
     fd4:	99 f0       	breq	.+38     	; 0xffc <__addsf3x+0x5c>
     fd6:	59 3f       	cpi	r21, 0xF9	; 249
     fd8:	50 f4       	brcc	.+20     	; 0xfee <__addsf3x+0x4e>
     fda:	50 3e       	cpi	r21, 0xE0	; 224
     fdc:	68 f1       	brcs	.+90     	; 0x1038 <__addsf3x+0x98>
     fde:	1a 16       	cp	r1, r26
     fe0:	f0 40       	sbci	r31, 0x00	; 0
     fe2:	a2 2f       	mov	r26, r18
     fe4:	23 2f       	mov	r18, r19
     fe6:	34 2f       	mov	r19, r20
     fe8:	44 27       	eor	r20, r20
     fea:	58 5f       	subi	r21, 0xF8	; 248
     fec:	f3 cf       	rjmp	.-26     	; 0xfd4 <__addsf3x+0x34>
     fee:	46 95       	lsr	r20
     ff0:	37 95       	ror	r19
     ff2:	27 95       	ror	r18
     ff4:	a7 95       	ror	r26
     ff6:	f0 40       	sbci	r31, 0x00	; 0
     ff8:	53 95       	inc	r21
     ffa:	c9 f7       	brne	.-14     	; 0xfee <__addsf3x+0x4e>
     ffc:	7e f4       	brtc	.+30     	; 0x101c <__addsf3x+0x7c>
     ffe:	1f 16       	cp	r1, r31
    1000:	ba 0b       	sbc	r27, r26
    1002:	62 0b       	sbc	r22, r18
    1004:	73 0b       	sbc	r23, r19
    1006:	84 0b       	sbc	r24, r20
    1008:	ba f0       	brmi	.+46     	; 0x1038 <__addsf3x+0x98>
    100a:	91 50       	subi	r25, 0x01	; 1
    100c:	a1 f0       	breq	.+40     	; 0x1036 <__addsf3x+0x96>
    100e:	ff 0f       	add	r31, r31
    1010:	bb 1f       	adc	r27, r27
    1012:	66 1f       	adc	r22, r22
    1014:	77 1f       	adc	r23, r23
    1016:	88 1f       	adc	r24, r24
    1018:	c2 f7       	brpl	.-16     	; 0x100a <__addsf3x+0x6a>
    101a:	0e c0       	rjmp	.+28     	; 0x1038 <__addsf3x+0x98>
    101c:	ba 0f       	add	r27, r26
    101e:	62 1f       	adc	r22, r18
    1020:	73 1f       	adc	r23, r19
    1022:	84 1f       	adc	r24, r20
    1024:	48 f4       	brcc	.+18     	; 0x1038 <__addsf3x+0x98>
    1026:	87 95       	ror	r24
    1028:	77 95       	ror	r23
    102a:	67 95       	ror	r22
    102c:	b7 95       	ror	r27
    102e:	f7 95       	ror	r31
    1030:	9e 3f       	cpi	r25, 0xFE	; 254
    1032:	08 f0       	brcs	.+2      	; 0x1036 <__addsf3x+0x96>
    1034:	b3 cf       	rjmp	.-154    	; 0xf9c <__addsf3+0x1e>
    1036:	93 95       	inc	r25
    1038:	88 0f       	add	r24, r24
    103a:	08 f0       	brcs	.+2      	; 0x103e <__addsf3x+0x9e>
    103c:	99 27       	eor	r25, r25
    103e:	ee 0f       	add	r30, r30
    1040:	97 95       	ror	r25
    1042:	87 95       	ror	r24
    1044:	08 95       	ret

00001046 <__cmpsf2>:
    1046:	d4 d0       	rcall	.+424    	; 0x11f0 <__fp_cmp>
    1048:	08 f4       	brcc	.+2      	; 0x104c <__cmpsf2+0x6>
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	08 95       	ret

0000104e <__divsf3>:
    104e:	0c d0       	rcall	.+24     	; 0x1068 <__divsf3x>
    1050:	0a c1       	rjmp	.+532    	; 0x1266 <__fp_round>
    1052:	02 d1       	rcall	.+516    	; 0x1258 <__fp_pscB>
    1054:	40 f0       	brcs	.+16     	; 0x1066 <__divsf3+0x18>
    1056:	f9 d0       	rcall	.+498    	; 0x124a <__fp_pscA>
    1058:	30 f0       	brcs	.+12     	; 0x1066 <__divsf3+0x18>
    105a:	21 f4       	brne	.+8      	; 0x1064 <__divsf3+0x16>
    105c:	5f 3f       	cpi	r21, 0xFF	; 255
    105e:	19 f0       	breq	.+6      	; 0x1066 <__divsf3+0x18>
    1060:	eb c0       	rjmp	.+470    	; 0x1238 <__fp_inf>
    1062:	51 11       	cpse	r21, r1
    1064:	34 c1       	rjmp	.+616    	; 0x12ce <__fp_szero>
    1066:	ee c0       	rjmp	.+476    	; 0x1244 <__fp_nan>

00001068 <__divsf3x>:
    1068:	0f d1       	rcall	.+542    	; 0x1288 <__fp_split3>
    106a:	98 f3       	brcs	.-26     	; 0x1052 <__divsf3+0x4>

0000106c <__divsf3_pse>:
    106c:	99 23       	and	r25, r25
    106e:	c9 f3       	breq	.-14     	; 0x1062 <__divsf3+0x14>
    1070:	55 23       	and	r21, r21
    1072:	b1 f3       	breq	.-20     	; 0x1060 <__divsf3+0x12>
    1074:	95 1b       	sub	r25, r21
    1076:	55 0b       	sbc	r21, r21
    1078:	bb 27       	eor	r27, r27
    107a:	aa 27       	eor	r26, r26
    107c:	62 17       	cp	r22, r18
    107e:	73 07       	cpc	r23, r19
    1080:	84 07       	cpc	r24, r20
    1082:	38 f0       	brcs	.+14     	; 0x1092 <__divsf3_pse+0x26>
    1084:	9f 5f       	subi	r25, 0xFF	; 255
    1086:	5f 4f       	sbci	r21, 0xFF	; 255
    1088:	22 0f       	add	r18, r18
    108a:	33 1f       	adc	r19, r19
    108c:	44 1f       	adc	r20, r20
    108e:	aa 1f       	adc	r26, r26
    1090:	a9 f3       	breq	.-22     	; 0x107c <__divsf3_pse+0x10>
    1092:	33 d0       	rcall	.+102    	; 0x10fa <__divsf3_pse+0x8e>
    1094:	0e 2e       	mov	r0, r30
    1096:	3a f0       	brmi	.+14     	; 0x10a6 <__divsf3_pse+0x3a>
    1098:	e0 e8       	ldi	r30, 0x80	; 128
    109a:	30 d0       	rcall	.+96     	; 0x10fc <__divsf3_pse+0x90>
    109c:	91 50       	subi	r25, 0x01	; 1
    109e:	50 40       	sbci	r21, 0x00	; 0
    10a0:	e6 95       	lsr	r30
    10a2:	00 1c       	adc	r0, r0
    10a4:	ca f7       	brpl	.-14     	; 0x1098 <__divsf3_pse+0x2c>
    10a6:	29 d0       	rcall	.+82     	; 0x10fa <__divsf3_pse+0x8e>
    10a8:	fe 2f       	mov	r31, r30
    10aa:	27 d0       	rcall	.+78     	; 0x10fa <__divsf3_pse+0x8e>
    10ac:	66 0f       	add	r22, r22
    10ae:	77 1f       	adc	r23, r23
    10b0:	88 1f       	adc	r24, r24
    10b2:	bb 1f       	adc	r27, r27
    10b4:	26 17       	cp	r18, r22
    10b6:	37 07       	cpc	r19, r23
    10b8:	48 07       	cpc	r20, r24
    10ba:	ab 07       	cpc	r26, r27
    10bc:	b0 e8       	ldi	r27, 0x80	; 128
    10be:	09 f0       	breq	.+2      	; 0x10c2 <__divsf3_pse+0x56>
    10c0:	bb 0b       	sbc	r27, r27
    10c2:	80 2d       	mov	r24, r0
    10c4:	bf 01       	movw	r22, r30
    10c6:	ff 27       	eor	r31, r31
    10c8:	93 58       	subi	r25, 0x83	; 131
    10ca:	5f 4f       	sbci	r21, 0xFF	; 255
    10cc:	2a f0       	brmi	.+10     	; 0x10d8 <__divsf3_pse+0x6c>
    10ce:	9e 3f       	cpi	r25, 0xFE	; 254
    10d0:	51 05       	cpc	r21, r1
    10d2:	68 f0       	brcs	.+26     	; 0x10ee <__divsf3_pse+0x82>
    10d4:	b1 c0       	rjmp	.+354    	; 0x1238 <__fp_inf>
    10d6:	fb c0       	rjmp	.+502    	; 0x12ce <__fp_szero>
    10d8:	5f 3f       	cpi	r21, 0xFF	; 255
    10da:	ec f3       	brlt	.-6      	; 0x10d6 <__divsf3_pse+0x6a>
    10dc:	98 3e       	cpi	r25, 0xE8	; 232
    10de:	dc f3       	brlt	.-10     	; 0x10d6 <__divsf3_pse+0x6a>
    10e0:	86 95       	lsr	r24
    10e2:	77 95       	ror	r23
    10e4:	67 95       	ror	r22
    10e6:	b7 95       	ror	r27
    10e8:	f7 95       	ror	r31
    10ea:	9f 5f       	subi	r25, 0xFF	; 255
    10ec:	c9 f7       	brne	.-14     	; 0x10e0 <__divsf3_pse+0x74>
    10ee:	88 0f       	add	r24, r24
    10f0:	91 1d       	adc	r25, r1
    10f2:	96 95       	lsr	r25
    10f4:	87 95       	ror	r24
    10f6:	97 f9       	bld	r25, 7
    10f8:	08 95       	ret
    10fa:	e1 e0       	ldi	r30, 0x01	; 1
    10fc:	66 0f       	add	r22, r22
    10fe:	77 1f       	adc	r23, r23
    1100:	88 1f       	adc	r24, r24
    1102:	bb 1f       	adc	r27, r27
    1104:	62 17       	cp	r22, r18
    1106:	73 07       	cpc	r23, r19
    1108:	84 07       	cpc	r24, r20
    110a:	ba 07       	cpc	r27, r26
    110c:	20 f0       	brcs	.+8      	; 0x1116 <__divsf3_pse+0xaa>
    110e:	62 1b       	sub	r22, r18
    1110:	73 0b       	sbc	r23, r19
    1112:	84 0b       	sbc	r24, r20
    1114:	ba 0b       	sbc	r27, r26
    1116:	ee 1f       	adc	r30, r30
    1118:	88 f7       	brcc	.-30     	; 0x10fc <__divsf3_pse+0x90>
    111a:	e0 95       	com	r30
    111c:	08 95       	ret

0000111e <__fixunssfsi>:
    111e:	bc d0       	rcall	.+376    	; 0x1298 <__fp_splitA>
    1120:	88 f0       	brcs	.+34     	; 0x1144 <__fixunssfsi+0x26>
    1122:	9f 57       	subi	r25, 0x7F	; 127
    1124:	90 f0       	brcs	.+36     	; 0x114a <__fixunssfsi+0x2c>
    1126:	b9 2f       	mov	r27, r25
    1128:	99 27       	eor	r25, r25
    112a:	b7 51       	subi	r27, 0x17	; 23
    112c:	a0 f0       	brcs	.+40     	; 0x1156 <__fixunssfsi+0x38>
    112e:	d1 f0       	breq	.+52     	; 0x1164 <__fixunssfsi+0x46>
    1130:	66 0f       	add	r22, r22
    1132:	77 1f       	adc	r23, r23
    1134:	88 1f       	adc	r24, r24
    1136:	99 1f       	adc	r25, r25
    1138:	1a f0       	brmi	.+6      	; 0x1140 <__fixunssfsi+0x22>
    113a:	ba 95       	dec	r27
    113c:	c9 f7       	brne	.-14     	; 0x1130 <__fixunssfsi+0x12>
    113e:	12 c0       	rjmp	.+36     	; 0x1164 <__fixunssfsi+0x46>
    1140:	b1 30       	cpi	r27, 0x01	; 1
    1142:	81 f0       	breq	.+32     	; 0x1164 <__fixunssfsi+0x46>
    1144:	c3 d0       	rcall	.+390    	; 0x12cc <__fp_zero>
    1146:	b1 e0       	ldi	r27, 0x01	; 1
    1148:	08 95       	ret
    114a:	c0 c0       	rjmp	.+384    	; 0x12cc <__fp_zero>
    114c:	67 2f       	mov	r22, r23
    114e:	78 2f       	mov	r23, r24
    1150:	88 27       	eor	r24, r24
    1152:	b8 5f       	subi	r27, 0xF8	; 248
    1154:	39 f0       	breq	.+14     	; 0x1164 <__fixunssfsi+0x46>
    1156:	b9 3f       	cpi	r27, 0xF9	; 249
    1158:	cc f3       	brlt	.-14     	; 0x114c <__fixunssfsi+0x2e>
    115a:	86 95       	lsr	r24
    115c:	77 95       	ror	r23
    115e:	67 95       	ror	r22
    1160:	b3 95       	inc	r27
    1162:	d9 f7       	brne	.-10     	; 0x115a <__fixunssfsi+0x3c>
    1164:	3e f4       	brtc	.+14     	; 0x1174 <__fixunssfsi+0x56>
    1166:	90 95       	com	r25
    1168:	80 95       	com	r24
    116a:	70 95       	com	r23
    116c:	61 95       	neg	r22
    116e:	7f 4f       	sbci	r23, 0xFF	; 255
    1170:	8f 4f       	sbci	r24, 0xFF	; 255
    1172:	9f 4f       	sbci	r25, 0xFF	; 255
    1174:	08 95       	ret

00001176 <__floatunsisf>:
    1176:	e8 94       	clt
    1178:	09 c0       	rjmp	.+18     	; 0x118c <__floatsisf+0x12>

0000117a <__floatsisf>:
    117a:	97 fb       	bst	r25, 7
    117c:	3e f4       	brtc	.+14     	; 0x118c <__floatsisf+0x12>
    117e:	90 95       	com	r25
    1180:	80 95       	com	r24
    1182:	70 95       	com	r23
    1184:	61 95       	neg	r22
    1186:	7f 4f       	sbci	r23, 0xFF	; 255
    1188:	8f 4f       	sbci	r24, 0xFF	; 255
    118a:	9f 4f       	sbci	r25, 0xFF	; 255
    118c:	99 23       	and	r25, r25
    118e:	a9 f0       	breq	.+42     	; 0x11ba <__floatsisf+0x40>
    1190:	f9 2f       	mov	r31, r25
    1192:	96 e9       	ldi	r25, 0x96	; 150
    1194:	bb 27       	eor	r27, r27
    1196:	93 95       	inc	r25
    1198:	f6 95       	lsr	r31
    119a:	87 95       	ror	r24
    119c:	77 95       	ror	r23
    119e:	67 95       	ror	r22
    11a0:	b7 95       	ror	r27
    11a2:	f1 11       	cpse	r31, r1
    11a4:	f8 cf       	rjmp	.-16     	; 0x1196 <__floatsisf+0x1c>
    11a6:	fa f4       	brpl	.+62     	; 0x11e6 <__floatsisf+0x6c>
    11a8:	bb 0f       	add	r27, r27
    11aa:	11 f4       	brne	.+4      	; 0x11b0 <__floatsisf+0x36>
    11ac:	60 ff       	sbrs	r22, 0
    11ae:	1b c0       	rjmp	.+54     	; 0x11e6 <__floatsisf+0x6c>
    11b0:	6f 5f       	subi	r22, 0xFF	; 255
    11b2:	7f 4f       	sbci	r23, 0xFF	; 255
    11b4:	8f 4f       	sbci	r24, 0xFF	; 255
    11b6:	9f 4f       	sbci	r25, 0xFF	; 255
    11b8:	16 c0       	rjmp	.+44     	; 0x11e6 <__floatsisf+0x6c>
    11ba:	88 23       	and	r24, r24
    11bc:	11 f0       	breq	.+4      	; 0x11c2 <__floatsisf+0x48>
    11be:	96 e9       	ldi	r25, 0x96	; 150
    11c0:	11 c0       	rjmp	.+34     	; 0x11e4 <__floatsisf+0x6a>
    11c2:	77 23       	and	r23, r23
    11c4:	21 f0       	breq	.+8      	; 0x11ce <__floatsisf+0x54>
    11c6:	9e e8       	ldi	r25, 0x8E	; 142
    11c8:	87 2f       	mov	r24, r23
    11ca:	76 2f       	mov	r23, r22
    11cc:	05 c0       	rjmp	.+10     	; 0x11d8 <__floatsisf+0x5e>
    11ce:	66 23       	and	r22, r22
    11d0:	71 f0       	breq	.+28     	; 0x11ee <__floatsisf+0x74>
    11d2:	96 e8       	ldi	r25, 0x86	; 134
    11d4:	86 2f       	mov	r24, r22
    11d6:	70 e0       	ldi	r23, 0x00	; 0
    11d8:	60 e0       	ldi	r22, 0x00	; 0
    11da:	2a f0       	brmi	.+10     	; 0x11e6 <__floatsisf+0x6c>
    11dc:	9a 95       	dec	r25
    11de:	66 0f       	add	r22, r22
    11e0:	77 1f       	adc	r23, r23
    11e2:	88 1f       	adc	r24, r24
    11e4:	da f7       	brpl	.-10     	; 0x11dc <__floatsisf+0x62>
    11e6:	88 0f       	add	r24, r24
    11e8:	96 95       	lsr	r25
    11ea:	87 95       	ror	r24
    11ec:	97 f9       	bld	r25, 7
    11ee:	08 95       	ret

000011f0 <__fp_cmp>:
    11f0:	99 0f       	add	r25, r25
    11f2:	00 08       	sbc	r0, r0
    11f4:	55 0f       	add	r21, r21
    11f6:	aa 0b       	sbc	r26, r26
    11f8:	e0 e8       	ldi	r30, 0x80	; 128
    11fa:	fe ef       	ldi	r31, 0xFE	; 254
    11fc:	16 16       	cp	r1, r22
    11fe:	17 06       	cpc	r1, r23
    1200:	e8 07       	cpc	r30, r24
    1202:	f9 07       	cpc	r31, r25
    1204:	c0 f0       	brcs	.+48     	; 0x1236 <__fp_cmp+0x46>
    1206:	12 16       	cp	r1, r18
    1208:	13 06       	cpc	r1, r19
    120a:	e4 07       	cpc	r30, r20
    120c:	f5 07       	cpc	r31, r21
    120e:	98 f0       	brcs	.+38     	; 0x1236 <__fp_cmp+0x46>
    1210:	62 1b       	sub	r22, r18
    1212:	73 0b       	sbc	r23, r19
    1214:	84 0b       	sbc	r24, r20
    1216:	95 0b       	sbc	r25, r21
    1218:	39 f4       	brne	.+14     	; 0x1228 <__fp_cmp+0x38>
    121a:	0a 26       	eor	r0, r26
    121c:	61 f0       	breq	.+24     	; 0x1236 <__fp_cmp+0x46>
    121e:	23 2b       	or	r18, r19
    1220:	24 2b       	or	r18, r20
    1222:	25 2b       	or	r18, r21
    1224:	21 f4       	brne	.+8      	; 0x122e <__fp_cmp+0x3e>
    1226:	08 95       	ret
    1228:	0a 26       	eor	r0, r26
    122a:	09 f4       	brne	.+2      	; 0x122e <__fp_cmp+0x3e>
    122c:	a1 40       	sbci	r26, 0x01	; 1
    122e:	a6 95       	lsr	r26
    1230:	8f ef       	ldi	r24, 0xFF	; 255
    1232:	81 1d       	adc	r24, r1
    1234:	81 1d       	adc	r24, r1
    1236:	08 95       	ret

00001238 <__fp_inf>:
    1238:	97 f9       	bld	r25, 7
    123a:	9f 67       	ori	r25, 0x7F	; 127
    123c:	80 e8       	ldi	r24, 0x80	; 128
    123e:	70 e0       	ldi	r23, 0x00	; 0
    1240:	60 e0       	ldi	r22, 0x00	; 0
    1242:	08 95       	ret

00001244 <__fp_nan>:
    1244:	9f ef       	ldi	r25, 0xFF	; 255
    1246:	80 ec       	ldi	r24, 0xC0	; 192
    1248:	08 95       	ret

0000124a <__fp_pscA>:
    124a:	00 24       	eor	r0, r0
    124c:	0a 94       	dec	r0
    124e:	16 16       	cp	r1, r22
    1250:	17 06       	cpc	r1, r23
    1252:	18 06       	cpc	r1, r24
    1254:	09 06       	cpc	r0, r25
    1256:	08 95       	ret

00001258 <__fp_pscB>:
    1258:	00 24       	eor	r0, r0
    125a:	0a 94       	dec	r0
    125c:	12 16       	cp	r1, r18
    125e:	13 06       	cpc	r1, r19
    1260:	14 06       	cpc	r1, r20
    1262:	05 06       	cpc	r0, r21
    1264:	08 95       	ret

00001266 <__fp_round>:
    1266:	09 2e       	mov	r0, r25
    1268:	03 94       	inc	r0
    126a:	00 0c       	add	r0, r0
    126c:	11 f4       	brne	.+4      	; 0x1272 <__fp_round+0xc>
    126e:	88 23       	and	r24, r24
    1270:	52 f0       	brmi	.+20     	; 0x1286 <__fp_round+0x20>
    1272:	bb 0f       	add	r27, r27
    1274:	40 f4       	brcc	.+16     	; 0x1286 <__fp_round+0x20>
    1276:	bf 2b       	or	r27, r31
    1278:	11 f4       	brne	.+4      	; 0x127e <__fp_round+0x18>
    127a:	60 ff       	sbrs	r22, 0
    127c:	04 c0       	rjmp	.+8      	; 0x1286 <__fp_round+0x20>
    127e:	6f 5f       	subi	r22, 0xFF	; 255
    1280:	7f 4f       	sbci	r23, 0xFF	; 255
    1282:	8f 4f       	sbci	r24, 0xFF	; 255
    1284:	9f 4f       	sbci	r25, 0xFF	; 255
    1286:	08 95       	ret

00001288 <__fp_split3>:
    1288:	57 fd       	sbrc	r21, 7
    128a:	90 58       	subi	r25, 0x80	; 128
    128c:	44 0f       	add	r20, r20
    128e:	55 1f       	adc	r21, r21
    1290:	59 f0       	breq	.+22     	; 0x12a8 <__fp_splitA+0x10>
    1292:	5f 3f       	cpi	r21, 0xFF	; 255
    1294:	71 f0       	breq	.+28     	; 0x12b2 <__fp_splitA+0x1a>
    1296:	47 95       	ror	r20

00001298 <__fp_splitA>:
    1298:	88 0f       	add	r24, r24
    129a:	97 fb       	bst	r25, 7
    129c:	99 1f       	adc	r25, r25
    129e:	61 f0       	breq	.+24     	; 0x12b8 <__fp_splitA+0x20>
    12a0:	9f 3f       	cpi	r25, 0xFF	; 255
    12a2:	79 f0       	breq	.+30     	; 0x12c2 <__fp_splitA+0x2a>
    12a4:	87 95       	ror	r24
    12a6:	08 95       	ret
    12a8:	12 16       	cp	r1, r18
    12aa:	13 06       	cpc	r1, r19
    12ac:	14 06       	cpc	r1, r20
    12ae:	55 1f       	adc	r21, r21
    12b0:	f2 cf       	rjmp	.-28     	; 0x1296 <__fp_split3+0xe>
    12b2:	46 95       	lsr	r20
    12b4:	f1 df       	rcall	.-30     	; 0x1298 <__fp_splitA>
    12b6:	08 c0       	rjmp	.+16     	; 0x12c8 <__fp_splitA+0x30>
    12b8:	16 16       	cp	r1, r22
    12ba:	17 06       	cpc	r1, r23
    12bc:	18 06       	cpc	r1, r24
    12be:	99 1f       	adc	r25, r25
    12c0:	f1 cf       	rjmp	.-30     	; 0x12a4 <__fp_splitA+0xc>
    12c2:	86 95       	lsr	r24
    12c4:	71 05       	cpc	r23, r1
    12c6:	61 05       	cpc	r22, r1
    12c8:	08 94       	sec
    12ca:	08 95       	ret

000012cc <__fp_zero>:
    12cc:	e8 94       	clt

000012ce <__fp_szero>:
    12ce:	bb 27       	eor	r27, r27
    12d0:	66 27       	eor	r22, r22
    12d2:	77 27       	eor	r23, r23
    12d4:	cb 01       	movw	r24, r22
    12d6:	97 f9       	bld	r25, 7
    12d8:	08 95       	ret

000012da <__gesf2>:
    12da:	8a df       	rcall	.-236    	; 0x11f0 <__fp_cmp>
    12dc:	08 f4       	brcc	.+2      	; 0x12e0 <__gesf2+0x6>
    12de:	8f ef       	ldi	r24, 0xFF	; 255
    12e0:	08 95       	ret

000012e2 <__mulsf3>:
    12e2:	0b d0       	rcall	.+22     	; 0x12fa <__mulsf3x>
    12e4:	c0 cf       	rjmp	.-128    	; 0x1266 <__fp_round>
    12e6:	b1 df       	rcall	.-158    	; 0x124a <__fp_pscA>
    12e8:	28 f0       	brcs	.+10     	; 0x12f4 <__mulsf3+0x12>
    12ea:	b6 df       	rcall	.-148    	; 0x1258 <__fp_pscB>
    12ec:	18 f0       	brcs	.+6      	; 0x12f4 <__mulsf3+0x12>
    12ee:	95 23       	and	r25, r21
    12f0:	09 f0       	breq	.+2      	; 0x12f4 <__mulsf3+0x12>
    12f2:	a2 cf       	rjmp	.-188    	; 0x1238 <__fp_inf>
    12f4:	a7 cf       	rjmp	.-178    	; 0x1244 <__fp_nan>
    12f6:	11 24       	eor	r1, r1
    12f8:	ea cf       	rjmp	.-44     	; 0x12ce <__fp_szero>

000012fa <__mulsf3x>:
    12fa:	c6 df       	rcall	.-116    	; 0x1288 <__fp_split3>
    12fc:	a0 f3       	brcs	.-24     	; 0x12e6 <__mulsf3+0x4>

000012fe <__mulsf3_pse>:
    12fe:	95 9f       	mul	r25, r21
    1300:	d1 f3       	breq	.-12     	; 0x12f6 <__mulsf3+0x14>
    1302:	95 0f       	add	r25, r21
    1304:	50 e0       	ldi	r21, 0x00	; 0
    1306:	55 1f       	adc	r21, r21
    1308:	62 9f       	mul	r22, r18
    130a:	f0 01       	movw	r30, r0
    130c:	72 9f       	mul	r23, r18
    130e:	bb 27       	eor	r27, r27
    1310:	f0 0d       	add	r31, r0
    1312:	b1 1d       	adc	r27, r1
    1314:	63 9f       	mul	r22, r19
    1316:	aa 27       	eor	r26, r26
    1318:	f0 0d       	add	r31, r0
    131a:	b1 1d       	adc	r27, r1
    131c:	aa 1f       	adc	r26, r26
    131e:	64 9f       	mul	r22, r20
    1320:	66 27       	eor	r22, r22
    1322:	b0 0d       	add	r27, r0
    1324:	a1 1d       	adc	r26, r1
    1326:	66 1f       	adc	r22, r22
    1328:	82 9f       	mul	r24, r18
    132a:	22 27       	eor	r18, r18
    132c:	b0 0d       	add	r27, r0
    132e:	a1 1d       	adc	r26, r1
    1330:	62 1f       	adc	r22, r18
    1332:	73 9f       	mul	r23, r19
    1334:	b0 0d       	add	r27, r0
    1336:	a1 1d       	adc	r26, r1
    1338:	62 1f       	adc	r22, r18
    133a:	83 9f       	mul	r24, r19
    133c:	a0 0d       	add	r26, r0
    133e:	61 1d       	adc	r22, r1
    1340:	22 1f       	adc	r18, r18
    1342:	74 9f       	mul	r23, r20
    1344:	33 27       	eor	r19, r19
    1346:	a0 0d       	add	r26, r0
    1348:	61 1d       	adc	r22, r1
    134a:	23 1f       	adc	r18, r19
    134c:	84 9f       	mul	r24, r20
    134e:	60 0d       	add	r22, r0
    1350:	21 1d       	adc	r18, r1
    1352:	82 2f       	mov	r24, r18
    1354:	76 2f       	mov	r23, r22
    1356:	6a 2f       	mov	r22, r26
    1358:	11 24       	eor	r1, r1
    135a:	9f 57       	subi	r25, 0x7F	; 127
    135c:	50 40       	sbci	r21, 0x00	; 0
    135e:	8a f0       	brmi	.+34     	; 0x1382 <__mulsf3_pse+0x84>
    1360:	e1 f0       	breq	.+56     	; 0x139a <__mulsf3_pse+0x9c>
    1362:	88 23       	and	r24, r24
    1364:	4a f0       	brmi	.+18     	; 0x1378 <__mulsf3_pse+0x7a>
    1366:	ee 0f       	add	r30, r30
    1368:	ff 1f       	adc	r31, r31
    136a:	bb 1f       	adc	r27, r27
    136c:	66 1f       	adc	r22, r22
    136e:	77 1f       	adc	r23, r23
    1370:	88 1f       	adc	r24, r24
    1372:	91 50       	subi	r25, 0x01	; 1
    1374:	50 40       	sbci	r21, 0x00	; 0
    1376:	a9 f7       	brne	.-22     	; 0x1362 <__mulsf3_pse+0x64>
    1378:	9e 3f       	cpi	r25, 0xFE	; 254
    137a:	51 05       	cpc	r21, r1
    137c:	70 f0       	brcs	.+28     	; 0x139a <__mulsf3_pse+0x9c>
    137e:	5c cf       	rjmp	.-328    	; 0x1238 <__fp_inf>
    1380:	a6 cf       	rjmp	.-180    	; 0x12ce <__fp_szero>
    1382:	5f 3f       	cpi	r21, 0xFF	; 255
    1384:	ec f3       	brlt	.-6      	; 0x1380 <__mulsf3_pse+0x82>
    1386:	98 3e       	cpi	r25, 0xE8	; 232
    1388:	dc f3       	brlt	.-10     	; 0x1380 <__mulsf3_pse+0x82>
    138a:	86 95       	lsr	r24
    138c:	77 95       	ror	r23
    138e:	67 95       	ror	r22
    1390:	b7 95       	ror	r27
    1392:	f7 95       	ror	r31
    1394:	e7 95       	ror	r30
    1396:	9f 5f       	subi	r25, 0xFF	; 255
    1398:	c1 f7       	brne	.-16     	; 0x138a <__mulsf3_pse+0x8c>
    139a:	fe 2b       	or	r31, r30
    139c:	88 0f       	add	r24, r24
    139e:	91 1d       	adc	r25, r1
    13a0:	96 95       	lsr	r25
    13a2:	87 95       	ror	r24
    13a4:	97 f9       	bld	r25, 7
    13a6:	08 95       	ret

000013a8 <fdevopen>:
    13a8:	0f 93       	push	r16
    13aa:	1f 93       	push	r17
    13ac:	cf 93       	push	r28
    13ae:	df 93       	push	r29
    13b0:	ec 01       	movw	r28, r24
    13b2:	8b 01       	movw	r16, r22
    13b4:	00 97       	sbiw	r24, 0x00	; 0
    13b6:	31 f4       	brne	.+12     	; 0x13c4 <fdevopen+0x1c>
    13b8:	61 15       	cp	r22, r1
    13ba:	71 05       	cpc	r23, r1
    13bc:	19 f4       	brne	.+6      	; 0x13c4 <fdevopen+0x1c>
    13be:	80 e0       	ldi	r24, 0x00	; 0
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	38 c0       	rjmp	.+112    	; 0x1434 <fdevopen+0x8c>
    13c4:	6e e0       	ldi	r22, 0x0E	; 14
    13c6:	70 e0       	ldi	r23, 0x00	; 0
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	0e 94 32 0c 	call	0x1864	; 0x1864 <calloc>
    13d0:	fc 01       	movw	r30, r24
    13d2:	00 97       	sbiw	r24, 0x00	; 0
    13d4:	a1 f3       	breq	.-24     	; 0x13be <fdevopen+0x16>
    13d6:	80 e8       	ldi	r24, 0x80	; 128
    13d8:	83 83       	std	Z+3, r24	; 0x03
    13da:	01 15       	cp	r16, r1
    13dc:	11 05       	cpc	r17, r1
    13de:	71 f0       	breq	.+28     	; 0x13fc <fdevopen+0x54>
    13e0:	13 87       	std	Z+11, r17	; 0x0b
    13e2:	02 87       	std	Z+10, r16	; 0x0a
    13e4:	81 e8       	ldi	r24, 0x81	; 129
    13e6:	83 83       	std	Z+3, r24	; 0x03
    13e8:	80 91 6b 02 	lds	r24, 0x026B
    13ec:	90 91 6c 02 	lds	r25, 0x026C
    13f0:	89 2b       	or	r24, r25
    13f2:	21 f4       	brne	.+8      	; 0x13fc <fdevopen+0x54>
    13f4:	f0 93 6c 02 	sts	0x026C, r31
    13f8:	e0 93 6b 02 	sts	0x026B, r30
    13fc:	20 97       	sbiw	r28, 0x00	; 0
    13fe:	c9 f0       	breq	.+50     	; 0x1432 <fdevopen+0x8a>
    1400:	d1 87       	std	Z+9, r29	; 0x09
    1402:	c0 87       	std	Z+8, r28	; 0x08
    1404:	83 81       	ldd	r24, Z+3	; 0x03
    1406:	82 60       	ori	r24, 0x02	; 2
    1408:	83 83       	std	Z+3, r24	; 0x03
    140a:	80 91 6d 02 	lds	r24, 0x026D
    140e:	90 91 6e 02 	lds	r25, 0x026E
    1412:	89 2b       	or	r24, r25
    1414:	71 f4       	brne	.+28     	; 0x1432 <fdevopen+0x8a>
    1416:	f0 93 6e 02 	sts	0x026E, r31
    141a:	e0 93 6d 02 	sts	0x026D, r30
    141e:	80 91 6f 02 	lds	r24, 0x026F
    1422:	90 91 70 02 	lds	r25, 0x0270
    1426:	89 2b       	or	r24, r25
    1428:	21 f4       	brne	.+8      	; 0x1432 <fdevopen+0x8a>
    142a:	f0 93 70 02 	sts	0x0270, r31
    142e:	e0 93 6f 02 	sts	0x026F, r30
    1432:	cf 01       	movw	r24, r30
    1434:	df 91       	pop	r29
    1436:	cf 91       	pop	r28
    1438:	1f 91       	pop	r17
    143a:	0f 91       	pop	r16
    143c:	08 95       	ret

0000143e <printf>:
    143e:	a0 e0       	ldi	r26, 0x00	; 0
    1440:	b0 e0       	ldi	r27, 0x00	; 0
    1442:	e5 e2       	ldi	r30, 0x25	; 37
    1444:	fa e0       	ldi	r31, 0x0A	; 10
    1446:	0c 94 32 0e 	jmp	0x1c64	; 0x1c64 <__prologue_saves__+0x20>
    144a:	fe 01       	movw	r30, r28
    144c:	35 96       	adiw	r30, 0x05	; 5
    144e:	61 91       	ld	r22, Z+
    1450:	71 91       	ld	r23, Z+
    1452:	af 01       	movw	r20, r30
    1454:	80 91 6d 02 	lds	r24, 0x026D
    1458:	90 91 6e 02 	lds	r25, 0x026E
    145c:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <vfprintf>
    1460:	e2 e0       	ldi	r30, 0x02	; 2
    1462:	0c 94 4e 0e 	jmp	0x1c9c	; 0x1c9c <__epilogue_restores__+0x20>

00001466 <puts>:
    1466:	0f 93       	push	r16
    1468:	1f 93       	push	r17
    146a:	cf 93       	push	r28
    146c:	df 93       	push	r29
    146e:	e0 91 6d 02 	lds	r30, 0x026D
    1472:	f0 91 6e 02 	lds	r31, 0x026E
    1476:	23 81       	ldd	r18, Z+3	; 0x03
    1478:	21 ff       	sbrs	r18, 1
    147a:	1b c0       	rjmp	.+54     	; 0x14b2 <puts+0x4c>
    147c:	ec 01       	movw	r28, r24
    147e:	00 e0       	ldi	r16, 0x00	; 0
    1480:	10 e0       	ldi	r17, 0x00	; 0
    1482:	89 91       	ld	r24, Y+
    1484:	60 91 6d 02 	lds	r22, 0x026D
    1488:	70 91 6e 02 	lds	r23, 0x026E
    148c:	db 01       	movw	r26, r22
    148e:	18 96       	adiw	r26, 0x08	; 8
    1490:	ed 91       	ld	r30, X+
    1492:	fc 91       	ld	r31, X
    1494:	19 97       	sbiw	r26, 0x09	; 9
    1496:	88 23       	and	r24, r24
    1498:	31 f0       	breq	.+12     	; 0x14a6 <puts+0x40>
    149a:	09 95       	icall
    149c:	89 2b       	or	r24, r25
    149e:	89 f3       	breq	.-30     	; 0x1482 <puts+0x1c>
    14a0:	0f ef       	ldi	r16, 0xFF	; 255
    14a2:	1f ef       	ldi	r17, 0xFF	; 255
    14a4:	ee cf       	rjmp	.-36     	; 0x1482 <puts+0x1c>
    14a6:	8a e0       	ldi	r24, 0x0A	; 10
    14a8:	09 95       	icall
    14aa:	89 2b       	or	r24, r25
    14ac:	11 f4       	brne	.+4      	; 0x14b2 <puts+0x4c>
    14ae:	c8 01       	movw	r24, r16
    14b0:	02 c0       	rjmp	.+4      	; 0x14b6 <puts+0x50>
    14b2:	8f ef       	ldi	r24, 0xFF	; 255
    14b4:	9f ef       	ldi	r25, 0xFF	; 255
    14b6:	df 91       	pop	r29
    14b8:	cf 91       	pop	r28
    14ba:	1f 91       	pop	r17
    14bc:	0f 91       	pop	r16
    14be:	08 95       	ret

000014c0 <vfprintf>:
    14c0:	ac e0       	ldi	r26, 0x0C	; 12
    14c2:	b0 e0       	ldi	r27, 0x00	; 0
    14c4:	e6 e6       	ldi	r30, 0x66	; 102
    14c6:	fa e0       	ldi	r31, 0x0A	; 10
    14c8:	0c 94 22 0e 	jmp	0x1c44	; 0x1c44 <__prologue_saves__>
    14cc:	7c 01       	movw	r14, r24
    14ce:	6b 01       	movw	r12, r22
    14d0:	8a 01       	movw	r16, r20
    14d2:	fc 01       	movw	r30, r24
    14d4:	17 82       	std	Z+7, r1	; 0x07
    14d6:	16 82       	std	Z+6, r1	; 0x06
    14d8:	83 81       	ldd	r24, Z+3	; 0x03
    14da:	81 ff       	sbrs	r24, 1
    14dc:	bd c1       	rjmp	.+890    	; 0x1858 <vfprintf+0x398>
    14de:	ce 01       	movw	r24, r28
    14e0:	01 96       	adiw	r24, 0x01	; 1
    14e2:	4c 01       	movw	r8, r24
    14e4:	f7 01       	movw	r30, r14
    14e6:	93 81       	ldd	r25, Z+3	; 0x03
    14e8:	f6 01       	movw	r30, r12
    14ea:	93 fd       	sbrc	r25, 3
    14ec:	85 91       	lpm	r24, Z+
    14ee:	93 ff       	sbrs	r25, 3
    14f0:	81 91       	ld	r24, Z+
    14f2:	6f 01       	movw	r12, r30
    14f4:	88 23       	and	r24, r24
    14f6:	09 f4       	brne	.+2      	; 0x14fa <vfprintf+0x3a>
    14f8:	ab c1       	rjmp	.+854    	; 0x1850 <vfprintf+0x390>
    14fa:	85 32       	cpi	r24, 0x25	; 37
    14fc:	39 f4       	brne	.+14     	; 0x150c <vfprintf+0x4c>
    14fe:	93 fd       	sbrc	r25, 3
    1500:	85 91       	lpm	r24, Z+
    1502:	93 ff       	sbrs	r25, 3
    1504:	81 91       	ld	r24, Z+
    1506:	6f 01       	movw	r12, r30
    1508:	85 32       	cpi	r24, 0x25	; 37
    150a:	29 f4       	brne	.+10     	; 0x1516 <vfprintf+0x56>
    150c:	b7 01       	movw	r22, r14
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <fputc>
    1514:	e7 cf       	rjmp	.-50     	; 0x14e4 <vfprintf+0x24>
    1516:	51 2c       	mov	r5, r1
    1518:	31 2c       	mov	r3, r1
    151a:	20 e0       	ldi	r18, 0x00	; 0
    151c:	20 32       	cpi	r18, 0x20	; 32
    151e:	a0 f4       	brcc	.+40     	; 0x1548 <vfprintf+0x88>
    1520:	8b 32       	cpi	r24, 0x2B	; 43
    1522:	69 f0       	breq	.+26     	; 0x153e <vfprintf+0x7e>
    1524:	30 f4       	brcc	.+12     	; 0x1532 <vfprintf+0x72>
    1526:	80 32       	cpi	r24, 0x20	; 32
    1528:	59 f0       	breq	.+22     	; 0x1540 <vfprintf+0x80>
    152a:	83 32       	cpi	r24, 0x23	; 35
    152c:	69 f4       	brne	.+26     	; 0x1548 <vfprintf+0x88>
    152e:	20 61       	ori	r18, 0x10	; 16
    1530:	2c c0       	rjmp	.+88     	; 0x158a <vfprintf+0xca>
    1532:	8d 32       	cpi	r24, 0x2D	; 45
    1534:	39 f0       	breq	.+14     	; 0x1544 <vfprintf+0x84>
    1536:	80 33       	cpi	r24, 0x30	; 48
    1538:	39 f4       	brne	.+14     	; 0x1548 <vfprintf+0x88>
    153a:	21 60       	ori	r18, 0x01	; 1
    153c:	26 c0       	rjmp	.+76     	; 0x158a <vfprintf+0xca>
    153e:	22 60       	ori	r18, 0x02	; 2
    1540:	24 60       	ori	r18, 0x04	; 4
    1542:	23 c0       	rjmp	.+70     	; 0x158a <vfprintf+0xca>
    1544:	28 60       	ori	r18, 0x08	; 8
    1546:	21 c0       	rjmp	.+66     	; 0x158a <vfprintf+0xca>
    1548:	27 fd       	sbrc	r18, 7
    154a:	27 c0       	rjmp	.+78     	; 0x159a <vfprintf+0xda>
    154c:	30 ed       	ldi	r19, 0xD0	; 208
    154e:	38 0f       	add	r19, r24
    1550:	3a 30       	cpi	r19, 0x0A	; 10
    1552:	78 f4       	brcc	.+30     	; 0x1572 <vfprintf+0xb2>
    1554:	26 ff       	sbrs	r18, 6
    1556:	06 c0       	rjmp	.+12     	; 0x1564 <vfprintf+0xa4>
    1558:	fa e0       	ldi	r31, 0x0A	; 10
    155a:	5f 9e       	mul	r5, r31
    155c:	30 0d       	add	r19, r0
    155e:	11 24       	eor	r1, r1
    1560:	53 2e       	mov	r5, r19
    1562:	13 c0       	rjmp	.+38     	; 0x158a <vfprintf+0xca>
    1564:	8a e0       	ldi	r24, 0x0A	; 10
    1566:	38 9e       	mul	r3, r24
    1568:	30 0d       	add	r19, r0
    156a:	11 24       	eor	r1, r1
    156c:	33 2e       	mov	r3, r19
    156e:	20 62       	ori	r18, 0x20	; 32
    1570:	0c c0       	rjmp	.+24     	; 0x158a <vfprintf+0xca>
    1572:	8e 32       	cpi	r24, 0x2E	; 46
    1574:	21 f4       	brne	.+8      	; 0x157e <vfprintf+0xbe>
    1576:	26 fd       	sbrc	r18, 6
    1578:	6b c1       	rjmp	.+726    	; 0x1850 <vfprintf+0x390>
    157a:	20 64       	ori	r18, 0x40	; 64
    157c:	06 c0       	rjmp	.+12     	; 0x158a <vfprintf+0xca>
    157e:	8c 36       	cpi	r24, 0x6C	; 108
    1580:	11 f4       	brne	.+4      	; 0x1586 <vfprintf+0xc6>
    1582:	20 68       	ori	r18, 0x80	; 128
    1584:	02 c0       	rjmp	.+4      	; 0x158a <vfprintf+0xca>
    1586:	88 36       	cpi	r24, 0x68	; 104
    1588:	41 f4       	brne	.+16     	; 0x159a <vfprintf+0xda>
    158a:	f6 01       	movw	r30, r12
    158c:	93 fd       	sbrc	r25, 3
    158e:	85 91       	lpm	r24, Z+
    1590:	93 ff       	sbrs	r25, 3
    1592:	81 91       	ld	r24, Z+
    1594:	6f 01       	movw	r12, r30
    1596:	81 11       	cpse	r24, r1
    1598:	c1 cf       	rjmp	.-126    	; 0x151c <vfprintf+0x5c>
    159a:	98 2f       	mov	r25, r24
    159c:	9f 7d       	andi	r25, 0xDF	; 223
    159e:	95 54       	subi	r25, 0x45	; 69
    15a0:	93 30       	cpi	r25, 0x03	; 3
    15a2:	28 f4       	brcc	.+10     	; 0x15ae <vfprintf+0xee>
    15a4:	0c 5f       	subi	r16, 0xFC	; 252
    15a6:	1f 4f       	sbci	r17, 0xFF	; 255
    15a8:	ff e3       	ldi	r31, 0x3F	; 63
    15aa:	f9 83       	std	Y+1, r31	; 0x01
    15ac:	0d c0       	rjmp	.+26     	; 0x15c8 <vfprintf+0x108>
    15ae:	83 36       	cpi	r24, 0x63	; 99
    15b0:	31 f0       	breq	.+12     	; 0x15be <vfprintf+0xfe>
    15b2:	83 37       	cpi	r24, 0x73	; 115
    15b4:	71 f0       	breq	.+28     	; 0x15d2 <vfprintf+0x112>
    15b6:	83 35       	cpi	r24, 0x53	; 83
    15b8:	09 f0       	breq	.+2      	; 0x15bc <vfprintf+0xfc>
    15ba:	5b c0       	rjmp	.+182    	; 0x1672 <vfprintf+0x1b2>
    15bc:	22 c0       	rjmp	.+68     	; 0x1602 <vfprintf+0x142>
    15be:	f8 01       	movw	r30, r16
    15c0:	80 81       	ld	r24, Z
    15c2:	89 83       	std	Y+1, r24	; 0x01
    15c4:	0e 5f       	subi	r16, 0xFE	; 254
    15c6:	1f 4f       	sbci	r17, 0xFF	; 255
    15c8:	44 24       	eor	r4, r4
    15ca:	43 94       	inc	r4
    15cc:	51 2c       	mov	r5, r1
    15ce:	54 01       	movw	r10, r8
    15d0:	15 c0       	rjmp	.+42     	; 0x15fc <vfprintf+0x13c>
    15d2:	38 01       	movw	r6, r16
    15d4:	f2 e0       	ldi	r31, 0x02	; 2
    15d6:	6f 0e       	add	r6, r31
    15d8:	71 1c       	adc	r7, r1
    15da:	f8 01       	movw	r30, r16
    15dc:	a0 80       	ld	r10, Z
    15de:	b1 80       	ldd	r11, Z+1	; 0x01
    15e0:	26 ff       	sbrs	r18, 6
    15e2:	03 c0       	rjmp	.+6      	; 0x15ea <vfprintf+0x12a>
    15e4:	65 2d       	mov	r22, r5
    15e6:	70 e0       	ldi	r23, 0x00	; 0
    15e8:	02 c0       	rjmp	.+4      	; 0x15ee <vfprintf+0x12e>
    15ea:	6f ef       	ldi	r22, 0xFF	; 255
    15ec:	7f ef       	ldi	r23, 0xFF	; 255
    15ee:	c5 01       	movw	r24, r10
    15f0:	2c 87       	std	Y+12, r18	; 0x0c
    15f2:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <strnlen>
    15f6:	2c 01       	movw	r4, r24
    15f8:	83 01       	movw	r16, r6
    15fa:	2c 85       	ldd	r18, Y+12	; 0x0c
    15fc:	2f 77       	andi	r18, 0x7F	; 127
    15fe:	22 2e       	mov	r2, r18
    1600:	17 c0       	rjmp	.+46     	; 0x1630 <vfprintf+0x170>
    1602:	38 01       	movw	r6, r16
    1604:	f2 e0       	ldi	r31, 0x02	; 2
    1606:	6f 0e       	add	r6, r31
    1608:	71 1c       	adc	r7, r1
    160a:	f8 01       	movw	r30, r16
    160c:	a0 80       	ld	r10, Z
    160e:	b1 80       	ldd	r11, Z+1	; 0x01
    1610:	26 ff       	sbrs	r18, 6
    1612:	03 c0       	rjmp	.+6      	; 0x161a <vfprintf+0x15a>
    1614:	65 2d       	mov	r22, r5
    1616:	70 e0       	ldi	r23, 0x00	; 0
    1618:	02 c0       	rjmp	.+4      	; 0x161e <vfprintf+0x15e>
    161a:	6f ef       	ldi	r22, 0xFF	; 255
    161c:	7f ef       	ldi	r23, 0xFF	; 255
    161e:	c5 01       	movw	r24, r10
    1620:	2c 87       	std	Y+12, r18	; 0x0c
    1622:	0e 94 75 0d 	call	0x1aea	; 0x1aea <strnlen_P>
    1626:	2c 01       	movw	r4, r24
    1628:	2c 85       	ldd	r18, Y+12	; 0x0c
    162a:	20 68       	ori	r18, 0x80	; 128
    162c:	22 2e       	mov	r2, r18
    162e:	83 01       	movw	r16, r6
    1630:	23 fc       	sbrc	r2, 3
    1632:	1b c0       	rjmp	.+54     	; 0x166a <vfprintf+0x1aa>
    1634:	83 2d       	mov	r24, r3
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	48 16       	cp	r4, r24
    163a:	59 06       	cpc	r5, r25
    163c:	b0 f4       	brcc	.+44     	; 0x166a <vfprintf+0x1aa>
    163e:	b7 01       	movw	r22, r14
    1640:	80 e2       	ldi	r24, 0x20	; 32
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <fputc>
    1648:	3a 94       	dec	r3
    164a:	f4 cf       	rjmp	.-24     	; 0x1634 <vfprintf+0x174>
    164c:	f5 01       	movw	r30, r10
    164e:	27 fc       	sbrc	r2, 7
    1650:	85 91       	lpm	r24, Z+
    1652:	27 fe       	sbrs	r2, 7
    1654:	81 91       	ld	r24, Z+
    1656:	5f 01       	movw	r10, r30
    1658:	b7 01       	movw	r22, r14
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <fputc>
    1660:	31 10       	cpse	r3, r1
    1662:	3a 94       	dec	r3
    1664:	f1 e0       	ldi	r31, 0x01	; 1
    1666:	4f 1a       	sub	r4, r31
    1668:	51 08       	sbc	r5, r1
    166a:	41 14       	cp	r4, r1
    166c:	51 04       	cpc	r5, r1
    166e:	71 f7       	brne	.-36     	; 0x164c <vfprintf+0x18c>
    1670:	e5 c0       	rjmp	.+458    	; 0x183c <vfprintf+0x37c>
    1672:	84 36       	cpi	r24, 0x64	; 100
    1674:	11 f0       	breq	.+4      	; 0x167a <vfprintf+0x1ba>
    1676:	89 36       	cpi	r24, 0x69	; 105
    1678:	39 f5       	brne	.+78     	; 0x16c8 <vfprintf+0x208>
    167a:	f8 01       	movw	r30, r16
    167c:	27 ff       	sbrs	r18, 7
    167e:	07 c0       	rjmp	.+14     	; 0x168e <vfprintf+0x1ce>
    1680:	60 81       	ld	r22, Z
    1682:	71 81       	ldd	r23, Z+1	; 0x01
    1684:	82 81       	ldd	r24, Z+2	; 0x02
    1686:	93 81       	ldd	r25, Z+3	; 0x03
    1688:	0c 5f       	subi	r16, 0xFC	; 252
    168a:	1f 4f       	sbci	r17, 0xFF	; 255
    168c:	08 c0       	rjmp	.+16     	; 0x169e <vfprintf+0x1de>
    168e:	60 81       	ld	r22, Z
    1690:	71 81       	ldd	r23, Z+1	; 0x01
    1692:	88 27       	eor	r24, r24
    1694:	77 fd       	sbrc	r23, 7
    1696:	80 95       	com	r24
    1698:	98 2f       	mov	r25, r24
    169a:	0e 5f       	subi	r16, 0xFE	; 254
    169c:	1f 4f       	sbci	r17, 0xFF	; 255
    169e:	2f 76       	andi	r18, 0x6F	; 111
    16a0:	b2 2e       	mov	r11, r18
    16a2:	97 ff       	sbrs	r25, 7
    16a4:	09 c0       	rjmp	.+18     	; 0x16b8 <vfprintf+0x1f8>
    16a6:	90 95       	com	r25
    16a8:	80 95       	com	r24
    16aa:	70 95       	com	r23
    16ac:	61 95       	neg	r22
    16ae:	7f 4f       	sbci	r23, 0xFF	; 255
    16b0:	8f 4f       	sbci	r24, 0xFF	; 255
    16b2:	9f 4f       	sbci	r25, 0xFF	; 255
    16b4:	20 68       	ori	r18, 0x80	; 128
    16b6:	b2 2e       	mov	r11, r18
    16b8:	2a e0       	ldi	r18, 0x0A	; 10
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	a4 01       	movw	r20, r8
    16be:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <__ultoa_invert>
    16c2:	a8 2e       	mov	r10, r24
    16c4:	a8 18       	sub	r10, r8
    16c6:	44 c0       	rjmp	.+136    	; 0x1750 <vfprintf+0x290>
    16c8:	85 37       	cpi	r24, 0x75	; 117
    16ca:	29 f4       	brne	.+10     	; 0x16d6 <vfprintf+0x216>
    16cc:	2f 7e       	andi	r18, 0xEF	; 239
    16ce:	b2 2e       	mov	r11, r18
    16d0:	2a e0       	ldi	r18, 0x0A	; 10
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	25 c0       	rjmp	.+74     	; 0x1720 <vfprintf+0x260>
    16d6:	f2 2f       	mov	r31, r18
    16d8:	f9 7f       	andi	r31, 0xF9	; 249
    16da:	bf 2e       	mov	r11, r31
    16dc:	8f 36       	cpi	r24, 0x6F	; 111
    16de:	c1 f0       	breq	.+48     	; 0x1710 <vfprintf+0x250>
    16e0:	18 f4       	brcc	.+6      	; 0x16e8 <vfprintf+0x228>
    16e2:	88 35       	cpi	r24, 0x58	; 88
    16e4:	79 f0       	breq	.+30     	; 0x1704 <vfprintf+0x244>
    16e6:	b4 c0       	rjmp	.+360    	; 0x1850 <vfprintf+0x390>
    16e8:	80 37       	cpi	r24, 0x70	; 112
    16ea:	19 f0       	breq	.+6      	; 0x16f2 <vfprintf+0x232>
    16ec:	88 37       	cpi	r24, 0x78	; 120
    16ee:	21 f0       	breq	.+8      	; 0x16f8 <vfprintf+0x238>
    16f0:	af c0       	rjmp	.+350    	; 0x1850 <vfprintf+0x390>
    16f2:	2f 2f       	mov	r18, r31
    16f4:	20 61       	ori	r18, 0x10	; 16
    16f6:	b2 2e       	mov	r11, r18
    16f8:	b4 fe       	sbrs	r11, 4
    16fa:	0d c0       	rjmp	.+26     	; 0x1716 <vfprintf+0x256>
    16fc:	8b 2d       	mov	r24, r11
    16fe:	84 60       	ori	r24, 0x04	; 4
    1700:	b8 2e       	mov	r11, r24
    1702:	09 c0       	rjmp	.+18     	; 0x1716 <vfprintf+0x256>
    1704:	24 ff       	sbrs	r18, 4
    1706:	0a c0       	rjmp	.+20     	; 0x171c <vfprintf+0x25c>
    1708:	9f 2f       	mov	r25, r31
    170a:	96 60       	ori	r25, 0x06	; 6
    170c:	b9 2e       	mov	r11, r25
    170e:	06 c0       	rjmp	.+12     	; 0x171c <vfprintf+0x25c>
    1710:	28 e0       	ldi	r18, 0x08	; 8
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	05 c0       	rjmp	.+10     	; 0x1720 <vfprintf+0x260>
    1716:	20 e1       	ldi	r18, 0x10	; 16
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	02 c0       	rjmp	.+4      	; 0x1720 <vfprintf+0x260>
    171c:	20 e1       	ldi	r18, 0x10	; 16
    171e:	32 e0       	ldi	r19, 0x02	; 2
    1720:	f8 01       	movw	r30, r16
    1722:	b7 fe       	sbrs	r11, 7
    1724:	07 c0       	rjmp	.+14     	; 0x1734 <vfprintf+0x274>
    1726:	60 81       	ld	r22, Z
    1728:	71 81       	ldd	r23, Z+1	; 0x01
    172a:	82 81       	ldd	r24, Z+2	; 0x02
    172c:	93 81       	ldd	r25, Z+3	; 0x03
    172e:	0c 5f       	subi	r16, 0xFC	; 252
    1730:	1f 4f       	sbci	r17, 0xFF	; 255
    1732:	06 c0       	rjmp	.+12     	; 0x1740 <vfprintf+0x280>
    1734:	60 81       	ld	r22, Z
    1736:	71 81       	ldd	r23, Z+1	; 0x01
    1738:	80 e0       	ldi	r24, 0x00	; 0
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	0e 5f       	subi	r16, 0xFE	; 254
    173e:	1f 4f       	sbci	r17, 0xFF	; 255
    1740:	a4 01       	movw	r20, r8
    1742:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <__ultoa_invert>
    1746:	a8 2e       	mov	r10, r24
    1748:	a8 18       	sub	r10, r8
    174a:	fb 2d       	mov	r31, r11
    174c:	ff 77       	andi	r31, 0x7F	; 127
    174e:	bf 2e       	mov	r11, r31
    1750:	b6 fe       	sbrs	r11, 6
    1752:	0b c0       	rjmp	.+22     	; 0x176a <vfprintf+0x2aa>
    1754:	2b 2d       	mov	r18, r11
    1756:	2e 7f       	andi	r18, 0xFE	; 254
    1758:	a5 14       	cp	r10, r5
    175a:	50 f4       	brcc	.+20     	; 0x1770 <vfprintf+0x2b0>
    175c:	b4 fe       	sbrs	r11, 4
    175e:	0a c0       	rjmp	.+20     	; 0x1774 <vfprintf+0x2b4>
    1760:	b2 fc       	sbrc	r11, 2
    1762:	08 c0       	rjmp	.+16     	; 0x1774 <vfprintf+0x2b4>
    1764:	2b 2d       	mov	r18, r11
    1766:	2e 7e       	andi	r18, 0xEE	; 238
    1768:	05 c0       	rjmp	.+10     	; 0x1774 <vfprintf+0x2b4>
    176a:	7a 2c       	mov	r7, r10
    176c:	2b 2d       	mov	r18, r11
    176e:	03 c0       	rjmp	.+6      	; 0x1776 <vfprintf+0x2b6>
    1770:	7a 2c       	mov	r7, r10
    1772:	01 c0       	rjmp	.+2      	; 0x1776 <vfprintf+0x2b6>
    1774:	75 2c       	mov	r7, r5
    1776:	24 ff       	sbrs	r18, 4
    1778:	0d c0       	rjmp	.+26     	; 0x1794 <vfprintf+0x2d4>
    177a:	fe 01       	movw	r30, r28
    177c:	ea 0d       	add	r30, r10
    177e:	f1 1d       	adc	r31, r1
    1780:	80 81       	ld	r24, Z
    1782:	80 33       	cpi	r24, 0x30	; 48
    1784:	11 f4       	brne	.+4      	; 0x178a <vfprintf+0x2ca>
    1786:	29 7e       	andi	r18, 0xE9	; 233
    1788:	09 c0       	rjmp	.+18     	; 0x179c <vfprintf+0x2dc>
    178a:	22 ff       	sbrs	r18, 2
    178c:	06 c0       	rjmp	.+12     	; 0x179a <vfprintf+0x2da>
    178e:	73 94       	inc	r7
    1790:	73 94       	inc	r7
    1792:	04 c0       	rjmp	.+8      	; 0x179c <vfprintf+0x2dc>
    1794:	82 2f       	mov	r24, r18
    1796:	86 78       	andi	r24, 0x86	; 134
    1798:	09 f0       	breq	.+2      	; 0x179c <vfprintf+0x2dc>
    179a:	73 94       	inc	r7
    179c:	23 fd       	sbrc	r18, 3
    179e:	13 c0       	rjmp	.+38     	; 0x17c6 <vfprintf+0x306>
    17a0:	20 ff       	sbrs	r18, 0
    17a2:	06 c0       	rjmp	.+12     	; 0x17b0 <vfprintf+0x2f0>
    17a4:	5a 2c       	mov	r5, r10
    17a6:	73 14       	cp	r7, r3
    17a8:	18 f4       	brcc	.+6      	; 0x17b0 <vfprintf+0x2f0>
    17aa:	53 0c       	add	r5, r3
    17ac:	57 18       	sub	r5, r7
    17ae:	73 2c       	mov	r7, r3
    17b0:	73 14       	cp	r7, r3
    17b2:	68 f4       	brcc	.+26     	; 0x17ce <vfprintf+0x30e>
    17b4:	b7 01       	movw	r22, r14
    17b6:	80 e2       	ldi	r24, 0x20	; 32
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	2c 87       	std	Y+12, r18	; 0x0c
    17bc:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <fputc>
    17c0:	73 94       	inc	r7
    17c2:	2c 85       	ldd	r18, Y+12	; 0x0c
    17c4:	f5 cf       	rjmp	.-22     	; 0x17b0 <vfprintf+0x2f0>
    17c6:	73 14       	cp	r7, r3
    17c8:	10 f4       	brcc	.+4      	; 0x17ce <vfprintf+0x30e>
    17ca:	37 18       	sub	r3, r7
    17cc:	01 c0       	rjmp	.+2      	; 0x17d0 <vfprintf+0x310>
    17ce:	31 2c       	mov	r3, r1
    17d0:	24 ff       	sbrs	r18, 4
    17d2:	12 c0       	rjmp	.+36     	; 0x17f8 <vfprintf+0x338>
    17d4:	b7 01       	movw	r22, r14
    17d6:	80 e3       	ldi	r24, 0x30	; 48
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	2c 87       	std	Y+12, r18	; 0x0c
    17dc:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <fputc>
    17e0:	2c 85       	ldd	r18, Y+12	; 0x0c
    17e2:	22 ff       	sbrs	r18, 2
    17e4:	17 c0       	rjmp	.+46     	; 0x1814 <vfprintf+0x354>
    17e6:	21 ff       	sbrs	r18, 1
    17e8:	03 c0       	rjmp	.+6      	; 0x17f0 <vfprintf+0x330>
    17ea:	88 e5       	ldi	r24, 0x58	; 88
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	02 c0       	rjmp	.+4      	; 0x17f4 <vfprintf+0x334>
    17f0:	88 e7       	ldi	r24, 0x78	; 120
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	b7 01       	movw	r22, r14
    17f6:	0c c0       	rjmp	.+24     	; 0x1810 <vfprintf+0x350>
    17f8:	82 2f       	mov	r24, r18
    17fa:	86 78       	andi	r24, 0x86	; 134
    17fc:	59 f0       	breq	.+22     	; 0x1814 <vfprintf+0x354>
    17fe:	21 fd       	sbrc	r18, 1
    1800:	02 c0       	rjmp	.+4      	; 0x1806 <vfprintf+0x346>
    1802:	80 e2       	ldi	r24, 0x20	; 32
    1804:	01 c0       	rjmp	.+2      	; 0x1808 <vfprintf+0x348>
    1806:	8b e2       	ldi	r24, 0x2B	; 43
    1808:	27 fd       	sbrc	r18, 7
    180a:	8d e2       	ldi	r24, 0x2D	; 45
    180c:	b7 01       	movw	r22, r14
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <fputc>
    1814:	a5 14       	cp	r10, r5
    1816:	38 f4       	brcc	.+14     	; 0x1826 <vfprintf+0x366>
    1818:	b7 01       	movw	r22, r14
    181a:	80 e3       	ldi	r24, 0x30	; 48
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <fputc>
    1822:	5a 94       	dec	r5
    1824:	f7 cf       	rjmp	.-18     	; 0x1814 <vfprintf+0x354>
    1826:	aa 94       	dec	r10
    1828:	f4 01       	movw	r30, r8
    182a:	ea 0d       	add	r30, r10
    182c:	f1 1d       	adc	r31, r1
    182e:	80 81       	ld	r24, Z
    1830:	b7 01       	movw	r22, r14
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <fputc>
    1838:	a1 10       	cpse	r10, r1
    183a:	f5 cf       	rjmp	.-22     	; 0x1826 <vfprintf+0x366>
    183c:	33 20       	and	r3, r3
    183e:	09 f4       	brne	.+2      	; 0x1842 <vfprintf+0x382>
    1840:	51 ce       	rjmp	.-862    	; 0x14e4 <vfprintf+0x24>
    1842:	b7 01       	movw	r22, r14
    1844:	80 e2       	ldi	r24, 0x20	; 32
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <fputc>
    184c:	3a 94       	dec	r3
    184e:	f6 cf       	rjmp	.-20     	; 0x183c <vfprintf+0x37c>
    1850:	f7 01       	movw	r30, r14
    1852:	86 81       	ldd	r24, Z+6	; 0x06
    1854:	97 81       	ldd	r25, Z+7	; 0x07
    1856:	02 c0       	rjmp	.+4      	; 0x185c <vfprintf+0x39c>
    1858:	8f ef       	ldi	r24, 0xFF	; 255
    185a:	9f ef       	ldi	r25, 0xFF	; 255
    185c:	2c 96       	adiw	r28, 0x0c	; 12
    185e:	e2 e1       	ldi	r30, 0x12	; 18
    1860:	0c 94 3e 0e 	jmp	0x1c7c	; 0x1c7c <__epilogue_restores__>

00001864 <calloc>:
    1864:	0f 93       	push	r16
    1866:	1f 93       	push	r17
    1868:	cf 93       	push	r28
    186a:	df 93       	push	r29
    186c:	86 9f       	mul	r24, r22
    186e:	80 01       	movw	r16, r0
    1870:	87 9f       	mul	r24, r23
    1872:	10 0d       	add	r17, r0
    1874:	96 9f       	mul	r25, r22
    1876:	10 0d       	add	r17, r0
    1878:	11 24       	eor	r1, r1
    187a:	c8 01       	movw	r24, r16
    187c:	0e 94 4e 0c 	call	0x189c	; 0x189c <malloc>
    1880:	ec 01       	movw	r28, r24
    1882:	00 97       	sbiw	r24, 0x00	; 0
    1884:	29 f0       	breq	.+10     	; 0x1890 <calloc+0x2c>
    1886:	a8 01       	movw	r20, r16
    1888:	60 e0       	ldi	r22, 0x00	; 0
    188a:	70 e0       	ldi	r23, 0x00	; 0
    188c:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <memset>
    1890:	ce 01       	movw	r24, r28
    1892:	df 91       	pop	r29
    1894:	cf 91       	pop	r28
    1896:	1f 91       	pop	r17
    1898:	0f 91       	pop	r16
    189a:	08 95       	ret

0000189c <malloc>:
    189c:	cf 93       	push	r28
    189e:	df 93       	push	r29
    18a0:	82 30       	cpi	r24, 0x02	; 2
    18a2:	91 05       	cpc	r25, r1
    18a4:	10 f4       	brcc	.+4      	; 0x18aa <malloc+0xe>
    18a6:	82 e0       	ldi	r24, 0x02	; 2
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	e0 91 73 02 	lds	r30, 0x0273
    18ae:	f0 91 74 02 	lds	r31, 0x0274
    18b2:	20 e0       	ldi	r18, 0x00	; 0
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	a0 e0       	ldi	r26, 0x00	; 0
    18b8:	b0 e0       	ldi	r27, 0x00	; 0
    18ba:	30 97       	sbiw	r30, 0x00	; 0
    18bc:	39 f1       	breq	.+78     	; 0x190c <malloc+0x70>
    18be:	40 81       	ld	r20, Z
    18c0:	51 81       	ldd	r21, Z+1	; 0x01
    18c2:	48 17       	cp	r20, r24
    18c4:	59 07       	cpc	r21, r25
    18c6:	b8 f0       	brcs	.+46     	; 0x18f6 <malloc+0x5a>
    18c8:	48 17       	cp	r20, r24
    18ca:	59 07       	cpc	r21, r25
    18cc:	71 f4       	brne	.+28     	; 0x18ea <malloc+0x4e>
    18ce:	82 81       	ldd	r24, Z+2	; 0x02
    18d0:	93 81       	ldd	r25, Z+3	; 0x03
    18d2:	10 97       	sbiw	r26, 0x00	; 0
    18d4:	29 f0       	breq	.+10     	; 0x18e0 <malloc+0x44>
    18d6:	13 96       	adiw	r26, 0x03	; 3
    18d8:	9c 93       	st	X, r25
    18da:	8e 93       	st	-X, r24
    18dc:	12 97       	sbiw	r26, 0x02	; 2
    18de:	2c c0       	rjmp	.+88     	; 0x1938 <malloc+0x9c>
    18e0:	90 93 74 02 	sts	0x0274, r25
    18e4:	80 93 73 02 	sts	0x0273, r24
    18e8:	27 c0       	rjmp	.+78     	; 0x1938 <malloc+0x9c>
    18ea:	21 15       	cp	r18, r1
    18ec:	31 05       	cpc	r19, r1
    18ee:	31 f0       	breq	.+12     	; 0x18fc <malloc+0x60>
    18f0:	42 17       	cp	r20, r18
    18f2:	53 07       	cpc	r21, r19
    18f4:	18 f0       	brcs	.+6      	; 0x18fc <malloc+0x60>
    18f6:	a9 01       	movw	r20, r18
    18f8:	db 01       	movw	r26, r22
    18fa:	01 c0       	rjmp	.+2      	; 0x18fe <malloc+0x62>
    18fc:	ef 01       	movw	r28, r30
    18fe:	9a 01       	movw	r18, r20
    1900:	bd 01       	movw	r22, r26
    1902:	df 01       	movw	r26, r30
    1904:	02 80       	ldd	r0, Z+2	; 0x02
    1906:	f3 81       	ldd	r31, Z+3	; 0x03
    1908:	e0 2d       	mov	r30, r0
    190a:	d7 cf       	rjmp	.-82     	; 0x18ba <malloc+0x1e>
    190c:	21 15       	cp	r18, r1
    190e:	31 05       	cpc	r19, r1
    1910:	f9 f0       	breq	.+62     	; 0x1950 <malloc+0xb4>
    1912:	28 1b       	sub	r18, r24
    1914:	39 0b       	sbc	r19, r25
    1916:	24 30       	cpi	r18, 0x04	; 4
    1918:	31 05       	cpc	r19, r1
    191a:	80 f4       	brcc	.+32     	; 0x193c <malloc+0xa0>
    191c:	8a 81       	ldd	r24, Y+2	; 0x02
    191e:	9b 81       	ldd	r25, Y+3	; 0x03
    1920:	61 15       	cp	r22, r1
    1922:	71 05       	cpc	r23, r1
    1924:	21 f0       	breq	.+8      	; 0x192e <malloc+0x92>
    1926:	fb 01       	movw	r30, r22
    1928:	93 83       	std	Z+3, r25	; 0x03
    192a:	82 83       	std	Z+2, r24	; 0x02
    192c:	04 c0       	rjmp	.+8      	; 0x1936 <malloc+0x9a>
    192e:	90 93 74 02 	sts	0x0274, r25
    1932:	80 93 73 02 	sts	0x0273, r24
    1936:	fe 01       	movw	r30, r28
    1938:	32 96       	adiw	r30, 0x02	; 2
    193a:	44 c0       	rjmp	.+136    	; 0x19c4 <malloc+0x128>
    193c:	fe 01       	movw	r30, r28
    193e:	e2 0f       	add	r30, r18
    1940:	f3 1f       	adc	r31, r19
    1942:	81 93       	st	Z+, r24
    1944:	91 93       	st	Z+, r25
    1946:	22 50       	subi	r18, 0x02	; 2
    1948:	31 09       	sbc	r19, r1
    194a:	39 83       	std	Y+1, r19	; 0x01
    194c:	28 83       	st	Y, r18
    194e:	3a c0       	rjmp	.+116    	; 0x19c4 <malloc+0x128>
    1950:	20 91 71 02 	lds	r18, 0x0271
    1954:	30 91 72 02 	lds	r19, 0x0272
    1958:	23 2b       	or	r18, r19
    195a:	41 f4       	brne	.+16     	; 0x196c <malloc+0xd0>
    195c:	20 91 02 01 	lds	r18, 0x0102
    1960:	30 91 03 01 	lds	r19, 0x0103
    1964:	30 93 72 02 	sts	0x0272, r19
    1968:	20 93 71 02 	sts	0x0271, r18
    196c:	20 91 00 01 	lds	r18, 0x0100
    1970:	30 91 01 01 	lds	r19, 0x0101
    1974:	21 15       	cp	r18, r1
    1976:	31 05       	cpc	r19, r1
    1978:	41 f4       	brne	.+16     	; 0x198a <malloc+0xee>
    197a:	2d b7       	in	r18, 0x3d	; 61
    197c:	3e b7       	in	r19, 0x3e	; 62
    197e:	40 91 04 01 	lds	r20, 0x0104
    1982:	50 91 05 01 	lds	r21, 0x0105
    1986:	24 1b       	sub	r18, r20
    1988:	35 0b       	sbc	r19, r21
    198a:	e0 91 71 02 	lds	r30, 0x0271
    198e:	f0 91 72 02 	lds	r31, 0x0272
    1992:	e2 17       	cp	r30, r18
    1994:	f3 07       	cpc	r31, r19
    1996:	a0 f4       	brcc	.+40     	; 0x19c0 <malloc+0x124>
    1998:	2e 1b       	sub	r18, r30
    199a:	3f 0b       	sbc	r19, r31
    199c:	28 17       	cp	r18, r24
    199e:	39 07       	cpc	r19, r25
    19a0:	78 f0       	brcs	.+30     	; 0x19c0 <malloc+0x124>
    19a2:	ac 01       	movw	r20, r24
    19a4:	4e 5f       	subi	r20, 0xFE	; 254
    19a6:	5f 4f       	sbci	r21, 0xFF	; 255
    19a8:	24 17       	cp	r18, r20
    19aa:	35 07       	cpc	r19, r21
    19ac:	48 f0       	brcs	.+18     	; 0x19c0 <malloc+0x124>
    19ae:	4e 0f       	add	r20, r30
    19b0:	5f 1f       	adc	r21, r31
    19b2:	50 93 72 02 	sts	0x0272, r21
    19b6:	40 93 71 02 	sts	0x0271, r20
    19ba:	81 93       	st	Z+, r24
    19bc:	91 93       	st	Z+, r25
    19be:	02 c0       	rjmp	.+4      	; 0x19c4 <malloc+0x128>
    19c0:	e0 e0       	ldi	r30, 0x00	; 0
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	cf 01       	movw	r24, r30
    19c6:	df 91       	pop	r29
    19c8:	cf 91       	pop	r28
    19ca:	08 95       	ret

000019cc <free>:
    19cc:	cf 93       	push	r28
    19ce:	df 93       	push	r29
    19d0:	00 97       	sbiw	r24, 0x00	; 0
    19d2:	09 f4       	brne	.+2      	; 0x19d6 <free+0xa>
    19d4:	87 c0       	rjmp	.+270    	; 0x1ae4 <free+0x118>
    19d6:	fc 01       	movw	r30, r24
    19d8:	32 97       	sbiw	r30, 0x02	; 2
    19da:	13 82       	std	Z+3, r1	; 0x03
    19dc:	12 82       	std	Z+2, r1	; 0x02
    19de:	c0 91 73 02 	lds	r28, 0x0273
    19e2:	d0 91 74 02 	lds	r29, 0x0274
    19e6:	20 97       	sbiw	r28, 0x00	; 0
    19e8:	81 f4       	brne	.+32     	; 0x1a0a <free+0x3e>
    19ea:	20 81       	ld	r18, Z
    19ec:	31 81       	ldd	r19, Z+1	; 0x01
    19ee:	28 0f       	add	r18, r24
    19f0:	39 1f       	adc	r19, r25
    19f2:	80 91 71 02 	lds	r24, 0x0271
    19f6:	90 91 72 02 	lds	r25, 0x0272
    19fa:	82 17       	cp	r24, r18
    19fc:	93 07       	cpc	r25, r19
    19fe:	79 f5       	brne	.+94     	; 0x1a5e <free+0x92>
    1a00:	f0 93 72 02 	sts	0x0272, r31
    1a04:	e0 93 71 02 	sts	0x0271, r30
    1a08:	6d c0       	rjmp	.+218    	; 0x1ae4 <free+0x118>
    1a0a:	de 01       	movw	r26, r28
    1a0c:	20 e0       	ldi	r18, 0x00	; 0
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	ae 17       	cp	r26, r30
    1a12:	bf 07       	cpc	r27, r31
    1a14:	50 f4       	brcc	.+20     	; 0x1a2a <free+0x5e>
    1a16:	12 96       	adiw	r26, 0x02	; 2
    1a18:	4d 91       	ld	r20, X+
    1a1a:	5c 91       	ld	r21, X
    1a1c:	13 97       	sbiw	r26, 0x03	; 3
    1a1e:	9d 01       	movw	r18, r26
    1a20:	41 15       	cp	r20, r1
    1a22:	51 05       	cpc	r21, r1
    1a24:	09 f1       	breq	.+66     	; 0x1a68 <free+0x9c>
    1a26:	da 01       	movw	r26, r20
    1a28:	f3 cf       	rjmp	.-26     	; 0x1a10 <free+0x44>
    1a2a:	b3 83       	std	Z+3, r27	; 0x03
    1a2c:	a2 83       	std	Z+2, r26	; 0x02
    1a2e:	40 81       	ld	r20, Z
    1a30:	51 81       	ldd	r21, Z+1	; 0x01
    1a32:	84 0f       	add	r24, r20
    1a34:	95 1f       	adc	r25, r21
    1a36:	8a 17       	cp	r24, r26
    1a38:	9b 07       	cpc	r25, r27
    1a3a:	71 f4       	brne	.+28     	; 0x1a58 <free+0x8c>
    1a3c:	8d 91       	ld	r24, X+
    1a3e:	9c 91       	ld	r25, X
    1a40:	11 97       	sbiw	r26, 0x01	; 1
    1a42:	84 0f       	add	r24, r20
    1a44:	95 1f       	adc	r25, r21
    1a46:	02 96       	adiw	r24, 0x02	; 2
    1a48:	91 83       	std	Z+1, r25	; 0x01
    1a4a:	80 83       	st	Z, r24
    1a4c:	12 96       	adiw	r26, 0x02	; 2
    1a4e:	8d 91       	ld	r24, X+
    1a50:	9c 91       	ld	r25, X
    1a52:	13 97       	sbiw	r26, 0x03	; 3
    1a54:	93 83       	std	Z+3, r25	; 0x03
    1a56:	82 83       	std	Z+2, r24	; 0x02
    1a58:	21 15       	cp	r18, r1
    1a5a:	31 05       	cpc	r19, r1
    1a5c:	29 f4       	brne	.+10     	; 0x1a68 <free+0x9c>
    1a5e:	f0 93 74 02 	sts	0x0274, r31
    1a62:	e0 93 73 02 	sts	0x0273, r30
    1a66:	3e c0       	rjmp	.+124    	; 0x1ae4 <free+0x118>
    1a68:	d9 01       	movw	r26, r18
    1a6a:	13 96       	adiw	r26, 0x03	; 3
    1a6c:	fc 93       	st	X, r31
    1a6e:	ee 93       	st	-X, r30
    1a70:	12 97       	sbiw	r26, 0x02	; 2
    1a72:	4d 91       	ld	r20, X+
    1a74:	5d 91       	ld	r21, X+
    1a76:	a4 0f       	add	r26, r20
    1a78:	b5 1f       	adc	r27, r21
    1a7a:	ea 17       	cp	r30, r26
    1a7c:	fb 07       	cpc	r31, r27
    1a7e:	79 f4       	brne	.+30     	; 0x1a9e <free+0xd2>
    1a80:	80 81       	ld	r24, Z
    1a82:	91 81       	ldd	r25, Z+1	; 0x01
    1a84:	84 0f       	add	r24, r20
    1a86:	95 1f       	adc	r25, r21
    1a88:	02 96       	adiw	r24, 0x02	; 2
    1a8a:	d9 01       	movw	r26, r18
    1a8c:	11 96       	adiw	r26, 0x01	; 1
    1a8e:	9c 93       	st	X, r25
    1a90:	8e 93       	st	-X, r24
    1a92:	82 81       	ldd	r24, Z+2	; 0x02
    1a94:	93 81       	ldd	r25, Z+3	; 0x03
    1a96:	13 96       	adiw	r26, 0x03	; 3
    1a98:	9c 93       	st	X, r25
    1a9a:	8e 93       	st	-X, r24
    1a9c:	12 97       	sbiw	r26, 0x02	; 2
    1a9e:	e0 e0       	ldi	r30, 0x00	; 0
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa4:	9b 81       	ldd	r25, Y+3	; 0x03
    1aa6:	00 97       	sbiw	r24, 0x00	; 0
    1aa8:	19 f0       	breq	.+6      	; 0x1ab0 <free+0xe4>
    1aaa:	fe 01       	movw	r30, r28
    1aac:	ec 01       	movw	r28, r24
    1aae:	f9 cf       	rjmp	.-14     	; 0x1aa2 <free+0xd6>
    1ab0:	ce 01       	movw	r24, r28
    1ab2:	02 96       	adiw	r24, 0x02	; 2
    1ab4:	28 81       	ld	r18, Y
    1ab6:	39 81       	ldd	r19, Y+1	; 0x01
    1ab8:	82 0f       	add	r24, r18
    1aba:	93 1f       	adc	r25, r19
    1abc:	20 91 71 02 	lds	r18, 0x0271
    1ac0:	30 91 72 02 	lds	r19, 0x0272
    1ac4:	28 17       	cp	r18, r24
    1ac6:	39 07       	cpc	r19, r25
    1ac8:	69 f4       	brne	.+26     	; 0x1ae4 <free+0x118>
    1aca:	30 97       	sbiw	r30, 0x00	; 0
    1acc:	29 f4       	brne	.+10     	; 0x1ad8 <free+0x10c>
    1ace:	10 92 74 02 	sts	0x0274, r1
    1ad2:	10 92 73 02 	sts	0x0273, r1
    1ad6:	02 c0       	rjmp	.+4      	; 0x1adc <free+0x110>
    1ad8:	13 82       	std	Z+3, r1	; 0x03
    1ada:	12 82       	std	Z+2, r1	; 0x02
    1adc:	d0 93 72 02 	sts	0x0272, r29
    1ae0:	c0 93 71 02 	sts	0x0271, r28
    1ae4:	df 91       	pop	r29
    1ae6:	cf 91       	pop	r28
    1ae8:	08 95       	ret

00001aea <strnlen_P>:
    1aea:	fc 01       	movw	r30, r24
    1aec:	05 90       	lpm	r0, Z+
    1aee:	61 50       	subi	r22, 0x01	; 1
    1af0:	70 40       	sbci	r23, 0x00	; 0
    1af2:	01 10       	cpse	r0, r1
    1af4:	d8 f7       	brcc	.-10     	; 0x1aec <strnlen_P+0x2>
    1af6:	80 95       	com	r24
    1af8:	90 95       	com	r25
    1afa:	8e 0f       	add	r24, r30
    1afc:	9f 1f       	adc	r25, r31
    1afe:	08 95       	ret

00001b00 <memset>:
    1b00:	dc 01       	movw	r26, r24
    1b02:	01 c0       	rjmp	.+2      	; 0x1b06 <memset+0x6>
    1b04:	6d 93       	st	X+, r22
    1b06:	41 50       	subi	r20, 0x01	; 1
    1b08:	50 40       	sbci	r21, 0x00	; 0
    1b0a:	e0 f7       	brcc	.-8      	; 0x1b04 <memset+0x4>
    1b0c:	08 95       	ret

00001b0e <strnlen>:
    1b0e:	fc 01       	movw	r30, r24
    1b10:	61 50       	subi	r22, 0x01	; 1
    1b12:	70 40       	sbci	r23, 0x00	; 0
    1b14:	01 90       	ld	r0, Z+
    1b16:	01 10       	cpse	r0, r1
    1b18:	d8 f7       	brcc	.-10     	; 0x1b10 <strnlen+0x2>
    1b1a:	80 95       	com	r24
    1b1c:	90 95       	com	r25
    1b1e:	8e 0f       	add	r24, r30
    1b20:	9f 1f       	adc	r25, r31
    1b22:	08 95       	ret

00001b24 <fputc>:
    1b24:	0f 93       	push	r16
    1b26:	1f 93       	push	r17
    1b28:	cf 93       	push	r28
    1b2a:	df 93       	push	r29
    1b2c:	18 2f       	mov	r17, r24
    1b2e:	09 2f       	mov	r16, r25
    1b30:	eb 01       	movw	r28, r22
    1b32:	8b 81       	ldd	r24, Y+3	; 0x03
    1b34:	81 fd       	sbrc	r24, 1
    1b36:	03 c0       	rjmp	.+6      	; 0x1b3e <fputc+0x1a>
    1b38:	8f ef       	ldi	r24, 0xFF	; 255
    1b3a:	9f ef       	ldi	r25, 0xFF	; 255
    1b3c:	20 c0       	rjmp	.+64     	; 0x1b7e <fputc+0x5a>
    1b3e:	82 ff       	sbrs	r24, 2
    1b40:	10 c0       	rjmp	.+32     	; 0x1b62 <fputc+0x3e>
    1b42:	4e 81       	ldd	r20, Y+6	; 0x06
    1b44:	5f 81       	ldd	r21, Y+7	; 0x07
    1b46:	2c 81       	ldd	r18, Y+4	; 0x04
    1b48:	3d 81       	ldd	r19, Y+5	; 0x05
    1b4a:	42 17       	cp	r20, r18
    1b4c:	53 07       	cpc	r21, r19
    1b4e:	7c f4       	brge	.+30     	; 0x1b6e <fputc+0x4a>
    1b50:	e8 81       	ld	r30, Y
    1b52:	f9 81       	ldd	r31, Y+1	; 0x01
    1b54:	9f 01       	movw	r18, r30
    1b56:	2f 5f       	subi	r18, 0xFF	; 255
    1b58:	3f 4f       	sbci	r19, 0xFF	; 255
    1b5a:	39 83       	std	Y+1, r19	; 0x01
    1b5c:	28 83       	st	Y, r18
    1b5e:	10 83       	st	Z, r17
    1b60:	06 c0       	rjmp	.+12     	; 0x1b6e <fputc+0x4a>
    1b62:	e8 85       	ldd	r30, Y+8	; 0x08
    1b64:	f9 85       	ldd	r31, Y+9	; 0x09
    1b66:	81 2f       	mov	r24, r17
    1b68:	09 95       	icall
    1b6a:	89 2b       	or	r24, r25
    1b6c:	29 f7       	brne	.-54     	; 0x1b38 <fputc+0x14>
    1b6e:	2e 81       	ldd	r18, Y+6	; 0x06
    1b70:	3f 81       	ldd	r19, Y+7	; 0x07
    1b72:	2f 5f       	subi	r18, 0xFF	; 255
    1b74:	3f 4f       	sbci	r19, 0xFF	; 255
    1b76:	3f 83       	std	Y+7, r19	; 0x07
    1b78:	2e 83       	std	Y+6, r18	; 0x06
    1b7a:	81 2f       	mov	r24, r17
    1b7c:	90 2f       	mov	r25, r16
    1b7e:	df 91       	pop	r29
    1b80:	cf 91       	pop	r28
    1b82:	1f 91       	pop	r17
    1b84:	0f 91       	pop	r16
    1b86:	08 95       	ret

00001b88 <__ultoa_invert>:
    1b88:	fa 01       	movw	r30, r20
    1b8a:	aa 27       	eor	r26, r26
    1b8c:	28 30       	cpi	r18, 0x08	; 8
    1b8e:	51 f1       	breq	.+84     	; 0x1be4 <__ultoa_invert+0x5c>
    1b90:	20 31       	cpi	r18, 0x10	; 16
    1b92:	81 f1       	breq	.+96     	; 0x1bf4 <__ultoa_invert+0x6c>
    1b94:	e8 94       	clt
    1b96:	6f 93       	push	r22
    1b98:	6e 7f       	andi	r22, 0xFE	; 254
    1b9a:	6e 5f       	subi	r22, 0xFE	; 254
    1b9c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b9e:	8f 4f       	sbci	r24, 0xFF	; 255
    1ba0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ba2:	af 4f       	sbci	r26, 0xFF	; 255
    1ba4:	b1 e0       	ldi	r27, 0x01	; 1
    1ba6:	3e d0       	rcall	.+124    	; 0x1c24 <__ultoa_invert+0x9c>
    1ba8:	b4 e0       	ldi	r27, 0x04	; 4
    1baa:	3c d0       	rcall	.+120    	; 0x1c24 <__ultoa_invert+0x9c>
    1bac:	67 0f       	add	r22, r23
    1bae:	78 1f       	adc	r23, r24
    1bb0:	89 1f       	adc	r24, r25
    1bb2:	9a 1f       	adc	r25, r26
    1bb4:	a1 1d       	adc	r26, r1
    1bb6:	68 0f       	add	r22, r24
    1bb8:	79 1f       	adc	r23, r25
    1bba:	8a 1f       	adc	r24, r26
    1bbc:	91 1d       	adc	r25, r1
    1bbe:	a1 1d       	adc	r26, r1
    1bc0:	6a 0f       	add	r22, r26
    1bc2:	71 1d       	adc	r23, r1
    1bc4:	81 1d       	adc	r24, r1
    1bc6:	91 1d       	adc	r25, r1
    1bc8:	a1 1d       	adc	r26, r1
    1bca:	20 d0       	rcall	.+64     	; 0x1c0c <__ultoa_invert+0x84>
    1bcc:	09 f4       	brne	.+2      	; 0x1bd0 <__ultoa_invert+0x48>
    1bce:	68 94       	set
    1bd0:	3f 91       	pop	r19
    1bd2:	2a e0       	ldi	r18, 0x0A	; 10
    1bd4:	26 9f       	mul	r18, r22
    1bd6:	11 24       	eor	r1, r1
    1bd8:	30 19       	sub	r19, r0
    1bda:	30 5d       	subi	r19, 0xD0	; 208
    1bdc:	31 93       	st	Z+, r19
    1bde:	de f6       	brtc	.-74     	; 0x1b96 <__ultoa_invert+0xe>
    1be0:	cf 01       	movw	r24, r30
    1be2:	08 95       	ret
    1be4:	46 2f       	mov	r20, r22
    1be6:	47 70       	andi	r20, 0x07	; 7
    1be8:	40 5d       	subi	r20, 0xD0	; 208
    1bea:	41 93       	st	Z+, r20
    1bec:	b3 e0       	ldi	r27, 0x03	; 3
    1bee:	0f d0       	rcall	.+30     	; 0x1c0e <__ultoa_invert+0x86>
    1bf0:	c9 f7       	brne	.-14     	; 0x1be4 <__ultoa_invert+0x5c>
    1bf2:	f6 cf       	rjmp	.-20     	; 0x1be0 <__ultoa_invert+0x58>
    1bf4:	46 2f       	mov	r20, r22
    1bf6:	4f 70       	andi	r20, 0x0F	; 15
    1bf8:	40 5d       	subi	r20, 0xD0	; 208
    1bfa:	4a 33       	cpi	r20, 0x3A	; 58
    1bfc:	18 f0       	brcs	.+6      	; 0x1c04 <__ultoa_invert+0x7c>
    1bfe:	49 5d       	subi	r20, 0xD9	; 217
    1c00:	31 fd       	sbrc	r19, 1
    1c02:	40 52       	subi	r20, 0x20	; 32
    1c04:	41 93       	st	Z+, r20
    1c06:	02 d0       	rcall	.+4      	; 0x1c0c <__ultoa_invert+0x84>
    1c08:	a9 f7       	brne	.-22     	; 0x1bf4 <__ultoa_invert+0x6c>
    1c0a:	ea cf       	rjmp	.-44     	; 0x1be0 <__ultoa_invert+0x58>
    1c0c:	b4 e0       	ldi	r27, 0x04	; 4
    1c0e:	a6 95       	lsr	r26
    1c10:	97 95       	ror	r25
    1c12:	87 95       	ror	r24
    1c14:	77 95       	ror	r23
    1c16:	67 95       	ror	r22
    1c18:	ba 95       	dec	r27
    1c1a:	c9 f7       	brne	.-14     	; 0x1c0e <__ultoa_invert+0x86>
    1c1c:	00 97       	sbiw	r24, 0x00	; 0
    1c1e:	61 05       	cpc	r22, r1
    1c20:	71 05       	cpc	r23, r1
    1c22:	08 95       	ret
    1c24:	9b 01       	movw	r18, r22
    1c26:	ac 01       	movw	r20, r24
    1c28:	0a 2e       	mov	r0, r26
    1c2a:	06 94       	lsr	r0
    1c2c:	57 95       	ror	r21
    1c2e:	47 95       	ror	r20
    1c30:	37 95       	ror	r19
    1c32:	27 95       	ror	r18
    1c34:	ba 95       	dec	r27
    1c36:	c9 f7       	brne	.-14     	; 0x1c2a <__ultoa_invert+0xa2>
    1c38:	62 0f       	add	r22, r18
    1c3a:	73 1f       	adc	r23, r19
    1c3c:	84 1f       	adc	r24, r20
    1c3e:	95 1f       	adc	r25, r21
    1c40:	a0 1d       	adc	r26, r0
    1c42:	08 95       	ret

00001c44 <__prologue_saves__>:
    1c44:	2f 92       	push	r2
    1c46:	3f 92       	push	r3
    1c48:	4f 92       	push	r4
    1c4a:	5f 92       	push	r5
    1c4c:	6f 92       	push	r6
    1c4e:	7f 92       	push	r7
    1c50:	8f 92       	push	r8
    1c52:	9f 92       	push	r9
    1c54:	af 92       	push	r10
    1c56:	bf 92       	push	r11
    1c58:	cf 92       	push	r12
    1c5a:	df 92       	push	r13
    1c5c:	ef 92       	push	r14
    1c5e:	ff 92       	push	r15
    1c60:	0f 93       	push	r16
    1c62:	1f 93       	push	r17
    1c64:	cf 93       	push	r28
    1c66:	df 93       	push	r29
    1c68:	cd b7       	in	r28, 0x3d	; 61
    1c6a:	de b7       	in	r29, 0x3e	; 62
    1c6c:	ca 1b       	sub	r28, r26
    1c6e:	db 0b       	sbc	r29, r27
    1c70:	0f b6       	in	r0, 0x3f	; 63
    1c72:	f8 94       	cli
    1c74:	de bf       	out	0x3e, r29	; 62
    1c76:	0f be       	out	0x3f, r0	; 63
    1c78:	cd bf       	out	0x3d, r28	; 61
    1c7a:	09 94       	ijmp

00001c7c <__epilogue_restores__>:
    1c7c:	2a 88       	ldd	r2, Y+18	; 0x12
    1c7e:	39 88       	ldd	r3, Y+17	; 0x11
    1c80:	48 88       	ldd	r4, Y+16	; 0x10
    1c82:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c84:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c86:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c88:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c8a:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c8c:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c8e:	b9 84       	ldd	r11, Y+9	; 0x09
    1c90:	c8 84       	ldd	r12, Y+8	; 0x08
    1c92:	df 80       	ldd	r13, Y+7	; 0x07
    1c94:	ee 80       	ldd	r14, Y+6	; 0x06
    1c96:	fd 80       	ldd	r15, Y+5	; 0x05
    1c98:	0c 81       	ldd	r16, Y+4	; 0x04
    1c9a:	1b 81       	ldd	r17, Y+3	; 0x03
    1c9c:	aa 81       	ldd	r26, Y+2	; 0x02
    1c9e:	b9 81       	ldd	r27, Y+1	; 0x01
    1ca0:	ce 0f       	add	r28, r30
    1ca2:	d1 1d       	adc	r29, r1
    1ca4:	0f b6       	in	r0, 0x3f	; 63
    1ca6:	f8 94       	cli
    1ca8:	de bf       	out	0x3e, r29	; 62
    1caa:	0f be       	out	0x3f, r0	; 63
    1cac:	cd bf       	out	0x3d, r28	; 61
    1cae:	ed 01       	movw	r28, r26
    1cb0:	08 95       	ret

00001cb2 <_exit>:
    1cb2:	f8 94       	cli

00001cb4 <__stop_program>:
    1cb4:	ff cf       	rjmp	.-2      	; 0x1cb4 <__stop_program>
