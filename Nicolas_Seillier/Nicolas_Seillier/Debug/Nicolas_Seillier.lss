
Nicolas_Seillier.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000180  00800100  00001db0  00001e44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001db0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800280  00800280  00001fc4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001fc4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000270  00000000  00000000  00002020  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000332f  00000000  00000000  00002290  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000def  00000000  00000000  000055bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000dc1  00000000  00000000  000063ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000005a8  00000000  00000000  00007170  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000063a  00000000  00000000  00007718  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000113b  00000000  00000000  00007d52  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001e8  00000000  00000000  00008e8d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__ctors_end>
       4:	0c 94 38 04 	jmp	0x870	; 0x870 <__vector_1>
       8:	0c 94 cb 04 	jmp	0x996	; 0x996 <__vector_2>
       c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      10:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      14:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      18:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      1c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      20:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      24:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      28:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      2c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      30:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      34:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      38:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      3c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      40:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      44:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      48:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      4c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      50:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      54:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      58:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      5c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      60:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      64:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      68:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      6c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	00 00       	nop
      72:	00 00       	nop
      74:	00 5c       	subi	r16, 0xC0	; 192
      76:	00 00       	nop
      78:	0c 00       	.word	0x000c	; ????
      7a:	0c 00       	.word	0x000c	; ????
      7c:	7c 28       	or	r7, r12
      7e:	7c 28       	or	r7, r12
      80:	58 dc       	rcall	.-1872   	; 0xfffff932 <__eeprom_end+0xff7ef932>
      82:	68 00       	.word	0x0068	; ????
      84:	24 10       	cpse	r2, r4
      86:	48 00       	.word	0x0048	; ????
      88:	28 54       	subi	r18, 0x48	; 72
      8a:	28 40       	sbci	r18, 0x08	; 8
      8c:	00 0c       	add	r0, r0
      8e:	00 00       	nop
      90:	00 78       	andi	r16, 0x80	; 128
      92:	84 00       	.word	0x0084	; ????
      94:	84 78       	andi	r24, 0x84	; 132
      96:	00 00       	nop
      98:	54 38       	cpi	r21, 0x84	; 132
      9a:	54 00       	.word	0x0054	; ????
      9c:	10 7c       	andi	r17, 0xC0	; 192
      9e:	10 00       	.word	0x0010	; ????
      a0:	80 40       	sbci	r24, 0x00	; 0
      a2:	00 00       	nop
      a4:	10 10       	cpse	r1, r0
      a6:	10 00       	.word	0x0010	; ????
      a8:	00 40       	sbci	r16, 0x00	; 0
      aa:	00 00       	nop
      ac:	60 10       	cpse	r6, r0
      ae:	0c 00       	.word	0x000c	; ????
      b0:	38 54       	subi	r19, 0x48	; 72
      b2:	38 00       	.word	0x0038	; ????
      b4:	48 7c       	andi	r20, 0xC8	; 200
      b6:	40 00       	.word	0x0040	; ????
      b8:	48 64       	ori	r20, 0x48	; 72
      ba:	58 00       	.word	0x0058	; ????
      bc:	44 54       	subi	r20, 0x44	; 68
      be:	2c 00       	.word	0x002c	; ????
      c0:	1c 10       	cpse	r1, r12
      c2:	7c 00       	.word	0x007c	; ????
      c4:	5c 54       	subi	r21, 0x4C	; 76
      c6:	24 00       	.word	0x0024	; ????
      c8:	38 54       	subi	r19, 0x48	; 72
      ca:	24 00       	.word	0x0024	; ????
      cc:	64 14       	cp	r6, r4
      ce:	0c 00       	.word	0x000c	; ????
      d0:	68 54       	subi	r22, 0x48	; 72
      d2:	2c 00       	.word	0x002c	; ????
      d4:	48 54       	subi	r20, 0x48	; 72
      d6:	38 00       	.word	0x0038	; ????
      d8:	00 48       	sbci	r16, 0x80	; 128
      da:	00 00       	nop
      dc:	80 48       	sbci	r24, 0x80	; 128
      de:	00 00       	nop
      e0:	10 28       	or	r1, r0
      e2:	44 00       	.word	0x0044	; ????
      e4:	28 28       	or	r2, r8
      e6:	28 00       	.word	0x0028	; ????
      e8:	44 28       	or	r4, r4
      ea:	10 00       	.word	0x0010	; ????
      ec:	04 54       	subi	r16, 0x44	; 68
      ee:	08 00       	.word	0x0008	; ????
      f0:	38 44       	sbci	r19, 0x48	; 72
      f2:	5c 00       	.word	0x005c	; ????
      f4:	78 14       	cp	r7, r8
      f6:	78 00       	.word	0x0078	; ????
      f8:	7c 54       	subi	r23, 0x4C	; 76
      fa:	28 00       	.word	0x0028	; ????
      fc:	38 44       	sbci	r19, 0x48	; 72
      fe:	28 00       	.word	0x0028	; ????
     100:	7c 44       	sbci	r23, 0x4C	; 76
     102:	38 00       	.word	0x0038	; ????
     104:	7c 54       	subi	r23, 0x4C	; 76
     106:	44 00       	.word	0x0044	; ????
     108:	7c 14       	cp	r7, r12
     10a:	04 00       	.word	0x0004	; ????
     10c:	38 44       	sbci	r19, 0x48	; 72
     10e:	74 00       	.word	0x0074	; ????
     110:	7c 10       	cpse	r7, r12
     112:	7c 00       	.word	0x007c	; ????
     114:	44 7c       	andi	r20, 0xC4	; 196
     116:	44 00       	.word	0x0044	; ????
     118:	20 40       	sbci	r18, 0x00	; 0
     11a:	3c 00       	.word	0x003c	; ????
     11c:	7c 10       	cpse	r7, r12
     11e:	6c 00       	.word	0x006c	; ????
     120:	7c 40       	sbci	r23, 0x0C	; 12
     122:	40 00       	.word	0x0040	; ????
     124:	7c 18       	sub	r7, r12
     126:	7c 00       	.word	0x007c	; ????
     128:	78 10       	cpse	r7, r8
     12a:	3c 00       	.word	0x003c	; ????
     12c:	38 44       	sbci	r19, 0x48	; 72
     12e:	38 00       	.word	0x0038	; ????
     130:	7c 14       	cp	r7, r12
     132:	08 00       	.word	0x0008	; ????
     134:	38 44       	sbci	r19, 0x48	; 72
     136:	b8 00       	.word	0x00b8	; ????
     138:	7c 14       	cp	r7, r12
     13a:	68 00       	.word	0x0068	; ????
     13c:	48 54       	subi	r20, 0x48	; 72
     13e:	24 00       	.word	0x0024	; ????
     140:	04 7c       	andi	r16, 0xC4	; 196
     142:	04 00       	.word	0x0004	; ????
     144:	7c 40       	sbci	r23, 0x0C	; 12
     146:	7c 00       	.word	0x007c	; ????
     148:	3c 60       	ori	r19, 0x0C	; 12
     14a:	3c 00       	.word	0x003c	; ????
     14c:	7c 30       	cpi	r23, 0x0C	; 12
     14e:	7c 00       	.word	0x007c	; ????
     150:	6c 10       	cpse	r6, r12
     152:	6c 00       	.word	0x006c	; ????
     154:	0c 70       	andi	r16, 0x0C	; 12
     156:	0c 00       	.word	0x000c	; ????
     158:	64 54       	subi	r22, 0x44	; 68
     15a:	4c 00       	.word	0x004c	; ????
     15c:	00 7c       	andi	r16, 0xC0	; 192
     15e:	44 00       	.word	0x0044	; ????
     160:	0c 10       	cpse	r0, r12
     162:	60 00       	.word	0x0060	; ????
     164:	44 7c       	andi	r20, 0xC4	; 196
     166:	00 00       	nop
     168:	08 04       	cpc	r0, r8
     16a:	08 00       	.word	0x0008	; ????
     16c:	80 80       	ld	r8, Z
     16e:	80 00       	.word	0x0080	; ????
     170:	00 04       	cpc	r0, r0
     172:	08 00       	.word	0x0008	; ????
     174:	30 48       	sbci	r19, 0x80	; 128
     176:	78 00       	.word	0x0078	; ????
     178:	7c 48       	sbci	r23, 0x8C	; 140
     17a:	30 00       	.word	0x0030	; ????
     17c:	30 48       	sbci	r19, 0x80	; 128
     17e:	48 00       	.word	0x0048	; ????
     180:	30 48       	sbci	r19, 0x80	; 128
     182:	7c 00       	.word	0x007c	; ????
     184:	30 68       	ori	r19, 0x80	; 128
     186:	50 00       	.word	0x0050	; ????
     188:	10 78       	andi	r17, 0x80	; 128
     18a:	14 00       	.word	0x0014	; ????
     18c:	90 a8       	ldd	r9, Z+48	; 0x30
     18e:	78 00       	.word	0x0078	; ????
     190:	7c 08       	sbc	r7, r12
     192:	70 00       	.word	0x0070	; ????
     194:	50 74       	andi	r21, 0x40	; 64
     196:	40 00       	.word	0x0040	; ????
     198:	80 80       	ld	r8, Z
     19a:	74 00       	.word	0x0074	; ????
     19c:	7c 10       	cpse	r7, r12
     19e:	68 00       	.word	0x0068	; ????
     1a0:	44 7c       	andi	r20, 0xC4	; 196
     1a2:	40 00       	.word	0x0040	; ????
     1a4:	78 10       	cpse	r7, r8
     1a6:	78 00       	.word	0x0078	; ????
     1a8:	78 08       	sbc	r7, r8
     1aa:	70 00       	.word	0x0070	; ????
     1ac:	30 48       	sbci	r19, 0x80	; 128
     1ae:	30 00       	.word	0x0030	; ????
     1b0:	f8 28       	or	r15, r8
     1b2:	10 00       	.word	0x0010	; ????
     1b4:	30 48       	sbci	r19, 0x80	; 128
     1b6:	f8 00       	.word	0x00f8	; ????
     1b8:	78 10       	cpse	r7, r8
     1ba:	08 00       	.word	0x0008	; ????
     1bc:	50 58       	subi	r21, 0x80	; 128
     1be:	28 00       	.word	0x0028	; ????
     1c0:	08 3c       	cpi	r16, 0xC8	; 200
     1c2:	48 00       	.word	0x0048	; ????
     1c4:	38 40       	sbci	r19, 0x08	; 8
     1c6:	78 00       	.word	0x0078	; ????
     1c8:	38 40       	sbci	r19, 0x08	; 8
     1ca:	38 00       	.word	0x0038	; ????
     1cc:	78 20       	and	r7, r8
     1ce:	78 00       	.word	0x0078	; ????
     1d0:	48 30       	cpi	r20, 0x08	; 8
     1d2:	48 00       	.word	0x0048	; ????
     1d4:	98 a0       	ldd	r9, Y+32	; 0x20
     1d6:	78 00       	.word	0x0078	; ????
     1d8:	48 68       	ori	r20, 0x88	; 136
     1da:	58 00       	.word	0x0058	; ????
     1dc:	10 78       	andi	r17, 0x80	; 128
     1de:	84 00       	.word	0x0084	; ????
     1e0:	00 7c       	andi	r16, 0xC0	; 192
     1e2:	00 00       	nop
     1e4:	84 78       	andi	r24, 0x84	; 132
     1e6:	10 00       	.word	0x0010	; ????
     1e8:	08 04       	cpc	r0, r8
     1ea:	08 04       	cpc	r0, r8

000001ec <__ctors_end>:
     1ec:	11 24       	eor	r1, r1
     1ee:	1f be       	out	0x3f, r1	; 63
     1f0:	cf ef       	ldi	r28, 0xFF	; 255
     1f2:	d4 e0       	ldi	r29, 0x04	; 4
     1f4:	de bf       	out	0x3e, r29	; 62
     1f6:	cd bf       	out	0x3d, r28	; 61

000001f8 <__do_copy_data>:
     1f8:	12 e0       	ldi	r17, 0x02	; 2
     1fa:	a0 e0       	ldi	r26, 0x00	; 0
     1fc:	b1 e0       	ldi	r27, 0x01	; 1
     1fe:	e0 eb       	ldi	r30, 0xB0	; 176
     200:	fd e1       	ldi	r31, 0x1D	; 29
     202:	02 c0       	rjmp	.+4      	; 0x208 <__do_copy_data+0x10>
     204:	05 90       	lpm	r0, Z+
     206:	0d 92       	st	X+, r0
     208:	a0 38       	cpi	r26, 0x80	; 128
     20a:	b1 07       	cpc	r27, r17
     20c:	d9 f7       	brne	.-10     	; 0x204 <__do_copy_data+0xc>

0000020e <__do_clear_bss>:
     20e:	22 e0       	ldi	r18, 0x02	; 2
     210:	a0 e8       	ldi	r26, 0x80	; 128
     212:	b2 e0       	ldi	r27, 0x02	; 2
     214:	01 c0       	rjmp	.+2      	; 0x218 <.do_clear_bss_start>

00000216 <.do_clear_bss_loop>:
     216:	1d 92       	st	X+, r1

00000218 <.do_clear_bss_start>:
     218:	af 38       	cpi	r26, 0x8F	; 143
     21a:	b2 07       	cpc	r27, r18
     21c:	e1 f7       	brne	.-8      	; 0x216 <.do_clear_bss_loop>
     21e:	0e 94 4e 06 	call	0xc9c	; 0xc9c <main>
     222:	0c 94 d6 0e 	jmp	0x1dac	; 0x1dac <_exit>

00000226 <__bad_interrupt>:
     226:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000022a <ADC_Convert>:

uint8_t ADC_Convert(uint8_t channel)
{
	/* Start conversion on the selected channel: write on command pins */
	volatile char* adc = (char *) ADC;
	adc[0] = channel;
     22a:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     22e:	83 ef       	ldi	r24, 0xF3	; 243
     230:	91 e0       	ldi	r25, 0x01	; 1
     232:	01 97       	sbiw	r24, 0x01	; 1
     234:	f1 f7       	brne	.-4      	; 0x232 <ADC_Convert+0x8>
     236:	00 c0       	rjmp	.+0      	; 0x238 <ADC_Convert+0xe>
     238:	00 00       	nop
	/* Wait for the conversion to be performed */
	_delay_ms(2);
	/* Read the result */
	return adc[0];
     23a:	80 91 00 14 	lds	r24, 0x1400
}
     23e:	08 95       	ret

00000240 <CAN_init>:
#include "MCP2515.h"
#include "MCP251DEFS.h"
#include "CAN.h"

void CAN_init()
{
     240:	0f 93       	push	r16
     242:	1f 93       	push	r17
     244:	cf 93       	push	r28
     246:	df 93       	push	r29
     248:	1f 92       	push	r1
     24a:	cd b7       	in	r28, 0x3d	; 61
     24c:	de b7       	in	r29, 0x3e	; 62
	SPI_Init();
     24e:	0e 94 3b 08 	call	0x1076	; 0x1076 <SPI_Init>
	MCP2515_RESET();
     252:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <MCP2515_RESET>
     256:	2f ef       	ldi	r18, 0xFF	; 255
     258:	8f e7       	ldi	r24, 0x7F	; 127
     25a:	91 e0       	ldi	r25, 0x01	; 1
     25c:	21 50       	subi	r18, 0x01	; 1
     25e:	80 40       	sbci	r24, 0x00	; 0
     260:	90 40       	sbci	r25, 0x00	; 0
     262:	e1 f7       	brne	.-8      	; 0x25c <CAN_init+0x1c>
     264:	00 c0       	rjmp	.+0      	; 0x266 <CAN_init+0x26>
     266:	00 c0       	rjmp	.+0      	; 0x268 <CAN_init+0x28>
	_delay_ms(100);
	
	/* no filter */
	//MCP2515_BIT_MODIFY(MCP_RXB0CTRL, 0b01100100, 0b11111111);
	//MCP2515_BIT_MODIFY(MCP_RXB1CTRL, 0b01100100, 0b11111111);
	volatile char state = MCP2515_READ(MCP_CANSTAT);
     268:	8e e0       	ldi	r24, 0x0E	; 14
     26a:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <MCP2515_READ>
     26e:	89 83       	std	Y+1, r24	; 0x01
	while((state & MODE_MASK) != MODE_CONFIG)
     270:	89 81       	ldd	r24, Y+1	; 0x01
     272:	80 7e       	andi	r24, 0xE0	; 224
     274:	80 38       	cpi	r24, 0x80	; 128
     276:	c9 f0       	breq	.+50     	; 0x2aa <CAN_init+0x6a>
	{
		printf("Error in CAN communication\n");
		printf("Mode is %c\n", state);
     278:	03 e2       	ldi	r16, 0x23	; 35
     27a:	11 e0       	ldi	r17, 0x01	; 1
	//MCP2515_BIT_MODIFY(MCP_RXB0CTRL, 0b01100100, 0b11111111);
	//MCP2515_BIT_MODIFY(MCP_RXB1CTRL, 0b01100100, 0b11111111);
	volatile char state = MCP2515_READ(MCP_CANSTAT);
	while((state & MODE_MASK) != MODE_CONFIG)
	{
		printf("Error in CAN communication\n");
     27c:	88 e0       	ldi	r24, 0x08	; 8
     27e:	91 e0       	ldi	r25, 0x01	; 1
     280:	0e 94 b0 0a 	call	0x1560	; 0x1560 <puts>
		printf("Mode is %c\n", state);
     284:	89 81       	ldd	r24, Y+1	; 0x01
     286:	1f 92       	push	r1
     288:	8f 93       	push	r24
     28a:	1f 93       	push	r17
     28c:	0f 93       	push	r16
     28e:	0e 94 9c 0a 	call	0x1538	; 0x1538 <printf>
		state = MCP2515_READ(MCP_CANSTAT);
     292:	8e e0       	ldi	r24, 0x0E	; 14
     294:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <MCP2515_READ>
     298:	89 83       	std	Y+1, r24	; 0x01
	
	/* no filter */
	//MCP2515_BIT_MODIFY(MCP_RXB0CTRL, 0b01100100, 0b11111111);
	//MCP2515_BIT_MODIFY(MCP_RXB1CTRL, 0b01100100, 0b11111111);
	volatile char state = MCP2515_READ(MCP_CANSTAT);
	while((state & MODE_MASK) != MODE_CONFIG)
     29a:	89 81       	ldd	r24, Y+1	; 0x01
     29c:	80 7e       	andi	r24, 0xE0	; 224
     29e:	0f 90       	pop	r0
     2a0:	0f 90       	pop	r0
     2a2:	0f 90       	pop	r0
     2a4:	0f 90       	pop	r0
     2a6:	80 38       	cpi	r24, 0x80	; 128
     2a8:	49 f7       	brne	.-46     	; 0x27c <CAN_init+0x3c>
		printf("Mode is %c\n", state);
		state = MCP2515_READ(MCP_CANSTAT);
	}
	
	/*loop back mode*/
	MCP2515_BIT_MODIFY(MCP_CANCTRL, MODE_MASK, MODE_LOOPBACK);
     2aa:	40 e4       	ldi	r20, 0x40	; 64
     2ac:	60 ee       	ldi	r22, 0xE0	; 224
     2ae:	8f e0       	ldi	r24, 0x0F	; 15
     2b0:	0e 94 1e 04 	call	0x83c	; 0x83c <MCP2515_BIT_MODIFY>
	
	/*enable interrupts*/
	MCP2515_BIT_MODIFY(MCP_CANINTE, 0b00000001, 0b00000001);
     2b4:	41 e0       	ldi	r20, 0x01	; 1
     2b6:	61 e0       	ldi	r22, 0x01	; 1
     2b8:	8b e2       	ldi	r24, 0x2B	; 43
     2ba:	0e 94 1e 04 	call	0x83c	; 0x83c <MCP2515_BIT_MODIFY>
	
	state = MCP2515_READ(MCP_CANSTAT);
     2be:	8e e0       	ldi	r24, 0x0E	; 14
     2c0:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <MCP2515_READ>
     2c4:	89 83       	std	Y+1, r24	; 0x01
	while((state & MODE_MASK) != MODE_LOOPBACK)
     2c6:	89 81       	ldd	r24, Y+1	; 0x01
     2c8:	80 7e       	andi	r24, 0xE0	; 224
     2ca:	80 34       	cpi	r24, 0x40	; 64
     2cc:	b9 f0       	breq	.+46     	; 0x2fc <CAN_init+0xbc>
	{
		printf("Error in CAN communication\n");
		char state = MCP2515_READ(MCP_CANSTAT);
		printf("Mode is %c\n", state);
     2ce:	03 e2       	ldi	r16, 0x23	; 35
     2d0:	11 e0       	ldi	r17, 0x01	; 1
	MCP2515_BIT_MODIFY(MCP_CANINTE, 0b00000001, 0b00000001);
	
	state = MCP2515_READ(MCP_CANSTAT);
	while((state & MODE_MASK) != MODE_LOOPBACK)
	{
		printf("Error in CAN communication\n");
     2d2:	88 e0       	ldi	r24, 0x08	; 8
     2d4:	91 e0       	ldi	r25, 0x01	; 1
     2d6:	0e 94 b0 0a 	call	0x1560	; 0x1560 <puts>
		char state = MCP2515_READ(MCP_CANSTAT);
     2da:	8e e0       	ldi	r24, 0x0E	; 14
     2dc:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <MCP2515_READ>
		printf("Mode is %c\n", state);
     2e0:	1f 92       	push	r1
     2e2:	8f 93       	push	r24
     2e4:	1f 93       	push	r17
     2e6:	0f 93       	push	r16
     2e8:	0e 94 9c 0a 	call	0x1538	; 0x1538 <printf>
	
	/*enable interrupts*/
	MCP2515_BIT_MODIFY(MCP_CANINTE, 0b00000001, 0b00000001);
	
	state = MCP2515_READ(MCP_CANSTAT);
	while((state & MODE_MASK) != MODE_LOOPBACK)
     2ec:	89 81       	ldd	r24, Y+1	; 0x01
     2ee:	80 7e       	andi	r24, 0xE0	; 224
     2f0:	0f 90       	pop	r0
     2f2:	0f 90       	pop	r0
     2f4:	0f 90       	pop	r0
     2f6:	0f 90       	pop	r0
     2f8:	80 34       	cpi	r24, 0x40	; 64
     2fa:	59 f7       	brne	.-42     	; 0x2d2 <CAN_init+0x92>
		printf("Error in CAN communication\n");
		char state = MCP2515_READ(MCP_CANSTAT);
		printf("Mode is %c\n", state);
	}
	
}
     2fc:	0f 90       	pop	r0
     2fe:	df 91       	pop	r29
     300:	cf 91       	pop	r28
     302:	1f 91       	pop	r17
     304:	0f 91       	pop	r16
     306:	08 95       	ret

00000308 <CAN_send>:

void CAN_send(MSG* message)
{	
     308:	ef 92       	push	r14
     30a:	ff 92       	push	r15
     30c:	0f 93       	push	r16
     30e:	1f 93       	push	r17
     310:	cf 93       	push	r28
     312:	df 93       	push	r29
     314:	7c 01       	movw	r14, r24
	/*write ID*/
	int ID_l = (message->ID & 0x07) << 5;
     316:	fc 01       	movw	r30, r24
     318:	c0 81       	ld	r28, Z
     31a:	d1 81       	ldd	r29, Z+1	; 0x01
	int ID_h = (message->ID & 0xFFF8) >> 3;
     31c:	be 01       	movw	r22, r28
     31e:	76 95       	lsr	r23
     320:	67 95       	ror	r22
     322:	76 95       	lsr	r23
     324:	67 95       	ror	r22
     326:	76 95       	lsr	r23
     328:	67 95       	ror	r22
	MCP2515_WRITE(MCP_TXB0SIDH,ID_h);
     32a:	81 e3       	ldi	r24, 0x31	; 49
     32c:	0e 94 02 04 	call	0x804	; 0x804 <MCP2515_WRITE>
}

void CAN_send(MSG* message)
{	
	/*write ID*/
	int ID_l = (message->ID & 0x07) << 5;
     330:	ae 01       	movw	r20, r28
     332:	44 0f       	add	r20, r20
     334:	55 1f       	adc	r21, r21
     336:	42 95       	swap	r20
     338:	52 95       	swap	r21
     33a:	50 7f       	andi	r21, 0xF0	; 240
     33c:	54 27       	eor	r21, r20
     33e:	40 7f       	andi	r20, 0xF0	; 240
     340:	54 27       	eor	r21, r20
     342:	55 27       	eor	r21, r21
	int ID_h = (message->ID & 0xFFF8) >> 3;
	MCP2515_WRITE(MCP_TXB0SIDH,ID_h);
	MCP2515_BIT_MODIFY(MCP_TXB0SIDL,0xE0,ID_l);
     344:	60 ee       	ldi	r22, 0xE0	; 224
     346:	82 e3       	ldi	r24, 0x32	; 50
     348:	0e 94 1e 04 	call	0x83c	; 0x83c <MCP2515_BIT_MODIFY>
	//MCP2515_WRITE(MCP_TXB0SIDH,message->ID >> 8);
	//MCP2515_WRITE(MCP_TXB0SIDL,message->ID & 0xE0);
	/*write data length*/
	int length = message->length & 0x0F;
     34c:	f7 01       	movw	r30, r14
     34e:	42 81       	ldd	r20, Z+2	; 0x02
     350:	53 81       	ldd	r21, Z+3	; 0x03
     352:	4f 70       	andi	r20, 0x0F	; 15
     354:	55 27       	eor	r21, r21
	MCP2515_BIT_MODIFY(MCP_TXB0DLC,0x0F,length);
     356:	6f e0       	ldi	r22, 0x0F	; 15
     358:	85 e3       	ldi	r24, 0x35	; 53
     35a:	0e 94 1e 04 	call	0x83c	; 0x83c <MCP2515_BIT_MODIFY>
	
	/*write the message in the chosen buffer*/
	for (int i=0; i<message->length; i++)
     35e:	f7 01       	movw	r30, r14
     360:	82 81       	ldd	r24, Z+2	; 0x02
     362:	93 81       	ldd	r25, Z+3	; 0x03
     364:	18 16       	cp	r1, r24
     366:	19 06       	cpc	r1, r25
     368:	9c f4       	brge	.+38     	; 0x390 <CAN_send+0x88>
     36a:	87 01       	movw	r16, r14
     36c:	0c 5f       	subi	r16, 0xFC	; 252
     36e:	1f 4f       	sbci	r17, 0xFF	; 255
     370:	c0 e0       	ldi	r28, 0x00	; 0
     372:	d0 e0       	ldi	r29, 0x00	; 0
	{
		MCP2515_WRITE(MCP_TXB0D0+i,message->data[i]);
     374:	f8 01       	movw	r30, r16
     376:	61 91       	ld	r22, Z+
     378:	8f 01       	movw	r16, r30
     37a:	8c 2f       	mov	r24, r28
     37c:	8a 5c       	subi	r24, 0xCA	; 202
     37e:	0e 94 02 04 	call	0x804	; 0x804 <MCP2515_WRITE>
	/*write data length*/
	int length = message->length & 0x0F;
	MCP2515_BIT_MODIFY(MCP_TXB0DLC,0x0F,length);
	
	/*write the message in the chosen buffer*/
	for (int i=0; i<message->length; i++)
     382:	21 96       	adiw	r28, 0x01	; 1
     384:	f7 01       	movw	r30, r14
     386:	22 81       	ldd	r18, Z+2	; 0x02
     388:	33 81       	ldd	r19, Z+3	; 0x03
     38a:	c2 17       	cp	r28, r18
     38c:	d3 07       	cpc	r29, r19
     38e:	94 f3       	brlt	.-28     	; 0x374 <CAN_send+0x6c>
	//MCP2515_BIT_MODIFY(0x0D,0b00000111,0b00000111);
		
	/*loop back mode*/
	//MCP2515_BIT_MODIFY(MCP_CANCTRL,0b11100000,0b01000000);
	
	MCP2515_REQUEST_TO_SEND();
     390:	0e 94 16 04 	call	0x82c	; 0x82c <MCP2515_REQUEST_TO_SEND>
}
     394:	df 91       	pop	r29
     396:	cf 91       	pop	r28
     398:	1f 91       	pop	r17
     39a:	0f 91       	pop	r16
     39c:	ff 90       	pop	r15
     39e:	ef 90       	pop	r14
     3a0:	08 95       	ret

000003a2 <CAN_receive>:

MSG CAN_receive()
{
     3a2:	af 92       	push	r10
     3a4:	bf 92       	push	r11
     3a6:	cf 92       	push	r12
     3a8:	df 92       	push	r13
     3aa:	ef 92       	push	r14
     3ac:	ff 92       	push	r15
     3ae:	0f 93       	push	r16
     3b0:	1f 93       	push	r17
     3b2:	cf 93       	push	r28
     3b4:	df 93       	push	r29
     3b6:	cd b7       	in	r28, 0x3d	; 61
     3b8:	de b7       	in	r29, 0x3e	; 62
     3ba:	2c 97       	sbiw	r28, 0x0c	; 12
     3bc:	0f b6       	in	r0, 0x3f	; 63
     3be:	f8 94       	cli
     3c0:	de bf       	out	0x3e, r29	; 62
     3c2:	0f be       	out	0x3f, r0	; 63
     3c4:	cd bf       	out	0x3d, r28	; 61
     3c6:	6c 01       	movw	r12, r24
	if((MCP2515_READ(MCP_CANINTF) | 0x01) == 0x01)
     3c8:	8c e2       	ldi	r24, 0x2C	; 44
     3ca:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <MCP2515_READ>
     3ce:	81 60       	ori	r24, 0x01	; 1
     3d0:	81 30       	cpi	r24, 0x01	; 1
     3d2:	09 f0       	breq	.+2      	; 0x3d6 <CAN_receive+0x34>
     3d4:	3f c0       	rjmp	.+126    	; 0x454 <CAN_receive+0xb2>
	{
		printf("Buffer 0\n");
     3d6:	8f e2       	ldi	r24, 0x2F	; 47
     3d8:	91 e0       	ldi	r25, 0x01	; 1
     3da:	0e 94 b0 0a 	call	0x1560	; 0x1560 <puts>
		//int ID_h = MCP2515_READ(MCP_RXB0SIDH);
	
		//int ID_l = MCP2515_READ(MCP_RXB0SIDL);
	
		int length = MCP2515_READ(MCP_RXB0DLC);
     3de:	85 e6       	ldi	r24, 0x65	; 101
     3e0:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <MCP2515_READ>
     3e4:	a8 2e       	mov	r10, r24
	
		MSG message;
		for (int i=0; i<length; i++)
     3e6:	88 23       	and	r24, r24
     3e8:	a1 f0       	breq	.+40     	; 0x412 <CAN_receive+0x70>
     3ea:	8e 01       	movw	r16, r28
     3ec:	0b 5f       	subi	r16, 0xFB	; 251
     3ee:	1f 4f       	sbci	r17, 0xFF	; 255
     3f0:	78 01       	movw	r14, r16
     3f2:	e8 0e       	add	r14, r24
     3f4:	f1 1c       	adc	r15, r1
     3f6:	0f 2e       	mov	r0, r31
     3f8:	f6 e6       	ldi	r31, 0x66	; 102
     3fa:	bf 2e       	mov	r11, r31
     3fc:	f0 2d       	mov	r31, r0
		{
			message.data[i] = MCP2515_READ(MCP_RXB0D0+i);
     3fe:	8b 2d       	mov	r24, r11
     400:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <MCP2515_READ>
     404:	f8 01       	movw	r30, r16
     406:	81 93       	st	Z+, r24
     408:	8f 01       	movw	r16, r30
     40a:	b3 94       	inc	r11
		//int ID_l = MCP2515_READ(MCP_RXB0SIDL);
	
		int length = MCP2515_READ(MCP_RXB0DLC);
	
		MSG message;
		for (int i=0; i<length; i++)
     40c:	ee 15       	cp	r30, r14
     40e:	ff 05       	cpc	r31, r15
     410:	b1 f7       	brne	.-20     	; 0x3fe <CAN_receive+0x5c>
		{
			message.data[i] = MCP2515_READ(MCP_RXB0D0+i);
		
		}
		
		MCP2515_BIT_MODIFY(MCP_CANINTF,0b00000001,0b00000000);
     412:	40 e0       	ldi	r20, 0x00	; 0
     414:	61 e0       	ldi	r22, 0x01	; 1
     416:	8c e2       	ldi	r24, 0x2C	; 44
     418:	0e 94 1e 04 	call	0x83c	; 0x83c <MCP2515_BIT_MODIFY>
		
		//message.ID = ((ID_h << 3) + ((ID_l >> 5) & 0x7)) & 0xFF;
		message.ID = MCP2515_READ(MCP_RXB0SIDH)<<8 |  MCP2515_READ(MCP_RXB0SIDL);
     41c:	81 e6       	ldi	r24, 0x61	; 97
     41e:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <MCP2515_READ>
     422:	18 2f       	mov	r17, r24
     424:	82 e6       	ldi	r24, 0x62	; 98
     426:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <MCP2515_READ>
     42a:	21 2f       	mov	r18, r17
     42c:	30 e0       	ldi	r19, 0x00	; 0
     42e:	32 2f       	mov	r19, r18
     430:	22 27       	eor	r18, r18
     432:	28 2b       	or	r18, r24
		message.length = length & 0x0F;
		
		return message;
     434:	3a 83       	std	Y+2, r19	; 0x02
     436:	29 83       	std	Y+1, r18	; 0x01
		
		MCP2515_BIT_MODIFY(MCP_CANINTF,0b00000001,0b00000000);
		
		//message.ID = ((ID_h << 3) + ((ID_l >> 5) & 0x7)) & 0xFF;
		message.ID = MCP2515_READ(MCP_RXB0SIDH)<<8 |  MCP2515_READ(MCP_RXB0SIDL);
		message.length = length & 0x0F;
     438:	8a 2d       	mov	r24, r10
     43a:	8f 70       	andi	r24, 0x0F	; 15
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	9c 83       	std	Y+4, r25	; 0x04
     440:	8b 83       	std	Y+3, r24	; 0x03
		
		return message;
     442:	8c e0       	ldi	r24, 0x0C	; 12
     444:	fe 01       	movw	r30, r28
     446:	31 96       	adiw	r30, 0x01	; 1
     448:	d6 01       	movw	r26, r12
     44a:	01 90       	ld	r0, Z+
     44c:	0d 92       	st	X+, r0
     44e:	8a 95       	dec	r24
     450:	e1 f7       	brne	.-8      	; 0x44a <CAN_receive+0xa8>
     452:	04 c0       	rjmp	.+8      	; 0x45c <CAN_receive+0xba>
	}
	
	else{
		 printf("Nothing in buffer\n");
     454:	88 e3       	ldi	r24, 0x38	; 56
     456:	91 e0       	ldi	r25, 0x01	; 1
     458:	0e 94 b0 0a 	call	0x1560	; 0x1560 <puts>
		 return;
	}
     45c:	c6 01       	movw	r24, r12
     45e:	2c 96       	adiw	r28, 0x0c	; 12
     460:	0f b6       	in	r0, 0x3f	; 63
     462:	f8 94       	cli
     464:	de bf       	out	0x3e, r29	; 62
     466:	0f be       	out	0x3f, r0	; 63
     468:	cd bf       	out	0x3d, r28	; 61
     46a:	df 91       	pop	r29
     46c:	cf 91       	pop	r28
     46e:	1f 91       	pop	r17
     470:	0f 91       	pop	r16
     472:	ff 90       	pop	r15
     474:	ef 90       	pop	r14
     476:	df 90       	pop	r13
     478:	cf 90       	pop	r12
     47a:	bf 90       	pop	r11
     47c:	af 90       	pop	r10
     47e:	08 95       	ret

00000480 <draw_home>:
#include "OLED.h"
#include "Framework.h"

void draw_home()
{
	OLED_Reset();
     480:	0e 94 17 07 	call	0xe2e	; 0xe2e <OLED_Reset>
	OLED_pos(1, 4);
     484:	64 e0       	ldi	r22, 0x04	; 4
     486:	81 e0       	ldi	r24, 0x01	; 1
     488:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
	OLED_print_string("Welcome to the best ping pong");
     48c:	8a e4       	ldi	r24, 0x4A	; 74
     48e:	91 e0       	ldi	r25, 0x01	; 1
     490:	0e 94 c4 07 	call	0xf88	; 0xf88 <OLED_print_string>
	OLED_pos(3, 28);
     494:	6c e1       	ldi	r22, 0x1C	; 28
     496:	83 e0       	ldi	r24, 0x03	; 3
     498:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
	OLED_print_string("game in the world!");
     49c:	88 e6       	ldi	r24, 0x68	; 104
     49e:	91 e0       	ldi	r25, 0x01	; 1
     4a0:	0e 94 c4 07 	call	0xf88	; 0xf88 <OLED_print_string>
	OLED_pos(7, 20);
     4a4:	64 e1       	ldi	r22, 0x14	; 20
     4a6:	87 e0       	ldi	r24, 0x07	; 7
     4a8:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
	OLED_print_string("Touch right to start!");
     4ac:	8b e7       	ldi	r24, 0x7B	; 123
     4ae:	91 e0       	ldi	r25, 0x01	; 1
     4b0:	0e 94 c4 07 	call	0xf88	; 0xf88 <OLED_print_string>
     4b4:	08 95       	ret

000004b6 <draw_main_menu>:
}

void draw_main_menu()
{
	OLED_Reset();
     4b6:	0e 94 17 07 	call	0xe2e	; 0xe2e <OLED_Reset>
	OLED_pos(0, 46);
     4ba:	6e e2       	ldi	r22, 0x2E	; 46
     4bc:	80 e0       	ldi	r24, 0x00	; 0
     4be:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
	OLED_print_string("Main menu");	
     4c2:	81 e9       	ldi	r24, 0x91	; 145
     4c4:	91 e0       	ldi	r25, 0x01	; 1
     4c6:	0e 94 c4 07 	call	0xf88	; 0xf88 <OLED_print_string>
	OLED_pos(2, 8);
     4ca:	68 e0       	ldi	r22, 0x08	; 8
     4cc:	82 e0       	ldi	r24, 0x02	; 2
     4ce:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
	OLED_print_arrow();
     4d2:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <OLED_print_arrow>
	OLED_pos(2, 20);
     4d6:	64 e1       	ldi	r22, 0x14	; 20
     4d8:	82 e0       	ldi	r24, 0x02	; 2
     4da:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
	OLED_print_string("One-player mode");
     4de:	8b e9       	ldi	r24, 0x9B	; 155
     4e0:	91 e0       	ldi	r25, 0x01	; 1
     4e2:	0e 94 c4 07 	call	0xf88	; 0xf88 <OLED_print_string>
	OLED_pos(3, 20);
     4e6:	64 e1       	ldi	r22, 0x14	; 20
     4e8:	83 e0       	ldi	r24, 0x03	; 3
     4ea:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
	OLED_print_string("Two-players mode");
     4ee:	8b ea       	ldi	r24, 0xAB	; 171
     4f0:	91 e0       	ldi	r25, 0x01	; 1
     4f2:	0e 94 c4 07 	call	0xf88	; 0xf88 <OLED_print_string>
	OLED_pos(4, 20);
     4f6:	64 e1       	ldi	r22, 0x14	; 20
     4f8:	84 e0       	ldi	r24, 0x04	; 4
     4fa:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
	OLED_print_string("Highscores");
     4fe:	8c eb       	ldi	r24, 0xBC	; 188
     500:	91 e0       	ldi	r25, 0x01	; 1
     502:	0e 94 c4 07 	call	0xf88	; 0xf88 <OLED_print_string>
	OLED_pos(5, 20);
     506:	64 e1       	ldi	r22, 0x14	; 20
     508:	85 e0       	ldi	r24, 0x05	; 5
     50a:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
	OLED_print_string("Settings");
     50e:	87 ec       	ldi	r24, 0xC7	; 199
     510:	91 e0       	ldi	r25, 0x01	; 1
     512:	0e 94 c4 07 	call	0xf88	; 0xf88 <OLED_print_string>
	OLED_pos(7, 48);
     516:	60 e3       	ldi	r22, 0x30	; 48
     518:	87 e0       	ldi	r24, 0x07	; 7
     51a:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
	OLED_print_string("Touch right to enter");
     51e:	80 ed       	ldi	r24, 0xD0	; 208
     520:	91 e0       	ldi	r25, 0x01	; 1
     522:	0e 94 c4 07 	call	0xf88	; 0xf88 <OLED_print_string>
	OLED_pos(7,0);
     526:	60 e0       	ldi	r22, 0x00	; 0
     528:	87 e0       	ldi	r24, 0x07	; 7
     52a:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
	OLED_print_home();
     52e:	0e 94 f9 07 	call	0xff2	; 0xff2 <OLED_print_home>
     532:	08 95       	ret

00000534 <draw_one_player>:
}

void draw_one_player()
{
	OLED_Reset();
     534:	0e 94 17 07 	call	0xe2e	; 0xe2e <OLED_Reset>
	OLED_pos(0, 32);
     538:	60 e2       	ldi	r22, 0x20	; 32
     53a:	80 e0       	ldi	r24, 0x00	; 0
     53c:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
	OLED_print_string("One-player mode");
     540:	8b e9       	ldi	r24, 0x9B	; 155
     542:	91 e0       	ldi	r25, 0x01	; 1
     544:	0e 94 c4 07 	call	0xf88	; 0xf88 <OLED_print_string>
	OLED_print_woman(3,58);
     548:	6a e3       	ldi	r22, 0x3A	; 58
     54a:	83 e0       	ldi	r24, 0x03	; 3
     54c:	0e 94 09 08 	call	0x1012	; 0x1012 <OLED_print_woman>
	OLED_pos(7,0);
     550:	60 e0       	ldi	r22, 0x00	; 0
     552:	87 e0       	ldi	r24, 0x07	; 7
     554:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
	OLED_print_home();
     558:	0e 94 f9 07 	call	0xff2	; 0xff2 <OLED_print_home>
     55c:	08 95       	ret

0000055e <draw_two_players>:
}

void draw_two_players()
{
	OLED_Reset();
     55e:	0e 94 17 07 	call	0xe2e	; 0xe2e <OLED_Reset>
	OLED_pos(0, 32);
     562:	60 e2       	ldi	r22, 0x20	; 32
     564:	80 e0       	ldi	r24, 0x00	; 0
     566:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
	OLED_print_string("Two-players mode");
     56a:	8b ea       	ldi	r24, 0xAB	; 171
     56c:	91 e0       	ldi	r25, 0x01	; 1
     56e:	0e 94 c4 07 	call	0xf88	; 0xf88 <OLED_print_string>
	OLED_print_woman(3,29);
     572:	6d e1       	ldi	r22, 0x1D	; 29
     574:	83 e0       	ldi	r24, 0x03	; 3
     576:	0e 94 09 08 	call	0x1012	; 0x1012 <OLED_print_woman>
	OLED_print_woman(3,87);
     57a:	67 e5       	ldi	r22, 0x57	; 87
     57c:	83 e0       	ldi	r24, 0x03	; 3
     57e:	0e 94 09 08 	call	0x1012	; 0x1012 <OLED_print_woman>
	OLED_pos(7,0);
     582:	60 e0       	ldi	r22, 0x00	; 0
     584:	87 e0       	ldi	r24, 0x07	; 7
     586:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
	OLED_print_home();
     58a:	0e 94 f9 07 	call	0xff2	; 0xff2 <OLED_print_home>
     58e:	08 95       	ret

00000590 <draw_highscores>:
}

void draw_highscores()
{
	OLED_Reset();
     590:	0e 94 17 07 	call	0xe2e	; 0xe2e <OLED_Reset>
	OLED_pos(0, 44);
     594:	6c e2       	ldi	r22, 0x2C	; 44
     596:	80 e0       	ldi	r24, 0x00	; 0
     598:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
	OLED_print_string("Highscores");
     59c:	8c eb       	ldi	r24, 0xBC	; 188
     59e:	91 e0       	ldi	r25, 0x01	; 1
     5a0:	0e 94 c4 07 	call	0xf88	; 0xf88 <OLED_print_string>
	OLED_pos(2, 20);
     5a4:	64 e1       	ldi	r22, 0x14	; 20
     5a6:	82 e0       	ldi	r24, 0x02	; 2
     5a8:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
	OLED_print_string("1. 650 points");
     5ac:	85 ee       	ldi	r24, 0xE5	; 229
     5ae:	91 e0       	ldi	r25, 0x01	; 1
     5b0:	0e 94 c4 07 	call	0xf88	; 0xf88 <OLED_print_string>
	OLED_pos(3, 20);
     5b4:	64 e1       	ldi	r22, 0x14	; 20
     5b6:	83 e0       	ldi	r24, 0x03	; 3
     5b8:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
	OLED_print_string("2. 422 points");
     5bc:	83 ef       	ldi	r24, 0xF3	; 243
     5be:	91 e0       	ldi	r25, 0x01	; 1
     5c0:	0e 94 c4 07 	call	0xf88	; 0xf88 <OLED_print_string>
	OLED_pos(4, 20);
     5c4:	64 e1       	ldi	r22, 0x14	; 20
     5c6:	84 e0       	ldi	r24, 0x04	; 4
     5c8:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
	OLED_print_string("3. 200 points");
     5cc:	81 e0       	ldi	r24, 0x01	; 1
     5ce:	92 e0       	ldi	r25, 0x02	; 2
     5d0:	0e 94 c4 07 	call	0xf88	; 0xf88 <OLED_print_string>
	OLED_pos(7,0);
     5d4:	60 e0       	ldi	r22, 0x00	; 0
     5d6:	87 e0       	ldi	r24, 0x07	; 7
     5d8:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
	OLED_print_home();
     5dc:	0e 94 f9 07 	call	0xff2	; 0xff2 <OLED_print_home>
     5e0:	08 95       	ret

000005e2 <draw_settings>:
}

void draw_settings()
{
	OLED_Reset();
     5e2:	0e 94 17 07 	call	0xe2e	; 0xe2e <OLED_Reset>
	OLED_pos(0, 48);
     5e6:	60 e3       	ldi	r22, 0x30	; 48
     5e8:	80 e0       	ldi	r24, 0x00	; 0
     5ea:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
	OLED_print_string("Settings");
     5ee:	87 ec       	ldi	r24, 0xC7	; 199
     5f0:	91 e0       	ldi	r25, 0x01	; 1
     5f2:	0e 94 c4 07 	call	0xf88	; 0xf88 <OLED_print_string>
	OLED_pos(2, 8);
     5f6:	68 e0       	ldi	r22, 0x08	; 8
     5f8:	82 e0       	ldi	r24, 0x02	; 2
     5fa:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
	OLED_print_arrow();
     5fe:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <OLED_print_arrow>
	OLED_pos(2, 20);
     602:	64 e1       	ldi	r22, 0x14	; 20
     604:	82 e0       	ldi	r24, 0x02	; 2
     606:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
	OLED_print_string("Brightness");
     60a:	8f e0       	ldi	r24, 0x0F	; 15
     60c:	92 e0       	ldi	r25, 0x02	; 2
     60e:	0e 94 c4 07 	call	0xf88	; 0xf88 <OLED_print_string>
	OLED_pos(3, 20);
     612:	64 e1       	ldi	r22, 0x14	; 20
     614:	83 e0       	ldi	r24, 0x03	; 3
     616:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
	OLED_print_string("Sound");
     61a:	8a e1       	ldi	r24, 0x1A	; 26
     61c:	92 e0       	ldi	r25, 0x02	; 2
     61e:	0e 94 c4 07 	call	0xf88	; 0xf88 <OLED_print_string>
	OLED_pos(7,0);
     622:	60 e0       	ldi	r22, 0x00	; 0
     624:	87 e0       	ldi	r24, 0x07	; 7
     626:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
	OLED_print_home();
     62a:	0e 94 f9 07 	call	0xff2	; 0xff2 <OLED_print_home>
     62e:	08 95       	ret

00000630 <draw_brightness>:
}

void draw_brightness()
{
	OLED_Reset();
     630:	0e 94 17 07 	call	0xe2e	; 0xe2e <OLED_Reset>
	OLED_pos(0, 44);
     634:	6c e2       	ldi	r22, 0x2C	; 44
     636:	80 e0       	ldi	r24, 0x00	; 0
     638:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
	OLED_print_string("Brightness");
     63c:	8f e0       	ldi	r24, 0x0F	; 15
     63e:	92 e0       	ldi	r25, 0x02	; 2
     640:	0e 94 c4 07 	call	0xf88	; 0xf88 <OLED_print_string>
	OLED_pos(5, 0);
     644:	60 e0       	ldi	r22, 0x00	; 0
     646:	85 e0       	ldi	r24, 0x05	; 5
     648:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
	OLED_print_string("Use left slide to set brightness");
     64c:	80 e2       	ldi	r24, 0x20	; 32
     64e:	92 e0       	ldi	r25, 0x02	; 2
     650:	0e 94 c4 07 	call	0xf88	; 0xf88 <OLED_print_string>
	OLED_pos(7,0);
     654:	60 e0       	ldi	r22, 0x00	; 0
     656:	87 e0       	ldi	r24, 0x07	; 7
     658:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
	OLED_print_home();
     65c:	0e 94 f9 07 	call	0xff2	; 0xff2 <OLED_print_home>
     660:	08 95       	ret

00000662 <Joystick_Position>:

#define JOYSTICK_VERTICAL 0x4
#define JOYSTICK_HORIZONTAL 0x5

Position Joystick_Position()
{
     662:	0f 93       	push	r16
     664:	1f 93       	push	r17
     666:	cf 93       	push	r28
     668:	df 93       	push	r29
     66a:	cd b7       	in	r28, 0x3d	; 61
     66c:	de b7       	in	r29, 0x3e	; 62
     66e:	28 97       	sbiw	r28, 0x08	; 8
     670:	0f b6       	in	r0, 0x3f	; 63
     672:	f8 94       	cli
     674:	de bf       	out	0x3e, r29	; 62
     676:	0f be       	out	0x3f, r0	; 63
     678:	cd bf       	out	0x3d, r28	; 61
	uint8_t joystick_horizontal = ADC_Convert(JOYSTICK_HORIZONTAL);
     67a:	85 e0       	ldi	r24, 0x05	; 5
     67c:	0e 94 15 01 	call	0x22a	; 0x22a <ADC_Convert>
     680:	18 2f       	mov	r17, r24
	uint8_t joystick_vertical = ADC_Convert(JOYSTICK_VERTICAL);
     682:	84 e0       	ldi	r24, 0x04	; 4
     684:	0e 94 15 01 	call	0x22a	; 0x22a <ADC_Convert>
     688:	08 2f       	mov	r16, r24
	float X = joystick_horizontal;
     68a:	61 2f       	mov	r22, r17
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	80 e0       	ldi	r24, 0x00	; 0
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	0e 94 38 09 	call	0x1270	; 0x1270 <__floatunsisf>
	float Y = joystick_vertical;
	
	Position joystick;
	joystick.x = (X / 255.0) * 200.0 - 100.0;
     696:	20 e0       	ldi	r18, 0x00	; 0
     698:	30 e0       	ldi	r19, 0x00	; 0
     69a:	4f e7       	ldi	r20, 0x7F	; 127
     69c:	53 e4       	ldi	r21, 0x43	; 67
     69e:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <__divsf3>
     6a2:	20 e0       	ldi	r18, 0x00	; 0
     6a4:	30 e0       	ldi	r19, 0x00	; 0
     6a6:	48 e4       	ldi	r20, 0x48	; 72
     6a8:	53 e4       	ldi	r21, 0x43	; 67
     6aa:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__mulsf3>
     6ae:	20 e0       	ldi	r18, 0x00	; 0
     6b0:	30 e0       	ldi	r19, 0x00	; 0
     6b2:	48 ec       	ldi	r20, 0xC8	; 200
     6b4:	52 e4       	ldi	r21, 0x42	; 66
     6b6:	0e 94 67 08 	call	0x10ce	; 0x10ce <__subsf3>
     6ba:	48 2f       	mov	r20, r24
     6bc:	59 2f       	mov	r21, r25
	joystick.y = (Y / 255.0) * 200.0 - 100.0;
	return joystick;
     6be:	16 2f       	mov	r17, r22
     6c0:	86 2f       	mov	r24, r22
     6c2:	97 2f       	mov	r25, r23
     6c4:	a4 2f       	mov	r26, r20
     6c6:	b5 2f       	mov	r27, r21
     6c8:	89 83       	std	Y+1, r24	; 0x01
     6ca:	9a 83       	std	Y+2, r25	; 0x02
     6cc:	ab 83       	std	Y+3, r26	; 0x03
     6ce:	bc 83       	std	Y+4, r27	; 0x04
Position Joystick_Position()
{
	uint8_t joystick_horizontal = ADC_Convert(JOYSTICK_HORIZONTAL);
	uint8_t joystick_vertical = ADC_Convert(JOYSTICK_VERTICAL);
	float X = joystick_horizontal;
	float Y = joystick_vertical;
     6d0:	60 2f       	mov	r22, r16
     6d2:	70 e0       	ldi	r23, 0x00	; 0
     6d4:	80 e0       	ldi	r24, 0x00	; 0
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	0e 94 38 09 	call	0x1270	; 0x1270 <__floatunsisf>
	
	Position joystick;
	joystick.x = (X / 255.0) * 200.0 - 100.0;
	joystick.y = (Y / 255.0) * 200.0 - 100.0;
     6dc:	20 e0       	ldi	r18, 0x00	; 0
     6de:	30 e0       	ldi	r19, 0x00	; 0
     6e0:	4f e7       	ldi	r20, 0x7F	; 127
     6e2:	53 e4       	ldi	r21, 0x43	; 67
     6e4:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <__divsf3>
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	48 e4       	ldi	r20, 0x48	; 72
     6ee:	53 e4       	ldi	r21, 0x43	; 67
     6f0:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__mulsf3>
     6f4:	20 e0       	ldi	r18, 0x00	; 0
     6f6:	30 e0       	ldi	r19, 0x00	; 0
     6f8:	48 ec       	ldi	r20, 0xC8	; 200
     6fa:	52 e4       	ldi	r21, 0x42	; 66
     6fc:	0e 94 67 08 	call	0x10ce	; 0x10ce <__subsf3>
     700:	e6 2f       	mov	r30, r22
	return joystick;
     702:	46 2f       	mov	r20, r22
     704:	57 2f       	mov	r21, r23
     706:	68 2f       	mov	r22, r24
     708:	79 2f       	mov	r23, r25
     70a:	4d 83       	std	Y+5, r20	; 0x05
     70c:	5e 83       	std	Y+6, r21	; 0x06
     70e:	6f 83       	std	Y+7, r22	; 0x07
     710:	78 87       	std	Y+8, r23	; 0x08
     712:	21 2f       	mov	r18, r17
     714:	3a 81       	ldd	r19, Y+2	; 0x02
     716:	4b 81       	ldd	r20, Y+3	; 0x03
     718:	5c 81       	ldd	r21, Y+4	; 0x04
     71a:	6e 2f       	mov	r22, r30
     71c:	7e 81       	ldd	r23, Y+6	; 0x06
}
     71e:	8f 81       	ldd	r24, Y+7	; 0x07
     720:	98 85       	ldd	r25, Y+8	; 0x08
     722:	28 96       	adiw	r28, 0x08	; 8
     724:	0f b6       	in	r0, 0x3f	; 63
     726:	f8 94       	cli
     728:	de bf       	out	0x3e, r29	; 62
     72a:	0f be       	out	0x3f, r0	; 63
     72c:	cd bf       	out	0x3d, r28	; 61
     72e:	df 91       	pop	r29
     730:	cf 91       	pop	r28
     732:	1f 91       	pop	r17
     734:	0f 91       	pop	r16
     736:	08 95       	ret

00000738 <Joystick_Direction>:

char* Joystick_Direction(Position* joystick)
{
     738:	cf 92       	push	r12
     73a:	df 92       	push	r13
     73c:	ef 92       	push	r14
     73e:	ff 92       	push	r15
     740:	cf 93       	push	r28
     742:	df 93       	push	r29
     744:	ec 01       	movw	r28, r24
	if(joystick->x < -71)
     746:	c8 80       	ld	r12, Y
     748:	d9 80       	ldd	r13, Y+1	; 0x01
     74a:	ea 80       	ldd	r14, Y+2	; 0x02
     74c:	fb 80       	ldd	r15, Y+3	; 0x03
     74e:	20 e0       	ldi	r18, 0x00	; 0
     750:	30 e0       	ldi	r19, 0x00	; 0
     752:	4e e8       	ldi	r20, 0x8E	; 142
     754:	52 ec       	ldi	r21, 0xC2	; 194
     756:	c7 01       	movw	r24, r14
     758:	b6 01       	movw	r22, r12
     75a:	0e 94 cc 08 	call	0x1198	; 0x1198 <__cmpsf2>
     75e:	88 23       	and	r24, r24
     760:	2c f1       	brlt	.+74     	; 0x7ac <Joystick_Direction+0x74>
	return "LEFT";
	else if(joystick->x > 71)
     762:	20 e0       	ldi	r18, 0x00	; 0
     764:	30 e0       	ldi	r19, 0x00	; 0
     766:	4e e8       	ldi	r20, 0x8E	; 142
     768:	52 e4       	ldi	r21, 0x42	; 66
     76a:	c7 01       	movw	r24, r14
     76c:	b6 01       	movw	r22, r12
     76e:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <__gesf2>
     772:	18 16       	cp	r1, r24
     774:	f4 f0       	brlt	.+60     	; 0x7b2 <Joystick_Direction+0x7a>
	return "RIGHT";
	
	if(joystick->y < -71)
     776:	cc 80       	ldd	r12, Y+4	; 0x04
     778:	dd 80       	ldd	r13, Y+5	; 0x05
     77a:	ee 80       	ldd	r14, Y+6	; 0x06
     77c:	ff 80       	ldd	r15, Y+7	; 0x07
     77e:	20 e0       	ldi	r18, 0x00	; 0
     780:	30 e0       	ldi	r19, 0x00	; 0
     782:	4e e8       	ldi	r20, 0x8E	; 142
     784:	52 ec       	ldi	r21, 0xC2	; 194
     786:	c7 01       	movw	r24, r14
     788:	b6 01       	movw	r22, r12
     78a:	0e 94 cc 08 	call	0x1198	; 0x1198 <__cmpsf2>
     78e:	88 23       	and	r24, r24
     790:	9c f0       	brlt	.+38     	; 0x7b8 <Joystick_Direction+0x80>
	return "DOWN";
	else if(joystick->y > 71)
     792:	20 e0       	ldi	r18, 0x00	; 0
     794:	30 e0       	ldi	r19, 0x00	; 0
     796:	4e e8       	ldi	r20, 0x8E	; 142
     798:	52 e4       	ldi	r21, 0x42	; 66
     79a:	c7 01       	movw	r24, r14
     79c:	b6 01       	movw	r22, r12
     79e:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <__gesf2>
     7a2:	18 16       	cp	r1, r24
     7a4:	64 f4       	brge	.+24     	; 0x7be <Joystick_Direction+0x86>
	return "UP";
     7a6:	81 e5       	ldi	r24, 0x51	; 81
     7a8:	92 e0       	ldi	r25, 0x02	; 2
     7aa:	0b c0       	rjmp	.+22     	; 0x7c2 <Joystick_Direction+0x8a>
}

char* Joystick_Direction(Position* joystick)
{
	if(joystick->x < -71)
	return "LEFT";
     7ac:	81 e4       	ldi	r24, 0x41	; 65
     7ae:	92 e0       	ldi	r25, 0x02	; 2
     7b0:	08 c0       	rjmp	.+16     	; 0x7c2 <Joystick_Direction+0x8a>
	else if(joystick->x > 71)
	return "RIGHT";
     7b2:	86 e4       	ldi	r24, 0x46	; 70
     7b4:	92 e0       	ldi	r25, 0x02	; 2
     7b6:	05 c0       	rjmp	.+10     	; 0x7c2 <Joystick_Direction+0x8a>
	
	if(joystick->y < -71)
	return "DOWN";
     7b8:	8c e4       	ldi	r24, 0x4C	; 76
     7ba:	92 e0       	ldi	r25, 0x02	; 2
     7bc:	02 c0       	rjmp	.+4      	; 0x7c2 <Joystick_Direction+0x8a>
	else if(joystick->y > 71)
	return "UP";
	
	return "NEUTRAL";
     7be:	84 e5       	ldi	r24, 0x54	; 84
     7c0:	92 e0       	ldi	r25, 0x02	; 2
     7c2:	df 91       	pop	r29
     7c4:	cf 91       	pop	r28
     7c6:	ff 90       	pop	r15
     7c8:	ef 90       	pop	r14
     7ca:	df 90       	pop	r13
     7cc:	cf 90       	pop	r12
     7ce:	08 95       	ret

000007d0 <MCP2515_RESET>:
#include "SPI.h"
#include "MCP251DEFS.h"

void MCP2515_RESET()
{
	SPI_on();
     7d0:	0e 94 4d 08 	call	0x109a	; 0x109a <SPI_on>
	SPI_write(MCP_RESET);
     7d4:	80 ec       	ldi	r24, 0xC0	; 192
     7d6:	0e 94 43 08 	call	0x1086	; 0x1086 <SPI_write>
	SPI_off();
     7da:	0e 94 4f 08 	call	0x109e	; 0x109e <SPI_off>
     7de:	08 95       	ret

000007e0 <MCP2515_READ>:
}

char MCP2515_READ(uint8_t address)
{
     7e0:	cf 93       	push	r28
     7e2:	c8 2f       	mov	r28, r24
	SPI_on(); 
     7e4:	0e 94 4d 08 	call	0x109a	; 0x109a <SPI_on>
	SPI_write(MCP_READ);
     7e8:	83 e0       	ldi	r24, 0x03	; 3
     7ea:	0e 94 43 08 	call	0x1086	; 0x1086 <SPI_write>
	SPI_write(address);
     7ee:	8c 2f       	mov	r24, r28
     7f0:	0e 94 43 08 	call	0x1086	; 0x1086 <SPI_write>
	char data = SPI_read();
     7f4:	0e 94 48 08 	call	0x1090	; 0x1090 <SPI_read>
     7f8:	c8 2f       	mov	r28, r24
	SPI_off();
     7fa:	0e 94 4f 08 	call	0x109e	; 0x109e <SPI_off>
	return data;
}
     7fe:	8c 2f       	mov	r24, r28
     800:	cf 91       	pop	r28
     802:	08 95       	ret

00000804 <MCP2515_WRITE>:

void MCP2515_WRITE(uint8_t address, uint8_t data)
{
     804:	cf 93       	push	r28
     806:	df 93       	push	r29
     808:	d8 2f       	mov	r29, r24
     80a:	c6 2f       	mov	r28, r22
	SPI_on();
     80c:	0e 94 4d 08 	call	0x109a	; 0x109a <SPI_on>
	SPI_write(MCP_WRITE);
     810:	82 e0       	ldi	r24, 0x02	; 2
     812:	0e 94 43 08 	call	0x1086	; 0x1086 <SPI_write>
	SPI_write(address);
     816:	8d 2f       	mov	r24, r29
     818:	0e 94 43 08 	call	0x1086	; 0x1086 <SPI_write>
	SPI_write(data);
     81c:	8c 2f       	mov	r24, r28
     81e:	0e 94 43 08 	call	0x1086	; 0x1086 <SPI_write>
	SPI_off();
     822:	0e 94 4f 08 	call	0x109e	; 0x109e <SPI_off>
	
}
     826:	df 91       	pop	r29
     828:	cf 91       	pop	r28
     82a:	08 95       	ret

0000082c <MCP2515_REQUEST_TO_SEND>:

void MCP2515_REQUEST_TO_SEND()
{
	SPI_on();
     82c:	0e 94 4d 08 	call	0x109a	; 0x109a <SPI_on>
	SPI_write(MCP_RTS_TX0);
     830:	81 e8       	ldi	r24, 0x81	; 129
     832:	0e 94 43 08 	call	0x1086	; 0x1086 <SPI_write>
	SPI_off();
     836:	0e 94 4f 08 	call	0x109e	; 0x109e <SPI_off>
     83a:	08 95       	ret

0000083c <MCP2515_BIT_MODIFY>:
	SPI_off();
	return data;
}

void MCP2515_BIT_MODIFY(uint8_t address, uint8_t mask, uint8_t data)
{
     83c:	1f 93       	push	r17
     83e:	cf 93       	push	r28
     840:	df 93       	push	r29
     842:	18 2f       	mov	r17, r24
     844:	d6 2f       	mov	r29, r22
     846:	c4 2f       	mov	r28, r20
	SPI_on();
     848:	0e 94 4d 08 	call	0x109a	; 0x109a <SPI_on>
	SPI_write(MCP_BITMOD);
     84c:	85 e0       	ldi	r24, 0x05	; 5
     84e:	0e 94 43 08 	call	0x1086	; 0x1086 <SPI_write>
	SPI_write(address);
     852:	81 2f       	mov	r24, r17
     854:	0e 94 43 08 	call	0x1086	; 0x1086 <SPI_write>
	SPI_write(mask);
     858:	8d 2f       	mov	r24, r29
     85a:	0e 94 43 08 	call	0x1086	; 0x1086 <SPI_write>
	SPI_write(data);
     85e:	8c 2f       	mov	r24, r28
     860:	0e 94 43 08 	call	0x1086	; 0x1086 <SPI_write>
	SPI_off();	
     864:	0e 94 4f 08 	call	0x109e	; 0x109e <SPI_off>
     868:	df 91       	pop	r29
     86a:	cf 91       	pop	r28
     86c:	1f 91       	pop	r17
     86e:	08 95       	ret

00000870 <__vector_1>:
int arrow = 2 ;
int i = 0;
uint8_t slide_left;

ISR(INT0_vect)
{
     870:	1f 92       	push	r1
     872:	0f 92       	push	r0
     874:	0f b6       	in	r0, 0x3f	; 63
     876:	0f 92       	push	r0
     878:	11 24       	eor	r1, r1
     87a:	2f 93       	push	r18
     87c:	3f 93       	push	r19
     87e:	4f 93       	push	r20
     880:	5f 93       	push	r21
     882:	6f 93       	push	r22
     884:	7f 93       	push	r23
     886:	8f 93       	push	r24
     888:	9f 93       	push	r25
     88a:	af 93       	push	r26
     88c:	bf 93       	push	r27
     88e:	ef 93       	push	r30
     890:	ff 93       	push	r31
	if(i < 3)
     892:	80 91 80 02 	lds	r24, 0x0280
     896:	90 91 81 02 	lds	r25, 0x0281
     89a:	83 30       	cpi	r24, 0x03	; 3
     89c:	91 05       	cpc	r25, r1
     89e:	34 f4       	brge	.+12     	; 0x8ac <__vector_1+0x3c>
	{
		i++;
     8a0:	01 96       	adiw	r24, 0x01	; 1
     8a2:	90 93 81 02 	sts	0x0281, r25
     8a6:	80 93 80 02 	sts	0x0280, r24
     8aa:	64 c0       	rjmp	.+200    	; 0x974 <__vector_1+0x104>
	}
	else
	{
		if(mode == HOME)
     8ac:	80 91 82 02 	lds	r24, 0x0282
     8b0:	90 91 83 02 	lds	r25, 0x0283
     8b4:	00 97       	sbiw	r24, 0x00	; 0
     8b6:	79 f4       	brne	.+30     	; 0x8d6 <__vector_1+0x66>
		{
			mode = MAIN_MENU;
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	90 93 83 02 	sts	0x0283, r25
     8c0:	80 93 82 02 	sts	0x0282, r24
			arrow = 2;
     8c4:	82 e0       	ldi	r24, 0x02	; 2
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	90 93 07 01 	sts	0x0107, r25
     8cc:	80 93 06 01 	sts	0x0106, r24
			draw_main_menu();
     8d0:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <draw_main_menu>
     8d4:	4f c0       	rjmp	.+158    	; 0x974 <__vector_1+0x104>
		}
		else if(mode == MAIN_MENU && arrow == 2)
     8d6:	81 30       	cpi	r24, 0x01	; 1
     8d8:	91 05       	cpc	r25, r1
     8da:	c9 f5       	brne	.+114    	; 0x94e <__vector_1+0xde>
     8dc:	80 91 06 01 	lds	r24, 0x0106
     8e0:	90 91 07 01 	lds	r25, 0x0107
     8e4:	82 30       	cpi	r24, 0x02	; 2
     8e6:	91 05       	cpc	r25, r1
     8e8:	49 f4       	brne	.+18     	; 0x8fc <__vector_1+0x8c>
		{
			mode = ONE_PLAYER;
     8ea:	8b e0       	ldi	r24, 0x0B	; 11
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	90 93 83 02 	sts	0x0283, r25
     8f2:	80 93 82 02 	sts	0x0282, r24
			draw_one_player();
     8f6:	0e 94 9a 02 	call	0x534	; 0x534 <draw_one_player>
     8fa:	3c c0       	rjmp	.+120    	; 0x974 <__vector_1+0x104>
		}
		else if(mode == MAIN_MENU && arrow == 3)
     8fc:	83 30       	cpi	r24, 0x03	; 3
     8fe:	91 05       	cpc	r25, r1
     900:	49 f4       	brne	.+18     	; 0x914 <__vector_1+0xa4>
		{
			mode = TWO_PLAYERS;
     902:	8c e0       	ldi	r24, 0x0C	; 12
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	90 93 83 02 	sts	0x0283, r25
     90a:	80 93 82 02 	sts	0x0282, r24
			draw_two_players();
     90e:	0e 94 af 02 	call	0x55e	; 0x55e <draw_two_players>
     912:	30 c0       	rjmp	.+96     	; 0x974 <__vector_1+0x104>
		}
		else if(mode == MAIN_MENU && arrow == 4)
     914:	84 30       	cpi	r24, 0x04	; 4
     916:	91 05       	cpc	r25, r1
     918:	49 f4       	brne	.+18     	; 0x92c <__vector_1+0xbc>
		{
			mode = HIGHSCORES;
     91a:	8d e0       	ldi	r24, 0x0D	; 13
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	90 93 83 02 	sts	0x0283, r25
     922:	80 93 82 02 	sts	0x0282, r24
			draw_highscores();
     926:	0e 94 c8 02 	call	0x590	; 0x590 <draw_highscores>
     92a:	24 c0       	rjmp	.+72     	; 0x974 <__vector_1+0x104>
		}
		else if(mode == MAIN_MENU && arrow == 5)
     92c:	05 97       	sbiw	r24, 0x05	; 5
     92e:	11 f5       	brne	.+68     	; 0x974 <__vector_1+0x104>
		{
			mode = SETTINGS;
     930:	8e e0       	ldi	r24, 0x0E	; 14
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	90 93 83 02 	sts	0x0283, r25
     938:	80 93 82 02 	sts	0x0282, r24
			arrow = 2;
     93c:	82 e0       	ldi	r24, 0x02	; 2
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	90 93 07 01 	sts	0x0107, r25
     944:	80 93 06 01 	sts	0x0106, r24
			draw_settings();
     948:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <draw_settings>
     94c:	13 c0       	rjmp	.+38     	; 0x974 <__vector_1+0x104>
		}
		else if(mode == SETTINGS && arrow == 2)
     94e:	0e 97       	sbiw	r24, 0x0e	; 14
     950:	89 f4       	brne	.+34     	; 0x974 <__vector_1+0x104>
     952:	80 91 06 01 	lds	r24, 0x0106
     956:	90 91 07 01 	lds	r25, 0x0107
     95a:	02 97       	sbiw	r24, 0x02	; 2
     95c:	59 f4       	brne	.+22     	; 0x974 <__vector_1+0x104>
		{
			mode = BRIGHTNESS;
     95e:	8d e8       	ldi	r24, 0x8D	; 141
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	90 93 83 02 	sts	0x0283, r25
     966:	80 93 82 02 	sts	0x0282, r24
			draw_brightness(slide_left);
     96a:	80 91 84 02 	lds	r24, 0x0284
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	0e 94 18 03 	call	0x630	; 0x630 <draw_brightness>
		}
	}
}
     974:	ff 91       	pop	r31
     976:	ef 91       	pop	r30
     978:	bf 91       	pop	r27
     97a:	af 91       	pop	r26
     97c:	9f 91       	pop	r25
     97e:	8f 91       	pop	r24
     980:	7f 91       	pop	r23
     982:	6f 91       	pop	r22
     984:	5f 91       	pop	r21
     986:	4f 91       	pop	r20
     988:	3f 91       	pop	r19
     98a:	2f 91       	pop	r18
     98c:	0f 90       	pop	r0
     98e:	0f be       	out	0x3f, r0	; 63
     990:	0f 90       	pop	r0
     992:	1f 90       	pop	r1
     994:	18 95       	reti

00000996 <__vector_2>:

ISR(INT1_vect)
{
     996:	1f 92       	push	r1
     998:	0f 92       	push	r0
     99a:	0f b6       	in	r0, 0x3f	; 63
     99c:	0f 92       	push	r0
     99e:	11 24       	eor	r1, r1
     9a0:	2f 93       	push	r18
     9a2:	3f 93       	push	r19
     9a4:	4f 93       	push	r20
     9a6:	5f 93       	push	r21
     9a8:	6f 93       	push	r22
     9aa:	7f 93       	push	r23
     9ac:	8f 93       	push	r24
     9ae:	9f 93       	push	r25
     9b0:	af 93       	push	r26
     9b2:	bf 93       	push	r27
     9b4:	ef 93       	push	r30
     9b6:	ff 93       	push	r31
	if(mode == MAIN_MENU)
     9b8:	80 91 82 02 	lds	r24, 0x0282
     9bc:	90 91 83 02 	lds	r25, 0x0283
     9c0:	81 30       	cpi	r24, 0x01	; 1
     9c2:	91 05       	cpc	r25, r1
     9c4:	39 f4       	brne	.+14     	; 0x9d4 <__vector_2+0x3e>
	{
		mode = HOME;
     9c6:	10 92 83 02 	sts	0x0283, r1
     9ca:	10 92 82 02 	sts	0x0282, r1
		draw_home();
     9ce:	0e 94 40 02 	call	0x480	; 0x480 <draw_home>
     9d2:	26 c0       	rjmp	.+76     	; 0xa20 <__vector_2+0x8a>
	}
	else if(mode == ONE_PLAYER || mode == TWO_PLAYERS || mode == HIGHSCORES || mode == SETTINGS)
     9d4:	9c 01       	movw	r18, r24
     9d6:	2b 50       	subi	r18, 0x0B	; 11
     9d8:	31 09       	sbc	r19, r1
     9da:	24 30       	cpi	r18, 0x04	; 4
     9dc:	31 05       	cpc	r19, r1
     9de:	78 f4       	brcc	.+30     	; 0x9fe <__vector_2+0x68>
	{
		mode = MAIN_MENU;
     9e0:	81 e0       	ldi	r24, 0x01	; 1
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	90 93 83 02 	sts	0x0283, r25
     9e8:	80 93 82 02 	sts	0x0282, r24
		arrow = 2;
     9ec:	82 e0       	ldi	r24, 0x02	; 2
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	90 93 07 01 	sts	0x0107, r25
     9f4:	80 93 06 01 	sts	0x0106, r24
		draw_main_menu();
     9f8:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <draw_main_menu>
     9fc:	11 c0       	rjmp	.+34     	; 0xa20 <__vector_2+0x8a>
	}
	else if(mode == BRIGHTNESS)
     9fe:	8d 38       	cpi	r24, 0x8D	; 141
     a00:	91 05       	cpc	r25, r1
     a02:	71 f4       	brne	.+28     	; 0xa20 <__vector_2+0x8a>
	{
		mode = SETTINGS;
     a04:	8e e0       	ldi	r24, 0x0E	; 14
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	90 93 83 02 	sts	0x0283, r25
     a0c:	80 93 82 02 	sts	0x0282, r24
		arrow = 2;
     a10:	82 e0       	ldi	r24, 0x02	; 2
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	90 93 07 01 	sts	0x0107, r25
     a18:	80 93 06 01 	sts	0x0106, r24
		draw_settings();
     a1c:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <draw_settings>
	}
}
     a20:	ff 91       	pop	r31
     a22:	ef 91       	pop	r30
     a24:	bf 91       	pop	r27
     a26:	af 91       	pop	r26
     a28:	9f 91       	pop	r25
     a2a:	8f 91       	pop	r24
     a2c:	7f 91       	pop	r23
     a2e:	6f 91       	pop	r22
     a30:	5f 91       	pop	r21
     a32:	4f 91       	pop	r20
     a34:	3f 91       	pop	r19
     a36:	2f 91       	pop	r18
     a38:	0f 90       	pop	r0
     a3a:	0f be       	out	0x3f, r0	; 63
     a3c:	0f 90       	pop	r0
     a3e:	1f 90       	pop	r1
     a40:	18 95       	reti

00000a42 <ISR_slide_left>:
{
	//printf("Interrupted by right slide!\n");
}

void ISR_slide_left()
{
     a42:	cf 93       	push	r28
     a44:	df 93       	push	r29
	if(mode == BRIGHTNESS)
     a46:	80 91 82 02 	lds	r24, 0x0282
     a4a:	90 91 83 02 	lds	r25, 0x0283
     a4e:	8d 38       	cpi	r24, 0x8D	; 141
     a50:	91 05       	cpc	r25, r1
     a52:	39 f5       	brne	.+78     	; 0xaa2 <ISR_slide_left+0x60>
	{
		OLED_set_brightness(slide_left);
     a54:	80 91 84 02 	lds	r24, 0x0284
     a58:	0e 94 11 07 	call	0xe22	; 0xe22 <OLED_set_brightness>
		OLED_pos(3, 32);
     a5c:	60 e2       	ldi	r22, 0x20	; 32
     a5e:	83 e0       	ldi	r24, 0x03	; 3
     a60:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
     a64:	c0 e4       	ldi	r28, 0x40	; 64
     a66:	d0 e0       	ldi	r29, 0x00	; 0
		for(int i=0; i < 64; i++)
		{
			OLED_write_data(0b00000000);
     a68:	80 e0       	ldi	r24, 0x00	; 0
     a6a:	0e 94 0e 07 	call	0xe1c	; 0xe1c <OLED_write_data>
     a6e:	21 97       	sbiw	r28, 0x01	; 1
{
	if(mode == BRIGHTNESS)
	{
		OLED_set_brightness(slide_left);
		OLED_pos(3, 32);
		for(int i=0; i < 64; i++)
     a70:	20 97       	sbiw	r28, 0x00	; 0
     a72:	d1 f7       	brne	.-12     	; 0xa68 <ISR_slide_left+0x26>
		{
			OLED_write_data(0b00000000);
		}
		OLED_pos(3, 32);
     a74:	60 e2       	ldi	r22, 0x20	; 32
     a76:	83 e0       	ldi	r24, 0x03	; 3
     a78:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
		for(int i=0; i < slide_left/4; i++)
     a7c:	80 91 84 02 	lds	r24, 0x0284
     a80:	86 95       	lsr	r24
     a82:	86 95       	lsr	r24
     a84:	71 f0       	breq	.+28     	; 0xaa2 <ISR_slide_left+0x60>
     a86:	c0 e0       	ldi	r28, 0x00	; 0
     a88:	d0 e0       	ldi	r29, 0x00	; 0
		{
			OLED_write_data(0b11111111);
     a8a:	8f ef       	ldi	r24, 0xFF	; 255
     a8c:	0e 94 0e 07 	call	0xe1c	; 0xe1c <OLED_write_data>
		for(int i=0; i < 64; i++)
		{
			OLED_write_data(0b00000000);
		}
		OLED_pos(3, 32);
		for(int i=0; i < slide_left/4; i++)
     a90:	21 96       	adiw	r28, 0x01	; 1
     a92:	80 91 84 02 	lds	r24, 0x0284
     a96:	86 95       	lsr	r24
     a98:	86 95       	lsr	r24
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	c8 17       	cp	r28, r24
     a9e:	d9 07       	cpc	r29, r25
     aa0:	a4 f3       	brlt	.-24     	; 0xa8a <ISR_slide_left+0x48>
		{
			OLED_write_data(0b11111111);
		}
	}
}
     aa2:	df 91       	pop	r29
     aa4:	cf 91       	pop	r28
     aa6:	08 95       	ret

00000aa8 <ISR_joystick>:

void ISR_joystick(Position joystick)
{
     aa8:	cf 93       	push	r28
     aaa:	df 93       	push	r29
     aac:	cd b7       	in	r28, 0x3d	; 61
     aae:	de b7       	in	r29, 0x3e	; 62
     ab0:	28 97       	sbiw	r28, 0x08	; 8
     ab2:	0f b6       	in	r0, 0x3f	; 63
     ab4:	f8 94       	cli
     ab6:	de bf       	out	0x3e, r29	; 62
     ab8:	0f be       	out	0x3f, r0	; 63
     aba:	cd bf       	out	0x3d, r28	; 61
     abc:	29 83       	std	Y+1, r18	; 0x01
     abe:	3a 83       	std	Y+2, r19	; 0x02
     ac0:	4b 83       	std	Y+3, r20	; 0x03
     ac2:	5c 83       	std	Y+4, r21	; 0x04
     ac4:	6d 83       	std	Y+5, r22	; 0x05
     ac6:	7e 83       	std	Y+6, r23	; 0x06
     ac8:	8f 83       	std	Y+7, r24	; 0x07
     aca:	98 87       	std	Y+8, r25	; 0x08
	char* direction = Joystick_Direction(&joystick);
     acc:	ce 01       	movw	r24, r28
     ace:	01 96       	adiw	r24, 0x01	; 1
     ad0:	0e 94 9c 03 	call	0x738	; 0x738 <Joystick_Direction>
	if(mode == MAIN_MENU && direction == "UP"){
     ad4:	20 91 82 02 	lds	r18, 0x0282
     ad8:	30 91 83 02 	lds	r19, 0x0283
     adc:	21 30       	cpi	r18, 0x01	; 1
     ade:	31 05       	cpc	r19, r1
     ae0:	09 f0       	breq	.+2      	; 0xae4 <ISR_joystick+0x3c>
     ae2:	68 c0       	rjmp	.+208    	; 0xbb4 <ISR_joystick+0x10c>
     ae4:	22 e0       	ldi	r18, 0x02	; 2
     ae6:	81 35       	cpi	r24, 0x51	; 81
     ae8:	92 07       	cpc	r25, r18
     aea:	81 f5       	brne	.+96     	; 0xb4c <ISR_joystick+0xa4>
		if(arrow > 2)
     aec:	80 91 06 01 	lds	r24, 0x0106
     af0:	90 91 07 01 	lds	r25, 0x0107
     af4:	83 30       	cpi	r24, 0x03	; 3
     af6:	91 05       	cpc	r25, r1
     af8:	a4 f0       	brlt	.+40     	; 0xb22 <ISR_joystick+0x7a>
		{
			OLED_pos(arrow, 8);
     afa:	68 e0       	ldi	r22, 0x08	; 8
     afc:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
			OLED_erase_arrow();
     b00:	0e 94 ef 07 	call	0xfde	; 0xfde <OLED_erase_arrow>
			arrow--;
     b04:	80 91 06 01 	lds	r24, 0x0106
     b08:	90 91 07 01 	lds	r25, 0x0107
     b0c:	01 97       	sbiw	r24, 0x01	; 1
     b0e:	90 93 07 01 	sts	0x0107, r25
     b12:	80 93 06 01 	sts	0x0106, r24
			OLED_pos(arrow, 8);
     b16:	68 e0       	ldi	r22, 0x08	; 8
     b18:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
			OLED_print_arrow();
     b1c:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <OLED_print_arrow>
     b20:	b4 c0       	rjmp	.+360    	; 0xc8a <ISR_joystick+0x1e2>
		}
		else if(arrow == 2)
     b22:	02 97       	sbiw	r24, 0x02	; 2
     b24:	09 f0       	breq	.+2      	; 0xb28 <ISR_joystick+0x80>
     b26:	b1 c0       	rjmp	.+354    	; 0xc8a <ISR_joystick+0x1e2>
		{
			OLED_pos(arrow, 8);
     b28:	68 e0       	ldi	r22, 0x08	; 8
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
			OLED_erase_arrow();
     b30:	0e 94 ef 07 	call	0xfde	; 0xfde <OLED_erase_arrow>
			arrow = 5;
     b34:	85 e0       	ldi	r24, 0x05	; 5
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	90 93 07 01 	sts	0x0107, r25
     b3c:	80 93 06 01 	sts	0x0106, r24
			OLED_pos(arrow, 8);
     b40:	68 e0       	ldi	r22, 0x08	; 8
     b42:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
			OLED_print_arrow();
     b46:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <OLED_print_arrow>
     b4a:	9f c0       	rjmp	.+318    	; 0xc8a <ISR_joystick+0x1e2>
		}
	}
	else if(mode == MAIN_MENU && direction == "DOWN"){
     b4c:	8c 54       	subi	r24, 0x4C	; 76
     b4e:	92 40       	sbci	r25, 0x02	; 2
     b50:	09 f0       	breq	.+2      	; 0xb54 <ISR_joystick+0xac>
     b52:	9b c0       	rjmp	.+310    	; 0xc8a <ISR_joystick+0x1e2>
		if(arrow < 5)
     b54:	80 91 06 01 	lds	r24, 0x0106
     b58:	90 91 07 01 	lds	r25, 0x0107
     b5c:	85 30       	cpi	r24, 0x05	; 5
     b5e:	91 05       	cpc	r25, r1
     b60:	a4 f4       	brge	.+40     	; 0xb8a <ISR_joystick+0xe2>
		{
			OLED_pos(arrow, 8);
     b62:	68 e0       	ldi	r22, 0x08	; 8
     b64:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
			OLED_erase_arrow();
     b68:	0e 94 ef 07 	call	0xfde	; 0xfde <OLED_erase_arrow>
			arrow++;
     b6c:	80 91 06 01 	lds	r24, 0x0106
     b70:	90 91 07 01 	lds	r25, 0x0107
     b74:	01 96       	adiw	r24, 0x01	; 1
     b76:	90 93 07 01 	sts	0x0107, r25
     b7a:	80 93 06 01 	sts	0x0106, r24
			OLED_pos(arrow, 8);
     b7e:	68 e0       	ldi	r22, 0x08	; 8
     b80:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
			OLED_print_arrow();
     b84:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <OLED_print_arrow>
     b88:	80 c0       	rjmp	.+256    	; 0xc8a <ISR_joystick+0x1e2>
		}
		else if(arrow == 5)
     b8a:	05 97       	sbiw	r24, 0x05	; 5
     b8c:	09 f0       	breq	.+2      	; 0xb90 <ISR_joystick+0xe8>
     b8e:	7d c0       	rjmp	.+250    	; 0xc8a <ISR_joystick+0x1e2>
		{
			OLED_pos(arrow, 8);
     b90:	68 e0       	ldi	r22, 0x08	; 8
     b92:	85 e0       	ldi	r24, 0x05	; 5
     b94:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
			OLED_erase_arrow();
     b98:	0e 94 ef 07 	call	0xfde	; 0xfde <OLED_erase_arrow>
			arrow = 2;
     b9c:	82 e0       	ldi	r24, 0x02	; 2
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	90 93 07 01 	sts	0x0107, r25
     ba4:	80 93 06 01 	sts	0x0106, r24
			OLED_pos(arrow, 8);
     ba8:	68 e0       	ldi	r22, 0x08	; 8
     baa:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
			OLED_print_arrow();
     bae:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <OLED_print_arrow>
     bb2:	6b c0       	rjmp	.+214    	; 0xc8a <ISR_joystick+0x1e2>
		}
	}
	else if(mode == SETTINGS && direction == "UP"){
     bb4:	2e 30       	cpi	r18, 0x0E	; 14
     bb6:	31 05       	cpc	r19, r1
     bb8:	09 f0       	breq	.+2      	; 0xbbc <ISR_joystick+0x114>
     bba:	67 c0       	rjmp	.+206    	; 0xc8a <ISR_joystick+0x1e2>
     bbc:	22 e0       	ldi	r18, 0x02	; 2
     bbe:	81 35       	cpi	r24, 0x51	; 81
     bc0:	92 07       	cpc	r25, r18
     bc2:	89 f5       	brne	.+98     	; 0xc26 <ISR_joystick+0x17e>
		if(arrow == 3)
     bc4:	80 91 06 01 	lds	r24, 0x0106
     bc8:	90 91 07 01 	lds	r25, 0x0107
     bcc:	83 30       	cpi	r24, 0x03	; 3
     bce:	91 05       	cpc	r25, r1
     bd0:	a9 f4       	brne	.+42     	; 0xbfc <ISR_joystick+0x154>
		{
			OLED_pos(arrow, 8);
     bd2:	68 e0       	ldi	r22, 0x08	; 8
     bd4:	83 e0       	ldi	r24, 0x03	; 3
     bd6:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
			OLED_erase_arrow();
     bda:	0e 94 ef 07 	call	0xfde	; 0xfde <OLED_erase_arrow>
			arrow--;
     bde:	80 91 06 01 	lds	r24, 0x0106
     be2:	90 91 07 01 	lds	r25, 0x0107
     be6:	01 97       	sbiw	r24, 0x01	; 1
     be8:	90 93 07 01 	sts	0x0107, r25
     bec:	80 93 06 01 	sts	0x0106, r24
			OLED_pos(arrow, 8);
     bf0:	68 e0       	ldi	r22, 0x08	; 8
     bf2:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
			OLED_print_arrow();
     bf6:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <OLED_print_arrow>
     bfa:	47 c0       	rjmp	.+142    	; 0xc8a <ISR_joystick+0x1e2>
		}
		else if(arrow == 2)
     bfc:	02 97       	sbiw	r24, 0x02	; 2
     bfe:	09 f0       	breq	.+2      	; 0xc02 <ISR_joystick+0x15a>
     c00:	44 c0       	rjmp	.+136    	; 0xc8a <ISR_joystick+0x1e2>
		{
			OLED_pos(arrow, 8);
     c02:	68 e0       	ldi	r22, 0x08	; 8
     c04:	82 e0       	ldi	r24, 0x02	; 2
     c06:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
			OLED_erase_arrow();
     c0a:	0e 94 ef 07 	call	0xfde	; 0xfde <OLED_erase_arrow>
			arrow = 3;
     c0e:	83 e0       	ldi	r24, 0x03	; 3
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	90 93 07 01 	sts	0x0107, r25
     c16:	80 93 06 01 	sts	0x0106, r24
			OLED_pos(arrow, 8);
     c1a:	68 e0       	ldi	r22, 0x08	; 8
     c1c:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
			OLED_print_arrow();
     c20:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <OLED_print_arrow>
     c24:	32 c0       	rjmp	.+100    	; 0xc8a <ISR_joystick+0x1e2>
		}
	}
	else if(mode == SETTINGS && direction == "DOWN"){
     c26:	8c 54       	subi	r24, 0x4C	; 76
     c28:	92 40       	sbci	r25, 0x02	; 2
     c2a:	79 f5       	brne	.+94     	; 0xc8a <ISR_joystick+0x1e2>
		if(arrow == 2)
     c2c:	80 91 06 01 	lds	r24, 0x0106
     c30:	90 91 07 01 	lds	r25, 0x0107
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	91 05       	cpc	r25, r1
     c38:	a9 f4       	brne	.+42     	; 0xc64 <ISR_joystick+0x1bc>
		{
			OLED_pos(arrow, 8);
     c3a:	68 e0       	ldi	r22, 0x08	; 8
     c3c:	82 e0       	ldi	r24, 0x02	; 2
     c3e:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
			OLED_erase_arrow();
     c42:	0e 94 ef 07 	call	0xfde	; 0xfde <OLED_erase_arrow>
			arrow++;
     c46:	80 91 06 01 	lds	r24, 0x0106
     c4a:	90 91 07 01 	lds	r25, 0x0107
     c4e:	01 96       	adiw	r24, 0x01	; 1
     c50:	90 93 07 01 	sts	0x0107, r25
     c54:	80 93 06 01 	sts	0x0106, r24
			OLED_pos(arrow, 8);
     c58:	68 e0       	ldi	r22, 0x08	; 8
     c5a:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
			OLED_print_arrow();
     c5e:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <OLED_print_arrow>
     c62:	13 c0       	rjmp	.+38     	; 0xc8a <ISR_joystick+0x1e2>
		}
		else if(arrow == 3)
     c64:	03 97       	sbiw	r24, 0x03	; 3
     c66:	89 f4       	brne	.+34     	; 0xc8a <ISR_joystick+0x1e2>
		{
			OLED_pos(arrow, 8);
     c68:	68 e0       	ldi	r22, 0x08	; 8
     c6a:	83 e0       	ldi	r24, 0x03	; 3
     c6c:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
			OLED_erase_arrow();
     c70:	0e 94 ef 07 	call	0xfde	; 0xfde <OLED_erase_arrow>
			arrow = 2;
     c74:	82 e0       	ldi	r24, 0x02	; 2
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	90 93 07 01 	sts	0x0107, r25
     c7c:	80 93 06 01 	sts	0x0106, r24
			OLED_pos(arrow, 8);
     c80:	68 e0       	ldi	r22, 0x08	; 8
     c82:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>
			OLED_print_arrow();
     c86:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <OLED_print_arrow>
		}
	}
}
     c8a:	28 96       	adiw	r28, 0x08	; 8
     c8c:	0f b6       	in	r0, 0x3f	; 63
     c8e:	f8 94       	cli
     c90:	de bf       	out	0x3e, r29	; 62
     c92:	0f be       	out	0x3f, r0	; 63
     c94:	cd bf       	out	0x3d, r28	; 61
     c96:	df 91       	pop	r29
     c98:	cf 91       	pop	r28
     c9a:	08 95       	ret

00000c9c <main>:

int main(void)
{
     c9c:	cf 93       	push	r28
     c9e:	df 93       	push	r29
     ca0:	cd b7       	in	r28, 0x3d	; 61
     ca2:	de b7       	in	r29, 0x3e	; 62
     ca4:	a1 97       	sbiw	r28, 0x21	; 33
     ca6:	0f b6       	in	r0, 0x3f	; 63
     ca8:	f8 94       	cli
     caa:	de bf       	out	0x3e, r29	; 62
     cac:	0f be       	out	0x3f, r0	; 63
     cae:	cd bf       	out	0x3d, r28	; 61
	/* Initialize UART */
	UART_Init(UART_BAUD);
     cb0:	8f e1       	ldi	r24, 0x1F	; 31
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	0e 94 5d 08 	call	0x10ba	; 0x10ba <UART_Init>
	printf("Reset\n");
     cb8:	8c e5       	ldi	r24, 0x5C	; 92
     cba:	92 e0       	ldi	r25, 0x02	; 2
     cbc:	0e 94 b0 0a 	call	0x1560	; 0x1560 <puts>
     cc0:	2f e3       	ldi	r18, 0x3F	; 63
     cc2:	8d e0       	ldi	r24, 0x0D	; 13
     cc4:	93 e0       	ldi	r25, 0x03	; 3
     cc6:	21 50       	subi	r18, 0x01	; 1
     cc8:	80 40       	sbci	r24, 0x00	; 0
     cca:	90 40       	sbci	r25, 0x00	; 0
     ccc:	e1 f7       	brne	.-8      	; 0xcc6 <main+0x2a>
     cce:	00 c0       	rjmp	.+0      	; 0xcd0 <main+0x34>
     cd0:	00 00       	nop
	_delay_ms(1000);
	
	/* Initialize SRAM, ADC and OLED */
	SRAM_Init();
     cd2:	0e 94 51 08 	call	0x10a2	; 0x10a2 <SRAM_Init>
	OLED_Reset();
     cd6:	0e 94 17 07 	call	0xe2e	; 0xe2e <OLED_Reset>
	OLED_Init();
     cda:	0e 94 70 07 	call	0xee0	; 0xee0 <OLED_Init>
	CAN_init();
     cde:	0e 94 20 01 	call	0x240	; 0x240 <CAN_init>
	
	/* Draw something cool */
	draw_home();
     ce2:	0e 94 40 02 	call	0x480	; 0x480 <draw_home>
	
	/* Send and receive a CAN message */
	MSG test_message;
	test_message.ID = 163;
     ce6:	83 ea       	ldi	r24, 0xA3	; 163
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	9a 83       	std	Y+2, r25	; 0x02
     cec:	89 83       	std	Y+1, r24	; 0x01
	test_message.length = 1;
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	9c 83       	std	Y+4, r25	; 0x04
     cf4:	8b 83       	std	Y+3, r24	; 0x03
	test_message.data[0] = 153;
     cf6:	89 e9       	ldi	r24, 0x99	; 153
     cf8:	8d 83       	std	Y+5, r24	; 0x05
	CAN_send(&test_message);
     cfa:	ce 01       	movw	r24, r28
     cfc:	01 96       	adiw	r24, 0x01	; 1
     cfe:	0e 94 84 01 	call	0x308	; 0x308 <CAN_send>
     d02:	2f e3       	ldi	r18, 0x3F	; 63
     d04:	8d e0       	ldi	r24, 0x0D	; 13
     d06:	93 e0       	ldi	r25, 0x03	; 3
     d08:	21 50       	subi	r18, 0x01	; 1
     d0a:	80 40       	sbci	r24, 0x00	; 0
     d0c:	90 40       	sbci	r25, 0x00	; 0
     d0e:	e1 f7       	brne	.-8      	; 0xd08 <main+0x6c>
     d10:	00 c0       	rjmp	.+0      	; 0xd12 <main+0x76>
     d12:	00 00       	nop
	_delay_ms(1000);
	MSG received_test = CAN_receive();
     d14:	ce 01       	movw	r24, r28
     d16:	0d 96       	adiw	r24, 0x0d	; 13
     d18:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <CAN_receive>
	printf("ID: %d, length: %d, data: %d\n", received_test.ID, received_test.length, received_test.data[0]);
     d1c:	89 89       	ldd	r24, Y+17	; 0x11
     d1e:	1f 92       	push	r1
     d20:	8f 93       	push	r24
     d22:	88 89       	ldd	r24, Y+16	; 0x10
     d24:	8f 93       	push	r24
     d26:	8f 85       	ldd	r24, Y+15	; 0x0f
     d28:	8f 93       	push	r24
     d2a:	8e 85       	ldd	r24, Y+14	; 0x0e
     d2c:	8f 93       	push	r24
     d2e:	8d 85       	ldd	r24, Y+13	; 0x0d
     d30:	8f 93       	push	r24
     d32:	82 e6       	ldi	r24, 0x62	; 98
     d34:	92 e0       	ldi	r25, 0x02	; 2
     d36:	9f 93       	push	r25
     d38:	8f 93       	push	r24
     d3a:	0e 94 9c 0a 	call	0x1538	; 0x1538 <printf>
	//printf("data: %d\n",received_test.data[0]);
	/* Enable interrupts */
	GICR |= (1 << INT0) | (1 << INT1); //| (1 << INT2);
     d3e:	8b b7       	in	r24, 0x3b	; 59
     d40:	80 6c       	ori	r24, 0xC0	; 192
     d42:	8b bf       	out	0x3b, r24	; 59
	//SREG |= (1 << 7);
	MCUCR |= (1<< ISC00) | (1 << ISC01) | (1 << ISC10) | (1 << ISC11);
     d44:	85 b7       	in	r24, 0x35	; 53
     d46:	8f 60       	ori	r24, 0x0F	; 15
     d48:	85 bf       	out	0x35, r24	; 53
	//EMCUCR &= (0 << ISC2);
	sei();
     d4a:	78 94       	sei
	
	/* Variables initialization */
	Position joystick = Joystick_Position();
     d4c:	0e 94 31 03 	call	0x662	; 0x662 <Joystick_Position>
     d50:	52 2e       	mov	r5, r18
     d52:	63 2e       	mov	r6, r19
     d54:	74 2e       	mov	r7, r20
     d56:	85 2e       	mov	r8, r21
     d58:	26 2e       	mov	r2, r22
     d5a:	37 2e       	mov	r3, r23
     d5c:	48 2e       	mov	r4, r24
     d5e:	99 a3       	std	Y+33, r25	; 0x21
	Position joystick_previous = joystick;
	slide_left = ADC_Convert(SLIDE_LEFT);
     d60:	86 e0       	ldi	r24, 0x06	; 6
     d62:	0e 94 15 01 	call	0x22a	; 0x22a <ADC_Convert>
     d66:	98 2e       	mov	r9, r24
     d68:	80 93 84 02 	sts	0x0284, r24
	uint8_t previous_slide_left = slide_left;
	uint8_t slide_right = ADC_Convert(SLIDE_RIGHT);
     d6c:	87 e0       	ldi	r24, 0x07	; 7
     d6e:	0e 94 15 01 	call	0x22a	; 0x22a <ADC_Convert>
     d72:	0f b6       	in	r0, 0x3f	; 63
     d74:	f8 94       	cli
     d76:	de bf       	out	0x3e, r29	; 62
     d78:	0f be       	out	0x3f, r0	; 63
     d7a:	cd bf       	out	0x3d, r28	; 61
	uint8_t previous_slide_right = slide_right;
	
    while(1)
    {
		joystick = Joystick_Position();
     d7c:	0e 94 31 03 	call	0x662	; 0x662 <Joystick_Position>
     d80:	29 8f       	std	Y+25, r18	; 0x19
     d82:	3a 8f       	std	Y+26, r19	; 0x1a
     d84:	4b 8f       	std	Y+27, r20	; 0x1b
     d86:	5c 8f       	std	Y+28, r21	; 0x1c
     d88:	6d 8f       	std	Y+29, r22	; 0x1d
     d8a:	7e 8f       	std	Y+30, r23	; 0x1e
     d8c:	8f 8f       	std	Y+31, r24	; 0x1f
     d8e:	98 a3       	std	Y+32, r25	; 0x20
     d90:	e2 2e       	mov	r14, r18
     d92:	f3 2e       	mov	r15, r19
     d94:	04 2f       	mov	r16, r20
     d96:	15 2f       	mov	r17, r21
     d98:	a6 2e       	mov	r10, r22
     d9a:	b7 2e       	mov	r11, r23
     d9c:	c8 2e       	mov	r12, r24
     d9e:	d9 2e       	mov	r13, r25
		if((joystick.x != joystick_previous.x)||(joystick.y != joystick_previous.y))
     da0:	65 2d       	mov	r22, r5
     da2:	76 2d       	mov	r23, r6
     da4:	87 2d       	mov	r24, r7
     da6:	98 2d       	mov	r25, r8
     da8:	0e 94 cc 08 	call	0x1198	; 0x1198 <__cmpsf2>
     dac:	81 11       	cpse	r24, r1
     dae:	0c c0       	rjmp	.+24     	; 0xdc8 <main+0x12c>
     db0:	2a 2d       	mov	r18, r10
     db2:	3b 2d       	mov	r19, r11
     db4:	4c 2d       	mov	r20, r12
     db6:	5d 2d       	mov	r21, r13
     db8:	62 2d       	mov	r22, r2
     dba:	73 2d       	mov	r23, r3
     dbc:	84 2d       	mov	r24, r4
     dbe:	99 a1       	ldd	r25, Y+33	; 0x21
     dc0:	0e 94 cc 08 	call	0x1198	; 0x1198 <__cmpsf2>
     dc4:	88 23       	and	r24, r24
     dc6:	51 f0       	breq	.+20     	; 0xddc <main+0x140>
		{
			ISR_joystick(joystick);
     dc8:	29 8d       	ldd	r18, Y+25	; 0x19
     dca:	3a 8d       	ldd	r19, Y+26	; 0x1a
     dcc:	4b 8d       	ldd	r20, Y+27	; 0x1b
     dce:	5c 8d       	ldd	r21, Y+28	; 0x1c
     dd0:	6d 8d       	ldd	r22, Y+29	; 0x1d
     dd2:	7e 8d       	ldd	r23, Y+30	; 0x1e
     dd4:	8f 8d       	ldd	r24, Y+31	; 0x1f
     dd6:	98 a1       	ldd	r25, Y+32	; 0x20
     dd8:	0e 94 54 05 	call	0xaa8	; 0xaa8 <ISR_joystick>
		}
		joystick_previous = joystick;
		
		slide_left = ADC_Convert(SLIDE_LEFT);
     ddc:	86 e0       	ldi	r24, 0x06	; 6
     dde:	0e 94 15 01 	call	0x22a	; 0x22a <ADC_Convert>
     de2:	80 93 84 02 	sts	0x0284, r24
		if(slide_left != previous_slide_left)
     de6:	98 12       	cpse	r9, r24
		{
			ISR_slide_left();
     de8:	0e 94 21 05 	call	0xa42	; 0xa42 <ISR_slide_left>
		}
		previous_slide_left = slide_left;
     dec:	90 90 84 02 	lds	r9, 0x0284
		 
		slide_right = ADC_Convert(SLIDE_RIGHT);
     df0:	87 e0       	ldi	r24, 0x07	; 7
     df2:	0e 94 15 01 	call	0x22a	; 0x22a <ADC_Convert>
		{
			ISR_slide_right();
		}
		previous_slide_right = slide_right;
		
		if(JOYSTICK_BUTTON == 1)
     df6:	86 b3       	in	r24, 0x16	; 22
     df8:	9f ef       	ldi	r25, 0xFF	; 255
     dfa:	20 e7       	ldi	r18, 0x70	; 112
     dfc:	82 e0       	ldi	r24, 0x02	; 2
     dfe:	91 50       	subi	r25, 0x01	; 1
     e00:	20 40       	sbci	r18, 0x00	; 0
     e02:	80 40       	sbci	r24, 0x00	; 0
     e04:	e1 f7       	brne	.-8      	; 0xdfe <main+0x162>
     e06:	00 c0       	rjmp	.+0      	; 0xe08 <main+0x16c>
     e08:	00 00       	nop
		joystick = Joystick_Position();
		if((joystick.x != joystick_previous.x)||(joystick.y != joystick_previous.y))
		{
			ISR_joystick(joystick);
		}
		joystick_previous = joystick;
     e0a:	5e 2c       	mov	r5, r14
     e0c:	6f 2c       	mov	r6, r15
     e0e:	70 2e       	mov	r7, r16
     e10:	81 2e       	mov	r8, r17
     e12:	2a 2c       	mov	r2, r10
     e14:	3b 2c       	mov	r3, r11
     e16:	4c 2c       	mov	r4, r12
     e18:	d9 a2       	std	Y+33, r13	; 0x21
     e1a:	b0 cf       	rjmp	.-160    	; 0xd7c <main+0xe0>

00000e1c <OLED_write_data>:

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     e1c:	80 93 00 12 	sts	0x1200, r24
     e20:	08 95       	ret

00000e22 <OLED_set_brightness>:

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     e22:	e0 e0       	ldi	r30, 0x00	; 0
     e24:	f0 e1       	ldi	r31, 0x10	; 16
     e26:	91 e8       	ldi	r25, 0x81	; 129
     e28:	90 83       	st	Z, r25
     e2a:	80 83       	st	Z, r24
     e2c:	08 95       	ret

00000e2e <OLED_Reset>:
     e2e:	80 eb       	ldi	r24, 0xB0	; 176
     e30:	80 93 00 10 	sts	0x1000, r24
     e34:	80 e8       	ldi	r24, 0x80	; 128
     e36:	90 e0       	ldi	r25, 0x00	; 0

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     e38:	e0 e0       	ldi	r30, 0x00	; 0
     e3a:	f2 e1       	ldi	r31, 0x12	; 18
     e3c:	10 82       	st	Z, r1
     e3e:	01 97       	sbiw	r24, 0x01	; 1

/* Erase the RAM line by line */
void OLED_Reset()
{
	OLED_write_cmd(0xb0);
	for(int i=0; i<128; i++){
     e40:	00 97       	sbiw	r24, 0x00	; 0
     e42:	e1 f7       	brne	.-8      	; 0xe3c <OLED_Reset+0xe>

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     e44:	81 eb       	ldi	r24, 0xB1	; 177
     e46:	80 93 00 10 	sts	0x1000, r24
     e4a:	80 e8       	ldi	r24, 0x80	; 128
     e4c:	90 e0       	ldi	r25, 0x00	; 0

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     e4e:	e0 e0       	ldi	r30, 0x00	; 0
     e50:	f2 e1       	ldi	r31, 0x12	; 18
     e52:	10 82       	st	Z, r1
     e54:	01 97       	sbiw	r24, 0x01	; 1
	OLED_write_cmd(0xb0);
	for(int i=0; i<128; i++){
		OLED_write_data(0b00000000);
	}
	OLED_write_cmd(0xb1);
	for(int i=0; i<128; i++){
     e56:	00 97       	sbiw	r24, 0x00	; 0
     e58:	e1 f7       	brne	.-8      	; 0xe52 <OLED_Reset+0x24>

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     e5a:	82 eb       	ldi	r24, 0xB2	; 178
     e5c:	80 93 00 10 	sts	0x1000, r24
     e60:	80 e8       	ldi	r24, 0x80	; 128
     e62:	90 e0       	ldi	r25, 0x00	; 0

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     e64:	e0 e0       	ldi	r30, 0x00	; 0
     e66:	f2 e1       	ldi	r31, 0x12	; 18
     e68:	10 82       	st	Z, r1
     e6a:	01 97       	sbiw	r24, 0x01	; 1
	OLED_write_cmd(0xb1);
	for(int i=0; i<128; i++){
		OLED_write_data(0b00000000);
	}
	OLED_write_cmd(0xb2);
	for(int i=0; i<128; i++){
     e6c:	00 97       	sbiw	r24, 0x00	; 0
     e6e:	e1 f7       	brne	.-8      	; 0xe68 <OLED_Reset+0x3a>

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     e70:	83 eb       	ldi	r24, 0xB3	; 179
     e72:	80 93 00 10 	sts	0x1000, r24
     e76:	80 e8       	ldi	r24, 0x80	; 128
     e78:	90 e0       	ldi	r25, 0x00	; 0

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     e7a:	e0 e0       	ldi	r30, 0x00	; 0
     e7c:	f2 e1       	ldi	r31, 0x12	; 18
     e7e:	10 82       	st	Z, r1
     e80:	01 97       	sbiw	r24, 0x01	; 1
	OLED_write_cmd(0xb2);
	for(int i=0; i<128; i++){
		OLED_write_data(0b00000000);
	}
	OLED_write_cmd(0xb3);
	for(int i=0; i<128; i++){
     e82:	00 97       	sbiw	r24, 0x00	; 0
     e84:	e1 f7       	brne	.-8      	; 0xe7e <OLED_Reset+0x50>

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     e86:	84 eb       	ldi	r24, 0xB4	; 180
     e88:	80 93 00 10 	sts	0x1000, r24
     e8c:	80 e8       	ldi	r24, 0x80	; 128
     e8e:	90 e0       	ldi	r25, 0x00	; 0

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     e90:	e0 e0       	ldi	r30, 0x00	; 0
     e92:	f2 e1       	ldi	r31, 0x12	; 18
     e94:	10 82       	st	Z, r1
     e96:	01 97       	sbiw	r24, 0x01	; 1
	OLED_write_cmd(0xb3);
	for(int i=0; i<128; i++){
		OLED_write_data(0b00000000);
	}
	OLED_write_cmd(0xb4);
	for(int i=0; i<128; i++){
     e98:	00 97       	sbiw	r24, 0x00	; 0
     e9a:	e1 f7       	brne	.-8      	; 0xe94 <OLED_Reset+0x66>

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     e9c:	85 eb       	ldi	r24, 0xB5	; 181
     e9e:	80 93 00 10 	sts	0x1000, r24
     ea2:	80 e8       	ldi	r24, 0x80	; 128
     ea4:	90 e0       	ldi	r25, 0x00	; 0

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     ea6:	e0 e0       	ldi	r30, 0x00	; 0
     ea8:	f2 e1       	ldi	r31, 0x12	; 18
     eaa:	10 82       	st	Z, r1
     eac:	01 97       	sbiw	r24, 0x01	; 1
	OLED_write_cmd(0xb4);
	for(int i=0; i<128; i++){
		OLED_write_data(0b00000000);
	}
	OLED_write_cmd(0xb5);
	for(int i=0; i<128; i++){
     eae:	00 97       	sbiw	r24, 0x00	; 0
     eb0:	e1 f7       	brne	.-8      	; 0xeaa <OLED_Reset+0x7c>

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     eb2:	86 eb       	ldi	r24, 0xB6	; 182
     eb4:	80 93 00 10 	sts	0x1000, r24
     eb8:	80 e8       	ldi	r24, 0x80	; 128
     eba:	90 e0       	ldi	r25, 0x00	; 0

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     ebc:	e0 e0       	ldi	r30, 0x00	; 0
     ebe:	f2 e1       	ldi	r31, 0x12	; 18
     ec0:	10 82       	st	Z, r1
     ec2:	01 97       	sbiw	r24, 0x01	; 1
	OLED_write_cmd(0xb5);
	for(int i=0; i<128; i++){
		OLED_write_data(0b00000000);
	}
	OLED_write_cmd(0xb6);
	for(int i=0; i<128; i++){
     ec4:	00 97       	sbiw	r24, 0x00	; 0
     ec6:	e1 f7       	brne	.-8      	; 0xec0 <OLED_Reset+0x92>

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     ec8:	87 eb       	ldi	r24, 0xB7	; 183
     eca:	80 93 00 10 	sts	0x1000, r24
     ece:	80 e8       	ldi	r24, 0x80	; 128
     ed0:	90 e0       	ldi	r25, 0x00	; 0

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     ed2:	e0 e0       	ldi	r30, 0x00	; 0
     ed4:	f2 e1       	ldi	r31, 0x12	; 18
     ed6:	10 82       	st	Z, r1
     ed8:	01 97       	sbiw	r24, 0x01	; 1
	OLED_write_cmd(0xb6);
	for(int i=0; i<128; i++){
		OLED_write_data(0b00000000);
	}
	OLED_write_cmd(0xb7);
	for(int i=0; i<128; i++){
     eda:	00 97       	sbiw	r24, 0x00	; 0
     edc:	e1 f7       	brne	.-8      	; 0xed6 <OLED_Reset+0xa8>
		OLED_write_data(0b00000000);
	}
}
     ede:	08 95       	ret

00000ee0 <OLED_Init>:

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     ee0:	e0 e0       	ldi	r30, 0x00	; 0
     ee2:	f0 e1       	ldi	r31, 0x10	; 16
     ee4:	8e ea       	ldi	r24, 0xAE	; 174
     ee6:	80 83       	st	Z, r24
     ee8:	81 ea       	ldi	r24, 0xA1	; 161
     eea:	80 83       	st	Z, r24
     eec:	8a ed       	ldi	r24, 0xDA	; 218
     eee:	80 83       	st	Z, r24
     ef0:	82 e1       	ldi	r24, 0x12	; 18
     ef2:	80 83       	st	Z, r24
     ef4:	88 ec       	ldi	r24, 0xC8	; 200
     ef6:	80 83       	st	Z, r24
     ef8:	88 ea       	ldi	r24, 0xA8	; 168
     efa:	80 83       	st	Z, r24
     efc:	8f e3       	ldi	r24, 0x3F	; 63
     efe:	80 83       	st	Z, r24
     f00:	85 ed       	ldi	r24, 0xD5	; 213
     f02:	80 83       	st	Z, r24
     f04:	80 e8       	ldi	r24, 0x80	; 128
     f06:	80 83       	st	Z, r24
     f08:	81 e8       	ldi	r24, 0x81	; 129
     f0a:	80 83       	st	Z, r24
     f0c:	80 e5       	ldi	r24, 0x50	; 80
     f0e:	80 83       	st	Z, r24
     f10:	89 ed       	ldi	r24, 0xD9	; 217
     f12:	80 83       	st	Z, r24
     f14:	81 e2       	ldi	r24, 0x21	; 33
     f16:	80 83       	st	Z, r24
     f18:	80 e2       	ldi	r24, 0x20	; 32
     f1a:	80 83       	st	Z, r24
     f1c:	82 e0       	ldi	r24, 0x02	; 2
     f1e:	80 83       	st	Z, r24
     f20:	8b ed       	ldi	r24, 0xDB	; 219
     f22:	80 83       	st	Z, r24
     f24:	80 e3       	ldi	r24, 0x30	; 48
     f26:	80 83       	st	Z, r24
     f28:	8d ea       	ldi	r24, 0xAD	; 173
     f2a:	80 83       	st	Z, r24
     f2c:	10 82       	st	Z, r1
     f2e:	84 ea       	ldi	r24, 0xA4	; 164
     f30:	80 83       	st	Z, r24
     f32:	86 ea       	ldi	r24, 0xA6	; 166
     f34:	80 83       	st	Z, r24
     f36:	8f ea       	ldi	r24, 0xAF	; 175
     f38:	80 83       	st	Z, r24
     f3a:	08 95       	ret

00000f3c <OLED_pos>:
}

/* Set the cursor to the given position: page is from 0 to 7, segment from 0 to 127 */
void OLED_pos(uint8_t page, uint8_t segment)
{
	OLED_write_cmd(176 + page);
     f3c:	80 55       	subi	r24, 0x50	; 80

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     f3e:	e0 e0       	ldi	r30, 0x00	; 0
     f40:	f0 e1       	ldi	r31, 0x10	; 16
     f42:	80 83       	st	Z, r24

/* Set the cursor to the given position: page is from 0 to 7, segment from 0 to 127 */
void OLED_pos(uint8_t page, uint8_t segment)
{
	OLED_write_cmd(176 + page);
	OLED_write_cmd(segment & 0x0f);
     f44:	86 2f       	mov	r24, r22
     f46:	8f 70       	andi	r24, 0x0F	; 15

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     f48:	80 83       	st	Z, r24
/* Set the cursor to the given position: page is from 0 to 7, segment from 0 to 127 */
void OLED_pos(uint8_t page, uint8_t segment)
{
	OLED_write_cmd(176 + page);
	OLED_write_cmd(segment & 0x0f);
	OLED_write_cmd(((segment & 0x70)>>4)|0x10);
     f4a:	60 77       	andi	r22, 0x70	; 112
     f4c:	62 95       	swap	r22
     f4e:	6f 70       	andi	r22, 0x0F	; 15
     f50:	60 61       	ori	r22, 0x10	; 16

/* Write to the command register */
void OLED_write_cmd(uint8_t command)
{
	volatile char *oled_cmd = (char *) 0x1000;
	oled_cmd[0] = command;
     f52:	60 83       	st	Z, r22
     f54:	08 95       	ret

00000f56 <OLED_print>:
	OLED_write_cmd(((segment & 0x70)>>4)|0x10);
}

/* Print a character from the table */
void OLED_print(char* a)
{
     f56:	cf 93       	push	r28
     f58:	df 93       	push	r29
     f5a:	88 0f       	add	r24, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	88 0f       	add	r24, r24
     f60:	99 1f       	adc	r25, r25
     f62:	dc 01       	movw	r26, r24
     f64:	a0 51       	subi	r26, 0x10	; 16
     f66:	b0 40       	sbci	r27, 0x00	; 0
	int index = (int)a - 32;
	for(int i=0; i<4; i++)
     f68:	20 e0       	ldi	r18, 0x00	; 0
     f6a:	30 e0       	ldi	r19, 0x00	; 0

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     f6c:	c0 e0       	ldi	r28, 0x00	; 0
     f6e:	d2 e1       	ldi	r29, 0x12	; 18
void OLED_print(char* a)
{
	int index = (int)a - 32;
	for(int i=0; i<4; i++)
	{
		OLED_write_data(pgm_read_byte(font[index][i]));
     f70:	ed 91       	ld	r30, X+
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	e4 91       	lpm	r30, Z

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     f76:	e8 83       	st	Y, r30

/* Print a character from the table */
void OLED_print(char* a)
{
	int index = (int)a - 32;
	for(int i=0; i<4; i++)
     f78:	2f 5f       	subi	r18, 0xFF	; 255
     f7a:	3f 4f       	sbci	r19, 0xFF	; 255
     f7c:	24 30       	cpi	r18, 0x04	; 4
     f7e:	31 05       	cpc	r19, r1
     f80:	b9 f7       	brne	.-18     	; 0xf70 <OLED_print+0x1a>
	{
		OLED_write_data(pgm_read_byte(font[index][i]));
	}
}
     f82:	df 91       	pop	r29
     f84:	cf 91       	pop	r28
     f86:	08 95       	ret

00000f88 <OLED_print_string>:

/* Print a string. If the string exceeds the screen size, stop printing. */
void OLED_print_string(char* string)
{
     f88:	0f 93       	push	r16
     f8a:	1f 93       	push	r17
     f8c:	cf 93       	push	r28
     f8e:	df 93       	push	r29
     f90:	fc 01       	movw	r30, r24
	int i=0;
	while(string[i]!='\0' && i < 32)
     f92:	80 81       	ld	r24, Z
     f94:	88 23       	and	r24, r24
     f96:	89 f0       	breq	.+34     	; 0xfba <OLED_print_string+0x32>
     f98:	8f 01       	movw	r16, r30
     f9a:	0f 5f       	subi	r16, 0xFF	; 255
     f9c:	1f 4f       	sbci	r17, 0xFF	; 255
}

/* Print a string. If the string exceeds the screen size, stop printing. */
void OLED_print_string(char* string)
{
	int i=0;
     f9e:	c0 e0       	ldi	r28, 0x00	; 0
     fa0:	d0 e0       	ldi	r29, 0x00	; 0
	while(string[i]!='\0' && i < 32)
	{
		OLED_print(string[i]);
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	0e 94 ab 07 	call	0xf56	; 0xf56 <OLED_print>
		i++;
     fa8:	21 96       	adiw	r28, 0x01	; 1

/* Print a string. If the string exceeds the screen size, stop printing. */
void OLED_print_string(char* string)
{
	int i=0;
	while(string[i]!='\0' && i < 32)
     faa:	f8 01       	movw	r30, r16
     fac:	81 91       	ld	r24, Z+
     fae:	8f 01       	movw	r16, r30
     fb0:	88 23       	and	r24, r24
     fb2:	19 f0       	breq	.+6      	; 0xfba <OLED_print_string+0x32>
     fb4:	c0 32       	cpi	r28, 0x20	; 32
     fb6:	d1 05       	cpc	r29, r1
     fb8:	a1 f7       	brne	.-24     	; 0xfa2 <OLED_print_string+0x1a>
	{
		OLED_print(string[i]);
		i++;
	}
}
     fba:	df 91       	pop	r29
     fbc:	cf 91       	pop	r28
     fbe:	1f 91       	pop	r17
     fc0:	0f 91       	pop	r16
     fc2:	08 95       	ret

00000fc4 <OLED_print_arrow>:

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     fc4:	e0 e0       	ldi	r30, 0x00	; 0
     fc6:	f2 e1       	ldi	r31, 0x12	; 18
     fc8:	80 e1       	ldi	r24, 0x10	; 16
     fca:	80 83       	st	Z, r24
     fcc:	80 83       	st	Z, r24
     fce:	80 83       	st	Z, r24
     fd0:	80 83       	st	Z, r24
     fd2:	9c e7       	ldi	r25, 0x7C	; 124
     fd4:	90 83       	st	Z, r25
     fd6:	98 e3       	ldi	r25, 0x38	; 56
     fd8:	90 83       	st	Z, r25
     fda:	80 83       	st	Z, r24
     fdc:	08 95       	ret

00000fde <OLED_erase_arrow>:
     fde:	e0 e0       	ldi	r30, 0x00	; 0
     fe0:	f2 e1       	ldi	r31, 0x12	; 18
     fe2:	10 82       	st	Z, r1
     fe4:	10 82       	st	Z, r1
     fe6:	10 82       	st	Z, r1
     fe8:	10 82       	st	Z, r1
     fea:	10 82       	st	Z, r1
     fec:	10 82       	st	Z, r1
     fee:	10 82       	st	Z, r1
     ff0:	08 95       	ret

00000ff2 <OLED_print_home>:
     ff2:	e0 e0       	ldi	r30, 0x00	; 0
     ff4:	f2 e1       	ldi	r31, 0x12	; 18
     ff6:	10 82       	st	Z, r1
     ff8:	88 ef       	ldi	r24, 0xF8	; 248
     ffa:	80 83       	st	Z, r24
     ffc:	9c ef       	ldi	r25, 0xFC	; 252
     ffe:	90 83       	st	Z, r25
    1000:	26 ef       	ldi	r18, 0xF6	; 246
    1002:	20 83       	st	Z, r18
    1004:	3f e3       	ldi	r19, 0x3F	; 63
    1006:	30 83       	st	Z, r19
    1008:	20 83       	st	Z, r18
    100a:	90 83       	st	Z, r25
    100c:	80 83       	st	Z, r24
    100e:	10 82       	st	Z, r1
    1010:	08 95       	ret

00001012 <OLED_print_woman>:
	OLED_write_data(0b11111000);
	OLED_write_data(0b00000000);
}

void OLED_print_woman(uint8_t page, uint8_t segment)
{
    1012:	0f 93       	push	r16
    1014:	1f 93       	push	r17
    1016:	cf 93       	push	r28
    1018:	df 93       	push	r29
    101a:	18 2f       	mov	r17, r24
    101c:	06 2f       	mov	r16, r22
	OLED_pos(page, segment);
    101e:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
    1022:	c0 e0       	ldi	r28, 0x00	; 0
    1024:	d2 e1       	ldi	r29, 0x12	; 18
    1026:	18 82       	st	Y, r1
    1028:	18 82       	st	Y, r1
    102a:	80 e1       	ldi	r24, 0x10	; 16
    102c:	88 83       	st	Y, r24
    102e:	94 e9       	ldi	r25, 0x94	; 148
    1030:	98 83       	st	Y, r25
    1032:	27 ed       	ldi	r18, 0xD7	; 215
    1034:	28 83       	st	Y, r18
    1036:	3f ef       	ldi	r19, 0xFF	; 255
    1038:	38 83       	st	Y, r19
    103a:	28 83       	st	Y, r18
    103c:	98 83       	st	Y, r25
    103e:	88 83       	st	Y, r24
    1040:	18 82       	st	Y, r1
    1042:	18 82       	st	Y, r1
	OLED_write_data(0b11010111);
	OLED_write_data(0b10010100);
	OLED_write_data(0b00010000);
	OLED_write_data(0b00000000);
	OLED_write_data(0b00000000);
	OLED_pos(page+1, segment);
    1044:	60 2f       	mov	r22, r16
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	81 0f       	add	r24, r17
    104a:	0e 94 9e 07 	call	0xf3c	; 0xf3c <OLED_pos>

/* Write to the data register */
void OLED_write_data(uint8_t data)
{
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
    104e:	18 82       	st	Y, r1
    1050:	92 e0       	ldi	r25, 0x02	; 2
    1052:	98 83       	st	Y, r25
    1054:	83 e0       	ldi	r24, 0x03	; 3
    1056:	88 83       	st	Y, r24
    1058:	23 e2       	ldi	r18, 0x23	; 35
    105a:	28 83       	st	Y, r18
    105c:	3f e3       	ldi	r19, 0x3F	; 63
    105e:	38 83       	st	Y, r19
    1060:	88 83       	st	Y, r24
    1062:	38 83       	st	Y, r19
    1064:	28 83       	st	Y, r18
    1066:	88 83       	st	Y, r24
    1068:	98 83       	st	Y, r25
    106a:	18 82       	st	Y, r1
	OLED_write_data(0b00111111);
	OLED_write_data(0b00100011);
	OLED_write_data(0b00000011);
	OLED_write_data(0b00000010);
	OLED_write_data(0b00000000);
}
    106c:	df 91       	pop	r29
    106e:	cf 91       	pop	r28
    1070:	1f 91       	pop	r17
    1072:	0f 91       	pop	r16
    1074:	08 95       	ret

00001076 <SPI_Init>:
#include <avr/io.h>

void SPI_Init(void)
{
	/* Set CS, MOSI and SCK output, MISO input */
	DDRB |= (1<<PB4)| (1<<PB5)|(1<<PB7);
    1076:	87 b3       	in	r24, 0x17	; 23
    1078:	80 6b       	ori	r24, 0xB0	; 176
    107a:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1<<PB6);
    107c:	be 98       	cbi	0x17, 6	; 23
	PORTB |= (1<<4);
    107e:	c4 9a       	sbi	0x18, 4	; 24
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
    1080:	81 e5       	ldi	r24, 0x51	; 81
    1082:	8d b9       	out	0x0d, r24	; 13
    1084:	08 95       	ret

00001086 <SPI_write>:
}

char SPI_write(char cData)
{
	/* Start transmission */
	SPDR = cData;
    1086:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while (!(SPSR & (1<<SPIF)))
    1088:	77 9b       	sbis	0x0e, 7	; 14
    108a:	fe cf       	rjmp	.-4      	; 0x1088 <SPI_write+0x2>
		;
	return SPDR;
    108c:	8f b1       	in	r24, 0x0f	; 15
}
    108e:	08 95       	ret

00001090 <SPI_read>:

char SPI_read(void)
{
	/* Start transmission */
	SPDR = 0x00;
    1090:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while (!(SPSR & (1<<SPIF)))
    1092:	77 9b       	sbis	0x0e, 7	; 14
    1094:	fe cf       	rjmp	.-4      	; 0x1092 <SPI_read+0x2>
		;
	return SPDR;
    1096:	8f b1       	in	r24, 0x0f	; 15
}
    1098:	08 95       	ret

0000109a <SPI_on>:

void SPI_on(void)
{
	PORTB &= ~(1<<PB4);
    109a:	c4 98       	cbi	0x18, 4	; 24
    109c:	08 95       	ret

0000109e <SPI_off>:
}

void SPI_off(void)
{
	PORTB |= (1<<PB4);
    109e:	c4 9a       	sbi	0x18, 4	; 24
    10a0:	08 95       	ret

000010a2 <SRAM_Init>:
#include <avr/io.h>

void SRAM_Init(void)
{
	/* Enable external SRAM: set SRE to 1 */
	MCUCR |= (1 << SRE);
    10a2:	85 b7       	in	r24, 0x35	; 53
    10a4:	80 68       	ori	r24, 0x80	; 128
    10a6:	85 bf       	out	0x35, r24	; 53
    10a8:	08 95       	ret

000010aa <UART_Transmit>:
#include <stdio.h>
#include <avr/io.h>

void UART_Transmit(unsigned char data){
	/* Wait for empty transmit buffer */
	while(!(UCSR0A&(1<<UDRE0)))
    10aa:	5d 9b       	sbis	0x0b, 5	; 11
    10ac:	fe cf       	rjmp	.-4      	; 0x10aa <UART_Transmit>
		;
	/* Put data into buffer */
	UDR0 = data;
    10ae:	8c b9       	out	0x0c, r24	; 12
    10b0:	08 95       	ret

000010b2 <UART_Receive>:
}

unsigned char UART_Receive(void){
	/* Wait for data to be received */
	while(!(UCSR0A&(1<<RXC0)))
    10b2:	5f 9b       	sbis	0x0b, 7	; 11
    10b4:	fe cf       	rjmp	.-4      	; 0x10b2 <UART_Receive>
		;
	/* Get and return received data from buffer */
	return UDR0;
    10b6:	8c b1       	in	r24, 0x0c	; 12
}
    10b8:	08 95       	ret

000010ba <UART_Init>:

void UART_Init(unsigned int ubrr){
	/* Set baud rate */
	UBRR0L = (unsigned char) ubrr;
    10ba:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    10bc:	88 e1       	ldi	r24, 0x18	; 24
    10be:	8a b9       	out	0x0a, r24	; 10
	/* Link printf to UART transmissions */	
	fdevopen(UART_Transmit,UART_Receive);
    10c0:	69 e5       	ldi	r22, 0x59	; 89
    10c2:	78 e0       	ldi	r23, 0x08	; 8
    10c4:	85 e5       	ldi	r24, 0x55	; 85
    10c6:	98 e0       	ldi	r25, 0x08	; 8
    10c8:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <fdevopen>
    10cc:	08 95       	ret

000010ce <__subsf3>:
    10ce:	50 58       	subi	r21, 0x80	; 128

000010d0 <__addsf3>:
    10d0:	bb 27       	eor	r27, r27
    10d2:	aa 27       	eor	r26, r26
    10d4:	0e d0       	rcall	.+28     	; 0x10f2 <__addsf3x>
    10d6:	44 c1       	rjmp	.+648    	; 0x1360 <__fp_round>
    10d8:	35 d1       	rcall	.+618    	; 0x1344 <__fp_pscA>
    10da:	30 f0       	brcs	.+12     	; 0x10e8 <__addsf3+0x18>
    10dc:	3a d1       	rcall	.+628    	; 0x1352 <__fp_pscB>
    10de:	20 f0       	brcs	.+8      	; 0x10e8 <__addsf3+0x18>
    10e0:	31 f4       	brne	.+12     	; 0x10ee <__addsf3+0x1e>
    10e2:	9f 3f       	cpi	r25, 0xFF	; 255
    10e4:	11 f4       	brne	.+4      	; 0x10ea <__addsf3+0x1a>
    10e6:	1e f4       	brtc	.+6      	; 0x10ee <__addsf3+0x1e>
    10e8:	2a c1       	rjmp	.+596    	; 0x133e <__fp_nan>
    10ea:	0e f4       	brtc	.+2      	; 0x10ee <__addsf3+0x1e>
    10ec:	e0 95       	com	r30
    10ee:	e7 fb       	bst	r30, 7
    10f0:	20 c1       	rjmp	.+576    	; 0x1332 <__fp_inf>

000010f2 <__addsf3x>:
    10f2:	e9 2f       	mov	r30, r25
    10f4:	46 d1       	rcall	.+652    	; 0x1382 <__fp_split3>
    10f6:	80 f3       	brcs	.-32     	; 0x10d8 <__addsf3+0x8>
    10f8:	ba 17       	cp	r27, r26
    10fa:	62 07       	cpc	r22, r18
    10fc:	73 07       	cpc	r23, r19
    10fe:	84 07       	cpc	r24, r20
    1100:	95 07       	cpc	r25, r21
    1102:	18 f0       	brcs	.+6      	; 0x110a <__addsf3x+0x18>
    1104:	71 f4       	brne	.+28     	; 0x1122 <__addsf3x+0x30>
    1106:	9e f5       	brtc	.+102    	; 0x116e <__addsf3x+0x7c>
    1108:	5e c1       	rjmp	.+700    	; 0x13c6 <__fp_zero>
    110a:	0e f4       	brtc	.+2      	; 0x110e <__addsf3x+0x1c>
    110c:	e0 95       	com	r30
    110e:	0b 2e       	mov	r0, r27
    1110:	ba 2f       	mov	r27, r26
    1112:	a0 2d       	mov	r26, r0
    1114:	0b 01       	movw	r0, r22
    1116:	b9 01       	movw	r22, r18
    1118:	90 01       	movw	r18, r0
    111a:	0c 01       	movw	r0, r24
    111c:	ca 01       	movw	r24, r20
    111e:	a0 01       	movw	r20, r0
    1120:	11 24       	eor	r1, r1
    1122:	ff 27       	eor	r31, r31
    1124:	59 1b       	sub	r21, r25
    1126:	99 f0       	breq	.+38     	; 0x114e <__addsf3x+0x5c>
    1128:	59 3f       	cpi	r21, 0xF9	; 249
    112a:	50 f4       	brcc	.+20     	; 0x1140 <__addsf3x+0x4e>
    112c:	50 3e       	cpi	r21, 0xE0	; 224
    112e:	68 f1       	brcs	.+90     	; 0x118a <__addsf3x+0x98>
    1130:	1a 16       	cp	r1, r26
    1132:	f0 40       	sbci	r31, 0x00	; 0
    1134:	a2 2f       	mov	r26, r18
    1136:	23 2f       	mov	r18, r19
    1138:	34 2f       	mov	r19, r20
    113a:	44 27       	eor	r20, r20
    113c:	58 5f       	subi	r21, 0xF8	; 248
    113e:	f3 cf       	rjmp	.-26     	; 0x1126 <__addsf3x+0x34>
    1140:	46 95       	lsr	r20
    1142:	37 95       	ror	r19
    1144:	27 95       	ror	r18
    1146:	a7 95       	ror	r26
    1148:	f0 40       	sbci	r31, 0x00	; 0
    114a:	53 95       	inc	r21
    114c:	c9 f7       	brne	.-14     	; 0x1140 <__addsf3x+0x4e>
    114e:	7e f4       	brtc	.+30     	; 0x116e <__addsf3x+0x7c>
    1150:	1f 16       	cp	r1, r31
    1152:	ba 0b       	sbc	r27, r26
    1154:	62 0b       	sbc	r22, r18
    1156:	73 0b       	sbc	r23, r19
    1158:	84 0b       	sbc	r24, r20
    115a:	ba f0       	brmi	.+46     	; 0x118a <__addsf3x+0x98>
    115c:	91 50       	subi	r25, 0x01	; 1
    115e:	a1 f0       	breq	.+40     	; 0x1188 <__addsf3x+0x96>
    1160:	ff 0f       	add	r31, r31
    1162:	bb 1f       	adc	r27, r27
    1164:	66 1f       	adc	r22, r22
    1166:	77 1f       	adc	r23, r23
    1168:	88 1f       	adc	r24, r24
    116a:	c2 f7       	brpl	.-16     	; 0x115c <__addsf3x+0x6a>
    116c:	0e c0       	rjmp	.+28     	; 0x118a <__addsf3x+0x98>
    116e:	ba 0f       	add	r27, r26
    1170:	62 1f       	adc	r22, r18
    1172:	73 1f       	adc	r23, r19
    1174:	84 1f       	adc	r24, r20
    1176:	48 f4       	brcc	.+18     	; 0x118a <__addsf3x+0x98>
    1178:	87 95       	ror	r24
    117a:	77 95       	ror	r23
    117c:	67 95       	ror	r22
    117e:	b7 95       	ror	r27
    1180:	f7 95       	ror	r31
    1182:	9e 3f       	cpi	r25, 0xFE	; 254
    1184:	08 f0       	brcs	.+2      	; 0x1188 <__addsf3x+0x96>
    1186:	b3 cf       	rjmp	.-154    	; 0x10ee <__addsf3+0x1e>
    1188:	93 95       	inc	r25
    118a:	88 0f       	add	r24, r24
    118c:	08 f0       	brcs	.+2      	; 0x1190 <__addsf3x+0x9e>
    118e:	99 27       	eor	r25, r25
    1190:	ee 0f       	add	r30, r30
    1192:	97 95       	ror	r25
    1194:	87 95       	ror	r24
    1196:	08 95       	ret

00001198 <__cmpsf2>:
    1198:	a8 d0       	rcall	.+336    	; 0x12ea <__fp_cmp>
    119a:	08 f4       	brcc	.+2      	; 0x119e <__cmpsf2+0x6>
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	08 95       	ret

000011a0 <__divsf3>:
    11a0:	0c d0       	rcall	.+24     	; 0x11ba <__divsf3x>
    11a2:	de c0       	rjmp	.+444    	; 0x1360 <__fp_round>
    11a4:	d6 d0       	rcall	.+428    	; 0x1352 <__fp_pscB>
    11a6:	40 f0       	brcs	.+16     	; 0x11b8 <__divsf3+0x18>
    11a8:	cd d0       	rcall	.+410    	; 0x1344 <__fp_pscA>
    11aa:	30 f0       	brcs	.+12     	; 0x11b8 <__divsf3+0x18>
    11ac:	21 f4       	brne	.+8      	; 0x11b6 <__divsf3+0x16>
    11ae:	5f 3f       	cpi	r21, 0xFF	; 255
    11b0:	19 f0       	breq	.+6      	; 0x11b8 <__divsf3+0x18>
    11b2:	bf c0       	rjmp	.+382    	; 0x1332 <__fp_inf>
    11b4:	51 11       	cpse	r21, r1
    11b6:	08 c1       	rjmp	.+528    	; 0x13c8 <__fp_szero>
    11b8:	c2 c0       	rjmp	.+388    	; 0x133e <__fp_nan>

000011ba <__divsf3x>:
    11ba:	e3 d0       	rcall	.+454    	; 0x1382 <__fp_split3>
    11bc:	98 f3       	brcs	.-26     	; 0x11a4 <__divsf3+0x4>

000011be <__divsf3_pse>:
    11be:	99 23       	and	r25, r25
    11c0:	c9 f3       	breq	.-14     	; 0x11b4 <__divsf3+0x14>
    11c2:	55 23       	and	r21, r21
    11c4:	b1 f3       	breq	.-20     	; 0x11b2 <__divsf3+0x12>
    11c6:	95 1b       	sub	r25, r21
    11c8:	55 0b       	sbc	r21, r21
    11ca:	bb 27       	eor	r27, r27
    11cc:	aa 27       	eor	r26, r26
    11ce:	62 17       	cp	r22, r18
    11d0:	73 07       	cpc	r23, r19
    11d2:	84 07       	cpc	r24, r20
    11d4:	38 f0       	brcs	.+14     	; 0x11e4 <__divsf3_pse+0x26>
    11d6:	9f 5f       	subi	r25, 0xFF	; 255
    11d8:	5f 4f       	sbci	r21, 0xFF	; 255
    11da:	22 0f       	add	r18, r18
    11dc:	33 1f       	adc	r19, r19
    11de:	44 1f       	adc	r20, r20
    11e0:	aa 1f       	adc	r26, r26
    11e2:	a9 f3       	breq	.-22     	; 0x11ce <__divsf3_pse+0x10>
    11e4:	33 d0       	rcall	.+102    	; 0x124c <__divsf3_pse+0x8e>
    11e6:	0e 2e       	mov	r0, r30
    11e8:	3a f0       	brmi	.+14     	; 0x11f8 <__divsf3_pse+0x3a>
    11ea:	e0 e8       	ldi	r30, 0x80	; 128
    11ec:	30 d0       	rcall	.+96     	; 0x124e <__divsf3_pse+0x90>
    11ee:	91 50       	subi	r25, 0x01	; 1
    11f0:	50 40       	sbci	r21, 0x00	; 0
    11f2:	e6 95       	lsr	r30
    11f4:	00 1c       	adc	r0, r0
    11f6:	ca f7       	brpl	.-14     	; 0x11ea <__divsf3_pse+0x2c>
    11f8:	29 d0       	rcall	.+82     	; 0x124c <__divsf3_pse+0x8e>
    11fa:	fe 2f       	mov	r31, r30
    11fc:	27 d0       	rcall	.+78     	; 0x124c <__divsf3_pse+0x8e>
    11fe:	66 0f       	add	r22, r22
    1200:	77 1f       	adc	r23, r23
    1202:	88 1f       	adc	r24, r24
    1204:	bb 1f       	adc	r27, r27
    1206:	26 17       	cp	r18, r22
    1208:	37 07       	cpc	r19, r23
    120a:	48 07       	cpc	r20, r24
    120c:	ab 07       	cpc	r26, r27
    120e:	b0 e8       	ldi	r27, 0x80	; 128
    1210:	09 f0       	breq	.+2      	; 0x1214 <__divsf3_pse+0x56>
    1212:	bb 0b       	sbc	r27, r27
    1214:	80 2d       	mov	r24, r0
    1216:	bf 01       	movw	r22, r30
    1218:	ff 27       	eor	r31, r31
    121a:	93 58       	subi	r25, 0x83	; 131
    121c:	5f 4f       	sbci	r21, 0xFF	; 255
    121e:	2a f0       	brmi	.+10     	; 0x122a <__divsf3_pse+0x6c>
    1220:	9e 3f       	cpi	r25, 0xFE	; 254
    1222:	51 05       	cpc	r21, r1
    1224:	68 f0       	brcs	.+26     	; 0x1240 <__divsf3_pse+0x82>
    1226:	85 c0       	rjmp	.+266    	; 0x1332 <__fp_inf>
    1228:	cf c0       	rjmp	.+414    	; 0x13c8 <__fp_szero>
    122a:	5f 3f       	cpi	r21, 0xFF	; 255
    122c:	ec f3       	brlt	.-6      	; 0x1228 <__divsf3_pse+0x6a>
    122e:	98 3e       	cpi	r25, 0xE8	; 232
    1230:	dc f3       	brlt	.-10     	; 0x1228 <__divsf3_pse+0x6a>
    1232:	86 95       	lsr	r24
    1234:	77 95       	ror	r23
    1236:	67 95       	ror	r22
    1238:	b7 95       	ror	r27
    123a:	f7 95       	ror	r31
    123c:	9f 5f       	subi	r25, 0xFF	; 255
    123e:	c9 f7       	brne	.-14     	; 0x1232 <__divsf3_pse+0x74>
    1240:	88 0f       	add	r24, r24
    1242:	91 1d       	adc	r25, r1
    1244:	96 95       	lsr	r25
    1246:	87 95       	ror	r24
    1248:	97 f9       	bld	r25, 7
    124a:	08 95       	ret
    124c:	e1 e0       	ldi	r30, 0x01	; 1
    124e:	66 0f       	add	r22, r22
    1250:	77 1f       	adc	r23, r23
    1252:	88 1f       	adc	r24, r24
    1254:	bb 1f       	adc	r27, r27
    1256:	62 17       	cp	r22, r18
    1258:	73 07       	cpc	r23, r19
    125a:	84 07       	cpc	r24, r20
    125c:	ba 07       	cpc	r27, r26
    125e:	20 f0       	brcs	.+8      	; 0x1268 <__divsf3_pse+0xaa>
    1260:	62 1b       	sub	r22, r18
    1262:	73 0b       	sbc	r23, r19
    1264:	84 0b       	sbc	r24, r20
    1266:	ba 0b       	sbc	r27, r26
    1268:	ee 1f       	adc	r30, r30
    126a:	88 f7       	brcc	.-30     	; 0x124e <__divsf3_pse+0x90>
    126c:	e0 95       	com	r30
    126e:	08 95       	ret

00001270 <__floatunsisf>:
    1270:	e8 94       	clt
    1272:	09 c0       	rjmp	.+18     	; 0x1286 <__floatsisf+0x12>

00001274 <__floatsisf>:
    1274:	97 fb       	bst	r25, 7
    1276:	3e f4       	brtc	.+14     	; 0x1286 <__floatsisf+0x12>
    1278:	90 95       	com	r25
    127a:	80 95       	com	r24
    127c:	70 95       	com	r23
    127e:	61 95       	neg	r22
    1280:	7f 4f       	sbci	r23, 0xFF	; 255
    1282:	8f 4f       	sbci	r24, 0xFF	; 255
    1284:	9f 4f       	sbci	r25, 0xFF	; 255
    1286:	99 23       	and	r25, r25
    1288:	a9 f0       	breq	.+42     	; 0x12b4 <__floatsisf+0x40>
    128a:	f9 2f       	mov	r31, r25
    128c:	96 e9       	ldi	r25, 0x96	; 150
    128e:	bb 27       	eor	r27, r27
    1290:	93 95       	inc	r25
    1292:	f6 95       	lsr	r31
    1294:	87 95       	ror	r24
    1296:	77 95       	ror	r23
    1298:	67 95       	ror	r22
    129a:	b7 95       	ror	r27
    129c:	f1 11       	cpse	r31, r1
    129e:	f8 cf       	rjmp	.-16     	; 0x1290 <__floatsisf+0x1c>
    12a0:	fa f4       	brpl	.+62     	; 0x12e0 <__floatsisf+0x6c>
    12a2:	bb 0f       	add	r27, r27
    12a4:	11 f4       	brne	.+4      	; 0x12aa <__floatsisf+0x36>
    12a6:	60 ff       	sbrs	r22, 0
    12a8:	1b c0       	rjmp	.+54     	; 0x12e0 <__floatsisf+0x6c>
    12aa:	6f 5f       	subi	r22, 0xFF	; 255
    12ac:	7f 4f       	sbci	r23, 0xFF	; 255
    12ae:	8f 4f       	sbci	r24, 0xFF	; 255
    12b0:	9f 4f       	sbci	r25, 0xFF	; 255
    12b2:	16 c0       	rjmp	.+44     	; 0x12e0 <__floatsisf+0x6c>
    12b4:	88 23       	and	r24, r24
    12b6:	11 f0       	breq	.+4      	; 0x12bc <__floatsisf+0x48>
    12b8:	96 e9       	ldi	r25, 0x96	; 150
    12ba:	11 c0       	rjmp	.+34     	; 0x12de <__floatsisf+0x6a>
    12bc:	77 23       	and	r23, r23
    12be:	21 f0       	breq	.+8      	; 0x12c8 <__floatsisf+0x54>
    12c0:	9e e8       	ldi	r25, 0x8E	; 142
    12c2:	87 2f       	mov	r24, r23
    12c4:	76 2f       	mov	r23, r22
    12c6:	05 c0       	rjmp	.+10     	; 0x12d2 <__floatsisf+0x5e>
    12c8:	66 23       	and	r22, r22
    12ca:	71 f0       	breq	.+28     	; 0x12e8 <__floatsisf+0x74>
    12cc:	96 e8       	ldi	r25, 0x86	; 134
    12ce:	86 2f       	mov	r24, r22
    12d0:	70 e0       	ldi	r23, 0x00	; 0
    12d2:	60 e0       	ldi	r22, 0x00	; 0
    12d4:	2a f0       	brmi	.+10     	; 0x12e0 <__floatsisf+0x6c>
    12d6:	9a 95       	dec	r25
    12d8:	66 0f       	add	r22, r22
    12da:	77 1f       	adc	r23, r23
    12dc:	88 1f       	adc	r24, r24
    12de:	da f7       	brpl	.-10     	; 0x12d6 <__floatsisf+0x62>
    12e0:	88 0f       	add	r24, r24
    12e2:	96 95       	lsr	r25
    12e4:	87 95       	ror	r24
    12e6:	97 f9       	bld	r25, 7
    12e8:	08 95       	ret

000012ea <__fp_cmp>:
    12ea:	99 0f       	add	r25, r25
    12ec:	00 08       	sbc	r0, r0
    12ee:	55 0f       	add	r21, r21
    12f0:	aa 0b       	sbc	r26, r26
    12f2:	e0 e8       	ldi	r30, 0x80	; 128
    12f4:	fe ef       	ldi	r31, 0xFE	; 254
    12f6:	16 16       	cp	r1, r22
    12f8:	17 06       	cpc	r1, r23
    12fa:	e8 07       	cpc	r30, r24
    12fc:	f9 07       	cpc	r31, r25
    12fe:	c0 f0       	brcs	.+48     	; 0x1330 <__fp_cmp+0x46>
    1300:	12 16       	cp	r1, r18
    1302:	13 06       	cpc	r1, r19
    1304:	e4 07       	cpc	r30, r20
    1306:	f5 07       	cpc	r31, r21
    1308:	98 f0       	brcs	.+38     	; 0x1330 <__fp_cmp+0x46>
    130a:	62 1b       	sub	r22, r18
    130c:	73 0b       	sbc	r23, r19
    130e:	84 0b       	sbc	r24, r20
    1310:	95 0b       	sbc	r25, r21
    1312:	39 f4       	brne	.+14     	; 0x1322 <__fp_cmp+0x38>
    1314:	0a 26       	eor	r0, r26
    1316:	61 f0       	breq	.+24     	; 0x1330 <__fp_cmp+0x46>
    1318:	23 2b       	or	r18, r19
    131a:	24 2b       	or	r18, r20
    131c:	25 2b       	or	r18, r21
    131e:	21 f4       	brne	.+8      	; 0x1328 <__fp_cmp+0x3e>
    1320:	08 95       	ret
    1322:	0a 26       	eor	r0, r26
    1324:	09 f4       	brne	.+2      	; 0x1328 <__fp_cmp+0x3e>
    1326:	a1 40       	sbci	r26, 0x01	; 1
    1328:	a6 95       	lsr	r26
    132a:	8f ef       	ldi	r24, 0xFF	; 255
    132c:	81 1d       	adc	r24, r1
    132e:	81 1d       	adc	r24, r1
    1330:	08 95       	ret

00001332 <__fp_inf>:
    1332:	97 f9       	bld	r25, 7
    1334:	9f 67       	ori	r25, 0x7F	; 127
    1336:	80 e8       	ldi	r24, 0x80	; 128
    1338:	70 e0       	ldi	r23, 0x00	; 0
    133a:	60 e0       	ldi	r22, 0x00	; 0
    133c:	08 95       	ret

0000133e <__fp_nan>:
    133e:	9f ef       	ldi	r25, 0xFF	; 255
    1340:	80 ec       	ldi	r24, 0xC0	; 192
    1342:	08 95       	ret

00001344 <__fp_pscA>:
    1344:	00 24       	eor	r0, r0
    1346:	0a 94       	dec	r0
    1348:	16 16       	cp	r1, r22
    134a:	17 06       	cpc	r1, r23
    134c:	18 06       	cpc	r1, r24
    134e:	09 06       	cpc	r0, r25
    1350:	08 95       	ret

00001352 <__fp_pscB>:
    1352:	00 24       	eor	r0, r0
    1354:	0a 94       	dec	r0
    1356:	12 16       	cp	r1, r18
    1358:	13 06       	cpc	r1, r19
    135a:	14 06       	cpc	r1, r20
    135c:	05 06       	cpc	r0, r21
    135e:	08 95       	ret

00001360 <__fp_round>:
    1360:	09 2e       	mov	r0, r25
    1362:	03 94       	inc	r0
    1364:	00 0c       	add	r0, r0
    1366:	11 f4       	brne	.+4      	; 0x136c <__fp_round+0xc>
    1368:	88 23       	and	r24, r24
    136a:	52 f0       	brmi	.+20     	; 0x1380 <__fp_round+0x20>
    136c:	bb 0f       	add	r27, r27
    136e:	40 f4       	brcc	.+16     	; 0x1380 <__fp_round+0x20>
    1370:	bf 2b       	or	r27, r31
    1372:	11 f4       	brne	.+4      	; 0x1378 <__fp_round+0x18>
    1374:	60 ff       	sbrs	r22, 0
    1376:	04 c0       	rjmp	.+8      	; 0x1380 <__fp_round+0x20>
    1378:	6f 5f       	subi	r22, 0xFF	; 255
    137a:	7f 4f       	sbci	r23, 0xFF	; 255
    137c:	8f 4f       	sbci	r24, 0xFF	; 255
    137e:	9f 4f       	sbci	r25, 0xFF	; 255
    1380:	08 95       	ret

00001382 <__fp_split3>:
    1382:	57 fd       	sbrc	r21, 7
    1384:	90 58       	subi	r25, 0x80	; 128
    1386:	44 0f       	add	r20, r20
    1388:	55 1f       	adc	r21, r21
    138a:	59 f0       	breq	.+22     	; 0x13a2 <__fp_splitA+0x10>
    138c:	5f 3f       	cpi	r21, 0xFF	; 255
    138e:	71 f0       	breq	.+28     	; 0x13ac <__fp_splitA+0x1a>
    1390:	47 95       	ror	r20

00001392 <__fp_splitA>:
    1392:	88 0f       	add	r24, r24
    1394:	97 fb       	bst	r25, 7
    1396:	99 1f       	adc	r25, r25
    1398:	61 f0       	breq	.+24     	; 0x13b2 <__fp_splitA+0x20>
    139a:	9f 3f       	cpi	r25, 0xFF	; 255
    139c:	79 f0       	breq	.+30     	; 0x13bc <__fp_splitA+0x2a>
    139e:	87 95       	ror	r24
    13a0:	08 95       	ret
    13a2:	12 16       	cp	r1, r18
    13a4:	13 06       	cpc	r1, r19
    13a6:	14 06       	cpc	r1, r20
    13a8:	55 1f       	adc	r21, r21
    13aa:	f2 cf       	rjmp	.-28     	; 0x1390 <__fp_split3+0xe>
    13ac:	46 95       	lsr	r20
    13ae:	f1 df       	rcall	.-30     	; 0x1392 <__fp_splitA>
    13b0:	08 c0       	rjmp	.+16     	; 0x13c2 <__fp_splitA+0x30>
    13b2:	16 16       	cp	r1, r22
    13b4:	17 06       	cpc	r1, r23
    13b6:	18 06       	cpc	r1, r24
    13b8:	99 1f       	adc	r25, r25
    13ba:	f1 cf       	rjmp	.-30     	; 0x139e <__fp_splitA+0xc>
    13bc:	86 95       	lsr	r24
    13be:	71 05       	cpc	r23, r1
    13c0:	61 05       	cpc	r22, r1
    13c2:	08 94       	sec
    13c4:	08 95       	ret

000013c6 <__fp_zero>:
    13c6:	e8 94       	clt

000013c8 <__fp_szero>:
    13c8:	bb 27       	eor	r27, r27
    13ca:	66 27       	eor	r22, r22
    13cc:	77 27       	eor	r23, r23
    13ce:	cb 01       	movw	r24, r22
    13d0:	97 f9       	bld	r25, 7
    13d2:	08 95       	ret

000013d4 <__gesf2>:
    13d4:	8a df       	rcall	.-236    	; 0x12ea <__fp_cmp>
    13d6:	08 f4       	brcc	.+2      	; 0x13da <__gesf2+0x6>
    13d8:	8f ef       	ldi	r24, 0xFF	; 255
    13da:	08 95       	ret

000013dc <__mulsf3>:
    13dc:	0b d0       	rcall	.+22     	; 0x13f4 <__mulsf3x>
    13de:	c0 cf       	rjmp	.-128    	; 0x1360 <__fp_round>
    13e0:	b1 df       	rcall	.-158    	; 0x1344 <__fp_pscA>
    13e2:	28 f0       	brcs	.+10     	; 0x13ee <__mulsf3+0x12>
    13e4:	b6 df       	rcall	.-148    	; 0x1352 <__fp_pscB>
    13e6:	18 f0       	brcs	.+6      	; 0x13ee <__mulsf3+0x12>
    13e8:	95 23       	and	r25, r21
    13ea:	09 f0       	breq	.+2      	; 0x13ee <__mulsf3+0x12>
    13ec:	a2 cf       	rjmp	.-188    	; 0x1332 <__fp_inf>
    13ee:	a7 cf       	rjmp	.-178    	; 0x133e <__fp_nan>
    13f0:	11 24       	eor	r1, r1
    13f2:	ea cf       	rjmp	.-44     	; 0x13c8 <__fp_szero>

000013f4 <__mulsf3x>:
    13f4:	c6 df       	rcall	.-116    	; 0x1382 <__fp_split3>
    13f6:	a0 f3       	brcs	.-24     	; 0x13e0 <__mulsf3+0x4>

000013f8 <__mulsf3_pse>:
    13f8:	95 9f       	mul	r25, r21
    13fa:	d1 f3       	breq	.-12     	; 0x13f0 <__mulsf3+0x14>
    13fc:	95 0f       	add	r25, r21
    13fe:	50 e0       	ldi	r21, 0x00	; 0
    1400:	55 1f       	adc	r21, r21
    1402:	62 9f       	mul	r22, r18
    1404:	f0 01       	movw	r30, r0
    1406:	72 9f       	mul	r23, r18
    1408:	bb 27       	eor	r27, r27
    140a:	f0 0d       	add	r31, r0
    140c:	b1 1d       	adc	r27, r1
    140e:	63 9f       	mul	r22, r19
    1410:	aa 27       	eor	r26, r26
    1412:	f0 0d       	add	r31, r0
    1414:	b1 1d       	adc	r27, r1
    1416:	aa 1f       	adc	r26, r26
    1418:	64 9f       	mul	r22, r20
    141a:	66 27       	eor	r22, r22
    141c:	b0 0d       	add	r27, r0
    141e:	a1 1d       	adc	r26, r1
    1420:	66 1f       	adc	r22, r22
    1422:	82 9f       	mul	r24, r18
    1424:	22 27       	eor	r18, r18
    1426:	b0 0d       	add	r27, r0
    1428:	a1 1d       	adc	r26, r1
    142a:	62 1f       	adc	r22, r18
    142c:	73 9f       	mul	r23, r19
    142e:	b0 0d       	add	r27, r0
    1430:	a1 1d       	adc	r26, r1
    1432:	62 1f       	adc	r22, r18
    1434:	83 9f       	mul	r24, r19
    1436:	a0 0d       	add	r26, r0
    1438:	61 1d       	adc	r22, r1
    143a:	22 1f       	adc	r18, r18
    143c:	74 9f       	mul	r23, r20
    143e:	33 27       	eor	r19, r19
    1440:	a0 0d       	add	r26, r0
    1442:	61 1d       	adc	r22, r1
    1444:	23 1f       	adc	r18, r19
    1446:	84 9f       	mul	r24, r20
    1448:	60 0d       	add	r22, r0
    144a:	21 1d       	adc	r18, r1
    144c:	82 2f       	mov	r24, r18
    144e:	76 2f       	mov	r23, r22
    1450:	6a 2f       	mov	r22, r26
    1452:	11 24       	eor	r1, r1
    1454:	9f 57       	subi	r25, 0x7F	; 127
    1456:	50 40       	sbci	r21, 0x00	; 0
    1458:	8a f0       	brmi	.+34     	; 0x147c <__mulsf3_pse+0x84>
    145a:	e1 f0       	breq	.+56     	; 0x1494 <__mulsf3_pse+0x9c>
    145c:	88 23       	and	r24, r24
    145e:	4a f0       	brmi	.+18     	; 0x1472 <__mulsf3_pse+0x7a>
    1460:	ee 0f       	add	r30, r30
    1462:	ff 1f       	adc	r31, r31
    1464:	bb 1f       	adc	r27, r27
    1466:	66 1f       	adc	r22, r22
    1468:	77 1f       	adc	r23, r23
    146a:	88 1f       	adc	r24, r24
    146c:	91 50       	subi	r25, 0x01	; 1
    146e:	50 40       	sbci	r21, 0x00	; 0
    1470:	a9 f7       	brne	.-22     	; 0x145c <__mulsf3_pse+0x64>
    1472:	9e 3f       	cpi	r25, 0xFE	; 254
    1474:	51 05       	cpc	r21, r1
    1476:	70 f0       	brcs	.+28     	; 0x1494 <__mulsf3_pse+0x9c>
    1478:	5c cf       	rjmp	.-328    	; 0x1332 <__fp_inf>
    147a:	a6 cf       	rjmp	.-180    	; 0x13c8 <__fp_szero>
    147c:	5f 3f       	cpi	r21, 0xFF	; 255
    147e:	ec f3       	brlt	.-6      	; 0x147a <__mulsf3_pse+0x82>
    1480:	98 3e       	cpi	r25, 0xE8	; 232
    1482:	dc f3       	brlt	.-10     	; 0x147a <__mulsf3_pse+0x82>
    1484:	86 95       	lsr	r24
    1486:	77 95       	ror	r23
    1488:	67 95       	ror	r22
    148a:	b7 95       	ror	r27
    148c:	f7 95       	ror	r31
    148e:	e7 95       	ror	r30
    1490:	9f 5f       	subi	r25, 0xFF	; 255
    1492:	c1 f7       	brne	.-16     	; 0x1484 <__mulsf3_pse+0x8c>
    1494:	fe 2b       	or	r31, r30
    1496:	88 0f       	add	r24, r24
    1498:	91 1d       	adc	r25, r1
    149a:	96 95       	lsr	r25
    149c:	87 95       	ror	r24
    149e:	97 f9       	bld	r25, 7
    14a0:	08 95       	ret

000014a2 <fdevopen>:
    14a2:	0f 93       	push	r16
    14a4:	1f 93       	push	r17
    14a6:	cf 93       	push	r28
    14a8:	df 93       	push	r29
    14aa:	ec 01       	movw	r28, r24
    14ac:	8b 01       	movw	r16, r22
    14ae:	00 97       	sbiw	r24, 0x00	; 0
    14b0:	31 f4       	brne	.+12     	; 0x14be <fdevopen+0x1c>
    14b2:	61 15       	cp	r22, r1
    14b4:	71 05       	cpc	r23, r1
    14b6:	19 f4       	brne	.+6      	; 0x14be <fdevopen+0x1c>
    14b8:	80 e0       	ldi	r24, 0x00	; 0
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	38 c0       	rjmp	.+112    	; 0x152e <fdevopen+0x8c>
    14be:	6e e0       	ldi	r22, 0x0E	; 14
    14c0:	70 e0       	ldi	r23, 0x00	; 0
    14c2:	81 e0       	ldi	r24, 0x01	; 1
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	0e 94 af 0c 	call	0x195e	; 0x195e <calloc>
    14ca:	fc 01       	movw	r30, r24
    14cc:	00 97       	sbiw	r24, 0x00	; 0
    14ce:	a1 f3       	breq	.-24     	; 0x14b8 <fdevopen+0x16>
    14d0:	80 e8       	ldi	r24, 0x80	; 128
    14d2:	83 83       	std	Z+3, r24	; 0x03
    14d4:	01 15       	cp	r16, r1
    14d6:	11 05       	cpc	r17, r1
    14d8:	71 f0       	breq	.+28     	; 0x14f6 <fdevopen+0x54>
    14da:	13 87       	std	Z+11, r17	; 0x0b
    14dc:	02 87       	std	Z+10, r16	; 0x0a
    14de:	81 e8       	ldi	r24, 0x81	; 129
    14e0:	83 83       	std	Z+3, r24	; 0x03
    14e2:	80 91 85 02 	lds	r24, 0x0285
    14e6:	90 91 86 02 	lds	r25, 0x0286
    14ea:	89 2b       	or	r24, r25
    14ec:	21 f4       	brne	.+8      	; 0x14f6 <fdevopen+0x54>
    14ee:	f0 93 86 02 	sts	0x0286, r31
    14f2:	e0 93 85 02 	sts	0x0285, r30
    14f6:	20 97       	sbiw	r28, 0x00	; 0
    14f8:	c9 f0       	breq	.+50     	; 0x152c <fdevopen+0x8a>
    14fa:	d1 87       	std	Z+9, r29	; 0x09
    14fc:	c0 87       	std	Z+8, r28	; 0x08
    14fe:	83 81       	ldd	r24, Z+3	; 0x03
    1500:	82 60       	ori	r24, 0x02	; 2
    1502:	83 83       	std	Z+3, r24	; 0x03
    1504:	80 91 87 02 	lds	r24, 0x0287
    1508:	90 91 88 02 	lds	r25, 0x0288
    150c:	89 2b       	or	r24, r25
    150e:	71 f4       	brne	.+28     	; 0x152c <fdevopen+0x8a>
    1510:	f0 93 88 02 	sts	0x0288, r31
    1514:	e0 93 87 02 	sts	0x0287, r30
    1518:	80 91 89 02 	lds	r24, 0x0289
    151c:	90 91 8a 02 	lds	r25, 0x028A
    1520:	89 2b       	or	r24, r25
    1522:	21 f4       	brne	.+8      	; 0x152c <fdevopen+0x8a>
    1524:	f0 93 8a 02 	sts	0x028A, r31
    1528:	e0 93 89 02 	sts	0x0289, r30
    152c:	cf 01       	movw	r24, r30
    152e:	df 91       	pop	r29
    1530:	cf 91       	pop	r28
    1532:	1f 91       	pop	r17
    1534:	0f 91       	pop	r16
    1536:	08 95       	ret

00001538 <printf>:
    1538:	a0 e0       	ldi	r26, 0x00	; 0
    153a:	b0 e0       	ldi	r27, 0x00	; 0
    153c:	e2 ea       	ldi	r30, 0xA2	; 162
    153e:	fa e0       	ldi	r31, 0x0A	; 10
    1540:	0c 94 af 0e 	jmp	0x1d5e	; 0x1d5e <__prologue_saves__+0x20>
    1544:	fe 01       	movw	r30, r28
    1546:	35 96       	adiw	r30, 0x05	; 5
    1548:	61 91       	ld	r22, Z+
    154a:	71 91       	ld	r23, Z+
    154c:	af 01       	movw	r20, r30
    154e:	80 91 87 02 	lds	r24, 0x0287
    1552:	90 91 88 02 	lds	r25, 0x0288
    1556:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <vfprintf>
    155a:	e2 e0       	ldi	r30, 0x02	; 2
    155c:	0c 94 cb 0e 	jmp	0x1d96	; 0x1d96 <__epilogue_restores__+0x20>

00001560 <puts>:
    1560:	0f 93       	push	r16
    1562:	1f 93       	push	r17
    1564:	cf 93       	push	r28
    1566:	df 93       	push	r29
    1568:	e0 91 87 02 	lds	r30, 0x0287
    156c:	f0 91 88 02 	lds	r31, 0x0288
    1570:	23 81       	ldd	r18, Z+3	; 0x03
    1572:	21 ff       	sbrs	r18, 1
    1574:	1b c0       	rjmp	.+54     	; 0x15ac <puts+0x4c>
    1576:	ec 01       	movw	r28, r24
    1578:	00 e0       	ldi	r16, 0x00	; 0
    157a:	10 e0       	ldi	r17, 0x00	; 0
    157c:	89 91       	ld	r24, Y+
    157e:	60 91 87 02 	lds	r22, 0x0287
    1582:	70 91 88 02 	lds	r23, 0x0288
    1586:	db 01       	movw	r26, r22
    1588:	18 96       	adiw	r26, 0x08	; 8
    158a:	ed 91       	ld	r30, X+
    158c:	fc 91       	ld	r31, X
    158e:	19 97       	sbiw	r26, 0x09	; 9
    1590:	88 23       	and	r24, r24
    1592:	31 f0       	breq	.+12     	; 0x15a0 <puts+0x40>
    1594:	09 95       	icall
    1596:	89 2b       	or	r24, r25
    1598:	89 f3       	breq	.-30     	; 0x157c <puts+0x1c>
    159a:	0f ef       	ldi	r16, 0xFF	; 255
    159c:	1f ef       	ldi	r17, 0xFF	; 255
    159e:	ee cf       	rjmp	.-36     	; 0x157c <puts+0x1c>
    15a0:	8a e0       	ldi	r24, 0x0A	; 10
    15a2:	09 95       	icall
    15a4:	89 2b       	or	r24, r25
    15a6:	11 f4       	brne	.+4      	; 0x15ac <puts+0x4c>
    15a8:	c8 01       	movw	r24, r16
    15aa:	02 c0       	rjmp	.+4      	; 0x15b0 <puts+0x50>
    15ac:	8f ef       	ldi	r24, 0xFF	; 255
    15ae:	9f ef       	ldi	r25, 0xFF	; 255
    15b0:	df 91       	pop	r29
    15b2:	cf 91       	pop	r28
    15b4:	1f 91       	pop	r17
    15b6:	0f 91       	pop	r16
    15b8:	08 95       	ret

000015ba <vfprintf>:
    15ba:	ac e0       	ldi	r26, 0x0C	; 12
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	e3 ee       	ldi	r30, 0xE3	; 227
    15c0:	fa e0       	ldi	r31, 0x0A	; 10
    15c2:	0c 94 9f 0e 	jmp	0x1d3e	; 0x1d3e <__prologue_saves__>
    15c6:	7c 01       	movw	r14, r24
    15c8:	6b 01       	movw	r12, r22
    15ca:	8a 01       	movw	r16, r20
    15cc:	fc 01       	movw	r30, r24
    15ce:	17 82       	std	Z+7, r1	; 0x07
    15d0:	16 82       	std	Z+6, r1	; 0x06
    15d2:	83 81       	ldd	r24, Z+3	; 0x03
    15d4:	81 ff       	sbrs	r24, 1
    15d6:	bd c1       	rjmp	.+890    	; 0x1952 <vfprintf+0x398>
    15d8:	ce 01       	movw	r24, r28
    15da:	01 96       	adiw	r24, 0x01	; 1
    15dc:	4c 01       	movw	r8, r24
    15de:	f7 01       	movw	r30, r14
    15e0:	93 81       	ldd	r25, Z+3	; 0x03
    15e2:	f6 01       	movw	r30, r12
    15e4:	93 fd       	sbrc	r25, 3
    15e6:	85 91       	lpm	r24, Z+
    15e8:	93 ff       	sbrs	r25, 3
    15ea:	81 91       	ld	r24, Z+
    15ec:	6f 01       	movw	r12, r30
    15ee:	88 23       	and	r24, r24
    15f0:	09 f4       	brne	.+2      	; 0x15f4 <vfprintf+0x3a>
    15f2:	ab c1       	rjmp	.+854    	; 0x194a <vfprintf+0x390>
    15f4:	85 32       	cpi	r24, 0x25	; 37
    15f6:	39 f4       	brne	.+14     	; 0x1606 <vfprintf+0x4c>
    15f8:	93 fd       	sbrc	r25, 3
    15fa:	85 91       	lpm	r24, Z+
    15fc:	93 ff       	sbrs	r25, 3
    15fe:	81 91       	ld	r24, Z+
    1600:	6f 01       	movw	r12, r30
    1602:	85 32       	cpi	r24, 0x25	; 37
    1604:	29 f4       	brne	.+10     	; 0x1610 <vfprintf+0x56>
    1606:	b7 01       	movw	r22, r14
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <fputc>
    160e:	e7 cf       	rjmp	.-50     	; 0x15de <vfprintf+0x24>
    1610:	51 2c       	mov	r5, r1
    1612:	31 2c       	mov	r3, r1
    1614:	20 e0       	ldi	r18, 0x00	; 0
    1616:	20 32       	cpi	r18, 0x20	; 32
    1618:	a0 f4       	brcc	.+40     	; 0x1642 <vfprintf+0x88>
    161a:	8b 32       	cpi	r24, 0x2B	; 43
    161c:	69 f0       	breq	.+26     	; 0x1638 <vfprintf+0x7e>
    161e:	30 f4       	brcc	.+12     	; 0x162c <vfprintf+0x72>
    1620:	80 32       	cpi	r24, 0x20	; 32
    1622:	59 f0       	breq	.+22     	; 0x163a <vfprintf+0x80>
    1624:	83 32       	cpi	r24, 0x23	; 35
    1626:	69 f4       	brne	.+26     	; 0x1642 <vfprintf+0x88>
    1628:	20 61       	ori	r18, 0x10	; 16
    162a:	2c c0       	rjmp	.+88     	; 0x1684 <vfprintf+0xca>
    162c:	8d 32       	cpi	r24, 0x2D	; 45
    162e:	39 f0       	breq	.+14     	; 0x163e <vfprintf+0x84>
    1630:	80 33       	cpi	r24, 0x30	; 48
    1632:	39 f4       	brne	.+14     	; 0x1642 <vfprintf+0x88>
    1634:	21 60       	ori	r18, 0x01	; 1
    1636:	26 c0       	rjmp	.+76     	; 0x1684 <vfprintf+0xca>
    1638:	22 60       	ori	r18, 0x02	; 2
    163a:	24 60       	ori	r18, 0x04	; 4
    163c:	23 c0       	rjmp	.+70     	; 0x1684 <vfprintf+0xca>
    163e:	28 60       	ori	r18, 0x08	; 8
    1640:	21 c0       	rjmp	.+66     	; 0x1684 <vfprintf+0xca>
    1642:	27 fd       	sbrc	r18, 7
    1644:	27 c0       	rjmp	.+78     	; 0x1694 <vfprintf+0xda>
    1646:	30 ed       	ldi	r19, 0xD0	; 208
    1648:	38 0f       	add	r19, r24
    164a:	3a 30       	cpi	r19, 0x0A	; 10
    164c:	78 f4       	brcc	.+30     	; 0x166c <vfprintf+0xb2>
    164e:	26 ff       	sbrs	r18, 6
    1650:	06 c0       	rjmp	.+12     	; 0x165e <vfprintf+0xa4>
    1652:	fa e0       	ldi	r31, 0x0A	; 10
    1654:	5f 9e       	mul	r5, r31
    1656:	30 0d       	add	r19, r0
    1658:	11 24       	eor	r1, r1
    165a:	53 2e       	mov	r5, r19
    165c:	13 c0       	rjmp	.+38     	; 0x1684 <vfprintf+0xca>
    165e:	8a e0       	ldi	r24, 0x0A	; 10
    1660:	38 9e       	mul	r3, r24
    1662:	30 0d       	add	r19, r0
    1664:	11 24       	eor	r1, r1
    1666:	33 2e       	mov	r3, r19
    1668:	20 62       	ori	r18, 0x20	; 32
    166a:	0c c0       	rjmp	.+24     	; 0x1684 <vfprintf+0xca>
    166c:	8e 32       	cpi	r24, 0x2E	; 46
    166e:	21 f4       	brne	.+8      	; 0x1678 <vfprintf+0xbe>
    1670:	26 fd       	sbrc	r18, 6
    1672:	6b c1       	rjmp	.+726    	; 0x194a <vfprintf+0x390>
    1674:	20 64       	ori	r18, 0x40	; 64
    1676:	06 c0       	rjmp	.+12     	; 0x1684 <vfprintf+0xca>
    1678:	8c 36       	cpi	r24, 0x6C	; 108
    167a:	11 f4       	brne	.+4      	; 0x1680 <vfprintf+0xc6>
    167c:	20 68       	ori	r18, 0x80	; 128
    167e:	02 c0       	rjmp	.+4      	; 0x1684 <vfprintf+0xca>
    1680:	88 36       	cpi	r24, 0x68	; 104
    1682:	41 f4       	brne	.+16     	; 0x1694 <vfprintf+0xda>
    1684:	f6 01       	movw	r30, r12
    1686:	93 fd       	sbrc	r25, 3
    1688:	85 91       	lpm	r24, Z+
    168a:	93 ff       	sbrs	r25, 3
    168c:	81 91       	ld	r24, Z+
    168e:	6f 01       	movw	r12, r30
    1690:	81 11       	cpse	r24, r1
    1692:	c1 cf       	rjmp	.-126    	; 0x1616 <vfprintf+0x5c>
    1694:	98 2f       	mov	r25, r24
    1696:	9f 7d       	andi	r25, 0xDF	; 223
    1698:	95 54       	subi	r25, 0x45	; 69
    169a:	93 30       	cpi	r25, 0x03	; 3
    169c:	28 f4       	brcc	.+10     	; 0x16a8 <vfprintf+0xee>
    169e:	0c 5f       	subi	r16, 0xFC	; 252
    16a0:	1f 4f       	sbci	r17, 0xFF	; 255
    16a2:	ff e3       	ldi	r31, 0x3F	; 63
    16a4:	f9 83       	std	Y+1, r31	; 0x01
    16a6:	0d c0       	rjmp	.+26     	; 0x16c2 <vfprintf+0x108>
    16a8:	83 36       	cpi	r24, 0x63	; 99
    16aa:	31 f0       	breq	.+12     	; 0x16b8 <vfprintf+0xfe>
    16ac:	83 37       	cpi	r24, 0x73	; 115
    16ae:	71 f0       	breq	.+28     	; 0x16cc <vfprintf+0x112>
    16b0:	83 35       	cpi	r24, 0x53	; 83
    16b2:	09 f0       	breq	.+2      	; 0x16b6 <vfprintf+0xfc>
    16b4:	5b c0       	rjmp	.+182    	; 0x176c <vfprintf+0x1b2>
    16b6:	22 c0       	rjmp	.+68     	; 0x16fc <vfprintf+0x142>
    16b8:	f8 01       	movw	r30, r16
    16ba:	80 81       	ld	r24, Z
    16bc:	89 83       	std	Y+1, r24	; 0x01
    16be:	0e 5f       	subi	r16, 0xFE	; 254
    16c0:	1f 4f       	sbci	r17, 0xFF	; 255
    16c2:	44 24       	eor	r4, r4
    16c4:	43 94       	inc	r4
    16c6:	51 2c       	mov	r5, r1
    16c8:	54 01       	movw	r10, r8
    16ca:	15 c0       	rjmp	.+42     	; 0x16f6 <vfprintf+0x13c>
    16cc:	38 01       	movw	r6, r16
    16ce:	f2 e0       	ldi	r31, 0x02	; 2
    16d0:	6f 0e       	add	r6, r31
    16d2:	71 1c       	adc	r7, r1
    16d4:	f8 01       	movw	r30, r16
    16d6:	a0 80       	ld	r10, Z
    16d8:	b1 80       	ldd	r11, Z+1	; 0x01
    16da:	26 ff       	sbrs	r18, 6
    16dc:	03 c0       	rjmp	.+6      	; 0x16e4 <vfprintf+0x12a>
    16de:	65 2d       	mov	r22, r5
    16e0:	70 e0       	ldi	r23, 0x00	; 0
    16e2:	02 c0       	rjmp	.+4      	; 0x16e8 <vfprintf+0x12e>
    16e4:	6f ef       	ldi	r22, 0xFF	; 255
    16e6:	7f ef       	ldi	r23, 0xFF	; 255
    16e8:	c5 01       	movw	r24, r10
    16ea:	2c 87       	std	Y+12, r18	; 0x0c
    16ec:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <strnlen>
    16f0:	2c 01       	movw	r4, r24
    16f2:	83 01       	movw	r16, r6
    16f4:	2c 85       	ldd	r18, Y+12	; 0x0c
    16f6:	2f 77       	andi	r18, 0x7F	; 127
    16f8:	22 2e       	mov	r2, r18
    16fa:	17 c0       	rjmp	.+46     	; 0x172a <vfprintf+0x170>
    16fc:	38 01       	movw	r6, r16
    16fe:	f2 e0       	ldi	r31, 0x02	; 2
    1700:	6f 0e       	add	r6, r31
    1702:	71 1c       	adc	r7, r1
    1704:	f8 01       	movw	r30, r16
    1706:	a0 80       	ld	r10, Z
    1708:	b1 80       	ldd	r11, Z+1	; 0x01
    170a:	26 ff       	sbrs	r18, 6
    170c:	03 c0       	rjmp	.+6      	; 0x1714 <vfprintf+0x15a>
    170e:	65 2d       	mov	r22, r5
    1710:	70 e0       	ldi	r23, 0x00	; 0
    1712:	02 c0       	rjmp	.+4      	; 0x1718 <vfprintf+0x15e>
    1714:	6f ef       	ldi	r22, 0xFF	; 255
    1716:	7f ef       	ldi	r23, 0xFF	; 255
    1718:	c5 01       	movw	r24, r10
    171a:	2c 87       	std	Y+12, r18	; 0x0c
    171c:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <strnlen_P>
    1720:	2c 01       	movw	r4, r24
    1722:	2c 85       	ldd	r18, Y+12	; 0x0c
    1724:	20 68       	ori	r18, 0x80	; 128
    1726:	22 2e       	mov	r2, r18
    1728:	83 01       	movw	r16, r6
    172a:	23 fc       	sbrc	r2, 3
    172c:	1b c0       	rjmp	.+54     	; 0x1764 <vfprintf+0x1aa>
    172e:	83 2d       	mov	r24, r3
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	48 16       	cp	r4, r24
    1734:	59 06       	cpc	r5, r25
    1736:	b0 f4       	brcc	.+44     	; 0x1764 <vfprintf+0x1aa>
    1738:	b7 01       	movw	r22, r14
    173a:	80 e2       	ldi	r24, 0x20	; 32
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <fputc>
    1742:	3a 94       	dec	r3
    1744:	f4 cf       	rjmp	.-24     	; 0x172e <vfprintf+0x174>
    1746:	f5 01       	movw	r30, r10
    1748:	27 fc       	sbrc	r2, 7
    174a:	85 91       	lpm	r24, Z+
    174c:	27 fe       	sbrs	r2, 7
    174e:	81 91       	ld	r24, Z+
    1750:	5f 01       	movw	r10, r30
    1752:	b7 01       	movw	r22, r14
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <fputc>
    175a:	31 10       	cpse	r3, r1
    175c:	3a 94       	dec	r3
    175e:	f1 e0       	ldi	r31, 0x01	; 1
    1760:	4f 1a       	sub	r4, r31
    1762:	51 08       	sbc	r5, r1
    1764:	41 14       	cp	r4, r1
    1766:	51 04       	cpc	r5, r1
    1768:	71 f7       	brne	.-36     	; 0x1746 <vfprintf+0x18c>
    176a:	e5 c0       	rjmp	.+458    	; 0x1936 <vfprintf+0x37c>
    176c:	84 36       	cpi	r24, 0x64	; 100
    176e:	11 f0       	breq	.+4      	; 0x1774 <vfprintf+0x1ba>
    1770:	89 36       	cpi	r24, 0x69	; 105
    1772:	39 f5       	brne	.+78     	; 0x17c2 <vfprintf+0x208>
    1774:	f8 01       	movw	r30, r16
    1776:	27 ff       	sbrs	r18, 7
    1778:	07 c0       	rjmp	.+14     	; 0x1788 <vfprintf+0x1ce>
    177a:	60 81       	ld	r22, Z
    177c:	71 81       	ldd	r23, Z+1	; 0x01
    177e:	82 81       	ldd	r24, Z+2	; 0x02
    1780:	93 81       	ldd	r25, Z+3	; 0x03
    1782:	0c 5f       	subi	r16, 0xFC	; 252
    1784:	1f 4f       	sbci	r17, 0xFF	; 255
    1786:	08 c0       	rjmp	.+16     	; 0x1798 <vfprintf+0x1de>
    1788:	60 81       	ld	r22, Z
    178a:	71 81       	ldd	r23, Z+1	; 0x01
    178c:	88 27       	eor	r24, r24
    178e:	77 fd       	sbrc	r23, 7
    1790:	80 95       	com	r24
    1792:	98 2f       	mov	r25, r24
    1794:	0e 5f       	subi	r16, 0xFE	; 254
    1796:	1f 4f       	sbci	r17, 0xFF	; 255
    1798:	2f 76       	andi	r18, 0x6F	; 111
    179a:	b2 2e       	mov	r11, r18
    179c:	97 ff       	sbrs	r25, 7
    179e:	09 c0       	rjmp	.+18     	; 0x17b2 <vfprintf+0x1f8>
    17a0:	90 95       	com	r25
    17a2:	80 95       	com	r24
    17a4:	70 95       	com	r23
    17a6:	61 95       	neg	r22
    17a8:	7f 4f       	sbci	r23, 0xFF	; 255
    17aa:	8f 4f       	sbci	r24, 0xFF	; 255
    17ac:	9f 4f       	sbci	r25, 0xFF	; 255
    17ae:	20 68       	ori	r18, 0x80	; 128
    17b0:	b2 2e       	mov	r11, r18
    17b2:	2a e0       	ldi	r18, 0x0A	; 10
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	a4 01       	movw	r20, r8
    17b8:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <__ultoa_invert>
    17bc:	a8 2e       	mov	r10, r24
    17be:	a8 18       	sub	r10, r8
    17c0:	44 c0       	rjmp	.+136    	; 0x184a <vfprintf+0x290>
    17c2:	85 37       	cpi	r24, 0x75	; 117
    17c4:	29 f4       	brne	.+10     	; 0x17d0 <vfprintf+0x216>
    17c6:	2f 7e       	andi	r18, 0xEF	; 239
    17c8:	b2 2e       	mov	r11, r18
    17ca:	2a e0       	ldi	r18, 0x0A	; 10
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	25 c0       	rjmp	.+74     	; 0x181a <vfprintf+0x260>
    17d0:	f2 2f       	mov	r31, r18
    17d2:	f9 7f       	andi	r31, 0xF9	; 249
    17d4:	bf 2e       	mov	r11, r31
    17d6:	8f 36       	cpi	r24, 0x6F	; 111
    17d8:	c1 f0       	breq	.+48     	; 0x180a <vfprintf+0x250>
    17da:	18 f4       	brcc	.+6      	; 0x17e2 <vfprintf+0x228>
    17dc:	88 35       	cpi	r24, 0x58	; 88
    17de:	79 f0       	breq	.+30     	; 0x17fe <vfprintf+0x244>
    17e0:	b4 c0       	rjmp	.+360    	; 0x194a <vfprintf+0x390>
    17e2:	80 37       	cpi	r24, 0x70	; 112
    17e4:	19 f0       	breq	.+6      	; 0x17ec <vfprintf+0x232>
    17e6:	88 37       	cpi	r24, 0x78	; 120
    17e8:	21 f0       	breq	.+8      	; 0x17f2 <vfprintf+0x238>
    17ea:	af c0       	rjmp	.+350    	; 0x194a <vfprintf+0x390>
    17ec:	2f 2f       	mov	r18, r31
    17ee:	20 61       	ori	r18, 0x10	; 16
    17f0:	b2 2e       	mov	r11, r18
    17f2:	b4 fe       	sbrs	r11, 4
    17f4:	0d c0       	rjmp	.+26     	; 0x1810 <vfprintf+0x256>
    17f6:	8b 2d       	mov	r24, r11
    17f8:	84 60       	ori	r24, 0x04	; 4
    17fa:	b8 2e       	mov	r11, r24
    17fc:	09 c0       	rjmp	.+18     	; 0x1810 <vfprintf+0x256>
    17fe:	24 ff       	sbrs	r18, 4
    1800:	0a c0       	rjmp	.+20     	; 0x1816 <vfprintf+0x25c>
    1802:	9f 2f       	mov	r25, r31
    1804:	96 60       	ori	r25, 0x06	; 6
    1806:	b9 2e       	mov	r11, r25
    1808:	06 c0       	rjmp	.+12     	; 0x1816 <vfprintf+0x25c>
    180a:	28 e0       	ldi	r18, 0x08	; 8
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	05 c0       	rjmp	.+10     	; 0x181a <vfprintf+0x260>
    1810:	20 e1       	ldi	r18, 0x10	; 16
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	02 c0       	rjmp	.+4      	; 0x181a <vfprintf+0x260>
    1816:	20 e1       	ldi	r18, 0x10	; 16
    1818:	32 e0       	ldi	r19, 0x02	; 2
    181a:	f8 01       	movw	r30, r16
    181c:	b7 fe       	sbrs	r11, 7
    181e:	07 c0       	rjmp	.+14     	; 0x182e <vfprintf+0x274>
    1820:	60 81       	ld	r22, Z
    1822:	71 81       	ldd	r23, Z+1	; 0x01
    1824:	82 81       	ldd	r24, Z+2	; 0x02
    1826:	93 81       	ldd	r25, Z+3	; 0x03
    1828:	0c 5f       	subi	r16, 0xFC	; 252
    182a:	1f 4f       	sbci	r17, 0xFF	; 255
    182c:	06 c0       	rjmp	.+12     	; 0x183a <vfprintf+0x280>
    182e:	60 81       	ld	r22, Z
    1830:	71 81       	ldd	r23, Z+1	; 0x01
    1832:	80 e0       	ldi	r24, 0x00	; 0
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	0e 5f       	subi	r16, 0xFE	; 254
    1838:	1f 4f       	sbci	r17, 0xFF	; 255
    183a:	a4 01       	movw	r20, r8
    183c:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <__ultoa_invert>
    1840:	a8 2e       	mov	r10, r24
    1842:	a8 18       	sub	r10, r8
    1844:	fb 2d       	mov	r31, r11
    1846:	ff 77       	andi	r31, 0x7F	; 127
    1848:	bf 2e       	mov	r11, r31
    184a:	b6 fe       	sbrs	r11, 6
    184c:	0b c0       	rjmp	.+22     	; 0x1864 <vfprintf+0x2aa>
    184e:	2b 2d       	mov	r18, r11
    1850:	2e 7f       	andi	r18, 0xFE	; 254
    1852:	a5 14       	cp	r10, r5
    1854:	50 f4       	brcc	.+20     	; 0x186a <vfprintf+0x2b0>
    1856:	b4 fe       	sbrs	r11, 4
    1858:	0a c0       	rjmp	.+20     	; 0x186e <vfprintf+0x2b4>
    185a:	b2 fc       	sbrc	r11, 2
    185c:	08 c0       	rjmp	.+16     	; 0x186e <vfprintf+0x2b4>
    185e:	2b 2d       	mov	r18, r11
    1860:	2e 7e       	andi	r18, 0xEE	; 238
    1862:	05 c0       	rjmp	.+10     	; 0x186e <vfprintf+0x2b4>
    1864:	7a 2c       	mov	r7, r10
    1866:	2b 2d       	mov	r18, r11
    1868:	03 c0       	rjmp	.+6      	; 0x1870 <vfprintf+0x2b6>
    186a:	7a 2c       	mov	r7, r10
    186c:	01 c0       	rjmp	.+2      	; 0x1870 <vfprintf+0x2b6>
    186e:	75 2c       	mov	r7, r5
    1870:	24 ff       	sbrs	r18, 4
    1872:	0d c0       	rjmp	.+26     	; 0x188e <vfprintf+0x2d4>
    1874:	fe 01       	movw	r30, r28
    1876:	ea 0d       	add	r30, r10
    1878:	f1 1d       	adc	r31, r1
    187a:	80 81       	ld	r24, Z
    187c:	80 33       	cpi	r24, 0x30	; 48
    187e:	11 f4       	brne	.+4      	; 0x1884 <vfprintf+0x2ca>
    1880:	29 7e       	andi	r18, 0xE9	; 233
    1882:	09 c0       	rjmp	.+18     	; 0x1896 <vfprintf+0x2dc>
    1884:	22 ff       	sbrs	r18, 2
    1886:	06 c0       	rjmp	.+12     	; 0x1894 <vfprintf+0x2da>
    1888:	73 94       	inc	r7
    188a:	73 94       	inc	r7
    188c:	04 c0       	rjmp	.+8      	; 0x1896 <vfprintf+0x2dc>
    188e:	82 2f       	mov	r24, r18
    1890:	86 78       	andi	r24, 0x86	; 134
    1892:	09 f0       	breq	.+2      	; 0x1896 <vfprintf+0x2dc>
    1894:	73 94       	inc	r7
    1896:	23 fd       	sbrc	r18, 3
    1898:	13 c0       	rjmp	.+38     	; 0x18c0 <vfprintf+0x306>
    189a:	20 ff       	sbrs	r18, 0
    189c:	06 c0       	rjmp	.+12     	; 0x18aa <vfprintf+0x2f0>
    189e:	5a 2c       	mov	r5, r10
    18a0:	73 14       	cp	r7, r3
    18a2:	18 f4       	brcc	.+6      	; 0x18aa <vfprintf+0x2f0>
    18a4:	53 0c       	add	r5, r3
    18a6:	57 18       	sub	r5, r7
    18a8:	73 2c       	mov	r7, r3
    18aa:	73 14       	cp	r7, r3
    18ac:	68 f4       	brcc	.+26     	; 0x18c8 <vfprintf+0x30e>
    18ae:	b7 01       	movw	r22, r14
    18b0:	80 e2       	ldi	r24, 0x20	; 32
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	2c 87       	std	Y+12, r18	; 0x0c
    18b6:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <fputc>
    18ba:	73 94       	inc	r7
    18bc:	2c 85       	ldd	r18, Y+12	; 0x0c
    18be:	f5 cf       	rjmp	.-22     	; 0x18aa <vfprintf+0x2f0>
    18c0:	73 14       	cp	r7, r3
    18c2:	10 f4       	brcc	.+4      	; 0x18c8 <vfprintf+0x30e>
    18c4:	37 18       	sub	r3, r7
    18c6:	01 c0       	rjmp	.+2      	; 0x18ca <vfprintf+0x310>
    18c8:	31 2c       	mov	r3, r1
    18ca:	24 ff       	sbrs	r18, 4
    18cc:	12 c0       	rjmp	.+36     	; 0x18f2 <vfprintf+0x338>
    18ce:	b7 01       	movw	r22, r14
    18d0:	80 e3       	ldi	r24, 0x30	; 48
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	2c 87       	std	Y+12, r18	; 0x0c
    18d6:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <fputc>
    18da:	2c 85       	ldd	r18, Y+12	; 0x0c
    18dc:	22 ff       	sbrs	r18, 2
    18de:	17 c0       	rjmp	.+46     	; 0x190e <vfprintf+0x354>
    18e0:	21 ff       	sbrs	r18, 1
    18e2:	03 c0       	rjmp	.+6      	; 0x18ea <vfprintf+0x330>
    18e4:	88 e5       	ldi	r24, 0x58	; 88
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	02 c0       	rjmp	.+4      	; 0x18ee <vfprintf+0x334>
    18ea:	88 e7       	ldi	r24, 0x78	; 120
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	b7 01       	movw	r22, r14
    18f0:	0c c0       	rjmp	.+24     	; 0x190a <vfprintf+0x350>
    18f2:	82 2f       	mov	r24, r18
    18f4:	86 78       	andi	r24, 0x86	; 134
    18f6:	59 f0       	breq	.+22     	; 0x190e <vfprintf+0x354>
    18f8:	21 fd       	sbrc	r18, 1
    18fa:	02 c0       	rjmp	.+4      	; 0x1900 <vfprintf+0x346>
    18fc:	80 e2       	ldi	r24, 0x20	; 32
    18fe:	01 c0       	rjmp	.+2      	; 0x1902 <vfprintf+0x348>
    1900:	8b e2       	ldi	r24, 0x2B	; 43
    1902:	27 fd       	sbrc	r18, 7
    1904:	8d e2       	ldi	r24, 0x2D	; 45
    1906:	b7 01       	movw	r22, r14
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <fputc>
    190e:	a5 14       	cp	r10, r5
    1910:	38 f4       	brcc	.+14     	; 0x1920 <vfprintf+0x366>
    1912:	b7 01       	movw	r22, r14
    1914:	80 e3       	ldi	r24, 0x30	; 48
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <fputc>
    191c:	5a 94       	dec	r5
    191e:	f7 cf       	rjmp	.-18     	; 0x190e <vfprintf+0x354>
    1920:	aa 94       	dec	r10
    1922:	f4 01       	movw	r30, r8
    1924:	ea 0d       	add	r30, r10
    1926:	f1 1d       	adc	r31, r1
    1928:	80 81       	ld	r24, Z
    192a:	b7 01       	movw	r22, r14
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <fputc>
    1932:	a1 10       	cpse	r10, r1
    1934:	f5 cf       	rjmp	.-22     	; 0x1920 <vfprintf+0x366>
    1936:	33 20       	and	r3, r3
    1938:	09 f4       	brne	.+2      	; 0x193c <vfprintf+0x382>
    193a:	51 ce       	rjmp	.-862    	; 0x15de <vfprintf+0x24>
    193c:	b7 01       	movw	r22, r14
    193e:	80 e2       	ldi	r24, 0x20	; 32
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <fputc>
    1946:	3a 94       	dec	r3
    1948:	f6 cf       	rjmp	.-20     	; 0x1936 <vfprintf+0x37c>
    194a:	f7 01       	movw	r30, r14
    194c:	86 81       	ldd	r24, Z+6	; 0x06
    194e:	97 81       	ldd	r25, Z+7	; 0x07
    1950:	02 c0       	rjmp	.+4      	; 0x1956 <vfprintf+0x39c>
    1952:	8f ef       	ldi	r24, 0xFF	; 255
    1954:	9f ef       	ldi	r25, 0xFF	; 255
    1956:	2c 96       	adiw	r28, 0x0c	; 12
    1958:	e2 e1       	ldi	r30, 0x12	; 18
    195a:	0c 94 bb 0e 	jmp	0x1d76	; 0x1d76 <__epilogue_restores__>

0000195e <calloc>:
    195e:	0f 93       	push	r16
    1960:	1f 93       	push	r17
    1962:	cf 93       	push	r28
    1964:	df 93       	push	r29
    1966:	86 9f       	mul	r24, r22
    1968:	80 01       	movw	r16, r0
    196a:	87 9f       	mul	r24, r23
    196c:	10 0d       	add	r17, r0
    196e:	96 9f       	mul	r25, r22
    1970:	10 0d       	add	r17, r0
    1972:	11 24       	eor	r1, r1
    1974:	c8 01       	movw	r24, r16
    1976:	0e 94 cb 0c 	call	0x1996	; 0x1996 <malloc>
    197a:	ec 01       	movw	r28, r24
    197c:	00 97       	sbiw	r24, 0x00	; 0
    197e:	29 f0       	breq	.+10     	; 0x198a <calloc+0x2c>
    1980:	a8 01       	movw	r20, r16
    1982:	60 e0       	ldi	r22, 0x00	; 0
    1984:	70 e0       	ldi	r23, 0x00	; 0
    1986:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <memset>
    198a:	ce 01       	movw	r24, r28
    198c:	df 91       	pop	r29
    198e:	cf 91       	pop	r28
    1990:	1f 91       	pop	r17
    1992:	0f 91       	pop	r16
    1994:	08 95       	ret

00001996 <malloc>:
    1996:	cf 93       	push	r28
    1998:	df 93       	push	r29
    199a:	82 30       	cpi	r24, 0x02	; 2
    199c:	91 05       	cpc	r25, r1
    199e:	10 f4       	brcc	.+4      	; 0x19a4 <malloc+0xe>
    19a0:	82 e0       	ldi	r24, 0x02	; 2
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	e0 91 8d 02 	lds	r30, 0x028D
    19a8:	f0 91 8e 02 	lds	r31, 0x028E
    19ac:	20 e0       	ldi	r18, 0x00	; 0
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	a0 e0       	ldi	r26, 0x00	; 0
    19b2:	b0 e0       	ldi	r27, 0x00	; 0
    19b4:	30 97       	sbiw	r30, 0x00	; 0
    19b6:	39 f1       	breq	.+78     	; 0x1a06 <malloc+0x70>
    19b8:	40 81       	ld	r20, Z
    19ba:	51 81       	ldd	r21, Z+1	; 0x01
    19bc:	48 17       	cp	r20, r24
    19be:	59 07       	cpc	r21, r25
    19c0:	b8 f0       	brcs	.+46     	; 0x19f0 <malloc+0x5a>
    19c2:	48 17       	cp	r20, r24
    19c4:	59 07       	cpc	r21, r25
    19c6:	71 f4       	brne	.+28     	; 0x19e4 <malloc+0x4e>
    19c8:	82 81       	ldd	r24, Z+2	; 0x02
    19ca:	93 81       	ldd	r25, Z+3	; 0x03
    19cc:	10 97       	sbiw	r26, 0x00	; 0
    19ce:	29 f0       	breq	.+10     	; 0x19da <malloc+0x44>
    19d0:	13 96       	adiw	r26, 0x03	; 3
    19d2:	9c 93       	st	X, r25
    19d4:	8e 93       	st	-X, r24
    19d6:	12 97       	sbiw	r26, 0x02	; 2
    19d8:	2c c0       	rjmp	.+88     	; 0x1a32 <malloc+0x9c>
    19da:	90 93 8e 02 	sts	0x028E, r25
    19de:	80 93 8d 02 	sts	0x028D, r24
    19e2:	27 c0       	rjmp	.+78     	; 0x1a32 <malloc+0x9c>
    19e4:	21 15       	cp	r18, r1
    19e6:	31 05       	cpc	r19, r1
    19e8:	31 f0       	breq	.+12     	; 0x19f6 <malloc+0x60>
    19ea:	42 17       	cp	r20, r18
    19ec:	53 07       	cpc	r21, r19
    19ee:	18 f0       	brcs	.+6      	; 0x19f6 <malloc+0x60>
    19f0:	a9 01       	movw	r20, r18
    19f2:	db 01       	movw	r26, r22
    19f4:	01 c0       	rjmp	.+2      	; 0x19f8 <malloc+0x62>
    19f6:	ef 01       	movw	r28, r30
    19f8:	9a 01       	movw	r18, r20
    19fa:	bd 01       	movw	r22, r26
    19fc:	df 01       	movw	r26, r30
    19fe:	02 80       	ldd	r0, Z+2	; 0x02
    1a00:	f3 81       	ldd	r31, Z+3	; 0x03
    1a02:	e0 2d       	mov	r30, r0
    1a04:	d7 cf       	rjmp	.-82     	; 0x19b4 <malloc+0x1e>
    1a06:	21 15       	cp	r18, r1
    1a08:	31 05       	cpc	r19, r1
    1a0a:	f9 f0       	breq	.+62     	; 0x1a4a <malloc+0xb4>
    1a0c:	28 1b       	sub	r18, r24
    1a0e:	39 0b       	sbc	r19, r25
    1a10:	24 30       	cpi	r18, 0x04	; 4
    1a12:	31 05       	cpc	r19, r1
    1a14:	80 f4       	brcc	.+32     	; 0x1a36 <malloc+0xa0>
    1a16:	8a 81       	ldd	r24, Y+2	; 0x02
    1a18:	9b 81       	ldd	r25, Y+3	; 0x03
    1a1a:	61 15       	cp	r22, r1
    1a1c:	71 05       	cpc	r23, r1
    1a1e:	21 f0       	breq	.+8      	; 0x1a28 <malloc+0x92>
    1a20:	fb 01       	movw	r30, r22
    1a22:	93 83       	std	Z+3, r25	; 0x03
    1a24:	82 83       	std	Z+2, r24	; 0x02
    1a26:	04 c0       	rjmp	.+8      	; 0x1a30 <malloc+0x9a>
    1a28:	90 93 8e 02 	sts	0x028E, r25
    1a2c:	80 93 8d 02 	sts	0x028D, r24
    1a30:	fe 01       	movw	r30, r28
    1a32:	32 96       	adiw	r30, 0x02	; 2
    1a34:	44 c0       	rjmp	.+136    	; 0x1abe <malloc+0x128>
    1a36:	fe 01       	movw	r30, r28
    1a38:	e2 0f       	add	r30, r18
    1a3a:	f3 1f       	adc	r31, r19
    1a3c:	81 93       	st	Z+, r24
    1a3e:	91 93       	st	Z+, r25
    1a40:	22 50       	subi	r18, 0x02	; 2
    1a42:	31 09       	sbc	r19, r1
    1a44:	39 83       	std	Y+1, r19	; 0x01
    1a46:	28 83       	st	Y, r18
    1a48:	3a c0       	rjmp	.+116    	; 0x1abe <malloc+0x128>
    1a4a:	20 91 8b 02 	lds	r18, 0x028B
    1a4e:	30 91 8c 02 	lds	r19, 0x028C
    1a52:	23 2b       	or	r18, r19
    1a54:	41 f4       	brne	.+16     	; 0x1a66 <malloc+0xd0>
    1a56:	20 91 02 01 	lds	r18, 0x0102
    1a5a:	30 91 03 01 	lds	r19, 0x0103
    1a5e:	30 93 8c 02 	sts	0x028C, r19
    1a62:	20 93 8b 02 	sts	0x028B, r18
    1a66:	20 91 00 01 	lds	r18, 0x0100
    1a6a:	30 91 01 01 	lds	r19, 0x0101
    1a6e:	21 15       	cp	r18, r1
    1a70:	31 05       	cpc	r19, r1
    1a72:	41 f4       	brne	.+16     	; 0x1a84 <malloc+0xee>
    1a74:	2d b7       	in	r18, 0x3d	; 61
    1a76:	3e b7       	in	r19, 0x3e	; 62
    1a78:	40 91 04 01 	lds	r20, 0x0104
    1a7c:	50 91 05 01 	lds	r21, 0x0105
    1a80:	24 1b       	sub	r18, r20
    1a82:	35 0b       	sbc	r19, r21
    1a84:	e0 91 8b 02 	lds	r30, 0x028B
    1a88:	f0 91 8c 02 	lds	r31, 0x028C
    1a8c:	e2 17       	cp	r30, r18
    1a8e:	f3 07       	cpc	r31, r19
    1a90:	a0 f4       	brcc	.+40     	; 0x1aba <malloc+0x124>
    1a92:	2e 1b       	sub	r18, r30
    1a94:	3f 0b       	sbc	r19, r31
    1a96:	28 17       	cp	r18, r24
    1a98:	39 07       	cpc	r19, r25
    1a9a:	78 f0       	brcs	.+30     	; 0x1aba <malloc+0x124>
    1a9c:	ac 01       	movw	r20, r24
    1a9e:	4e 5f       	subi	r20, 0xFE	; 254
    1aa0:	5f 4f       	sbci	r21, 0xFF	; 255
    1aa2:	24 17       	cp	r18, r20
    1aa4:	35 07       	cpc	r19, r21
    1aa6:	48 f0       	brcs	.+18     	; 0x1aba <malloc+0x124>
    1aa8:	4e 0f       	add	r20, r30
    1aaa:	5f 1f       	adc	r21, r31
    1aac:	50 93 8c 02 	sts	0x028C, r21
    1ab0:	40 93 8b 02 	sts	0x028B, r20
    1ab4:	81 93       	st	Z+, r24
    1ab6:	91 93       	st	Z+, r25
    1ab8:	02 c0       	rjmp	.+4      	; 0x1abe <malloc+0x128>
    1aba:	e0 e0       	ldi	r30, 0x00	; 0
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	cf 01       	movw	r24, r30
    1ac0:	df 91       	pop	r29
    1ac2:	cf 91       	pop	r28
    1ac4:	08 95       	ret

00001ac6 <free>:
    1ac6:	cf 93       	push	r28
    1ac8:	df 93       	push	r29
    1aca:	00 97       	sbiw	r24, 0x00	; 0
    1acc:	09 f4       	brne	.+2      	; 0x1ad0 <free+0xa>
    1ace:	87 c0       	rjmp	.+270    	; 0x1bde <free+0x118>
    1ad0:	fc 01       	movw	r30, r24
    1ad2:	32 97       	sbiw	r30, 0x02	; 2
    1ad4:	13 82       	std	Z+3, r1	; 0x03
    1ad6:	12 82       	std	Z+2, r1	; 0x02
    1ad8:	c0 91 8d 02 	lds	r28, 0x028D
    1adc:	d0 91 8e 02 	lds	r29, 0x028E
    1ae0:	20 97       	sbiw	r28, 0x00	; 0
    1ae2:	81 f4       	brne	.+32     	; 0x1b04 <free+0x3e>
    1ae4:	20 81       	ld	r18, Z
    1ae6:	31 81       	ldd	r19, Z+1	; 0x01
    1ae8:	28 0f       	add	r18, r24
    1aea:	39 1f       	adc	r19, r25
    1aec:	80 91 8b 02 	lds	r24, 0x028B
    1af0:	90 91 8c 02 	lds	r25, 0x028C
    1af4:	82 17       	cp	r24, r18
    1af6:	93 07       	cpc	r25, r19
    1af8:	79 f5       	brne	.+94     	; 0x1b58 <free+0x92>
    1afa:	f0 93 8c 02 	sts	0x028C, r31
    1afe:	e0 93 8b 02 	sts	0x028B, r30
    1b02:	6d c0       	rjmp	.+218    	; 0x1bde <free+0x118>
    1b04:	de 01       	movw	r26, r28
    1b06:	20 e0       	ldi	r18, 0x00	; 0
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	ae 17       	cp	r26, r30
    1b0c:	bf 07       	cpc	r27, r31
    1b0e:	50 f4       	brcc	.+20     	; 0x1b24 <free+0x5e>
    1b10:	12 96       	adiw	r26, 0x02	; 2
    1b12:	4d 91       	ld	r20, X+
    1b14:	5c 91       	ld	r21, X
    1b16:	13 97       	sbiw	r26, 0x03	; 3
    1b18:	9d 01       	movw	r18, r26
    1b1a:	41 15       	cp	r20, r1
    1b1c:	51 05       	cpc	r21, r1
    1b1e:	09 f1       	breq	.+66     	; 0x1b62 <free+0x9c>
    1b20:	da 01       	movw	r26, r20
    1b22:	f3 cf       	rjmp	.-26     	; 0x1b0a <free+0x44>
    1b24:	b3 83       	std	Z+3, r27	; 0x03
    1b26:	a2 83       	std	Z+2, r26	; 0x02
    1b28:	40 81       	ld	r20, Z
    1b2a:	51 81       	ldd	r21, Z+1	; 0x01
    1b2c:	84 0f       	add	r24, r20
    1b2e:	95 1f       	adc	r25, r21
    1b30:	8a 17       	cp	r24, r26
    1b32:	9b 07       	cpc	r25, r27
    1b34:	71 f4       	brne	.+28     	; 0x1b52 <free+0x8c>
    1b36:	8d 91       	ld	r24, X+
    1b38:	9c 91       	ld	r25, X
    1b3a:	11 97       	sbiw	r26, 0x01	; 1
    1b3c:	84 0f       	add	r24, r20
    1b3e:	95 1f       	adc	r25, r21
    1b40:	02 96       	adiw	r24, 0x02	; 2
    1b42:	91 83       	std	Z+1, r25	; 0x01
    1b44:	80 83       	st	Z, r24
    1b46:	12 96       	adiw	r26, 0x02	; 2
    1b48:	8d 91       	ld	r24, X+
    1b4a:	9c 91       	ld	r25, X
    1b4c:	13 97       	sbiw	r26, 0x03	; 3
    1b4e:	93 83       	std	Z+3, r25	; 0x03
    1b50:	82 83       	std	Z+2, r24	; 0x02
    1b52:	21 15       	cp	r18, r1
    1b54:	31 05       	cpc	r19, r1
    1b56:	29 f4       	brne	.+10     	; 0x1b62 <free+0x9c>
    1b58:	f0 93 8e 02 	sts	0x028E, r31
    1b5c:	e0 93 8d 02 	sts	0x028D, r30
    1b60:	3e c0       	rjmp	.+124    	; 0x1bde <free+0x118>
    1b62:	d9 01       	movw	r26, r18
    1b64:	13 96       	adiw	r26, 0x03	; 3
    1b66:	fc 93       	st	X, r31
    1b68:	ee 93       	st	-X, r30
    1b6a:	12 97       	sbiw	r26, 0x02	; 2
    1b6c:	4d 91       	ld	r20, X+
    1b6e:	5d 91       	ld	r21, X+
    1b70:	a4 0f       	add	r26, r20
    1b72:	b5 1f       	adc	r27, r21
    1b74:	ea 17       	cp	r30, r26
    1b76:	fb 07       	cpc	r31, r27
    1b78:	79 f4       	brne	.+30     	; 0x1b98 <free+0xd2>
    1b7a:	80 81       	ld	r24, Z
    1b7c:	91 81       	ldd	r25, Z+1	; 0x01
    1b7e:	84 0f       	add	r24, r20
    1b80:	95 1f       	adc	r25, r21
    1b82:	02 96       	adiw	r24, 0x02	; 2
    1b84:	d9 01       	movw	r26, r18
    1b86:	11 96       	adiw	r26, 0x01	; 1
    1b88:	9c 93       	st	X, r25
    1b8a:	8e 93       	st	-X, r24
    1b8c:	82 81       	ldd	r24, Z+2	; 0x02
    1b8e:	93 81       	ldd	r25, Z+3	; 0x03
    1b90:	13 96       	adiw	r26, 0x03	; 3
    1b92:	9c 93       	st	X, r25
    1b94:	8e 93       	st	-X, r24
    1b96:	12 97       	sbiw	r26, 0x02	; 2
    1b98:	e0 e0       	ldi	r30, 0x00	; 0
    1b9a:	f0 e0       	ldi	r31, 0x00	; 0
    1b9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9e:	9b 81       	ldd	r25, Y+3	; 0x03
    1ba0:	00 97       	sbiw	r24, 0x00	; 0
    1ba2:	19 f0       	breq	.+6      	; 0x1baa <free+0xe4>
    1ba4:	fe 01       	movw	r30, r28
    1ba6:	ec 01       	movw	r28, r24
    1ba8:	f9 cf       	rjmp	.-14     	; 0x1b9c <free+0xd6>
    1baa:	ce 01       	movw	r24, r28
    1bac:	02 96       	adiw	r24, 0x02	; 2
    1bae:	28 81       	ld	r18, Y
    1bb0:	39 81       	ldd	r19, Y+1	; 0x01
    1bb2:	82 0f       	add	r24, r18
    1bb4:	93 1f       	adc	r25, r19
    1bb6:	20 91 8b 02 	lds	r18, 0x028B
    1bba:	30 91 8c 02 	lds	r19, 0x028C
    1bbe:	28 17       	cp	r18, r24
    1bc0:	39 07       	cpc	r19, r25
    1bc2:	69 f4       	brne	.+26     	; 0x1bde <free+0x118>
    1bc4:	30 97       	sbiw	r30, 0x00	; 0
    1bc6:	29 f4       	brne	.+10     	; 0x1bd2 <free+0x10c>
    1bc8:	10 92 8e 02 	sts	0x028E, r1
    1bcc:	10 92 8d 02 	sts	0x028D, r1
    1bd0:	02 c0       	rjmp	.+4      	; 0x1bd6 <free+0x110>
    1bd2:	13 82       	std	Z+3, r1	; 0x03
    1bd4:	12 82       	std	Z+2, r1	; 0x02
    1bd6:	d0 93 8c 02 	sts	0x028C, r29
    1bda:	c0 93 8b 02 	sts	0x028B, r28
    1bde:	df 91       	pop	r29
    1be0:	cf 91       	pop	r28
    1be2:	08 95       	ret

00001be4 <strnlen_P>:
    1be4:	fc 01       	movw	r30, r24
    1be6:	05 90       	lpm	r0, Z+
    1be8:	61 50       	subi	r22, 0x01	; 1
    1bea:	70 40       	sbci	r23, 0x00	; 0
    1bec:	01 10       	cpse	r0, r1
    1bee:	d8 f7       	brcc	.-10     	; 0x1be6 <strnlen_P+0x2>
    1bf0:	80 95       	com	r24
    1bf2:	90 95       	com	r25
    1bf4:	8e 0f       	add	r24, r30
    1bf6:	9f 1f       	adc	r25, r31
    1bf8:	08 95       	ret

00001bfa <memset>:
    1bfa:	dc 01       	movw	r26, r24
    1bfc:	01 c0       	rjmp	.+2      	; 0x1c00 <memset+0x6>
    1bfe:	6d 93       	st	X+, r22
    1c00:	41 50       	subi	r20, 0x01	; 1
    1c02:	50 40       	sbci	r21, 0x00	; 0
    1c04:	e0 f7       	brcc	.-8      	; 0x1bfe <memset+0x4>
    1c06:	08 95       	ret

00001c08 <strnlen>:
    1c08:	fc 01       	movw	r30, r24
    1c0a:	61 50       	subi	r22, 0x01	; 1
    1c0c:	70 40       	sbci	r23, 0x00	; 0
    1c0e:	01 90       	ld	r0, Z+
    1c10:	01 10       	cpse	r0, r1
    1c12:	d8 f7       	brcc	.-10     	; 0x1c0a <strnlen+0x2>
    1c14:	80 95       	com	r24
    1c16:	90 95       	com	r25
    1c18:	8e 0f       	add	r24, r30
    1c1a:	9f 1f       	adc	r25, r31
    1c1c:	08 95       	ret

00001c1e <fputc>:
    1c1e:	0f 93       	push	r16
    1c20:	1f 93       	push	r17
    1c22:	cf 93       	push	r28
    1c24:	df 93       	push	r29
    1c26:	18 2f       	mov	r17, r24
    1c28:	09 2f       	mov	r16, r25
    1c2a:	eb 01       	movw	r28, r22
    1c2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2e:	81 fd       	sbrc	r24, 1
    1c30:	03 c0       	rjmp	.+6      	; 0x1c38 <fputc+0x1a>
    1c32:	8f ef       	ldi	r24, 0xFF	; 255
    1c34:	9f ef       	ldi	r25, 0xFF	; 255
    1c36:	20 c0       	rjmp	.+64     	; 0x1c78 <fputc+0x5a>
    1c38:	82 ff       	sbrs	r24, 2
    1c3a:	10 c0       	rjmp	.+32     	; 0x1c5c <fputc+0x3e>
    1c3c:	4e 81       	ldd	r20, Y+6	; 0x06
    1c3e:	5f 81       	ldd	r21, Y+7	; 0x07
    1c40:	2c 81       	ldd	r18, Y+4	; 0x04
    1c42:	3d 81       	ldd	r19, Y+5	; 0x05
    1c44:	42 17       	cp	r20, r18
    1c46:	53 07       	cpc	r21, r19
    1c48:	7c f4       	brge	.+30     	; 0x1c68 <fputc+0x4a>
    1c4a:	e8 81       	ld	r30, Y
    1c4c:	f9 81       	ldd	r31, Y+1	; 0x01
    1c4e:	9f 01       	movw	r18, r30
    1c50:	2f 5f       	subi	r18, 0xFF	; 255
    1c52:	3f 4f       	sbci	r19, 0xFF	; 255
    1c54:	39 83       	std	Y+1, r19	; 0x01
    1c56:	28 83       	st	Y, r18
    1c58:	10 83       	st	Z, r17
    1c5a:	06 c0       	rjmp	.+12     	; 0x1c68 <fputc+0x4a>
    1c5c:	e8 85       	ldd	r30, Y+8	; 0x08
    1c5e:	f9 85       	ldd	r31, Y+9	; 0x09
    1c60:	81 2f       	mov	r24, r17
    1c62:	09 95       	icall
    1c64:	89 2b       	or	r24, r25
    1c66:	29 f7       	brne	.-54     	; 0x1c32 <fputc+0x14>
    1c68:	2e 81       	ldd	r18, Y+6	; 0x06
    1c6a:	3f 81       	ldd	r19, Y+7	; 0x07
    1c6c:	2f 5f       	subi	r18, 0xFF	; 255
    1c6e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c70:	3f 83       	std	Y+7, r19	; 0x07
    1c72:	2e 83       	std	Y+6, r18	; 0x06
    1c74:	81 2f       	mov	r24, r17
    1c76:	90 2f       	mov	r25, r16
    1c78:	df 91       	pop	r29
    1c7a:	cf 91       	pop	r28
    1c7c:	1f 91       	pop	r17
    1c7e:	0f 91       	pop	r16
    1c80:	08 95       	ret

00001c82 <__ultoa_invert>:
    1c82:	fa 01       	movw	r30, r20
    1c84:	aa 27       	eor	r26, r26
    1c86:	28 30       	cpi	r18, 0x08	; 8
    1c88:	51 f1       	breq	.+84     	; 0x1cde <__ultoa_invert+0x5c>
    1c8a:	20 31       	cpi	r18, 0x10	; 16
    1c8c:	81 f1       	breq	.+96     	; 0x1cee <__ultoa_invert+0x6c>
    1c8e:	e8 94       	clt
    1c90:	6f 93       	push	r22
    1c92:	6e 7f       	andi	r22, 0xFE	; 254
    1c94:	6e 5f       	subi	r22, 0xFE	; 254
    1c96:	7f 4f       	sbci	r23, 0xFF	; 255
    1c98:	8f 4f       	sbci	r24, 0xFF	; 255
    1c9a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c9c:	af 4f       	sbci	r26, 0xFF	; 255
    1c9e:	b1 e0       	ldi	r27, 0x01	; 1
    1ca0:	3e d0       	rcall	.+124    	; 0x1d1e <__ultoa_invert+0x9c>
    1ca2:	b4 e0       	ldi	r27, 0x04	; 4
    1ca4:	3c d0       	rcall	.+120    	; 0x1d1e <__ultoa_invert+0x9c>
    1ca6:	67 0f       	add	r22, r23
    1ca8:	78 1f       	adc	r23, r24
    1caa:	89 1f       	adc	r24, r25
    1cac:	9a 1f       	adc	r25, r26
    1cae:	a1 1d       	adc	r26, r1
    1cb0:	68 0f       	add	r22, r24
    1cb2:	79 1f       	adc	r23, r25
    1cb4:	8a 1f       	adc	r24, r26
    1cb6:	91 1d       	adc	r25, r1
    1cb8:	a1 1d       	adc	r26, r1
    1cba:	6a 0f       	add	r22, r26
    1cbc:	71 1d       	adc	r23, r1
    1cbe:	81 1d       	adc	r24, r1
    1cc0:	91 1d       	adc	r25, r1
    1cc2:	a1 1d       	adc	r26, r1
    1cc4:	20 d0       	rcall	.+64     	; 0x1d06 <__ultoa_invert+0x84>
    1cc6:	09 f4       	brne	.+2      	; 0x1cca <__ultoa_invert+0x48>
    1cc8:	68 94       	set
    1cca:	3f 91       	pop	r19
    1ccc:	2a e0       	ldi	r18, 0x0A	; 10
    1cce:	26 9f       	mul	r18, r22
    1cd0:	11 24       	eor	r1, r1
    1cd2:	30 19       	sub	r19, r0
    1cd4:	30 5d       	subi	r19, 0xD0	; 208
    1cd6:	31 93       	st	Z+, r19
    1cd8:	de f6       	brtc	.-74     	; 0x1c90 <__ultoa_invert+0xe>
    1cda:	cf 01       	movw	r24, r30
    1cdc:	08 95       	ret
    1cde:	46 2f       	mov	r20, r22
    1ce0:	47 70       	andi	r20, 0x07	; 7
    1ce2:	40 5d       	subi	r20, 0xD0	; 208
    1ce4:	41 93       	st	Z+, r20
    1ce6:	b3 e0       	ldi	r27, 0x03	; 3
    1ce8:	0f d0       	rcall	.+30     	; 0x1d08 <__ultoa_invert+0x86>
    1cea:	c9 f7       	brne	.-14     	; 0x1cde <__ultoa_invert+0x5c>
    1cec:	f6 cf       	rjmp	.-20     	; 0x1cda <__ultoa_invert+0x58>
    1cee:	46 2f       	mov	r20, r22
    1cf0:	4f 70       	andi	r20, 0x0F	; 15
    1cf2:	40 5d       	subi	r20, 0xD0	; 208
    1cf4:	4a 33       	cpi	r20, 0x3A	; 58
    1cf6:	18 f0       	brcs	.+6      	; 0x1cfe <__ultoa_invert+0x7c>
    1cf8:	49 5d       	subi	r20, 0xD9	; 217
    1cfa:	31 fd       	sbrc	r19, 1
    1cfc:	40 52       	subi	r20, 0x20	; 32
    1cfe:	41 93       	st	Z+, r20
    1d00:	02 d0       	rcall	.+4      	; 0x1d06 <__ultoa_invert+0x84>
    1d02:	a9 f7       	brne	.-22     	; 0x1cee <__ultoa_invert+0x6c>
    1d04:	ea cf       	rjmp	.-44     	; 0x1cda <__ultoa_invert+0x58>
    1d06:	b4 e0       	ldi	r27, 0x04	; 4
    1d08:	a6 95       	lsr	r26
    1d0a:	97 95       	ror	r25
    1d0c:	87 95       	ror	r24
    1d0e:	77 95       	ror	r23
    1d10:	67 95       	ror	r22
    1d12:	ba 95       	dec	r27
    1d14:	c9 f7       	brne	.-14     	; 0x1d08 <__ultoa_invert+0x86>
    1d16:	00 97       	sbiw	r24, 0x00	; 0
    1d18:	61 05       	cpc	r22, r1
    1d1a:	71 05       	cpc	r23, r1
    1d1c:	08 95       	ret
    1d1e:	9b 01       	movw	r18, r22
    1d20:	ac 01       	movw	r20, r24
    1d22:	0a 2e       	mov	r0, r26
    1d24:	06 94       	lsr	r0
    1d26:	57 95       	ror	r21
    1d28:	47 95       	ror	r20
    1d2a:	37 95       	ror	r19
    1d2c:	27 95       	ror	r18
    1d2e:	ba 95       	dec	r27
    1d30:	c9 f7       	brne	.-14     	; 0x1d24 <__ultoa_invert+0xa2>
    1d32:	62 0f       	add	r22, r18
    1d34:	73 1f       	adc	r23, r19
    1d36:	84 1f       	adc	r24, r20
    1d38:	95 1f       	adc	r25, r21
    1d3a:	a0 1d       	adc	r26, r0
    1d3c:	08 95       	ret

00001d3e <__prologue_saves__>:
    1d3e:	2f 92       	push	r2
    1d40:	3f 92       	push	r3
    1d42:	4f 92       	push	r4
    1d44:	5f 92       	push	r5
    1d46:	6f 92       	push	r6
    1d48:	7f 92       	push	r7
    1d4a:	8f 92       	push	r8
    1d4c:	9f 92       	push	r9
    1d4e:	af 92       	push	r10
    1d50:	bf 92       	push	r11
    1d52:	cf 92       	push	r12
    1d54:	df 92       	push	r13
    1d56:	ef 92       	push	r14
    1d58:	ff 92       	push	r15
    1d5a:	0f 93       	push	r16
    1d5c:	1f 93       	push	r17
    1d5e:	cf 93       	push	r28
    1d60:	df 93       	push	r29
    1d62:	cd b7       	in	r28, 0x3d	; 61
    1d64:	de b7       	in	r29, 0x3e	; 62
    1d66:	ca 1b       	sub	r28, r26
    1d68:	db 0b       	sbc	r29, r27
    1d6a:	0f b6       	in	r0, 0x3f	; 63
    1d6c:	f8 94       	cli
    1d6e:	de bf       	out	0x3e, r29	; 62
    1d70:	0f be       	out	0x3f, r0	; 63
    1d72:	cd bf       	out	0x3d, r28	; 61
    1d74:	09 94       	ijmp

00001d76 <__epilogue_restores__>:
    1d76:	2a 88       	ldd	r2, Y+18	; 0x12
    1d78:	39 88       	ldd	r3, Y+17	; 0x11
    1d7a:	48 88       	ldd	r4, Y+16	; 0x10
    1d7c:	5f 84       	ldd	r5, Y+15	; 0x0f
    1d7e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1d80:	7d 84       	ldd	r7, Y+13	; 0x0d
    1d82:	8c 84       	ldd	r8, Y+12	; 0x0c
    1d84:	9b 84       	ldd	r9, Y+11	; 0x0b
    1d86:	aa 84       	ldd	r10, Y+10	; 0x0a
    1d88:	b9 84       	ldd	r11, Y+9	; 0x09
    1d8a:	c8 84       	ldd	r12, Y+8	; 0x08
    1d8c:	df 80       	ldd	r13, Y+7	; 0x07
    1d8e:	ee 80       	ldd	r14, Y+6	; 0x06
    1d90:	fd 80       	ldd	r15, Y+5	; 0x05
    1d92:	0c 81       	ldd	r16, Y+4	; 0x04
    1d94:	1b 81       	ldd	r17, Y+3	; 0x03
    1d96:	aa 81       	ldd	r26, Y+2	; 0x02
    1d98:	b9 81       	ldd	r27, Y+1	; 0x01
    1d9a:	ce 0f       	add	r28, r30
    1d9c:	d1 1d       	adc	r29, r1
    1d9e:	0f b6       	in	r0, 0x3f	; 63
    1da0:	f8 94       	cli
    1da2:	de bf       	out	0x3e, r29	; 62
    1da4:	0f be       	out	0x3f, r0	; 63
    1da6:	cd bf       	out	0x3d, r28	; 61
    1da8:	ed 01       	movw	r28, r26
    1daa:	08 95       	ret

00001dac <_exit>:
    1dac:	f8 94       	cli

00001dae <__stop_program>:
    1dae:	ff cf       	rjmp	.-2      	; 0x1dae <__stop_program>
