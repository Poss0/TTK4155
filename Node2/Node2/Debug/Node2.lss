
Node2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800200  00000b94  00000c28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b94  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  0080020c  0080020c  00000c34  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c34  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000178  00000000  00000000  00000c64  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f34  00000000  00000000  00000ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000885  00000000  00000000  00001d10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000165a  00000000  00000000  00002595  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002d0  00000000  00000000  00003bf0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00009c89  00000000  00000000  00003ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000065c  00000000  00000000  0000db49  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f8  00000000  00000000  0000e1a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000466b  00000000  00000000  0000e29d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 e9       	ldi	r30, 0x94	; 148
  fc:	fb e0       	ldi	r31, 0x0B	; 11
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ac 30       	cpi	r26, 0x0C	; 12
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	ac e0       	ldi	r26, 0x0C	; 12
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a8 31       	cpi	r26, 0x18	; 24
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	d6 d0       	rcall	.+428    	; 0x2cc <main>
 120:	37 c5       	rjmp	.+2670   	; 0xb90 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <ADC_init>:
#include <stdint.h>
#include <avr/io.h>

void ADC_init(){
	/* Enable ADC */
	ADCSRA |= (1 << ADEN);
 124:	ea e7       	ldi	r30, 0x7A	; 122
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	80 68       	ori	r24, 0x80	; 128
 12c:	80 83       	st	Z, r24
	/* Set prescaler */
	ADCSRA |= (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);
 12e:	80 81       	ld	r24, Z
 130:	87 60       	ori	r24, 0x07	; 7
 132:	80 83       	st	Z, r24
	/* Select channel 0 */
	ADMUX &= ~(1 << MUX0) & ~(1 << MUX1) & ~(1 << MUX2) & ~(1 << MUX3) & ~(1 << MUX4);
 134:	ec e7       	ldi	r30, 0x7C	; 124
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	80 7e       	andi	r24, 0xE0	; 224
 13c:	80 83       	st	Z, r24
	ADCSRB &= ~(1 << MUX5);
 13e:	ab e7       	ldi	r26, 0x7B	; 123
 140:	b0 e0       	ldi	r27, 0x00	; 0
 142:	8c 91       	ld	r24, X
 144:	87 7f       	andi	r24, 0xF7	; 247
 146:	8c 93       	st	X, r24
	/* Choose reference */
	ADMUX |= (1 << REFS0);
 148:	80 81       	ld	r24, Z
 14a:	80 64       	ori	r24, 0x40	; 64
 14c:	80 83       	st	Z, r24
	ADMUX &= ~(1 << REFS1);
 14e:	80 81       	ld	r24, Z
 150:	8f 77       	andi	r24, 0x7F	; 127
 152:	80 83       	st	Z, r24
 154:	08 95       	ret

00000156 <ADC_convert>:
}

uint16_t ADC_convert(){
	/* Launch conversion */
	ADCSRA |= (1 << ADSC);
 156:	ea e7       	ldi	r30, 0x7A	; 122
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	80 64       	ori	r24, 0x40	; 64
 15e:	80 83       	st	Z, r24
	/* Wait until conversion ends */
	while(ADCSRA & (1<<ADSC));
 160:	80 81       	ld	r24, Z
 162:	86 fd       	sbrc	r24, 6
 164:	fd cf       	rjmp	.-6      	; 0x160 <ADC_convert+0xa>
	/* Return result */
	return ADC & 0x3FF;
 166:	80 91 78 00 	lds	r24, 0x0078
 16a:	90 91 79 00 	lds	r25, 0x0079
 16e:	93 70       	andi	r25, 0x03	; 3
 170:	08 95       	ret

00000172 <CAN_init>:
	{
		MCP2515_write(MCP_TXB0D0+i,message->data[i]);
	}
	
	MCP2515_request_to_send();
}
 172:	6d d1       	rcall	.+730    	; 0x44e <SPI_init>
 174:	85 d0       	rcall	.+266    	; 0x280 <MCP2515_reset>
 176:	87 ea       	ldi	r24, 0xA7	; 167
 178:	91 e6       	ldi	r25, 0x61	; 97
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <CAN_init+0x8>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <CAN_init+0xe>
 180:	00 00       	nop
 182:	40 e0       	ldi	r20, 0x00	; 0
 184:	60 ee       	ldi	r22, 0xE0	; 224
 186:	8f e0       	ldi	r24, 0x0F	; 15
 188:	8d d0       	rcall	.+282    	; 0x2a4 <MCP2515_bit_modify>
 18a:	41 e0       	ldi	r20, 0x01	; 1
 18c:	61 e0       	ldi	r22, 0x01	; 1
 18e:	8b e2       	ldi	r24, 0x2B	; 43
 190:	89 c0       	rjmp	.+274    	; 0x2a4 <MCP2515_bit_modify>
 192:	08 95       	ret

00000194 <CAN_receive>:

MSG CAN_receive()
{
 194:	8f 92       	push	r8
 196:	9f 92       	push	r9
 198:	af 92       	push	r10
 19a:	bf 92       	push	r11
 19c:	cf 92       	push	r12
 19e:	df 92       	push	r13
 1a0:	ef 92       	push	r14
 1a2:	ff 92       	push	r15
 1a4:	0f 93       	push	r16
 1a6:	1f 93       	push	r17
 1a8:	cf 93       	push	r28
 1aa:	df 93       	push	r29
 1ac:	cd b7       	in	r28, 0x3d	; 61
 1ae:	de b7       	in	r29, 0x3e	; 62
 1b0:	2c 97       	sbiw	r28, 0x0c	; 12
 1b2:	0f b6       	in	r0, 0x3f	; 63
 1b4:	f8 94       	cli
 1b6:	de bf       	out	0x3e, r29	; 62
 1b8:	0f be       	out	0x3f, r0	; 63
 1ba:	cd bf       	out	0x3d, r28	; 61
 1bc:	5c 01       	movw	r10, r24
	/* Check if there is a message */
	if(MCP2515_read(MCP_CANINTF) & 0x01 == 0x1){
 1be:	8c e2       	ldi	r24, 0x2C	; 44
 1c0:	64 d0       	rcall	.+200    	; 0x28a <MCP2515_read>
 1c2:	80 ff       	sbrs	r24, 0
 1c4:	49 c0       	rjmp	.+146    	; 0x258 <CAN_receive+0xc4>
		MSG message;
		
		/* Read ID */
		int ID_l = MCP2515_read(MCP_RXB0SIDL);
 1c6:	82 e6       	ldi	r24, 0x62	; 98
 1c8:	60 d0       	rcall	.+192    	; 0x28a <MCP2515_read>
 1ca:	18 2f       	mov	r17, r24
		int ID_h = MCP2515_read(MCP_RXB0SIDH);
 1cc:	81 e6       	ldi	r24, 0x61	; 97
 1ce:	5d d0       	rcall	.+186    	; 0x28a <MCP2515_read>
	/* Check if there is a message */
	if(MCP2515_read(MCP_CANINTF) & 0x01 == 0x1){
		MSG message;
		
		/* Read ID */
		int ID_l = MCP2515_read(MCP_RXB0SIDL);
 1d0:	21 2f       	mov	r18, r17
 1d2:	33 27       	eor	r19, r19
 1d4:	27 fd       	sbrc	r18, 7
 1d6:	30 95       	com	r19
		int ID_h = MCP2515_read(MCP_RXB0SIDH);
		message.ID = ((ID_h << 3) + ((ID_l >> 5) & 0x7)) & 0xFF;
 1d8:	35 95       	asr	r19
 1da:	27 95       	ror	r18
 1dc:	35 95       	asr	r19
 1de:	27 95       	ror	r18
 1e0:	35 95       	asr	r19
 1e2:	27 95       	ror	r18
 1e4:	35 95       	asr	r19
 1e6:	27 95       	ror	r18
 1e8:	35 95       	asr	r19
 1ea:	27 95       	ror	r18
 1ec:	27 70       	andi	r18, 0x07	; 7
 1ee:	33 27       	eor	r19, r19
 1f0:	98 e0       	ldi	r25, 0x08	; 8
 1f2:	89 02       	muls	r24, r25
 1f4:	20 0d       	add	r18, r0
 1f6:	31 1d       	adc	r19, r1
 1f8:	11 24       	eor	r1, r1
 1fa:	49 01       	movw	r8, r18
 1fc:	99 24       	eor	r9, r9
		
		/* Read length */
		int length = MCP2515_read(MCP_RXB0DLC) & 0x0F;
 1fe:	85 e6       	ldi	r24, 0x65	; 101
 200:	44 d0       	rcall	.+136    	; 0x28a <MCP2515_read>
 202:	8f 70       	andi	r24, 0x0F	; 15
 204:	c8 2e       	mov	r12, r24
 206:	dd 24       	eor	r13, r13
 208:	c7 fc       	sbrc	r12, 7
 20a:	d0 94       	com	r13
 20c:	7e 01       	movw	r14, r28
 20e:	e5 e0       	ldi	r30, 0x05	; 5
 210:	ee 0e       	add	r14, r30
 212:	f1 1c       	adc	r15, r1
		message.length = length;
		
		/* Read data */
		for (int i=0; i < length || i < 8; i++)
 214:	00 e0       	ldi	r16, 0x00	; 0
 216:	10 e0       	ldi	r17, 0x00	; 0
 218:	08 c0       	rjmp	.+16     	; 0x22a <CAN_receive+0x96>
		{
			message.data[i] = MCP2515_read(MCP_RXB0D0+i);
 21a:	86 e6       	ldi	r24, 0x66	; 102
 21c:	80 0f       	add	r24, r16
 21e:	35 d0       	rcall	.+106    	; 0x28a <MCP2515_read>
 220:	f7 01       	movw	r30, r14
 222:	81 93       	st	Z+, r24
 224:	7f 01       	movw	r14, r30
		/* Read length */
		int length = MCP2515_read(MCP_RXB0DLC) & 0x0F;
		message.length = length;
		
		/* Read data */
		for (int i=0; i < length || i < 8; i++)
 226:	0f 5f       	subi	r16, 0xFF	; 255
 228:	1f 4f       	sbci	r17, 0xFF	; 255
 22a:	0c 15       	cp	r16, r12
 22c:	1d 05       	cpc	r17, r13
 22e:	ac f3       	brlt	.-22     	; 0x21a <CAN_receive+0x86>
 230:	08 30       	cpi	r16, 0x08	; 8
 232:	11 05       	cpc	r17, r1
 234:	94 f3       	brlt	.-28     	; 0x21a <CAN_receive+0x86>
		{
			message.data[i] = MCP2515_read(MCP_RXB0D0+i);
		}
		
		/* Indicate there is no more message */
		MCP2515_bit_modify(MCP_CANINTF,0b00000001,0b00000000);
 236:	40 e0       	ldi	r20, 0x00	; 0
 238:	61 e0       	ldi	r22, 0x01	; 1
 23a:	8c e2       	ldi	r24, 0x2C	; 44
 23c:	33 d0       	rcall	.+102    	; 0x2a4 <MCP2515_bit_modify>
		
		return message;
 23e:	9a 82       	std	Y+2, r9	; 0x02
 240:	89 82       	std	Y+1, r8	; 0x01
 242:	dc 82       	std	Y+4, r13	; 0x04
 244:	cb 82       	std	Y+3, r12	; 0x03
 246:	8c e0       	ldi	r24, 0x0C	; 12
 248:	fe 01       	movw	r30, r28
 24a:	31 96       	adiw	r30, 0x01	; 1
 24c:	d5 01       	movw	r26, r10
 24e:	01 90       	ld	r0, Z+
 250:	0d 92       	st	X+, r0
 252:	8a 95       	dec	r24
 254:	e1 f7       	brne	.-8      	; 0x24e <CAN_receive+0xba>
 256:	00 c0       	rjmp	.+0      	; 0x258 <CAN_receive+0xc4>
	}
	else return;
 258:	c5 01       	movw	r24, r10
 25a:	2c 96       	adiw	r28, 0x0c	; 12
 25c:	0f b6       	in	r0, 0x3f	; 63
 25e:	f8 94       	cli
 260:	de bf       	out	0x3e, r29	; 62
 262:	0f be       	out	0x3f, r0	; 63
 264:	cd bf       	out	0x3d, r28	; 61
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	1f 91       	pop	r17
 26c:	0f 91       	pop	r16
 26e:	ff 90       	pop	r15
 270:	ef 90       	pop	r14
 272:	df 90       	pop	r13
 274:	cf 90       	pop	r12
 276:	bf 90       	pop	r11
 278:	af 90       	pop	r10
 27a:	9f 90       	pop	r9
 27c:	8f 90       	pop	r8
 27e:	08 95       	ret

00000280 <MCP2515_reset>:
	SPI_on();
	SPI_write(MCP_READ_STATUS);
	char data = SPI_read();
	SPI_off();
	return data;
}
 280:	f9 d0       	rcall	.+498    	; 0x474 <SPI_on>
 282:	80 ec       	ldi	r24, 0xC0	; 192
 284:	ec d0       	rcall	.+472    	; 0x45e <SPI_write>
 286:	fa c0       	rjmp	.+500    	; 0x47c <SPI_off>
 288:	08 95       	ret

0000028a <MCP2515_read>:
 28a:	cf 93       	push	r28
 28c:	c8 2f       	mov	r28, r24
 28e:	f2 d0       	rcall	.+484    	; 0x474 <SPI_on>
 290:	83 e0       	ldi	r24, 0x03	; 3
 292:	e5 d0       	rcall	.+458    	; 0x45e <SPI_write>
 294:	8c 2f       	mov	r24, r28
 296:	e3 d0       	rcall	.+454    	; 0x45e <SPI_write>
 298:	e7 d0       	rcall	.+462    	; 0x468 <SPI_read>
 29a:	c8 2f       	mov	r28, r24
 29c:	ef d0       	rcall	.+478    	; 0x47c <SPI_off>
 29e:	8c 2f       	mov	r24, r28
 2a0:	cf 91       	pop	r28
 2a2:	08 95       	ret

000002a4 <MCP2515_bit_modify>:

void MCP2515_bit_modify(uint8_t address, uint8_t mask, uint8_t data)
{
 2a4:	1f 93       	push	r17
 2a6:	cf 93       	push	r28
 2a8:	df 93       	push	r29
 2aa:	18 2f       	mov	r17, r24
 2ac:	d6 2f       	mov	r29, r22
 2ae:	c4 2f       	mov	r28, r20
	SPI_on();
 2b0:	e1 d0       	rcall	.+450    	; 0x474 <SPI_on>
	SPI_write(MCP_BITMOD);
 2b2:	85 e0       	ldi	r24, 0x05	; 5
 2b4:	d4 d0       	rcall	.+424    	; 0x45e <SPI_write>
	SPI_write(address);
 2b6:	81 2f       	mov	r24, r17
 2b8:	d2 d0       	rcall	.+420    	; 0x45e <SPI_write>
	SPI_write(mask);
 2ba:	8d 2f       	mov	r24, r29
 2bc:	d0 d0       	rcall	.+416    	; 0x45e <SPI_write>
	SPI_write(data);
 2be:	8c 2f       	mov	r24, r28
 2c0:	ce d0       	rcall	.+412    	; 0x45e <SPI_write>
	SPI_off();	
 2c2:	dc d0       	rcall	.+440    	; 0x47c <SPI_off>
 2c4:	df 91       	pop	r29
 2c6:	cf 91       	pop	r28
 2c8:	1f 91       	pop	r17
 2ca:	08 95       	ret

000002cc <main>:
#define FOSC 16000000
#define BAUD 9600
#define UART_BAUD FOSC/16/BAUD-1

int main(void)
{
 2cc:	cf 93       	push	r28
 2ce:	df 93       	push	r29
 2d0:	cd b7       	in	r28, 0x3d	; 61
 2d2:	de b7       	in	r29, 0x3e	; 62
 2d4:	2c 97       	sbiw	r28, 0x0c	; 12
 2d6:	0f b6       	in	r0, 0x3f	; 63
 2d8:	f8 94       	cli
 2da:	de bf       	out	0x3e, r29	; 62
 2dc:	0f be       	out	0x3f, r0	; 63
 2de:	cd bf       	out	0x3d, r28	; 61
	/* Initialize UART */
	UART_Init(UART_BAUD);
 2e0:	87 e6       	ldi	r24, 0x67	; 103
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	dd d0       	rcall	.+442    	; 0x4a0 <UART_Init>
	printf("Reset\n");
 2e6:	86 e0       	ldi	r24, 0x06	; 6
 2e8:	92 e0       	ldi	r25, 0x02	; 2
 2ea:	dd d2       	rcall	.+1466   	; 0x8a6 <puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ec:	2f e3       	ldi	r18, 0x3F	; 63
 2ee:	8d e0       	ldi	r24, 0x0D	; 13
 2f0:	93 e0       	ldi	r25, 0x03	; 3
 2f2:	21 50       	subi	r18, 0x01	; 1
 2f4:	80 40       	sbci	r24, 0x00	; 0
 2f6:	90 40       	sbci	r25, 0x00	; 0
 2f8:	e1 f7       	brne	.-8      	; 0x2f2 <main+0x26>
 2fa:	00 c0       	rjmp	.+0      	; 0x2fc <main+0x30>
 2fc:	00 00       	nop
	_delay_ms(1000);
	
	/* Initialize ADC, CAN, PWM */
	ADC_init();
 2fe:	12 df       	rcall	.-476    	; 0x124 <ADC_init>
	CAN_init();
 300:	38 df       	rcall	.-400    	; 0x172 <CAN_init>
	Servo_init();
 302:	32 d0       	rcall	.+100    	; 0x368 <Servo_init>

	/* Initialize variables */
	MSG joystick_message;
	int score = 0;
 304:	00 e0       	ldi	r16, 0x00	; 0
 306:	10 e0       	ldi	r17, 0x00	; 0
	
	while(1){
		/* Read joystick position and calculate PWM to control servo */
		joystick_message = CAN_receive();
 308:	ce 01       	movw	r24, r28
 30a:	01 96       	adiw	r24, 0x01	; 1
 30c:	43 df       	rcall	.-378    	; 0x194 <CAN_receive>
		Servo_pwm(joystick_message.data[0]);
 30e:	6d 81       	ldd	r22, Y+5	; 0x05
 310:	77 27       	eor	r23, r23
 312:	67 fd       	sbrc	r22, 7
 314:	70 95       	com	r23
 316:	87 2f       	mov	r24, r23
 318:	97 2f       	mov	r25, r23
 31a:	64 d1       	rcall	.+712    	; 0x5e4 <__floatsisf>
 31c:	4c d0       	rcall	.+152    	; 0x3b6 <Servo_pwm>
		/* Update score */
		score = get_score(score);
 31e:	c8 01       	movw	r24, r16
 320:	02 d0       	rcall	.+4      	; 0x326 <get_score>
 322:	8c 01       	movw	r16, r24
 324:	f1 cf       	rjmp	.-30     	; 0x308 <main+0x3c>

00000326 <get_score>:
#include <avr/delay.h>
#include "ADC.h"

int scoreUpdated = 0;

int get_score(int score){
 326:	cf 93       	push	r28
 328:	df 93       	push	r29
 32a:	ec 01       	movw	r28, r24
	int goal = ADC_convert();
 32c:	14 df       	rcall	.-472    	; 0x156 <ADC_convert>
 32e:	9c 01       	movw	r18, r24
	if(goal < 50 && scoreUpdated == 0){
 330:	82 33       	cpi	r24, 0x32	; 50
 332:	91 05       	cpc	r25, r1
 334:	74 f4       	brge	.+28     	; 0x352 <get_score+0x2c>
 336:	80 91 0c 02 	lds	r24, 0x020C
 33a:	90 91 0d 02 	lds	r25, 0x020D
 33e:	89 2b       	or	r24, r25
 340:	41 f4       	brne	.+16     	; 0x352 <get_score+0x2c>
		score ++;
 342:	21 96       	adiw	r28, 0x01	; 1
		scoreUpdated = 1;
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	90 93 0d 02 	sts	0x020D, r25
 34c:	80 93 0c 02 	sts	0x020C, r24
 350:	07 c0       	rjmp	.+14     	; 0x360 <get_score+0x3a>
	}
	else if(goal > 100){
 352:	25 36       	cpi	r18, 0x65	; 101
 354:	31 05       	cpc	r19, r1
 356:	24 f0       	brlt	.+8      	; 0x360 <get_score+0x3a>
		scoreUpdated = 0;
 358:	10 92 0d 02 	sts	0x020D, r1
 35c:	10 92 0c 02 	sts	0x020C, r1
	}
	return score;
}
 360:	ce 01       	movw	r24, r28
 362:	df 91       	pop	r29
 364:	cf 91       	pop	r28
 366:	08 95       	ret

00000368 <Servo_init>:
#define TOP_SERVO 0.0021
#define SLOPE_SERVO 0.000006

void Servo_init(){
	/* Set OC1A as an output */
	DDRB |= (1 << PB5);
 368:	25 9a       	sbi	0x04, 5	; 4
	/* Select fast PWM mode */
	TCCR1B |= (1 << WGM13) | (1 << WGM12);
 36a:	a1 e8       	ldi	r26, 0x81	; 129
 36c:	b0 e0       	ldi	r27, 0x00	; 0
 36e:	8c 91       	ld	r24, X
 370:	88 61       	ori	r24, 0x18	; 24
 372:	8c 93       	st	X, r24
	TCCR1A |=  (1 << WGM11);
 374:	e0 e8       	ldi	r30, 0x80	; 128
 376:	f0 e0       	ldi	r31, 0x00	; 0
 378:	80 81       	ld	r24, Z
 37a:	82 60       	ori	r24, 0x02	; 2
 37c:	80 83       	st	Z, r24
	TCCR1A &= ~(1 << WGM10);
 37e:	80 81       	ld	r24, Z
 380:	8e 7f       	andi	r24, 0xFE	; 254
 382:	80 83       	st	Z, r24
	TCCR1A |= 1 << COM1A1;
 384:	80 81       	ld	r24, Z
 386:	80 68       	ori	r24, 0x80	; 128
 388:	80 83       	st	Z, r24
	TCCR1A &= ~(1 << COM1A0);
 38a:	80 81       	ld	r24, Z
 38c:	8f 7b       	andi	r24, 0xBF	; 191
 38e:	80 83       	st	Z, r24
	/* Set top value */
	ICR1 = TOP;
 390:	8f e3       	ldi	r24, 0x3F	; 63
 392:	9c e9       	ldi	r25, 0x9C	; 156
 394:	90 93 87 00 	sts	0x0087, r25
 398:	80 93 86 00 	sts	0x0086, r24
	/* Set compare value to neutral */
	OCR1A = NEUTRAL_SERVO * (TOP + 1) * FPWM;
 39c:	88 eb       	ldi	r24, 0xB8	; 184
 39e:	9b e0       	ldi	r25, 0x0B	; 11
 3a0:	90 93 89 00 	sts	0x0089, r25
 3a4:	80 93 88 00 	sts	0x0088, r24
	/* Set prescaler */
	TCCR1B &= ~(1 << CS12) & ~(1 << CS10);
 3a8:	8c 91       	ld	r24, X
 3aa:	8a 7f       	andi	r24, 0xFA	; 250
 3ac:	8c 93       	st	X, r24
	TCCR1B |= (1 << CS11);
 3ae:	8c 91       	ld	r24, X
 3b0:	82 60       	ori	r24, 0x02	; 2
 3b2:	8c 93       	st	X, r24
 3b4:	08 95       	ret

000003b6 <Servo_pwm>:
}

void Servo_pwm(float x){
 3b6:	cf 92       	push	r12
 3b8:	df 92       	push	r13
 3ba:	ef 92       	push	r14
 3bc:	ff 92       	push	r15
	/* Calculate PWM value */
	float y = - SLOPE_SERVO * x + NEUTRAL_SERVO;
 3be:	2c e9       	ldi	r18, 0x9C	; 156
 3c0:	33 e5       	ldi	r19, 0x53	; 83
 3c2:	49 ec       	ldi	r20, 0xC9	; 201
 3c4:	56 eb       	ldi	r21, 0xB6	; 182
 3c6:	c2 d1       	rcall	.+900    	; 0x74c <__mulsf3>
 3c8:	26 ea       	ldi	r18, 0xA6	; 166
 3ca:	3b e9       	ldi	r19, 0x9B	; 155
 3cc:	44 ec       	ldi	r20, 0xC4	; 196
 3ce:	5a e3       	ldi	r21, 0x3A	; 58
 3d0:	73 d0       	rcall	.+230    	; 0x4b8 <__addsf3>
 3d2:	6b 01       	movw	r12, r22
 3d4:	7c 01       	movw	r14, r24
	
	/* Protect servo from out of bounds values */
	if(y > TOP_SERVO){
 3d6:	27 e2       	ldi	r18, 0x27	; 39
 3d8:	30 ea       	ldi	r19, 0xA0	; 160
 3da:	49 e0       	ldi	r20, 0x09	; 9
 3dc:	5b e3       	ldi	r21, 0x3B	; 59
 3de:	b2 d1       	rcall	.+868    	; 0x744 <__gesf2>
 3e0:	18 16       	cp	r1, r24
 3e2:	54 f0       	brlt	.+20     	; 0x3f8 <Servo_pwm+0x42>
		y = TOP_SERVO;
	}
	else if(y < BOTTOM_SERVO){
 3e4:	2a ef       	ldi	r18, 0xFA	; 250
 3e6:	3d ee       	ldi	r19, 0xED	; 237
 3e8:	4b e6       	ldi	r20, 0x6B	; 107
 3ea:	5a e3       	ldi	r21, 0x3A	; 58
 3ec:	c7 01       	movw	r24, r14
 3ee:	b6 01       	movw	r22, r12
 3f0:	c7 d0       	rcall	.+398    	; 0x580 <__cmpsf2>
 3f2:	88 23       	and	r24, r24
 3f4:	64 f0       	brlt	.+24     	; 0x40e <Servo_pwm+0x58>
 3f6:	15 c0       	rjmp	.+42     	; 0x422 <Servo_pwm+0x6c>
	/* Calculate PWM value */
	float y = - SLOPE_SERVO * x + NEUTRAL_SERVO;
	
	/* Protect servo from out of bounds values */
	if(y > TOP_SERVO){
		y = TOP_SERVO;
 3f8:	0f 2e       	mov	r0, r31
 3fa:	f7 e2       	ldi	r31, 0x27	; 39
 3fc:	cf 2e       	mov	r12, r31
 3fe:	f0 ea       	ldi	r31, 0xA0	; 160
 400:	df 2e       	mov	r13, r31
 402:	f9 e0       	ldi	r31, 0x09	; 9
 404:	ef 2e       	mov	r14, r31
 406:	fb e3       	ldi	r31, 0x3B	; 59
 408:	ff 2e       	mov	r15, r31
 40a:	f0 2d       	mov	r31, r0
 40c:	0a c0       	rjmp	.+20     	; 0x422 <Servo_pwm+0x6c>
	}
	else if(y < BOTTOM_SERVO){
		y = BOTTOM_SERVO;
 40e:	0f 2e       	mov	r0, r31
 410:	fa ef       	ldi	r31, 0xFA	; 250
 412:	cf 2e       	mov	r12, r31
 414:	fd ee       	ldi	r31, 0xED	; 237
 416:	df 2e       	mov	r13, r31
 418:	fb e6       	ldi	r31, 0x6B	; 107
 41a:	ef 2e       	mov	r14, r31
 41c:	fa e3       	ldi	r31, 0x3A	; 58
 41e:	ff 2e       	mov	r15, r31
 420:	f0 2d       	mov	r31, r0
	}
	
	/* Set compare value */
	OCR1A = y * (TOP + 1) * FPWM;
 422:	20 e0       	ldi	r18, 0x00	; 0
 424:	30 e4       	ldi	r19, 0x40	; 64
 426:	4c e1       	ldi	r20, 0x1C	; 28
 428:	57 e4       	ldi	r21, 0x47	; 71
 42a:	c7 01       	movw	r24, r14
 42c:	b6 01       	movw	r22, r12
 42e:	8e d1       	rcall	.+796    	; 0x74c <__mulsf3>
 430:	20 e0       	ldi	r18, 0x00	; 0
 432:	30 e0       	ldi	r19, 0x00	; 0
 434:	48 e4       	ldi	r20, 0x48	; 72
 436:	52 e4       	ldi	r21, 0x42	; 66
 438:	89 d1       	rcall	.+786    	; 0x74c <__mulsf3>
 43a:	a6 d0       	rcall	.+332    	; 0x588 <__fixunssfsi>
 43c:	70 93 89 00 	sts	0x0089, r23
 440:	60 93 88 00 	sts	0x0088, r22
 444:	ff 90       	pop	r15
 446:	ef 90       	pop	r14
 448:	df 90       	pop	r13
 44a:	cf 90       	pop	r12
 44c:	08 95       	ret

0000044e <SPI_init>:
#include <avr/io.h>

void SPI_init(void)
{
	/* Set CS, MOSI and SCK output, MISO input */
	DDRB |= (1<<PB7)| (1<<PB1)|(1<<PB2);
 44e:	84 b1       	in	r24, 0x04	; 4
 450:	86 68       	ori	r24, 0x86	; 134
 452:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1<<PB3);
 454:	23 98       	cbi	0x04, 3	; 4
	DDRB |= 1;
 456:	20 9a       	sbi	0x04, 0	; 4
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 458:	81 e5       	ldi	r24, 0x51	; 81
 45a:	8c bd       	out	0x2c, r24	; 44
 45c:	08 95       	ret

0000045e <SPI_write>:
}

void SPI_write(char cData)
{
	/* Start transmission */
	SPDR = cData;
 45e:	8e bd       	out	0x2e, r24	; 46
	/* Wait for transmission complete */
	while (!(SPSR & (1<<SPIF)))
 460:	0d b4       	in	r0, 0x2d	; 45
 462:	07 fe       	sbrs	r0, 7
 464:	fd cf       	rjmp	.-6      	; 0x460 <SPI_write+0x2>
		;
}
 466:	08 95       	ret

00000468 <SPI_read>:

char SPI_read(void)
{
	/* Start transmission */
	SPDR = 0x00;
 468:	1e bc       	out	0x2e, r1	; 46
	/* Wait for transmission complete */
	while (!(SPSR & (1<<SPIF)))
 46a:	0d b4       	in	r0, 0x2d	; 45
 46c:	07 fe       	sbrs	r0, 7
 46e:	fd cf       	rjmp	.-6      	; 0x46a <SPI_read+0x2>
		;
	return SPDR;
 470:	8e b5       	in	r24, 0x2e	; 46
}
 472:	08 95       	ret

00000474 <SPI_on>:

void SPI_on(void)
{
	PORTB &= 0x38;
 474:	85 b1       	in	r24, 0x05	; 5
 476:	88 73       	andi	r24, 0x38	; 56
 478:	85 b9       	out	0x05, r24	; 5
 47a:	08 95       	ret

0000047c <SPI_off>:
}

void SPI_off(void)
{
	PORTB |= (1 << PB7);
 47c:	2f 9a       	sbi	0x05, 7	; 5
 47e:	08 95       	ret

00000480 <UART_Transmit>:
#include <stdio.h>
#include <avr/io.h>

void UART_Transmit(unsigned char data){
	/* Wait for empty transmit buffer */
	while(!(UCSR0A&(1<<UDRE0)))
 480:	e0 ec       	ldi	r30, 0xC0	; 192
 482:	f0 e0       	ldi	r31, 0x00	; 0
 484:	90 81       	ld	r25, Z
 486:	95 ff       	sbrs	r25, 5
 488:	fd cf       	rjmp	.-6      	; 0x484 <UART_Transmit+0x4>
		;
	/* Put data into buffer */
	UDR0 = data;
 48a:	80 93 c6 00 	sts	0x00C6, r24
 48e:	08 95       	ret

00000490 <UART_Receive>:
}

unsigned char UART_Receive(void){
	/* Wait for data to be received */
	while(!(UCSR0A&(1<<RXC0)))
 490:	e0 ec       	ldi	r30, 0xC0	; 192
 492:	f0 e0       	ldi	r31, 0x00	; 0
 494:	80 81       	ld	r24, Z
 496:	88 23       	and	r24, r24
 498:	ec f7       	brge	.-6      	; 0x494 <UART_Receive+0x4>
		;
	/* Get and return received data from buffer */
	return UDR0;
 49a:	80 91 c6 00 	lds	r24, 0x00C6
}
 49e:	08 95       	ret

000004a0 <UART_Init>:

void UART_Init(unsigned int ubrr){
	/* Set baud rate */
	UBRR0L = (unsigned char) ubrr;
 4a0:	80 93 c4 00 	sts	0x00C4, r24
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 4a4:	88 e1       	ldi	r24, 0x18	; 24
 4a6:	80 93 c1 00 	sts	0x00C1, r24
	/* Link printf to UART transmissions */	
	fdevopen(UART_Transmit,UART_Receive);
 4aa:	68 e4       	ldi	r22, 0x48	; 72
 4ac:	72 e0       	ldi	r23, 0x02	; 2
 4ae:	80 e4       	ldi	r24, 0x40	; 64
 4b0:	92 e0       	ldi	r25, 0x02	; 2
 4b2:	af c1       	rjmp	.+862    	; 0x812 <fdevopen>
 4b4:	08 95       	ret

000004b6 <__subsf3>:
 4b6:	50 58       	subi	r21, 0x80	; 128

000004b8 <__addsf3>:
 4b8:	bb 27       	eor	r27, r27
 4ba:	aa 27       	eor	r26, r26
 4bc:	0e d0       	rcall	.+28     	; 0x4da <__addsf3x>
 4be:	08 c1       	rjmp	.+528    	; 0x6d0 <__fp_round>
 4c0:	f9 d0       	rcall	.+498    	; 0x6b4 <__fp_pscA>
 4c2:	30 f0       	brcs	.+12     	; 0x4d0 <__addsf3+0x18>
 4c4:	fe d0       	rcall	.+508    	; 0x6c2 <__fp_pscB>
 4c6:	20 f0       	brcs	.+8      	; 0x4d0 <__addsf3+0x18>
 4c8:	31 f4       	brne	.+12     	; 0x4d6 <__addsf3+0x1e>
 4ca:	9f 3f       	cpi	r25, 0xFF	; 255
 4cc:	11 f4       	brne	.+4      	; 0x4d2 <__addsf3+0x1a>
 4ce:	1e f4       	brtc	.+6      	; 0x4d6 <__addsf3+0x1e>
 4d0:	ee c0       	rjmp	.+476    	; 0x6ae <__fp_nan>
 4d2:	0e f4       	brtc	.+2      	; 0x4d6 <__addsf3+0x1e>
 4d4:	e0 95       	com	r30
 4d6:	e7 fb       	bst	r30, 7
 4d8:	e4 c0       	rjmp	.+456    	; 0x6a2 <__fp_inf>

000004da <__addsf3x>:
 4da:	e9 2f       	mov	r30, r25
 4dc:	0a d1       	rcall	.+532    	; 0x6f2 <__fp_split3>
 4de:	80 f3       	brcs	.-32     	; 0x4c0 <__addsf3+0x8>
 4e0:	ba 17       	cp	r27, r26
 4e2:	62 07       	cpc	r22, r18
 4e4:	73 07       	cpc	r23, r19
 4e6:	84 07       	cpc	r24, r20
 4e8:	95 07       	cpc	r25, r21
 4ea:	18 f0       	brcs	.+6      	; 0x4f2 <__addsf3x+0x18>
 4ec:	71 f4       	brne	.+28     	; 0x50a <__addsf3x+0x30>
 4ee:	9e f5       	brtc	.+102    	; 0x556 <__addsf3x+0x7c>
 4f0:	22 c1       	rjmp	.+580    	; 0x736 <__fp_zero>
 4f2:	0e f4       	brtc	.+2      	; 0x4f6 <__addsf3x+0x1c>
 4f4:	e0 95       	com	r30
 4f6:	0b 2e       	mov	r0, r27
 4f8:	ba 2f       	mov	r27, r26
 4fa:	a0 2d       	mov	r26, r0
 4fc:	0b 01       	movw	r0, r22
 4fe:	b9 01       	movw	r22, r18
 500:	90 01       	movw	r18, r0
 502:	0c 01       	movw	r0, r24
 504:	ca 01       	movw	r24, r20
 506:	a0 01       	movw	r20, r0
 508:	11 24       	eor	r1, r1
 50a:	ff 27       	eor	r31, r31
 50c:	59 1b       	sub	r21, r25
 50e:	99 f0       	breq	.+38     	; 0x536 <__addsf3x+0x5c>
 510:	59 3f       	cpi	r21, 0xF9	; 249
 512:	50 f4       	brcc	.+20     	; 0x528 <__addsf3x+0x4e>
 514:	50 3e       	cpi	r21, 0xE0	; 224
 516:	68 f1       	brcs	.+90     	; 0x572 <__addsf3x+0x98>
 518:	1a 16       	cp	r1, r26
 51a:	f0 40       	sbci	r31, 0x00	; 0
 51c:	a2 2f       	mov	r26, r18
 51e:	23 2f       	mov	r18, r19
 520:	34 2f       	mov	r19, r20
 522:	44 27       	eor	r20, r20
 524:	58 5f       	subi	r21, 0xF8	; 248
 526:	f3 cf       	rjmp	.-26     	; 0x50e <__addsf3x+0x34>
 528:	46 95       	lsr	r20
 52a:	37 95       	ror	r19
 52c:	27 95       	ror	r18
 52e:	a7 95       	ror	r26
 530:	f0 40       	sbci	r31, 0x00	; 0
 532:	53 95       	inc	r21
 534:	c9 f7       	brne	.-14     	; 0x528 <__addsf3x+0x4e>
 536:	7e f4       	brtc	.+30     	; 0x556 <__addsf3x+0x7c>
 538:	1f 16       	cp	r1, r31
 53a:	ba 0b       	sbc	r27, r26
 53c:	62 0b       	sbc	r22, r18
 53e:	73 0b       	sbc	r23, r19
 540:	84 0b       	sbc	r24, r20
 542:	ba f0       	brmi	.+46     	; 0x572 <__addsf3x+0x98>
 544:	91 50       	subi	r25, 0x01	; 1
 546:	a1 f0       	breq	.+40     	; 0x570 <__addsf3x+0x96>
 548:	ff 0f       	add	r31, r31
 54a:	bb 1f       	adc	r27, r27
 54c:	66 1f       	adc	r22, r22
 54e:	77 1f       	adc	r23, r23
 550:	88 1f       	adc	r24, r24
 552:	c2 f7       	brpl	.-16     	; 0x544 <__addsf3x+0x6a>
 554:	0e c0       	rjmp	.+28     	; 0x572 <__addsf3x+0x98>
 556:	ba 0f       	add	r27, r26
 558:	62 1f       	adc	r22, r18
 55a:	73 1f       	adc	r23, r19
 55c:	84 1f       	adc	r24, r20
 55e:	48 f4       	brcc	.+18     	; 0x572 <__addsf3x+0x98>
 560:	87 95       	ror	r24
 562:	77 95       	ror	r23
 564:	67 95       	ror	r22
 566:	b7 95       	ror	r27
 568:	f7 95       	ror	r31
 56a:	9e 3f       	cpi	r25, 0xFE	; 254
 56c:	08 f0       	brcs	.+2      	; 0x570 <__addsf3x+0x96>
 56e:	b3 cf       	rjmp	.-154    	; 0x4d6 <__addsf3+0x1e>
 570:	93 95       	inc	r25
 572:	88 0f       	add	r24, r24
 574:	08 f0       	brcs	.+2      	; 0x578 <__addsf3x+0x9e>
 576:	99 27       	eor	r25, r25
 578:	ee 0f       	add	r30, r30
 57a:	97 95       	ror	r25
 57c:	87 95       	ror	r24
 57e:	08 95       	ret

00000580 <__cmpsf2>:
 580:	6c d0       	rcall	.+216    	; 0x65a <__fp_cmp>
 582:	08 f4       	brcc	.+2      	; 0x586 <__cmpsf2+0x6>
 584:	81 e0       	ldi	r24, 0x01	; 1
 586:	08 95       	ret

00000588 <__fixunssfsi>:
 588:	bc d0       	rcall	.+376    	; 0x702 <__fp_splitA>
 58a:	88 f0       	brcs	.+34     	; 0x5ae <__fixunssfsi+0x26>
 58c:	9f 57       	subi	r25, 0x7F	; 127
 58e:	90 f0       	brcs	.+36     	; 0x5b4 <__fixunssfsi+0x2c>
 590:	b9 2f       	mov	r27, r25
 592:	99 27       	eor	r25, r25
 594:	b7 51       	subi	r27, 0x17	; 23
 596:	a0 f0       	brcs	.+40     	; 0x5c0 <__fixunssfsi+0x38>
 598:	d1 f0       	breq	.+52     	; 0x5ce <__fixunssfsi+0x46>
 59a:	66 0f       	add	r22, r22
 59c:	77 1f       	adc	r23, r23
 59e:	88 1f       	adc	r24, r24
 5a0:	99 1f       	adc	r25, r25
 5a2:	1a f0       	brmi	.+6      	; 0x5aa <__fixunssfsi+0x22>
 5a4:	ba 95       	dec	r27
 5a6:	c9 f7       	brne	.-14     	; 0x59a <__fixunssfsi+0x12>
 5a8:	12 c0       	rjmp	.+36     	; 0x5ce <__fixunssfsi+0x46>
 5aa:	b1 30       	cpi	r27, 0x01	; 1
 5ac:	81 f0       	breq	.+32     	; 0x5ce <__fixunssfsi+0x46>
 5ae:	c3 d0       	rcall	.+390    	; 0x736 <__fp_zero>
 5b0:	b1 e0       	ldi	r27, 0x01	; 1
 5b2:	08 95       	ret
 5b4:	c0 c0       	rjmp	.+384    	; 0x736 <__fp_zero>
 5b6:	67 2f       	mov	r22, r23
 5b8:	78 2f       	mov	r23, r24
 5ba:	88 27       	eor	r24, r24
 5bc:	b8 5f       	subi	r27, 0xF8	; 248
 5be:	39 f0       	breq	.+14     	; 0x5ce <__fixunssfsi+0x46>
 5c0:	b9 3f       	cpi	r27, 0xF9	; 249
 5c2:	cc f3       	brlt	.-14     	; 0x5b6 <__fixunssfsi+0x2e>
 5c4:	86 95       	lsr	r24
 5c6:	77 95       	ror	r23
 5c8:	67 95       	ror	r22
 5ca:	b3 95       	inc	r27
 5cc:	d9 f7       	brne	.-10     	; 0x5c4 <__fixunssfsi+0x3c>
 5ce:	3e f4       	brtc	.+14     	; 0x5de <__fixunssfsi+0x56>
 5d0:	90 95       	com	r25
 5d2:	80 95       	com	r24
 5d4:	70 95       	com	r23
 5d6:	61 95       	neg	r22
 5d8:	7f 4f       	sbci	r23, 0xFF	; 255
 5da:	8f 4f       	sbci	r24, 0xFF	; 255
 5dc:	9f 4f       	sbci	r25, 0xFF	; 255
 5de:	08 95       	ret

000005e0 <__floatunsisf>:
 5e0:	e8 94       	clt
 5e2:	09 c0       	rjmp	.+18     	; 0x5f6 <__floatsisf+0x12>

000005e4 <__floatsisf>:
 5e4:	97 fb       	bst	r25, 7
 5e6:	3e f4       	brtc	.+14     	; 0x5f6 <__floatsisf+0x12>
 5e8:	90 95       	com	r25
 5ea:	80 95       	com	r24
 5ec:	70 95       	com	r23
 5ee:	61 95       	neg	r22
 5f0:	7f 4f       	sbci	r23, 0xFF	; 255
 5f2:	8f 4f       	sbci	r24, 0xFF	; 255
 5f4:	9f 4f       	sbci	r25, 0xFF	; 255
 5f6:	99 23       	and	r25, r25
 5f8:	a9 f0       	breq	.+42     	; 0x624 <__floatsisf+0x40>
 5fa:	f9 2f       	mov	r31, r25
 5fc:	96 e9       	ldi	r25, 0x96	; 150
 5fe:	bb 27       	eor	r27, r27
 600:	93 95       	inc	r25
 602:	f6 95       	lsr	r31
 604:	87 95       	ror	r24
 606:	77 95       	ror	r23
 608:	67 95       	ror	r22
 60a:	b7 95       	ror	r27
 60c:	f1 11       	cpse	r31, r1
 60e:	f8 cf       	rjmp	.-16     	; 0x600 <__floatsisf+0x1c>
 610:	fa f4       	brpl	.+62     	; 0x650 <__floatsisf+0x6c>
 612:	bb 0f       	add	r27, r27
 614:	11 f4       	brne	.+4      	; 0x61a <__floatsisf+0x36>
 616:	60 ff       	sbrs	r22, 0
 618:	1b c0       	rjmp	.+54     	; 0x650 <__floatsisf+0x6c>
 61a:	6f 5f       	subi	r22, 0xFF	; 255
 61c:	7f 4f       	sbci	r23, 0xFF	; 255
 61e:	8f 4f       	sbci	r24, 0xFF	; 255
 620:	9f 4f       	sbci	r25, 0xFF	; 255
 622:	16 c0       	rjmp	.+44     	; 0x650 <__floatsisf+0x6c>
 624:	88 23       	and	r24, r24
 626:	11 f0       	breq	.+4      	; 0x62c <__floatsisf+0x48>
 628:	96 e9       	ldi	r25, 0x96	; 150
 62a:	11 c0       	rjmp	.+34     	; 0x64e <__floatsisf+0x6a>
 62c:	77 23       	and	r23, r23
 62e:	21 f0       	breq	.+8      	; 0x638 <__floatsisf+0x54>
 630:	9e e8       	ldi	r25, 0x8E	; 142
 632:	87 2f       	mov	r24, r23
 634:	76 2f       	mov	r23, r22
 636:	05 c0       	rjmp	.+10     	; 0x642 <__floatsisf+0x5e>
 638:	66 23       	and	r22, r22
 63a:	71 f0       	breq	.+28     	; 0x658 <__floatsisf+0x74>
 63c:	96 e8       	ldi	r25, 0x86	; 134
 63e:	86 2f       	mov	r24, r22
 640:	70 e0       	ldi	r23, 0x00	; 0
 642:	60 e0       	ldi	r22, 0x00	; 0
 644:	2a f0       	brmi	.+10     	; 0x650 <__floatsisf+0x6c>
 646:	9a 95       	dec	r25
 648:	66 0f       	add	r22, r22
 64a:	77 1f       	adc	r23, r23
 64c:	88 1f       	adc	r24, r24
 64e:	da f7       	brpl	.-10     	; 0x646 <__floatsisf+0x62>
 650:	88 0f       	add	r24, r24
 652:	96 95       	lsr	r25
 654:	87 95       	ror	r24
 656:	97 f9       	bld	r25, 7
 658:	08 95       	ret

0000065a <__fp_cmp>:
 65a:	99 0f       	add	r25, r25
 65c:	00 08       	sbc	r0, r0
 65e:	55 0f       	add	r21, r21
 660:	aa 0b       	sbc	r26, r26
 662:	e0 e8       	ldi	r30, 0x80	; 128
 664:	fe ef       	ldi	r31, 0xFE	; 254
 666:	16 16       	cp	r1, r22
 668:	17 06       	cpc	r1, r23
 66a:	e8 07       	cpc	r30, r24
 66c:	f9 07       	cpc	r31, r25
 66e:	c0 f0       	brcs	.+48     	; 0x6a0 <__fp_cmp+0x46>
 670:	12 16       	cp	r1, r18
 672:	13 06       	cpc	r1, r19
 674:	e4 07       	cpc	r30, r20
 676:	f5 07       	cpc	r31, r21
 678:	98 f0       	brcs	.+38     	; 0x6a0 <__fp_cmp+0x46>
 67a:	62 1b       	sub	r22, r18
 67c:	73 0b       	sbc	r23, r19
 67e:	84 0b       	sbc	r24, r20
 680:	95 0b       	sbc	r25, r21
 682:	39 f4       	brne	.+14     	; 0x692 <__fp_cmp+0x38>
 684:	0a 26       	eor	r0, r26
 686:	61 f0       	breq	.+24     	; 0x6a0 <__fp_cmp+0x46>
 688:	23 2b       	or	r18, r19
 68a:	24 2b       	or	r18, r20
 68c:	25 2b       	or	r18, r21
 68e:	21 f4       	brne	.+8      	; 0x698 <__fp_cmp+0x3e>
 690:	08 95       	ret
 692:	0a 26       	eor	r0, r26
 694:	09 f4       	brne	.+2      	; 0x698 <__fp_cmp+0x3e>
 696:	a1 40       	sbci	r26, 0x01	; 1
 698:	a6 95       	lsr	r26
 69a:	8f ef       	ldi	r24, 0xFF	; 255
 69c:	81 1d       	adc	r24, r1
 69e:	81 1d       	adc	r24, r1
 6a0:	08 95       	ret

000006a2 <__fp_inf>:
 6a2:	97 f9       	bld	r25, 7
 6a4:	9f 67       	ori	r25, 0x7F	; 127
 6a6:	80 e8       	ldi	r24, 0x80	; 128
 6a8:	70 e0       	ldi	r23, 0x00	; 0
 6aa:	60 e0       	ldi	r22, 0x00	; 0
 6ac:	08 95       	ret

000006ae <__fp_nan>:
 6ae:	9f ef       	ldi	r25, 0xFF	; 255
 6b0:	80 ec       	ldi	r24, 0xC0	; 192
 6b2:	08 95       	ret

000006b4 <__fp_pscA>:
 6b4:	00 24       	eor	r0, r0
 6b6:	0a 94       	dec	r0
 6b8:	16 16       	cp	r1, r22
 6ba:	17 06       	cpc	r1, r23
 6bc:	18 06       	cpc	r1, r24
 6be:	09 06       	cpc	r0, r25
 6c0:	08 95       	ret

000006c2 <__fp_pscB>:
 6c2:	00 24       	eor	r0, r0
 6c4:	0a 94       	dec	r0
 6c6:	12 16       	cp	r1, r18
 6c8:	13 06       	cpc	r1, r19
 6ca:	14 06       	cpc	r1, r20
 6cc:	05 06       	cpc	r0, r21
 6ce:	08 95       	ret

000006d0 <__fp_round>:
 6d0:	09 2e       	mov	r0, r25
 6d2:	03 94       	inc	r0
 6d4:	00 0c       	add	r0, r0
 6d6:	11 f4       	brne	.+4      	; 0x6dc <__fp_round+0xc>
 6d8:	88 23       	and	r24, r24
 6da:	52 f0       	brmi	.+20     	; 0x6f0 <__fp_round+0x20>
 6dc:	bb 0f       	add	r27, r27
 6de:	40 f4       	brcc	.+16     	; 0x6f0 <__fp_round+0x20>
 6e0:	bf 2b       	or	r27, r31
 6e2:	11 f4       	brne	.+4      	; 0x6e8 <__fp_round+0x18>
 6e4:	60 ff       	sbrs	r22, 0
 6e6:	04 c0       	rjmp	.+8      	; 0x6f0 <__fp_round+0x20>
 6e8:	6f 5f       	subi	r22, 0xFF	; 255
 6ea:	7f 4f       	sbci	r23, 0xFF	; 255
 6ec:	8f 4f       	sbci	r24, 0xFF	; 255
 6ee:	9f 4f       	sbci	r25, 0xFF	; 255
 6f0:	08 95       	ret

000006f2 <__fp_split3>:
 6f2:	57 fd       	sbrc	r21, 7
 6f4:	90 58       	subi	r25, 0x80	; 128
 6f6:	44 0f       	add	r20, r20
 6f8:	55 1f       	adc	r21, r21
 6fa:	59 f0       	breq	.+22     	; 0x712 <__fp_splitA+0x10>
 6fc:	5f 3f       	cpi	r21, 0xFF	; 255
 6fe:	71 f0       	breq	.+28     	; 0x71c <__fp_splitA+0x1a>
 700:	47 95       	ror	r20

00000702 <__fp_splitA>:
 702:	88 0f       	add	r24, r24
 704:	97 fb       	bst	r25, 7
 706:	99 1f       	adc	r25, r25
 708:	61 f0       	breq	.+24     	; 0x722 <__fp_splitA+0x20>
 70a:	9f 3f       	cpi	r25, 0xFF	; 255
 70c:	79 f0       	breq	.+30     	; 0x72c <__fp_splitA+0x2a>
 70e:	87 95       	ror	r24
 710:	08 95       	ret
 712:	12 16       	cp	r1, r18
 714:	13 06       	cpc	r1, r19
 716:	14 06       	cpc	r1, r20
 718:	55 1f       	adc	r21, r21
 71a:	f2 cf       	rjmp	.-28     	; 0x700 <__fp_split3+0xe>
 71c:	46 95       	lsr	r20
 71e:	f1 df       	rcall	.-30     	; 0x702 <__fp_splitA>
 720:	08 c0       	rjmp	.+16     	; 0x732 <__fp_splitA+0x30>
 722:	16 16       	cp	r1, r22
 724:	17 06       	cpc	r1, r23
 726:	18 06       	cpc	r1, r24
 728:	99 1f       	adc	r25, r25
 72a:	f1 cf       	rjmp	.-30     	; 0x70e <__fp_splitA+0xc>
 72c:	86 95       	lsr	r24
 72e:	71 05       	cpc	r23, r1
 730:	61 05       	cpc	r22, r1
 732:	08 94       	sec
 734:	08 95       	ret

00000736 <__fp_zero>:
 736:	e8 94       	clt

00000738 <__fp_szero>:
 738:	bb 27       	eor	r27, r27
 73a:	66 27       	eor	r22, r22
 73c:	77 27       	eor	r23, r23
 73e:	cb 01       	movw	r24, r22
 740:	97 f9       	bld	r25, 7
 742:	08 95       	ret

00000744 <__gesf2>:
 744:	8a df       	rcall	.-236    	; 0x65a <__fp_cmp>
 746:	08 f4       	brcc	.+2      	; 0x74a <__gesf2+0x6>
 748:	8f ef       	ldi	r24, 0xFF	; 255
 74a:	08 95       	ret

0000074c <__mulsf3>:
 74c:	0b d0       	rcall	.+22     	; 0x764 <__mulsf3x>
 74e:	c0 cf       	rjmp	.-128    	; 0x6d0 <__fp_round>
 750:	b1 df       	rcall	.-158    	; 0x6b4 <__fp_pscA>
 752:	28 f0       	brcs	.+10     	; 0x75e <__mulsf3+0x12>
 754:	b6 df       	rcall	.-148    	; 0x6c2 <__fp_pscB>
 756:	18 f0       	brcs	.+6      	; 0x75e <__mulsf3+0x12>
 758:	95 23       	and	r25, r21
 75a:	09 f0       	breq	.+2      	; 0x75e <__mulsf3+0x12>
 75c:	a2 cf       	rjmp	.-188    	; 0x6a2 <__fp_inf>
 75e:	a7 cf       	rjmp	.-178    	; 0x6ae <__fp_nan>
 760:	11 24       	eor	r1, r1
 762:	ea cf       	rjmp	.-44     	; 0x738 <__fp_szero>

00000764 <__mulsf3x>:
 764:	c6 df       	rcall	.-116    	; 0x6f2 <__fp_split3>
 766:	a0 f3       	brcs	.-24     	; 0x750 <__mulsf3+0x4>

00000768 <__mulsf3_pse>:
 768:	95 9f       	mul	r25, r21
 76a:	d1 f3       	breq	.-12     	; 0x760 <__mulsf3+0x14>
 76c:	95 0f       	add	r25, r21
 76e:	50 e0       	ldi	r21, 0x00	; 0
 770:	55 1f       	adc	r21, r21
 772:	62 9f       	mul	r22, r18
 774:	f0 01       	movw	r30, r0
 776:	72 9f       	mul	r23, r18
 778:	bb 27       	eor	r27, r27
 77a:	f0 0d       	add	r31, r0
 77c:	b1 1d       	adc	r27, r1
 77e:	63 9f       	mul	r22, r19
 780:	aa 27       	eor	r26, r26
 782:	f0 0d       	add	r31, r0
 784:	b1 1d       	adc	r27, r1
 786:	aa 1f       	adc	r26, r26
 788:	64 9f       	mul	r22, r20
 78a:	66 27       	eor	r22, r22
 78c:	b0 0d       	add	r27, r0
 78e:	a1 1d       	adc	r26, r1
 790:	66 1f       	adc	r22, r22
 792:	82 9f       	mul	r24, r18
 794:	22 27       	eor	r18, r18
 796:	b0 0d       	add	r27, r0
 798:	a1 1d       	adc	r26, r1
 79a:	62 1f       	adc	r22, r18
 79c:	73 9f       	mul	r23, r19
 79e:	b0 0d       	add	r27, r0
 7a0:	a1 1d       	adc	r26, r1
 7a2:	62 1f       	adc	r22, r18
 7a4:	83 9f       	mul	r24, r19
 7a6:	a0 0d       	add	r26, r0
 7a8:	61 1d       	adc	r22, r1
 7aa:	22 1f       	adc	r18, r18
 7ac:	74 9f       	mul	r23, r20
 7ae:	33 27       	eor	r19, r19
 7b0:	a0 0d       	add	r26, r0
 7b2:	61 1d       	adc	r22, r1
 7b4:	23 1f       	adc	r18, r19
 7b6:	84 9f       	mul	r24, r20
 7b8:	60 0d       	add	r22, r0
 7ba:	21 1d       	adc	r18, r1
 7bc:	82 2f       	mov	r24, r18
 7be:	76 2f       	mov	r23, r22
 7c0:	6a 2f       	mov	r22, r26
 7c2:	11 24       	eor	r1, r1
 7c4:	9f 57       	subi	r25, 0x7F	; 127
 7c6:	50 40       	sbci	r21, 0x00	; 0
 7c8:	8a f0       	brmi	.+34     	; 0x7ec <__mulsf3_pse+0x84>
 7ca:	e1 f0       	breq	.+56     	; 0x804 <__mulsf3_pse+0x9c>
 7cc:	88 23       	and	r24, r24
 7ce:	4a f0       	brmi	.+18     	; 0x7e2 <__mulsf3_pse+0x7a>
 7d0:	ee 0f       	add	r30, r30
 7d2:	ff 1f       	adc	r31, r31
 7d4:	bb 1f       	adc	r27, r27
 7d6:	66 1f       	adc	r22, r22
 7d8:	77 1f       	adc	r23, r23
 7da:	88 1f       	adc	r24, r24
 7dc:	91 50       	subi	r25, 0x01	; 1
 7de:	50 40       	sbci	r21, 0x00	; 0
 7e0:	a9 f7       	brne	.-22     	; 0x7cc <__mulsf3_pse+0x64>
 7e2:	9e 3f       	cpi	r25, 0xFE	; 254
 7e4:	51 05       	cpc	r21, r1
 7e6:	70 f0       	brcs	.+28     	; 0x804 <__mulsf3_pse+0x9c>
 7e8:	5c cf       	rjmp	.-328    	; 0x6a2 <__fp_inf>
 7ea:	a6 cf       	rjmp	.-180    	; 0x738 <__fp_szero>
 7ec:	5f 3f       	cpi	r21, 0xFF	; 255
 7ee:	ec f3       	brlt	.-6      	; 0x7ea <__mulsf3_pse+0x82>
 7f0:	98 3e       	cpi	r25, 0xE8	; 232
 7f2:	dc f3       	brlt	.-10     	; 0x7ea <__mulsf3_pse+0x82>
 7f4:	86 95       	lsr	r24
 7f6:	77 95       	ror	r23
 7f8:	67 95       	ror	r22
 7fa:	b7 95       	ror	r27
 7fc:	f7 95       	ror	r31
 7fe:	e7 95       	ror	r30
 800:	9f 5f       	subi	r25, 0xFF	; 255
 802:	c1 f7       	brne	.-16     	; 0x7f4 <__mulsf3_pse+0x8c>
 804:	fe 2b       	or	r31, r30
 806:	88 0f       	add	r24, r24
 808:	91 1d       	adc	r25, r1
 80a:	96 95       	lsr	r25
 80c:	87 95       	ror	r24
 80e:	97 f9       	bld	r25, 7
 810:	08 95       	ret

00000812 <fdevopen>:
 812:	0f 93       	push	r16
 814:	1f 93       	push	r17
 816:	cf 93       	push	r28
 818:	df 93       	push	r29
 81a:	ec 01       	movw	r28, r24
 81c:	8b 01       	movw	r16, r22
 81e:	00 97       	sbiw	r24, 0x00	; 0
 820:	31 f4       	brne	.+12     	; 0x82e <fdevopen+0x1c>
 822:	61 15       	cp	r22, r1
 824:	71 05       	cpc	r23, r1
 826:	19 f4       	brne	.+6      	; 0x82e <fdevopen+0x1c>
 828:	80 e0       	ldi	r24, 0x00	; 0
 82a:	90 e0       	ldi	r25, 0x00	; 0
 82c:	37 c0       	rjmp	.+110    	; 0x89c <fdevopen+0x8a>
 82e:	6e e0       	ldi	r22, 0x0E	; 14
 830:	70 e0       	ldi	r23, 0x00	; 0
 832:	81 e0       	ldi	r24, 0x01	; 1
 834:	90 e0       	ldi	r25, 0x00	; 0
 836:	64 d0       	rcall	.+200    	; 0x900 <calloc>
 838:	fc 01       	movw	r30, r24
 83a:	00 97       	sbiw	r24, 0x00	; 0
 83c:	a9 f3       	breq	.-22     	; 0x828 <fdevopen+0x16>
 83e:	80 e8       	ldi	r24, 0x80	; 128
 840:	83 83       	std	Z+3, r24	; 0x03
 842:	01 15       	cp	r16, r1
 844:	11 05       	cpc	r17, r1
 846:	71 f0       	breq	.+28     	; 0x864 <fdevopen+0x52>
 848:	13 87       	std	Z+11, r17	; 0x0b
 84a:	02 87       	std	Z+10, r16	; 0x0a
 84c:	81 e8       	ldi	r24, 0x81	; 129
 84e:	83 83       	std	Z+3, r24	; 0x03
 850:	80 91 0e 02 	lds	r24, 0x020E
 854:	90 91 0f 02 	lds	r25, 0x020F
 858:	89 2b       	or	r24, r25
 85a:	21 f4       	brne	.+8      	; 0x864 <fdevopen+0x52>
 85c:	f0 93 0f 02 	sts	0x020F, r31
 860:	e0 93 0e 02 	sts	0x020E, r30
 864:	20 97       	sbiw	r28, 0x00	; 0
 866:	c9 f0       	breq	.+50     	; 0x89a <fdevopen+0x88>
 868:	d1 87       	std	Z+9, r29	; 0x09
 86a:	c0 87       	std	Z+8, r28	; 0x08
 86c:	83 81       	ldd	r24, Z+3	; 0x03
 86e:	82 60       	ori	r24, 0x02	; 2
 870:	83 83       	std	Z+3, r24	; 0x03
 872:	80 91 10 02 	lds	r24, 0x0210
 876:	90 91 11 02 	lds	r25, 0x0211
 87a:	89 2b       	or	r24, r25
 87c:	71 f4       	brne	.+28     	; 0x89a <fdevopen+0x88>
 87e:	f0 93 11 02 	sts	0x0211, r31
 882:	e0 93 10 02 	sts	0x0210, r30
 886:	80 91 12 02 	lds	r24, 0x0212
 88a:	90 91 13 02 	lds	r25, 0x0213
 88e:	89 2b       	or	r24, r25
 890:	21 f4       	brne	.+8      	; 0x89a <fdevopen+0x88>
 892:	f0 93 13 02 	sts	0x0213, r31
 896:	e0 93 12 02 	sts	0x0212, r30
 89a:	cf 01       	movw	r24, r30
 89c:	df 91       	pop	r29
 89e:	cf 91       	pop	r28
 8a0:	1f 91       	pop	r17
 8a2:	0f 91       	pop	r16
 8a4:	08 95       	ret

000008a6 <puts>:
 8a6:	0f 93       	push	r16
 8a8:	1f 93       	push	r17
 8aa:	cf 93       	push	r28
 8ac:	df 93       	push	r29
 8ae:	e0 91 10 02 	lds	r30, 0x0210
 8b2:	f0 91 11 02 	lds	r31, 0x0211
 8b6:	23 81       	ldd	r18, Z+3	; 0x03
 8b8:	21 ff       	sbrs	r18, 1
 8ba:	1b c0       	rjmp	.+54     	; 0x8f2 <puts+0x4c>
 8bc:	ec 01       	movw	r28, r24
 8be:	00 e0       	ldi	r16, 0x00	; 0
 8c0:	10 e0       	ldi	r17, 0x00	; 0
 8c2:	89 91       	ld	r24, Y+
 8c4:	60 91 10 02 	lds	r22, 0x0210
 8c8:	70 91 11 02 	lds	r23, 0x0211
 8cc:	db 01       	movw	r26, r22
 8ce:	18 96       	adiw	r26, 0x08	; 8
 8d0:	ed 91       	ld	r30, X+
 8d2:	fc 91       	ld	r31, X
 8d4:	19 97       	sbiw	r26, 0x09	; 9
 8d6:	88 23       	and	r24, r24
 8d8:	31 f0       	breq	.+12     	; 0x8e6 <puts+0x40>
 8da:	19 95       	eicall
 8dc:	89 2b       	or	r24, r25
 8de:	89 f3       	breq	.-30     	; 0x8c2 <puts+0x1c>
 8e0:	0f ef       	ldi	r16, 0xFF	; 255
 8e2:	1f ef       	ldi	r17, 0xFF	; 255
 8e4:	ee cf       	rjmp	.-36     	; 0x8c2 <puts+0x1c>
 8e6:	8a e0       	ldi	r24, 0x0A	; 10
 8e8:	19 95       	eicall
 8ea:	89 2b       	or	r24, r25
 8ec:	11 f4       	brne	.+4      	; 0x8f2 <puts+0x4c>
 8ee:	c8 01       	movw	r24, r16
 8f0:	02 c0       	rjmp	.+4      	; 0x8f6 <puts+0x50>
 8f2:	8f ef       	ldi	r24, 0xFF	; 255
 8f4:	9f ef       	ldi	r25, 0xFF	; 255
 8f6:	df 91       	pop	r29
 8f8:	cf 91       	pop	r28
 8fa:	1f 91       	pop	r17
 8fc:	0f 91       	pop	r16
 8fe:	08 95       	ret

00000900 <calloc>:
 900:	0f 93       	push	r16
 902:	1f 93       	push	r17
 904:	cf 93       	push	r28
 906:	df 93       	push	r29
 908:	86 9f       	mul	r24, r22
 90a:	80 01       	movw	r16, r0
 90c:	87 9f       	mul	r24, r23
 90e:	10 0d       	add	r17, r0
 910:	96 9f       	mul	r25, r22
 912:	10 0d       	add	r17, r0
 914:	11 24       	eor	r1, r1
 916:	c8 01       	movw	r24, r16
 918:	0d d0       	rcall	.+26     	; 0x934 <malloc>
 91a:	ec 01       	movw	r28, r24
 91c:	00 97       	sbiw	r24, 0x00	; 0
 91e:	21 f0       	breq	.+8      	; 0x928 <calloc+0x28>
 920:	a8 01       	movw	r20, r16
 922:	60 e0       	ldi	r22, 0x00	; 0
 924:	70 e0       	ldi	r23, 0x00	; 0
 926:	2d d1       	rcall	.+602    	; 0xb82 <memset>
 928:	ce 01       	movw	r24, r28
 92a:	df 91       	pop	r29
 92c:	cf 91       	pop	r28
 92e:	1f 91       	pop	r17
 930:	0f 91       	pop	r16
 932:	08 95       	ret

00000934 <malloc>:
 934:	cf 93       	push	r28
 936:	df 93       	push	r29
 938:	82 30       	cpi	r24, 0x02	; 2
 93a:	91 05       	cpc	r25, r1
 93c:	10 f4       	brcc	.+4      	; 0x942 <malloc+0xe>
 93e:	82 e0       	ldi	r24, 0x02	; 2
 940:	90 e0       	ldi	r25, 0x00	; 0
 942:	e0 91 16 02 	lds	r30, 0x0216
 946:	f0 91 17 02 	lds	r31, 0x0217
 94a:	20 e0       	ldi	r18, 0x00	; 0
 94c:	30 e0       	ldi	r19, 0x00	; 0
 94e:	a0 e0       	ldi	r26, 0x00	; 0
 950:	b0 e0       	ldi	r27, 0x00	; 0
 952:	30 97       	sbiw	r30, 0x00	; 0
 954:	39 f1       	breq	.+78     	; 0x9a4 <malloc+0x70>
 956:	40 81       	ld	r20, Z
 958:	51 81       	ldd	r21, Z+1	; 0x01
 95a:	48 17       	cp	r20, r24
 95c:	59 07       	cpc	r21, r25
 95e:	b8 f0       	brcs	.+46     	; 0x98e <malloc+0x5a>
 960:	48 17       	cp	r20, r24
 962:	59 07       	cpc	r21, r25
 964:	71 f4       	brne	.+28     	; 0x982 <malloc+0x4e>
 966:	82 81       	ldd	r24, Z+2	; 0x02
 968:	93 81       	ldd	r25, Z+3	; 0x03
 96a:	10 97       	sbiw	r26, 0x00	; 0
 96c:	29 f0       	breq	.+10     	; 0x978 <malloc+0x44>
 96e:	13 96       	adiw	r26, 0x03	; 3
 970:	9c 93       	st	X, r25
 972:	8e 93       	st	-X, r24
 974:	12 97       	sbiw	r26, 0x02	; 2
 976:	2c c0       	rjmp	.+88     	; 0x9d0 <malloc+0x9c>
 978:	90 93 17 02 	sts	0x0217, r25
 97c:	80 93 16 02 	sts	0x0216, r24
 980:	27 c0       	rjmp	.+78     	; 0x9d0 <malloc+0x9c>
 982:	21 15       	cp	r18, r1
 984:	31 05       	cpc	r19, r1
 986:	31 f0       	breq	.+12     	; 0x994 <malloc+0x60>
 988:	42 17       	cp	r20, r18
 98a:	53 07       	cpc	r21, r19
 98c:	18 f0       	brcs	.+6      	; 0x994 <malloc+0x60>
 98e:	a9 01       	movw	r20, r18
 990:	db 01       	movw	r26, r22
 992:	01 c0       	rjmp	.+2      	; 0x996 <malloc+0x62>
 994:	ef 01       	movw	r28, r30
 996:	9a 01       	movw	r18, r20
 998:	bd 01       	movw	r22, r26
 99a:	df 01       	movw	r26, r30
 99c:	02 80       	ldd	r0, Z+2	; 0x02
 99e:	f3 81       	ldd	r31, Z+3	; 0x03
 9a0:	e0 2d       	mov	r30, r0
 9a2:	d7 cf       	rjmp	.-82     	; 0x952 <malloc+0x1e>
 9a4:	21 15       	cp	r18, r1
 9a6:	31 05       	cpc	r19, r1
 9a8:	f9 f0       	breq	.+62     	; 0x9e8 <malloc+0xb4>
 9aa:	28 1b       	sub	r18, r24
 9ac:	39 0b       	sbc	r19, r25
 9ae:	24 30       	cpi	r18, 0x04	; 4
 9b0:	31 05       	cpc	r19, r1
 9b2:	80 f4       	brcc	.+32     	; 0x9d4 <malloc+0xa0>
 9b4:	8a 81       	ldd	r24, Y+2	; 0x02
 9b6:	9b 81       	ldd	r25, Y+3	; 0x03
 9b8:	61 15       	cp	r22, r1
 9ba:	71 05       	cpc	r23, r1
 9bc:	21 f0       	breq	.+8      	; 0x9c6 <malloc+0x92>
 9be:	fb 01       	movw	r30, r22
 9c0:	93 83       	std	Z+3, r25	; 0x03
 9c2:	82 83       	std	Z+2, r24	; 0x02
 9c4:	04 c0       	rjmp	.+8      	; 0x9ce <malloc+0x9a>
 9c6:	90 93 17 02 	sts	0x0217, r25
 9ca:	80 93 16 02 	sts	0x0216, r24
 9ce:	fe 01       	movw	r30, r28
 9d0:	32 96       	adiw	r30, 0x02	; 2
 9d2:	44 c0       	rjmp	.+136    	; 0xa5c <malloc+0x128>
 9d4:	fe 01       	movw	r30, r28
 9d6:	e2 0f       	add	r30, r18
 9d8:	f3 1f       	adc	r31, r19
 9da:	81 93       	st	Z+, r24
 9dc:	91 93       	st	Z+, r25
 9de:	22 50       	subi	r18, 0x02	; 2
 9e0:	31 09       	sbc	r19, r1
 9e2:	39 83       	std	Y+1, r19	; 0x01
 9e4:	28 83       	st	Y, r18
 9e6:	3a c0       	rjmp	.+116    	; 0xa5c <malloc+0x128>
 9e8:	20 91 14 02 	lds	r18, 0x0214
 9ec:	30 91 15 02 	lds	r19, 0x0215
 9f0:	23 2b       	or	r18, r19
 9f2:	41 f4       	brne	.+16     	; 0xa04 <malloc+0xd0>
 9f4:	20 91 02 02 	lds	r18, 0x0202
 9f8:	30 91 03 02 	lds	r19, 0x0203
 9fc:	30 93 15 02 	sts	0x0215, r19
 a00:	20 93 14 02 	sts	0x0214, r18
 a04:	20 91 00 02 	lds	r18, 0x0200
 a08:	30 91 01 02 	lds	r19, 0x0201
 a0c:	21 15       	cp	r18, r1
 a0e:	31 05       	cpc	r19, r1
 a10:	41 f4       	brne	.+16     	; 0xa22 <malloc+0xee>
 a12:	2d b7       	in	r18, 0x3d	; 61
 a14:	3e b7       	in	r19, 0x3e	; 62
 a16:	40 91 04 02 	lds	r20, 0x0204
 a1a:	50 91 05 02 	lds	r21, 0x0205
 a1e:	24 1b       	sub	r18, r20
 a20:	35 0b       	sbc	r19, r21
 a22:	e0 91 14 02 	lds	r30, 0x0214
 a26:	f0 91 15 02 	lds	r31, 0x0215
 a2a:	e2 17       	cp	r30, r18
 a2c:	f3 07       	cpc	r31, r19
 a2e:	a0 f4       	brcc	.+40     	; 0xa58 <malloc+0x124>
 a30:	2e 1b       	sub	r18, r30
 a32:	3f 0b       	sbc	r19, r31
 a34:	28 17       	cp	r18, r24
 a36:	39 07       	cpc	r19, r25
 a38:	78 f0       	brcs	.+30     	; 0xa58 <malloc+0x124>
 a3a:	ac 01       	movw	r20, r24
 a3c:	4e 5f       	subi	r20, 0xFE	; 254
 a3e:	5f 4f       	sbci	r21, 0xFF	; 255
 a40:	24 17       	cp	r18, r20
 a42:	35 07       	cpc	r19, r21
 a44:	48 f0       	brcs	.+18     	; 0xa58 <malloc+0x124>
 a46:	4e 0f       	add	r20, r30
 a48:	5f 1f       	adc	r21, r31
 a4a:	50 93 15 02 	sts	0x0215, r21
 a4e:	40 93 14 02 	sts	0x0214, r20
 a52:	81 93       	st	Z+, r24
 a54:	91 93       	st	Z+, r25
 a56:	02 c0       	rjmp	.+4      	; 0xa5c <malloc+0x128>
 a58:	e0 e0       	ldi	r30, 0x00	; 0
 a5a:	f0 e0       	ldi	r31, 0x00	; 0
 a5c:	cf 01       	movw	r24, r30
 a5e:	df 91       	pop	r29
 a60:	cf 91       	pop	r28
 a62:	08 95       	ret

00000a64 <free>:
 a64:	cf 93       	push	r28
 a66:	df 93       	push	r29
 a68:	00 97       	sbiw	r24, 0x00	; 0
 a6a:	09 f4       	brne	.+2      	; 0xa6e <free+0xa>
 a6c:	87 c0       	rjmp	.+270    	; 0xb7c <free+0x118>
 a6e:	fc 01       	movw	r30, r24
 a70:	32 97       	sbiw	r30, 0x02	; 2
 a72:	13 82       	std	Z+3, r1	; 0x03
 a74:	12 82       	std	Z+2, r1	; 0x02
 a76:	c0 91 16 02 	lds	r28, 0x0216
 a7a:	d0 91 17 02 	lds	r29, 0x0217
 a7e:	20 97       	sbiw	r28, 0x00	; 0
 a80:	81 f4       	brne	.+32     	; 0xaa2 <free+0x3e>
 a82:	20 81       	ld	r18, Z
 a84:	31 81       	ldd	r19, Z+1	; 0x01
 a86:	28 0f       	add	r18, r24
 a88:	39 1f       	adc	r19, r25
 a8a:	80 91 14 02 	lds	r24, 0x0214
 a8e:	90 91 15 02 	lds	r25, 0x0215
 a92:	82 17       	cp	r24, r18
 a94:	93 07       	cpc	r25, r19
 a96:	79 f5       	brne	.+94     	; 0xaf6 <free+0x92>
 a98:	f0 93 15 02 	sts	0x0215, r31
 a9c:	e0 93 14 02 	sts	0x0214, r30
 aa0:	6d c0       	rjmp	.+218    	; 0xb7c <free+0x118>
 aa2:	de 01       	movw	r26, r28
 aa4:	20 e0       	ldi	r18, 0x00	; 0
 aa6:	30 e0       	ldi	r19, 0x00	; 0
 aa8:	ae 17       	cp	r26, r30
 aaa:	bf 07       	cpc	r27, r31
 aac:	50 f4       	brcc	.+20     	; 0xac2 <free+0x5e>
 aae:	12 96       	adiw	r26, 0x02	; 2
 ab0:	4d 91       	ld	r20, X+
 ab2:	5c 91       	ld	r21, X
 ab4:	13 97       	sbiw	r26, 0x03	; 3
 ab6:	9d 01       	movw	r18, r26
 ab8:	41 15       	cp	r20, r1
 aba:	51 05       	cpc	r21, r1
 abc:	09 f1       	breq	.+66     	; 0xb00 <free+0x9c>
 abe:	da 01       	movw	r26, r20
 ac0:	f3 cf       	rjmp	.-26     	; 0xaa8 <free+0x44>
 ac2:	b3 83       	std	Z+3, r27	; 0x03
 ac4:	a2 83       	std	Z+2, r26	; 0x02
 ac6:	40 81       	ld	r20, Z
 ac8:	51 81       	ldd	r21, Z+1	; 0x01
 aca:	84 0f       	add	r24, r20
 acc:	95 1f       	adc	r25, r21
 ace:	8a 17       	cp	r24, r26
 ad0:	9b 07       	cpc	r25, r27
 ad2:	71 f4       	brne	.+28     	; 0xaf0 <free+0x8c>
 ad4:	8d 91       	ld	r24, X+
 ad6:	9c 91       	ld	r25, X
 ad8:	11 97       	sbiw	r26, 0x01	; 1
 ada:	84 0f       	add	r24, r20
 adc:	95 1f       	adc	r25, r21
 ade:	02 96       	adiw	r24, 0x02	; 2
 ae0:	91 83       	std	Z+1, r25	; 0x01
 ae2:	80 83       	st	Z, r24
 ae4:	12 96       	adiw	r26, 0x02	; 2
 ae6:	8d 91       	ld	r24, X+
 ae8:	9c 91       	ld	r25, X
 aea:	13 97       	sbiw	r26, 0x03	; 3
 aec:	93 83       	std	Z+3, r25	; 0x03
 aee:	82 83       	std	Z+2, r24	; 0x02
 af0:	21 15       	cp	r18, r1
 af2:	31 05       	cpc	r19, r1
 af4:	29 f4       	brne	.+10     	; 0xb00 <free+0x9c>
 af6:	f0 93 17 02 	sts	0x0217, r31
 afa:	e0 93 16 02 	sts	0x0216, r30
 afe:	3e c0       	rjmp	.+124    	; 0xb7c <free+0x118>
 b00:	d9 01       	movw	r26, r18
 b02:	13 96       	adiw	r26, 0x03	; 3
 b04:	fc 93       	st	X, r31
 b06:	ee 93       	st	-X, r30
 b08:	12 97       	sbiw	r26, 0x02	; 2
 b0a:	4d 91       	ld	r20, X+
 b0c:	5d 91       	ld	r21, X+
 b0e:	a4 0f       	add	r26, r20
 b10:	b5 1f       	adc	r27, r21
 b12:	ea 17       	cp	r30, r26
 b14:	fb 07       	cpc	r31, r27
 b16:	79 f4       	brne	.+30     	; 0xb36 <free+0xd2>
 b18:	80 81       	ld	r24, Z
 b1a:	91 81       	ldd	r25, Z+1	; 0x01
 b1c:	84 0f       	add	r24, r20
 b1e:	95 1f       	adc	r25, r21
 b20:	02 96       	adiw	r24, 0x02	; 2
 b22:	d9 01       	movw	r26, r18
 b24:	11 96       	adiw	r26, 0x01	; 1
 b26:	9c 93       	st	X, r25
 b28:	8e 93       	st	-X, r24
 b2a:	82 81       	ldd	r24, Z+2	; 0x02
 b2c:	93 81       	ldd	r25, Z+3	; 0x03
 b2e:	13 96       	adiw	r26, 0x03	; 3
 b30:	9c 93       	st	X, r25
 b32:	8e 93       	st	-X, r24
 b34:	12 97       	sbiw	r26, 0x02	; 2
 b36:	e0 e0       	ldi	r30, 0x00	; 0
 b38:	f0 e0       	ldi	r31, 0x00	; 0
 b3a:	8a 81       	ldd	r24, Y+2	; 0x02
 b3c:	9b 81       	ldd	r25, Y+3	; 0x03
 b3e:	00 97       	sbiw	r24, 0x00	; 0
 b40:	19 f0       	breq	.+6      	; 0xb48 <free+0xe4>
 b42:	fe 01       	movw	r30, r28
 b44:	ec 01       	movw	r28, r24
 b46:	f9 cf       	rjmp	.-14     	; 0xb3a <free+0xd6>
 b48:	ce 01       	movw	r24, r28
 b4a:	02 96       	adiw	r24, 0x02	; 2
 b4c:	28 81       	ld	r18, Y
 b4e:	39 81       	ldd	r19, Y+1	; 0x01
 b50:	82 0f       	add	r24, r18
 b52:	93 1f       	adc	r25, r19
 b54:	20 91 14 02 	lds	r18, 0x0214
 b58:	30 91 15 02 	lds	r19, 0x0215
 b5c:	28 17       	cp	r18, r24
 b5e:	39 07       	cpc	r19, r25
 b60:	69 f4       	brne	.+26     	; 0xb7c <free+0x118>
 b62:	30 97       	sbiw	r30, 0x00	; 0
 b64:	29 f4       	brne	.+10     	; 0xb70 <free+0x10c>
 b66:	10 92 17 02 	sts	0x0217, r1
 b6a:	10 92 16 02 	sts	0x0216, r1
 b6e:	02 c0       	rjmp	.+4      	; 0xb74 <free+0x110>
 b70:	13 82       	std	Z+3, r1	; 0x03
 b72:	12 82       	std	Z+2, r1	; 0x02
 b74:	d0 93 15 02 	sts	0x0215, r29
 b78:	c0 93 14 02 	sts	0x0214, r28
 b7c:	df 91       	pop	r29
 b7e:	cf 91       	pop	r28
 b80:	08 95       	ret

00000b82 <memset>:
 b82:	dc 01       	movw	r26, r24
 b84:	01 c0       	rjmp	.+2      	; 0xb88 <memset+0x6>
 b86:	6d 93       	st	X+, r22
 b88:	41 50       	subi	r20, 0x01	; 1
 b8a:	50 40       	sbci	r21, 0x00	; 0
 b8c:	e0 f7       	brcc	.-8      	; 0xb86 <memset+0x4>
 b8e:	08 95       	ret

00000b90 <_exit>:
 b90:	f8 94       	cli

00000b92 <__stop_program>:
 b92:	ff cf       	rjmp	.-2      	; 0xb92 <__stop_program>
