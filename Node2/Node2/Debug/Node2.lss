
Node2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800200  00000c8a  00000d1e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c8a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  0080020c  0080020c  00000d2a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d2a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000178  00000000  00000000  00000d5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f78  00000000  00000000  00000ed2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000887  00000000  00000000  00001e4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001684  00000000  00000000  000026d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002d0  00000000  00000000  00003d58  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00009ca6  00000000  00000000  00004028  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006b0  00000000  00000000  0000dcce  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f8  00000000  00000000  0000e37e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000466b  00000000  00000000  0000e476  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea e8       	ldi	r30, 0x8A	; 138
  fc:	fc e0       	ldi	r31, 0x0C	; 12
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ac 30       	cpi	r26, 0x0C	; 12
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	ac e0       	ldi	r26, 0x0C	; 12
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a8 31       	cpi	r26, 0x18	; 24
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	34 d1       	rcall	.+616    	; 0x388 <main>
 120:	b2 c5       	rjmp	.+2916   	; 0xc86 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <ADC_init>:
#include <stdint.h>
#include <avr/io.h>

void ADC_init(){
	/* Enable ADC */
	ADCSRA |= (1 << ADEN);
 124:	ea e7       	ldi	r30, 0x7A	; 122
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	80 68       	ori	r24, 0x80	; 128
 12c:	80 83       	st	Z, r24
	/* Set prescaler */
	ADCSRA |= (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);
 12e:	80 81       	ld	r24, Z
 130:	87 60       	ori	r24, 0x07	; 7
 132:	80 83       	st	Z, r24
	/* Select channel 0 */
	ADMUX &= ~(1 << MUX0) & ~(1 << MUX1) & ~(1 << MUX2) & ~(1 << MUX3) & ~(1 << MUX4);
 134:	ec e7       	ldi	r30, 0x7C	; 124
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	80 7e       	andi	r24, 0xE0	; 224
 13c:	80 83       	st	Z, r24
	ADCSRB &= ~(1 << MUX5);
 13e:	ab e7       	ldi	r26, 0x7B	; 123
 140:	b0 e0       	ldi	r27, 0x00	; 0
 142:	8c 91       	ld	r24, X
 144:	87 7f       	andi	r24, 0xF7	; 247
 146:	8c 93       	st	X, r24
	/* Choose reference */
	ADMUX |= (1 << REFS0);
 148:	80 81       	ld	r24, Z
 14a:	80 64       	ori	r24, 0x40	; 64
 14c:	80 83       	st	Z, r24
	ADMUX &= ~(1 << REFS1);
 14e:	80 81       	ld	r24, Z
 150:	8f 77       	andi	r24, 0x7F	; 127
 152:	80 83       	st	Z, r24
 154:	08 95       	ret

00000156 <ADC_convert>:
}

uint16_t ADC_convert(){
	/* Launch conversion */
	ADCSRA |= (1 << ADSC);
 156:	ea e7       	ldi	r30, 0x7A	; 122
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	80 64       	ori	r24, 0x40	; 64
 15e:	80 83       	st	Z, r24
	/* Wait until conversion ends */
	while(ADCSRA & (1<<ADSC));
 160:	80 81       	ld	r24, Z
 162:	86 fd       	sbrc	r24, 6
 164:	fd cf       	rjmp	.-6      	; 0x160 <ADC_convert+0xa>
	/* Return result */
	return ADC & 0x3FF;
 166:	80 91 78 00 	lds	r24, 0x0078
 16a:	90 91 79 00 	lds	r25, 0x0079
 16e:	93 70       	andi	r25, 0x03	; 3
 170:	08 95       	ret

00000172 <CAN_init>:
#include "CAN.h"

void CAN_init()
{
	/* Initialize SPI and MPC */
	SPI_init();
 172:	e8 d1       	rcall	.+976    	; 0x544 <SPI_init>
	MCP2515_reset();
 174:	cf d0       	rcall	.+414    	; 0x314 <MCP2515_reset>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 176:	87 ea       	ldi	r24, 0xA7	; 167
 178:	91 e6       	ldi	r25, 0x61	; 97
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <CAN_init+0x8>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <CAN_init+0xe>
 180:	00 00       	nop
	_delay_ms(100);
	
	/* Set normal mode */
	MCP2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
 182:	40 e0       	ldi	r20, 0x00	; 0
 184:	60 ee       	ldi	r22, 0xE0	; 224
 186:	8f e0       	ldi	r24, 0x0F	; 15
 188:	eb d0       	rcall	.+470    	; 0x360 <MCP2515_bit_modify>
	
	/* Enable interrupts */
	MCP2515_bit_modify(MCP_CANINTE, 0b00000001, 0b00000001);
 18a:	41 e0       	ldi	r20, 0x01	; 1
 18c:	61 e0       	ldi	r22, 0x01	; 1
 18e:	8b e2       	ldi	r24, 0x2B	; 43
 190:	e7 c0       	rjmp	.+462    	; 0x360 <MCP2515_bit_modify>
 192:	08 95       	ret

00000194 <CAN_send>:
}

void CAN_send(MSG* message)
{	
 194:	ef 92       	push	r14
 196:	ff 92       	push	r15
 198:	0f 93       	push	r16
 19a:	1f 93       	push	r17
 19c:	cf 93       	push	r28
 19e:	df 93       	push	r29
 1a0:	7c 01       	movw	r14, r24
	/* Wait until the previous message is sent */
	while(MCP2515_read(MCP_TXB0CTRL) & 0x04 == 0x4)
 1a2:	80 e3       	ldi	r24, 0x30	; 48
 1a4:	bc d0       	rcall	.+376    	; 0x31e <MCP2515_read>
 1a6:	80 fd       	sbrc	r24, 0
 1a8:	fc cf       	rjmp	.-8      	; 0x1a2 <CAN_send+0xe>
	;
	
	/* Write ID */
	int ID_l = (message->ID & 0x07) << 5;
 1aa:	f7 01       	movw	r30, r14
 1ac:	40 81       	ld	r20, Z
 1ae:	51 81       	ldd	r21, Z+1	; 0x01
 1b0:	44 0f       	add	r20, r20
 1b2:	55 1f       	adc	r21, r21
 1b4:	42 95       	swap	r20
 1b6:	52 95       	swap	r21
 1b8:	50 7f       	andi	r21, 0xF0	; 240
 1ba:	54 27       	eor	r21, r20
 1bc:	40 7f       	andi	r20, 0xF0	; 240
 1be:	54 27       	eor	r21, r20
 1c0:	55 27       	eor	r21, r21
	MCP2515_bit_modify(MCP_TXB0SIDL,0xE0,ID_l);
 1c2:	60 ee       	ldi	r22, 0xE0	; 224
 1c4:	82 e3       	ldi	r24, 0x32	; 50
 1c6:	cc d0       	rcall	.+408    	; 0x360 <MCP2515_bit_modify>
	
	int ID_h = (message->ID & 0xFFF8) >> 3;
 1c8:	f7 01       	movw	r30, r14
 1ca:	60 81       	ld	r22, Z
 1cc:	71 81       	ldd	r23, Z+1	; 0x01
 1ce:	76 95       	lsr	r23
 1d0:	67 95       	ror	r22
 1d2:	76 95       	lsr	r23
 1d4:	67 95       	ror	r22
 1d6:	76 95       	lsr	r23
 1d8:	67 95       	ror	r22
	MCP2515_write(MCP_TXB0SIDH,ID_h);
 1da:	81 e3       	ldi	r24, 0x31	; 49
 1dc:	ad d0       	rcall	.+346    	; 0x338 <MCP2515_write>
	
	/* Write data length */
	int length = message->length;
	MCP2515_bit_modify(MCP_TXB0DLC,0x0F,length);
 1de:	f7 01       	movw	r30, r14
 1e0:	42 81       	ldd	r20, Z+2	; 0x02
 1e2:	6f e0       	ldi	r22, 0x0F	; 15
 1e4:	85 e3       	ldi	r24, 0x35	; 53
 1e6:	bc d0       	rcall	.+376    	; 0x360 <MCP2515_bit_modify>
	
	/* Write the message in buffer 0 */
	for (int i=0; i<message->length; i++)
 1e8:	f7 01       	movw	r30, r14
 1ea:	82 81       	ldd	r24, Z+2	; 0x02
 1ec:	93 81       	ldd	r25, Z+3	; 0x03
 1ee:	18 16       	cp	r1, r24
 1f0:	19 06       	cpc	r1, r25
 1f2:	94 f4       	brge	.+36     	; 0x218 <CAN_send+0x84>
 1f4:	87 01       	movw	r16, r14
 1f6:	0c 5f       	subi	r16, 0xFC	; 252
 1f8:	1f 4f       	sbci	r17, 0xFF	; 255
 1fa:	c0 e0       	ldi	r28, 0x00	; 0
 1fc:	d0 e0       	ldi	r29, 0x00	; 0
	{
		MCP2515_write(MCP_TXB0D0+i,message->data[i]);
 1fe:	f8 01       	movw	r30, r16
 200:	61 91       	ld	r22, Z+
 202:	8f 01       	movw	r16, r30
 204:	8c 2f       	mov	r24, r28
 206:	8a 5c       	subi	r24, 0xCA	; 202
 208:	97 d0       	rcall	.+302    	; 0x338 <MCP2515_write>
	/* Write data length */
	int length = message->length;
	MCP2515_bit_modify(MCP_TXB0DLC,0x0F,length);
	
	/* Write the message in buffer 0 */
	for (int i=0; i<message->length; i++)
 20a:	21 96       	adiw	r28, 0x01	; 1
 20c:	f7 01       	movw	r30, r14
 20e:	22 81       	ldd	r18, Z+2	; 0x02
 210:	33 81       	ldd	r19, Z+3	; 0x03
 212:	c2 17       	cp	r28, r18
 214:	d3 07       	cpc	r29, r19
 216:	9c f3       	brlt	.-26     	; 0x1fe <CAN_send+0x6a>
	{
		MCP2515_write(MCP_TXB0D0+i,message->data[i]);
	}
	
	MCP2515_request_to_send();
 218:	9e d0       	rcall	.+316    	; 0x356 <MCP2515_request_to_send>
}
 21a:	df 91       	pop	r29
 21c:	cf 91       	pop	r28
 21e:	1f 91       	pop	r17
 220:	0f 91       	pop	r16
 222:	ff 90       	pop	r15
 224:	ef 90       	pop	r14
 226:	08 95       	ret

00000228 <CAN_receive>:

MSG CAN_receive()
{
 228:	8f 92       	push	r8
 22a:	9f 92       	push	r9
 22c:	af 92       	push	r10
 22e:	bf 92       	push	r11
 230:	cf 92       	push	r12
 232:	df 92       	push	r13
 234:	ef 92       	push	r14
 236:	ff 92       	push	r15
 238:	0f 93       	push	r16
 23a:	1f 93       	push	r17
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
 240:	cd b7       	in	r28, 0x3d	; 61
 242:	de b7       	in	r29, 0x3e	; 62
 244:	2c 97       	sbiw	r28, 0x0c	; 12
 246:	0f b6       	in	r0, 0x3f	; 63
 248:	f8 94       	cli
 24a:	de bf       	out	0x3e, r29	; 62
 24c:	0f be       	out	0x3f, r0	; 63
 24e:	cd bf       	out	0x3d, r28	; 61
 250:	5c 01       	movw	r10, r24
	/* Check if there is a message */
	if(MCP2515_read(MCP_CANINTF) & 0x01 == 0x1){
 252:	8c e2       	ldi	r24, 0x2C	; 44
 254:	64 d0       	rcall	.+200    	; 0x31e <MCP2515_read>
 256:	80 ff       	sbrs	r24, 0
 258:	49 c0       	rjmp	.+146    	; 0x2ec <CAN_receive+0xc4>
		MSG message;
		
		/* Read ID */
		int ID_l = MCP2515_read(MCP_RXB0SIDL);
 25a:	82 e6       	ldi	r24, 0x62	; 98
 25c:	60 d0       	rcall	.+192    	; 0x31e <MCP2515_read>
 25e:	18 2f       	mov	r17, r24
		int ID_h = MCP2515_read(MCP_RXB0SIDH);
 260:	81 e6       	ldi	r24, 0x61	; 97
 262:	5d d0       	rcall	.+186    	; 0x31e <MCP2515_read>
	/* Check if there is a message */
	if(MCP2515_read(MCP_CANINTF) & 0x01 == 0x1){
		MSG message;
		
		/* Read ID */
		int ID_l = MCP2515_read(MCP_RXB0SIDL);
 264:	21 2f       	mov	r18, r17
 266:	33 27       	eor	r19, r19
 268:	27 fd       	sbrc	r18, 7
 26a:	30 95       	com	r19
		int ID_h = MCP2515_read(MCP_RXB0SIDH);
		message.ID = ((ID_h << 3) + ((ID_l >> 5) & 0x7)) & 0xFF;
 26c:	35 95       	asr	r19
 26e:	27 95       	ror	r18
 270:	35 95       	asr	r19
 272:	27 95       	ror	r18
 274:	35 95       	asr	r19
 276:	27 95       	ror	r18
 278:	35 95       	asr	r19
 27a:	27 95       	ror	r18
 27c:	35 95       	asr	r19
 27e:	27 95       	ror	r18
 280:	27 70       	andi	r18, 0x07	; 7
 282:	33 27       	eor	r19, r19
 284:	98 e0       	ldi	r25, 0x08	; 8
 286:	89 02       	muls	r24, r25
 288:	20 0d       	add	r18, r0
 28a:	31 1d       	adc	r19, r1
 28c:	11 24       	eor	r1, r1
 28e:	49 01       	movw	r8, r18
 290:	99 24       	eor	r9, r9
		
		/* Read length */
		int length = MCP2515_read(MCP_RXB0DLC) & 0x0F;
 292:	85 e6       	ldi	r24, 0x65	; 101
 294:	44 d0       	rcall	.+136    	; 0x31e <MCP2515_read>
 296:	8f 70       	andi	r24, 0x0F	; 15
 298:	c8 2e       	mov	r12, r24
 29a:	dd 24       	eor	r13, r13
 29c:	c7 fc       	sbrc	r12, 7
 29e:	d0 94       	com	r13
 2a0:	7e 01       	movw	r14, r28
 2a2:	e5 e0       	ldi	r30, 0x05	; 5
 2a4:	ee 0e       	add	r14, r30
 2a6:	f1 1c       	adc	r15, r1
		message.length = length;
		
		/* Read data */
		for (int i=0; i < length || i < 8; i++)
 2a8:	00 e0       	ldi	r16, 0x00	; 0
 2aa:	10 e0       	ldi	r17, 0x00	; 0
 2ac:	08 c0       	rjmp	.+16     	; 0x2be <CAN_receive+0x96>
		{
			message.data[i] = MCP2515_read(MCP_RXB0D0+i);
 2ae:	86 e6       	ldi	r24, 0x66	; 102
 2b0:	80 0f       	add	r24, r16
 2b2:	35 d0       	rcall	.+106    	; 0x31e <MCP2515_read>
 2b4:	f7 01       	movw	r30, r14
 2b6:	81 93       	st	Z+, r24
 2b8:	7f 01       	movw	r14, r30
		/* Read length */
		int length = MCP2515_read(MCP_RXB0DLC) & 0x0F;
		message.length = length;
		
		/* Read data */
		for (int i=0; i < length || i < 8; i++)
 2ba:	0f 5f       	subi	r16, 0xFF	; 255
 2bc:	1f 4f       	sbci	r17, 0xFF	; 255
 2be:	0c 15       	cp	r16, r12
 2c0:	1d 05       	cpc	r17, r13
 2c2:	ac f3       	brlt	.-22     	; 0x2ae <CAN_receive+0x86>
 2c4:	08 30       	cpi	r16, 0x08	; 8
 2c6:	11 05       	cpc	r17, r1
 2c8:	94 f3       	brlt	.-28     	; 0x2ae <CAN_receive+0x86>
		{
			message.data[i] = MCP2515_read(MCP_RXB0D0+i);
		}
		
		/* Indicate there is no more message */
		MCP2515_bit_modify(MCP_CANINTF,0b00000001,0b00000000);
 2ca:	40 e0       	ldi	r20, 0x00	; 0
 2cc:	61 e0       	ldi	r22, 0x01	; 1
 2ce:	8c e2       	ldi	r24, 0x2C	; 44
 2d0:	47 d0       	rcall	.+142    	; 0x360 <MCP2515_bit_modify>
		
		return message;
 2d2:	9a 82       	std	Y+2, r9	; 0x02
 2d4:	89 82       	std	Y+1, r8	; 0x01
 2d6:	dc 82       	std	Y+4, r13	; 0x04
 2d8:	cb 82       	std	Y+3, r12	; 0x03
 2da:	8c e0       	ldi	r24, 0x0C	; 12
 2dc:	fe 01       	movw	r30, r28
 2de:	31 96       	adiw	r30, 0x01	; 1
 2e0:	d5 01       	movw	r26, r10
 2e2:	01 90       	ld	r0, Z+
 2e4:	0d 92       	st	X+, r0
 2e6:	8a 95       	dec	r24
 2e8:	e1 f7       	brne	.-8      	; 0x2e2 <CAN_receive+0xba>
 2ea:	00 c0       	rjmp	.+0      	; 0x2ec <CAN_receive+0xc4>
	}
	else return;
 2ec:	c5 01       	movw	r24, r10
 2ee:	2c 96       	adiw	r28, 0x0c	; 12
 2f0:	0f b6       	in	r0, 0x3f	; 63
 2f2:	f8 94       	cli
 2f4:	de bf       	out	0x3e, r29	; 62
 2f6:	0f be       	out	0x3f, r0	; 63
 2f8:	cd bf       	out	0x3d, r28	; 61
 2fa:	df 91       	pop	r29
 2fc:	cf 91       	pop	r28
 2fe:	1f 91       	pop	r17
 300:	0f 91       	pop	r16
 302:	ff 90       	pop	r15
 304:	ef 90       	pop	r14
 306:	df 90       	pop	r13
 308:	cf 90       	pop	r12
 30a:	bf 90       	pop	r11
 30c:	af 90       	pop	r10
 30e:	9f 90       	pop	r9
 310:	8f 90       	pop	r8
 312:	08 95       	ret

00000314 <MCP2515_reset>:
	SPI_on();
	SPI_write(MCP_READ_STATUS);
	char data = SPI_read();
	SPI_off();
	return data;
}
 314:	2a d1       	rcall	.+596    	; 0x56a <SPI_on>
 316:	80 ec       	ldi	r24, 0xC0	; 192
 318:	1d d1       	rcall	.+570    	; 0x554 <SPI_write>
 31a:	2b c1       	rjmp	.+598    	; 0x572 <SPI_off>
 31c:	08 95       	ret

0000031e <MCP2515_read>:
 31e:	cf 93       	push	r28
 320:	c8 2f       	mov	r28, r24
 322:	23 d1       	rcall	.+582    	; 0x56a <SPI_on>
 324:	83 e0       	ldi	r24, 0x03	; 3
 326:	16 d1       	rcall	.+556    	; 0x554 <SPI_write>
 328:	8c 2f       	mov	r24, r28
 32a:	14 d1       	rcall	.+552    	; 0x554 <SPI_write>
 32c:	18 d1       	rcall	.+560    	; 0x55e <SPI_read>
 32e:	c8 2f       	mov	r28, r24
 330:	20 d1       	rcall	.+576    	; 0x572 <SPI_off>
 332:	8c 2f       	mov	r24, r28
 334:	cf 91       	pop	r28
 336:	08 95       	ret

00000338 <MCP2515_write>:
 338:	cf 93       	push	r28
 33a:	df 93       	push	r29
 33c:	d8 2f       	mov	r29, r24
 33e:	c6 2f       	mov	r28, r22
 340:	14 d1       	rcall	.+552    	; 0x56a <SPI_on>
 342:	82 e0       	ldi	r24, 0x02	; 2
 344:	07 d1       	rcall	.+526    	; 0x554 <SPI_write>
 346:	8d 2f       	mov	r24, r29
 348:	05 d1       	rcall	.+522    	; 0x554 <SPI_write>
 34a:	8c 2f       	mov	r24, r28
 34c:	03 d1       	rcall	.+518    	; 0x554 <SPI_write>
 34e:	11 d1       	rcall	.+546    	; 0x572 <SPI_off>
 350:	df 91       	pop	r29
 352:	cf 91       	pop	r28
 354:	08 95       	ret

00000356 <MCP2515_request_to_send>:
 356:	09 d1       	rcall	.+530    	; 0x56a <SPI_on>
 358:	81 e8       	ldi	r24, 0x81	; 129
 35a:	fc d0       	rcall	.+504    	; 0x554 <SPI_write>
 35c:	0a c1       	rjmp	.+532    	; 0x572 <SPI_off>
 35e:	08 95       	ret

00000360 <MCP2515_bit_modify>:

void MCP2515_bit_modify(uint8_t address, uint8_t mask, uint8_t data)
{
 360:	1f 93       	push	r17
 362:	cf 93       	push	r28
 364:	df 93       	push	r29
 366:	18 2f       	mov	r17, r24
 368:	d6 2f       	mov	r29, r22
 36a:	c4 2f       	mov	r28, r20
	SPI_on();
 36c:	fe d0       	rcall	.+508    	; 0x56a <SPI_on>
	SPI_write(MCP_BITMOD);
 36e:	85 e0       	ldi	r24, 0x05	; 5
 370:	f1 d0       	rcall	.+482    	; 0x554 <SPI_write>
	SPI_write(address);
 372:	81 2f       	mov	r24, r17
 374:	ef d0       	rcall	.+478    	; 0x554 <SPI_write>
	SPI_write(mask);
 376:	8d 2f       	mov	r24, r29
 378:	ed d0       	rcall	.+474    	; 0x554 <SPI_write>
	SPI_write(data);
 37a:	8c 2f       	mov	r24, r28
 37c:	eb d0       	rcall	.+470    	; 0x554 <SPI_write>
	SPI_off();	
 37e:	f9 d0       	rcall	.+498    	; 0x572 <SPI_off>
 380:	df 91       	pop	r29
 382:	cf 91       	pop	r28
 384:	1f 91       	pop	r17
 386:	08 95       	ret

00000388 <main>:
#define FOSC 16000000
#define BAUD 9600
#define UART_BAUD FOSC/16/BAUD-1

int main(void)
{
 388:	cf 93       	push	r28
 38a:	df 93       	push	r29
 38c:	cd b7       	in	r28, 0x3d	; 61
 38e:	de b7       	in	r29, 0x3e	; 62
 390:	68 97       	sbiw	r28, 0x18	; 24
 392:	0f b6       	in	r0, 0x3f	; 63
 394:	f8 94       	cli
 396:	de bf       	out	0x3e, r29	; 62
 398:	0f be       	out	0x3f, r0	; 63
 39a:	cd bf       	out	0x3d, r28	; 61
	/* Initialize UART */
	UART_init(UART_BAUD);
 39c:	87 e6       	ldi	r24, 0x67	; 103
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	fa d0       	rcall	.+500    	; 0x596 <UART_init>
	printf("Reset\n");
 3a2:	86 e0       	ldi	r24, 0x06	; 6
 3a4:	92 e0       	ldi	r25, 0x02	; 2
 3a6:	fa d2       	rcall	.+1524   	; 0x99c <puts>
 3a8:	2f e3       	ldi	r18, 0x3F	; 63
 3aa:	8d e0       	ldi	r24, 0x0D	; 13
 3ac:	93 e0       	ldi	r25, 0x03	; 3
 3ae:	21 50       	subi	r18, 0x01	; 1
 3b0:	80 40       	sbci	r24, 0x00	; 0
 3b2:	90 40       	sbci	r25, 0x00	; 0
 3b4:	e1 f7       	brne	.-8      	; 0x3ae <main+0x26>
 3b6:	00 c0       	rjmp	.+0      	; 0x3b8 <main+0x30>
 3b8:	00 00       	nop
	_delay_ms(1000);
	
	/* Initialize ADC, CAN, PWM */
	ADC_init();
 3ba:	b4 de       	rcall	.-664    	; 0x124 <ADC_init>
	CAN_init();
 3bc:	da de       	rcall	.-588    	; 0x172 <CAN_init>
	Servo_init();
 3be:	4f d0       	rcall	.+158    	; 0x45e <Servo_init>

	/* Initialize variables */
	MSG joystick_message;
	MSG score_message;
	score_message.ID = 2;
 3c0:	82 e0       	ldi	r24, 0x02	; 2
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	9e 87       	std	Y+14, r25	; 0x0e
 3c6:	8d 87       	std	Y+13, r24	; 0x0d
	score_message.length = 1;
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	98 8b       	std	Y+16, r25	; 0x10
 3ce:	8f 87       	std	Y+15, r24	; 0x0f
	int score = 0;
 3d0:	00 e0       	ldi	r16, 0x00	; 0
 3d2:	10 e0       	ldi	r17, 0x00	; 0
	
	while(1){
		/* Read joystick position and calculate PWM to control servo */
		joystick_message = CAN_receive();
		if(joystick_message.ID == 3){
			score = 0;
 3d4:	c1 2c       	mov	r12, r1
 3d6:	d1 2c       	mov	r13, r1
 3d8:	01 c0       	rjmp	.+2      	; 0x3dc <main+0x54>
#define FOSC 16000000
#define BAUD 9600
#define UART_BAUD FOSC/16/BAUD-1

int main(void)
{
 3da:	87 01       	movw	r16, r14
	int score = 0;
	int previous_score = 0;
	
	while(1){
		/* Read joystick position and calculate PWM to control servo */
		joystick_message = CAN_receive();
 3dc:	ce 01       	movw	r24, r28
 3de:	01 96       	adiw	r24, 0x01	; 1
 3e0:	23 df       	rcall	.-442    	; 0x228 <CAN_receive>
		if(joystick_message.ID == 3){
 3e2:	89 81       	ldd	r24, Y+1	; 0x01
 3e4:	9a 81       	ldd	r25, Y+2	; 0x02
 3e6:	03 97       	sbiw	r24, 0x03	; 3
 3e8:	19 f0       	breq	.+6      	; 0x3f0 <main+0x68>
 3ea:	e0 2e       	mov	r14, r16
 3ec:	f1 2e       	mov	r15, r17
 3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <main+0x6c>
			score = 0;
 3f0:	ec 2c       	mov	r14, r12
 3f2:	fd 2c       	mov	r15, r13
		}
		Servo_pwm(joystick_message.data[0]);
 3f4:	6d 81       	ldd	r22, Y+5	; 0x05
 3f6:	77 27       	eor	r23, r23
 3f8:	67 fd       	sbrc	r22, 7
 3fa:	70 95       	com	r23
 3fc:	87 2f       	mov	r24, r23
 3fe:	97 2f       	mov	r25, r23
 400:	6c d1       	rcall	.+728    	; 0x6da <__floatsisf>
 402:	54 d0       	rcall	.+168    	; 0x4ac <Servo_pwm>
		/* Update score */
		score = get_score(score);
 404:	8e 2d       	mov	r24, r14
 406:	9f 2d       	mov	r25, r15
 408:	09 d0       	rcall	.+18     	; 0x41c <get_score>
 40a:	7c 01       	movw	r14, r24
		if(score != previous_score){
 40c:	80 17       	cp	r24, r16
 40e:	91 07       	cpc	r25, r17
 410:	21 f3       	breq	.-56     	; 0x3da <main+0x52>
			score_message.data[0] = score;
 412:	89 8b       	std	Y+17, r24	; 0x11
			CAN_send(&score_message);
 414:	ce 01       	movw	r24, r28
 416:	0d 96       	adiw	r24, 0x0d	; 13
 418:	bd de       	rcall	.-646    	; 0x194 <CAN_send>
 41a:	df cf       	rjmp	.-66     	; 0x3da <main+0x52>

0000041c <get_score>:
#include <avr/delay.h>
#include "ADC.h"

int scoreUpdated = 0;

int get_score(int score){
 41c:	cf 93       	push	r28
 41e:	df 93       	push	r29
 420:	ec 01       	movw	r28, r24
	int goal = ADC_convert();
 422:	99 de       	rcall	.-718    	; 0x156 <ADC_convert>
 424:	9c 01       	movw	r18, r24
	if(goal < 50 && scoreUpdated == 0){
 426:	82 33       	cpi	r24, 0x32	; 50
 428:	91 05       	cpc	r25, r1
 42a:	74 f4       	brge	.+28     	; 0x448 <get_score+0x2c>
 42c:	80 91 0c 02 	lds	r24, 0x020C
 430:	90 91 0d 02 	lds	r25, 0x020D
 434:	89 2b       	or	r24, r25
 436:	41 f4       	brne	.+16     	; 0x448 <get_score+0x2c>
		score ++;
 438:	21 96       	adiw	r28, 0x01	; 1
		scoreUpdated = 1;
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	90 93 0d 02 	sts	0x020D, r25
 442:	80 93 0c 02 	sts	0x020C, r24
 446:	07 c0       	rjmp	.+14     	; 0x456 <get_score+0x3a>
	}
	else if(goal > 100){
 448:	25 36       	cpi	r18, 0x65	; 101
 44a:	31 05       	cpc	r19, r1
 44c:	24 f0       	brlt	.+8      	; 0x456 <get_score+0x3a>
		scoreUpdated = 0;
 44e:	10 92 0d 02 	sts	0x020D, r1
 452:	10 92 0c 02 	sts	0x020C, r1
	}
	return score;
}
 456:	ce 01       	movw	r24, r28
 458:	df 91       	pop	r29
 45a:	cf 91       	pop	r28
 45c:	08 95       	ret

0000045e <Servo_init>:
#define TOP_SERVO 0.0021
#define SLOPE_SERVO 0.000006

void Servo_init(){
	/* Set OC1A as an output */
	DDRB |= (1 << PB5);
 45e:	25 9a       	sbi	0x04, 5	; 4
	/* Select fast PWM mode */
	TCCR1B |= (1 << WGM13) | (1 << WGM12);
 460:	a1 e8       	ldi	r26, 0x81	; 129
 462:	b0 e0       	ldi	r27, 0x00	; 0
 464:	8c 91       	ld	r24, X
 466:	88 61       	ori	r24, 0x18	; 24
 468:	8c 93       	st	X, r24
	TCCR1A |=  (1 << WGM11);
 46a:	e0 e8       	ldi	r30, 0x80	; 128
 46c:	f0 e0       	ldi	r31, 0x00	; 0
 46e:	80 81       	ld	r24, Z
 470:	82 60       	ori	r24, 0x02	; 2
 472:	80 83       	st	Z, r24
	TCCR1A &= ~(1 << WGM10);
 474:	80 81       	ld	r24, Z
 476:	8e 7f       	andi	r24, 0xFE	; 254
 478:	80 83       	st	Z, r24
	TCCR1A |= 1 << COM1A1;
 47a:	80 81       	ld	r24, Z
 47c:	80 68       	ori	r24, 0x80	; 128
 47e:	80 83       	st	Z, r24
	TCCR1A &= ~(1 << COM1A0);
 480:	80 81       	ld	r24, Z
 482:	8f 7b       	andi	r24, 0xBF	; 191
 484:	80 83       	st	Z, r24
	/* Set top value */
	ICR1 = TOP;
 486:	8f e3       	ldi	r24, 0x3F	; 63
 488:	9c e9       	ldi	r25, 0x9C	; 156
 48a:	90 93 87 00 	sts	0x0087, r25
 48e:	80 93 86 00 	sts	0x0086, r24
	/* Set compare value to neutral */
	OCR1A = NEUTRAL_SERVO * (TOP + 1) * FPWM;
 492:	88 eb       	ldi	r24, 0xB8	; 184
 494:	9b e0       	ldi	r25, 0x0B	; 11
 496:	90 93 89 00 	sts	0x0089, r25
 49a:	80 93 88 00 	sts	0x0088, r24
	/* Set prescaler */
	TCCR1B &= ~(1 << CS12) & ~(1 << CS10);
 49e:	8c 91       	ld	r24, X
 4a0:	8a 7f       	andi	r24, 0xFA	; 250
 4a2:	8c 93       	st	X, r24
	TCCR1B |= (1 << CS11);
 4a4:	8c 91       	ld	r24, X
 4a6:	82 60       	ori	r24, 0x02	; 2
 4a8:	8c 93       	st	X, r24
 4aa:	08 95       	ret

000004ac <Servo_pwm>:
}

void Servo_pwm(float x){
 4ac:	cf 92       	push	r12
 4ae:	df 92       	push	r13
 4b0:	ef 92       	push	r14
 4b2:	ff 92       	push	r15
	/* Calculate PWM value */
	float y = - SLOPE_SERVO * x + NEUTRAL_SERVO;
 4b4:	2c e9       	ldi	r18, 0x9C	; 156
 4b6:	33 e5       	ldi	r19, 0x53	; 83
 4b8:	49 ec       	ldi	r20, 0xC9	; 201
 4ba:	56 eb       	ldi	r21, 0xB6	; 182
 4bc:	c2 d1       	rcall	.+900    	; 0x842 <__mulsf3>
 4be:	26 ea       	ldi	r18, 0xA6	; 166
 4c0:	3b e9       	ldi	r19, 0x9B	; 155
 4c2:	44 ec       	ldi	r20, 0xC4	; 196
 4c4:	5a e3       	ldi	r21, 0x3A	; 58
 4c6:	73 d0       	rcall	.+230    	; 0x5ae <__addsf3>
 4c8:	6b 01       	movw	r12, r22
 4ca:	7c 01       	movw	r14, r24
	
	/* Protect servo from out of bounds values */
	if(y > TOP_SERVO){
 4cc:	27 e2       	ldi	r18, 0x27	; 39
 4ce:	30 ea       	ldi	r19, 0xA0	; 160
 4d0:	49 e0       	ldi	r20, 0x09	; 9
 4d2:	5b e3       	ldi	r21, 0x3B	; 59
 4d4:	b2 d1       	rcall	.+868    	; 0x83a <__gesf2>
 4d6:	18 16       	cp	r1, r24
 4d8:	54 f0       	brlt	.+20     	; 0x4ee <Servo_pwm+0x42>
		y = TOP_SERVO;
	}
	else if(y < BOTTOM_SERVO){
 4da:	2a ef       	ldi	r18, 0xFA	; 250
 4dc:	3d ee       	ldi	r19, 0xED	; 237
 4de:	4b e6       	ldi	r20, 0x6B	; 107
 4e0:	5a e3       	ldi	r21, 0x3A	; 58
 4e2:	c7 01       	movw	r24, r14
 4e4:	b6 01       	movw	r22, r12
 4e6:	c7 d0       	rcall	.+398    	; 0x676 <__cmpsf2>
 4e8:	88 23       	and	r24, r24
 4ea:	64 f0       	brlt	.+24     	; 0x504 <Servo_pwm+0x58>
 4ec:	15 c0       	rjmp	.+42     	; 0x518 <Servo_pwm+0x6c>
	/* Calculate PWM value */
	float y = - SLOPE_SERVO * x + NEUTRAL_SERVO;
	
	/* Protect servo from out of bounds values */
	if(y > TOP_SERVO){
		y = TOP_SERVO;
 4ee:	0f 2e       	mov	r0, r31
 4f0:	f7 e2       	ldi	r31, 0x27	; 39
 4f2:	cf 2e       	mov	r12, r31
 4f4:	f0 ea       	ldi	r31, 0xA0	; 160
 4f6:	df 2e       	mov	r13, r31
 4f8:	f9 e0       	ldi	r31, 0x09	; 9
 4fa:	ef 2e       	mov	r14, r31
 4fc:	fb e3       	ldi	r31, 0x3B	; 59
 4fe:	ff 2e       	mov	r15, r31
 500:	f0 2d       	mov	r31, r0
 502:	0a c0       	rjmp	.+20     	; 0x518 <Servo_pwm+0x6c>
	}
	else if(y < BOTTOM_SERVO){
		y = BOTTOM_SERVO;
 504:	0f 2e       	mov	r0, r31
 506:	fa ef       	ldi	r31, 0xFA	; 250
 508:	cf 2e       	mov	r12, r31
 50a:	fd ee       	ldi	r31, 0xED	; 237
 50c:	df 2e       	mov	r13, r31
 50e:	fb e6       	ldi	r31, 0x6B	; 107
 510:	ef 2e       	mov	r14, r31
 512:	fa e3       	ldi	r31, 0x3A	; 58
 514:	ff 2e       	mov	r15, r31
 516:	f0 2d       	mov	r31, r0
	}
	
	/* Set compare value */
	OCR1A = y * (TOP + 1) * FPWM;
 518:	20 e0       	ldi	r18, 0x00	; 0
 51a:	30 e4       	ldi	r19, 0x40	; 64
 51c:	4c e1       	ldi	r20, 0x1C	; 28
 51e:	57 e4       	ldi	r21, 0x47	; 71
 520:	c7 01       	movw	r24, r14
 522:	b6 01       	movw	r22, r12
 524:	8e d1       	rcall	.+796    	; 0x842 <__mulsf3>
 526:	20 e0       	ldi	r18, 0x00	; 0
 528:	30 e0       	ldi	r19, 0x00	; 0
 52a:	48 e4       	ldi	r20, 0x48	; 72
 52c:	52 e4       	ldi	r21, 0x42	; 66
 52e:	89 d1       	rcall	.+786    	; 0x842 <__mulsf3>
 530:	a6 d0       	rcall	.+332    	; 0x67e <__fixunssfsi>
 532:	70 93 89 00 	sts	0x0089, r23
 536:	60 93 88 00 	sts	0x0088, r22
 53a:	ff 90       	pop	r15
 53c:	ef 90       	pop	r14
 53e:	df 90       	pop	r13
 540:	cf 90       	pop	r12
 542:	08 95       	ret

00000544 <SPI_init>:
#include <avr/io.h>

void SPI_init(void)
{
	/* Set CS, MOSI and SCK output, MISO input */
	DDRB |= (1<<PB7)| (1<<PB1)|(1<<PB2);
 544:	84 b1       	in	r24, 0x04	; 4
 546:	86 68       	ori	r24, 0x86	; 134
 548:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1<<PB3);
 54a:	23 98       	cbi	0x04, 3	; 4
	DDRB |= 1;
 54c:	20 9a       	sbi	0x04, 0	; 4
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 54e:	81 e5       	ldi	r24, 0x51	; 81
 550:	8c bd       	out	0x2c, r24	; 44
 552:	08 95       	ret

00000554 <SPI_write>:
}

void SPI_write(char cData)
{
	/* Start transmission */
	SPDR = cData;
 554:	8e bd       	out	0x2e, r24	; 46
	/* Wait for transmission complete */
	while (!(SPSR & (1<<SPIF)))
 556:	0d b4       	in	r0, 0x2d	; 45
 558:	07 fe       	sbrs	r0, 7
 55a:	fd cf       	rjmp	.-6      	; 0x556 <SPI_write+0x2>
		;
}
 55c:	08 95       	ret

0000055e <SPI_read>:

char SPI_read(void)
{
	/* Start transmission */
	SPDR = 0x00;
 55e:	1e bc       	out	0x2e, r1	; 46
	/* Wait for transmission complete */
	while (!(SPSR & (1<<SPIF)))
 560:	0d b4       	in	r0, 0x2d	; 45
 562:	07 fe       	sbrs	r0, 7
 564:	fd cf       	rjmp	.-6      	; 0x560 <SPI_read+0x2>
		;
	return SPDR;
 566:	8e b5       	in	r24, 0x2e	; 46
}
 568:	08 95       	ret

0000056a <SPI_on>:

void SPI_on(void)
{
	PORTB &= 0x38;
 56a:	85 b1       	in	r24, 0x05	; 5
 56c:	88 73       	andi	r24, 0x38	; 56
 56e:	85 b9       	out	0x05, r24	; 5
 570:	08 95       	ret

00000572 <SPI_off>:
}

void SPI_off(void)
{
	PORTB |= (1 << PB7);
 572:	2f 9a       	sbi	0x05, 7	; 5
 574:	08 95       	ret

00000576 <UART_transmit>:
#include <stdio.h>
#include <avr/io.h>

void UART_transmit(unsigned char data){
	/* Wait for empty transmit buffer */
	while(!(UCSR0A&(1<<UDRE0)))
 576:	e0 ec       	ldi	r30, 0xC0	; 192
 578:	f0 e0       	ldi	r31, 0x00	; 0
 57a:	90 81       	ld	r25, Z
 57c:	95 ff       	sbrs	r25, 5
 57e:	fd cf       	rjmp	.-6      	; 0x57a <UART_transmit+0x4>
		;
	/* Put data into buffer */
	UDR0 = data;
 580:	80 93 c6 00 	sts	0x00C6, r24
 584:	08 95       	ret

00000586 <UART_receive>:
}

unsigned char UART_receive(void){
	/* Wait for data to be received */
	while(!(UCSR0A&(1<<RXC0)))
 586:	e0 ec       	ldi	r30, 0xC0	; 192
 588:	f0 e0       	ldi	r31, 0x00	; 0
 58a:	80 81       	ld	r24, Z
 58c:	88 23       	and	r24, r24
 58e:	ec f7       	brge	.-6      	; 0x58a <UART_receive+0x4>
		;
	/* Get and return received data from buffer */
	return UDR0;
 590:	80 91 c6 00 	lds	r24, 0x00C6
}
 594:	08 95       	ret

00000596 <UART_init>:

void UART_init(unsigned int ubrr){
	/* Set baud rate */
	UBRR0L = (unsigned char) ubrr;
 596:	80 93 c4 00 	sts	0x00C4, r24
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 59a:	88 e1       	ldi	r24, 0x18	; 24
 59c:	80 93 c1 00 	sts	0x00C1, r24
	/* Link printf to UART transmissions */	
	fdevopen(UART_transmit,UART_receive);
 5a0:	63 ec       	ldi	r22, 0xC3	; 195
 5a2:	72 e0       	ldi	r23, 0x02	; 2
 5a4:	8b eb       	ldi	r24, 0xBB	; 187
 5a6:	92 e0       	ldi	r25, 0x02	; 2
 5a8:	af c1       	rjmp	.+862    	; 0x908 <fdevopen>
 5aa:	08 95       	ret

000005ac <__subsf3>:
 5ac:	50 58       	subi	r21, 0x80	; 128

000005ae <__addsf3>:
 5ae:	bb 27       	eor	r27, r27
 5b0:	aa 27       	eor	r26, r26
 5b2:	0e d0       	rcall	.+28     	; 0x5d0 <__addsf3x>
 5b4:	08 c1       	rjmp	.+528    	; 0x7c6 <__fp_round>
 5b6:	f9 d0       	rcall	.+498    	; 0x7aa <__fp_pscA>
 5b8:	30 f0       	brcs	.+12     	; 0x5c6 <__addsf3+0x18>
 5ba:	fe d0       	rcall	.+508    	; 0x7b8 <__fp_pscB>
 5bc:	20 f0       	brcs	.+8      	; 0x5c6 <__addsf3+0x18>
 5be:	31 f4       	brne	.+12     	; 0x5cc <__addsf3+0x1e>
 5c0:	9f 3f       	cpi	r25, 0xFF	; 255
 5c2:	11 f4       	brne	.+4      	; 0x5c8 <__addsf3+0x1a>
 5c4:	1e f4       	brtc	.+6      	; 0x5cc <__addsf3+0x1e>
 5c6:	ee c0       	rjmp	.+476    	; 0x7a4 <__fp_nan>
 5c8:	0e f4       	brtc	.+2      	; 0x5cc <__addsf3+0x1e>
 5ca:	e0 95       	com	r30
 5cc:	e7 fb       	bst	r30, 7
 5ce:	e4 c0       	rjmp	.+456    	; 0x798 <__fp_inf>

000005d0 <__addsf3x>:
 5d0:	e9 2f       	mov	r30, r25
 5d2:	0a d1       	rcall	.+532    	; 0x7e8 <__fp_split3>
 5d4:	80 f3       	brcs	.-32     	; 0x5b6 <__addsf3+0x8>
 5d6:	ba 17       	cp	r27, r26
 5d8:	62 07       	cpc	r22, r18
 5da:	73 07       	cpc	r23, r19
 5dc:	84 07       	cpc	r24, r20
 5de:	95 07       	cpc	r25, r21
 5e0:	18 f0       	brcs	.+6      	; 0x5e8 <__addsf3x+0x18>
 5e2:	71 f4       	brne	.+28     	; 0x600 <__addsf3x+0x30>
 5e4:	9e f5       	brtc	.+102    	; 0x64c <__addsf3x+0x7c>
 5e6:	22 c1       	rjmp	.+580    	; 0x82c <__fp_zero>
 5e8:	0e f4       	brtc	.+2      	; 0x5ec <__addsf3x+0x1c>
 5ea:	e0 95       	com	r30
 5ec:	0b 2e       	mov	r0, r27
 5ee:	ba 2f       	mov	r27, r26
 5f0:	a0 2d       	mov	r26, r0
 5f2:	0b 01       	movw	r0, r22
 5f4:	b9 01       	movw	r22, r18
 5f6:	90 01       	movw	r18, r0
 5f8:	0c 01       	movw	r0, r24
 5fa:	ca 01       	movw	r24, r20
 5fc:	a0 01       	movw	r20, r0
 5fe:	11 24       	eor	r1, r1
 600:	ff 27       	eor	r31, r31
 602:	59 1b       	sub	r21, r25
 604:	99 f0       	breq	.+38     	; 0x62c <__addsf3x+0x5c>
 606:	59 3f       	cpi	r21, 0xF9	; 249
 608:	50 f4       	brcc	.+20     	; 0x61e <__addsf3x+0x4e>
 60a:	50 3e       	cpi	r21, 0xE0	; 224
 60c:	68 f1       	brcs	.+90     	; 0x668 <__addsf3x+0x98>
 60e:	1a 16       	cp	r1, r26
 610:	f0 40       	sbci	r31, 0x00	; 0
 612:	a2 2f       	mov	r26, r18
 614:	23 2f       	mov	r18, r19
 616:	34 2f       	mov	r19, r20
 618:	44 27       	eor	r20, r20
 61a:	58 5f       	subi	r21, 0xF8	; 248
 61c:	f3 cf       	rjmp	.-26     	; 0x604 <__addsf3x+0x34>
 61e:	46 95       	lsr	r20
 620:	37 95       	ror	r19
 622:	27 95       	ror	r18
 624:	a7 95       	ror	r26
 626:	f0 40       	sbci	r31, 0x00	; 0
 628:	53 95       	inc	r21
 62a:	c9 f7       	brne	.-14     	; 0x61e <__addsf3x+0x4e>
 62c:	7e f4       	brtc	.+30     	; 0x64c <__addsf3x+0x7c>
 62e:	1f 16       	cp	r1, r31
 630:	ba 0b       	sbc	r27, r26
 632:	62 0b       	sbc	r22, r18
 634:	73 0b       	sbc	r23, r19
 636:	84 0b       	sbc	r24, r20
 638:	ba f0       	brmi	.+46     	; 0x668 <__addsf3x+0x98>
 63a:	91 50       	subi	r25, 0x01	; 1
 63c:	a1 f0       	breq	.+40     	; 0x666 <__addsf3x+0x96>
 63e:	ff 0f       	add	r31, r31
 640:	bb 1f       	adc	r27, r27
 642:	66 1f       	adc	r22, r22
 644:	77 1f       	adc	r23, r23
 646:	88 1f       	adc	r24, r24
 648:	c2 f7       	brpl	.-16     	; 0x63a <__addsf3x+0x6a>
 64a:	0e c0       	rjmp	.+28     	; 0x668 <__addsf3x+0x98>
 64c:	ba 0f       	add	r27, r26
 64e:	62 1f       	adc	r22, r18
 650:	73 1f       	adc	r23, r19
 652:	84 1f       	adc	r24, r20
 654:	48 f4       	brcc	.+18     	; 0x668 <__addsf3x+0x98>
 656:	87 95       	ror	r24
 658:	77 95       	ror	r23
 65a:	67 95       	ror	r22
 65c:	b7 95       	ror	r27
 65e:	f7 95       	ror	r31
 660:	9e 3f       	cpi	r25, 0xFE	; 254
 662:	08 f0       	brcs	.+2      	; 0x666 <__addsf3x+0x96>
 664:	b3 cf       	rjmp	.-154    	; 0x5cc <__addsf3+0x1e>
 666:	93 95       	inc	r25
 668:	88 0f       	add	r24, r24
 66a:	08 f0       	brcs	.+2      	; 0x66e <__addsf3x+0x9e>
 66c:	99 27       	eor	r25, r25
 66e:	ee 0f       	add	r30, r30
 670:	97 95       	ror	r25
 672:	87 95       	ror	r24
 674:	08 95       	ret

00000676 <__cmpsf2>:
 676:	6c d0       	rcall	.+216    	; 0x750 <__fp_cmp>
 678:	08 f4       	brcc	.+2      	; 0x67c <__cmpsf2+0x6>
 67a:	81 e0       	ldi	r24, 0x01	; 1
 67c:	08 95       	ret

0000067e <__fixunssfsi>:
 67e:	bc d0       	rcall	.+376    	; 0x7f8 <__fp_splitA>
 680:	88 f0       	brcs	.+34     	; 0x6a4 <__fixunssfsi+0x26>
 682:	9f 57       	subi	r25, 0x7F	; 127
 684:	90 f0       	brcs	.+36     	; 0x6aa <__fixunssfsi+0x2c>
 686:	b9 2f       	mov	r27, r25
 688:	99 27       	eor	r25, r25
 68a:	b7 51       	subi	r27, 0x17	; 23
 68c:	a0 f0       	brcs	.+40     	; 0x6b6 <__fixunssfsi+0x38>
 68e:	d1 f0       	breq	.+52     	; 0x6c4 <__fixunssfsi+0x46>
 690:	66 0f       	add	r22, r22
 692:	77 1f       	adc	r23, r23
 694:	88 1f       	adc	r24, r24
 696:	99 1f       	adc	r25, r25
 698:	1a f0       	brmi	.+6      	; 0x6a0 <__fixunssfsi+0x22>
 69a:	ba 95       	dec	r27
 69c:	c9 f7       	brne	.-14     	; 0x690 <__fixunssfsi+0x12>
 69e:	12 c0       	rjmp	.+36     	; 0x6c4 <__fixunssfsi+0x46>
 6a0:	b1 30       	cpi	r27, 0x01	; 1
 6a2:	81 f0       	breq	.+32     	; 0x6c4 <__fixunssfsi+0x46>
 6a4:	c3 d0       	rcall	.+390    	; 0x82c <__fp_zero>
 6a6:	b1 e0       	ldi	r27, 0x01	; 1
 6a8:	08 95       	ret
 6aa:	c0 c0       	rjmp	.+384    	; 0x82c <__fp_zero>
 6ac:	67 2f       	mov	r22, r23
 6ae:	78 2f       	mov	r23, r24
 6b0:	88 27       	eor	r24, r24
 6b2:	b8 5f       	subi	r27, 0xF8	; 248
 6b4:	39 f0       	breq	.+14     	; 0x6c4 <__fixunssfsi+0x46>
 6b6:	b9 3f       	cpi	r27, 0xF9	; 249
 6b8:	cc f3       	brlt	.-14     	; 0x6ac <__fixunssfsi+0x2e>
 6ba:	86 95       	lsr	r24
 6bc:	77 95       	ror	r23
 6be:	67 95       	ror	r22
 6c0:	b3 95       	inc	r27
 6c2:	d9 f7       	brne	.-10     	; 0x6ba <__fixunssfsi+0x3c>
 6c4:	3e f4       	brtc	.+14     	; 0x6d4 <__fixunssfsi+0x56>
 6c6:	90 95       	com	r25
 6c8:	80 95       	com	r24
 6ca:	70 95       	com	r23
 6cc:	61 95       	neg	r22
 6ce:	7f 4f       	sbci	r23, 0xFF	; 255
 6d0:	8f 4f       	sbci	r24, 0xFF	; 255
 6d2:	9f 4f       	sbci	r25, 0xFF	; 255
 6d4:	08 95       	ret

000006d6 <__floatunsisf>:
 6d6:	e8 94       	clt
 6d8:	09 c0       	rjmp	.+18     	; 0x6ec <__floatsisf+0x12>

000006da <__floatsisf>:
 6da:	97 fb       	bst	r25, 7
 6dc:	3e f4       	brtc	.+14     	; 0x6ec <__floatsisf+0x12>
 6de:	90 95       	com	r25
 6e0:	80 95       	com	r24
 6e2:	70 95       	com	r23
 6e4:	61 95       	neg	r22
 6e6:	7f 4f       	sbci	r23, 0xFF	; 255
 6e8:	8f 4f       	sbci	r24, 0xFF	; 255
 6ea:	9f 4f       	sbci	r25, 0xFF	; 255
 6ec:	99 23       	and	r25, r25
 6ee:	a9 f0       	breq	.+42     	; 0x71a <__floatsisf+0x40>
 6f0:	f9 2f       	mov	r31, r25
 6f2:	96 e9       	ldi	r25, 0x96	; 150
 6f4:	bb 27       	eor	r27, r27
 6f6:	93 95       	inc	r25
 6f8:	f6 95       	lsr	r31
 6fa:	87 95       	ror	r24
 6fc:	77 95       	ror	r23
 6fe:	67 95       	ror	r22
 700:	b7 95       	ror	r27
 702:	f1 11       	cpse	r31, r1
 704:	f8 cf       	rjmp	.-16     	; 0x6f6 <__floatsisf+0x1c>
 706:	fa f4       	brpl	.+62     	; 0x746 <__floatsisf+0x6c>
 708:	bb 0f       	add	r27, r27
 70a:	11 f4       	brne	.+4      	; 0x710 <__floatsisf+0x36>
 70c:	60 ff       	sbrs	r22, 0
 70e:	1b c0       	rjmp	.+54     	; 0x746 <__floatsisf+0x6c>
 710:	6f 5f       	subi	r22, 0xFF	; 255
 712:	7f 4f       	sbci	r23, 0xFF	; 255
 714:	8f 4f       	sbci	r24, 0xFF	; 255
 716:	9f 4f       	sbci	r25, 0xFF	; 255
 718:	16 c0       	rjmp	.+44     	; 0x746 <__floatsisf+0x6c>
 71a:	88 23       	and	r24, r24
 71c:	11 f0       	breq	.+4      	; 0x722 <__floatsisf+0x48>
 71e:	96 e9       	ldi	r25, 0x96	; 150
 720:	11 c0       	rjmp	.+34     	; 0x744 <__floatsisf+0x6a>
 722:	77 23       	and	r23, r23
 724:	21 f0       	breq	.+8      	; 0x72e <__floatsisf+0x54>
 726:	9e e8       	ldi	r25, 0x8E	; 142
 728:	87 2f       	mov	r24, r23
 72a:	76 2f       	mov	r23, r22
 72c:	05 c0       	rjmp	.+10     	; 0x738 <__floatsisf+0x5e>
 72e:	66 23       	and	r22, r22
 730:	71 f0       	breq	.+28     	; 0x74e <__floatsisf+0x74>
 732:	96 e8       	ldi	r25, 0x86	; 134
 734:	86 2f       	mov	r24, r22
 736:	70 e0       	ldi	r23, 0x00	; 0
 738:	60 e0       	ldi	r22, 0x00	; 0
 73a:	2a f0       	brmi	.+10     	; 0x746 <__floatsisf+0x6c>
 73c:	9a 95       	dec	r25
 73e:	66 0f       	add	r22, r22
 740:	77 1f       	adc	r23, r23
 742:	88 1f       	adc	r24, r24
 744:	da f7       	brpl	.-10     	; 0x73c <__floatsisf+0x62>
 746:	88 0f       	add	r24, r24
 748:	96 95       	lsr	r25
 74a:	87 95       	ror	r24
 74c:	97 f9       	bld	r25, 7
 74e:	08 95       	ret

00000750 <__fp_cmp>:
 750:	99 0f       	add	r25, r25
 752:	00 08       	sbc	r0, r0
 754:	55 0f       	add	r21, r21
 756:	aa 0b       	sbc	r26, r26
 758:	e0 e8       	ldi	r30, 0x80	; 128
 75a:	fe ef       	ldi	r31, 0xFE	; 254
 75c:	16 16       	cp	r1, r22
 75e:	17 06       	cpc	r1, r23
 760:	e8 07       	cpc	r30, r24
 762:	f9 07       	cpc	r31, r25
 764:	c0 f0       	brcs	.+48     	; 0x796 <__fp_cmp+0x46>
 766:	12 16       	cp	r1, r18
 768:	13 06       	cpc	r1, r19
 76a:	e4 07       	cpc	r30, r20
 76c:	f5 07       	cpc	r31, r21
 76e:	98 f0       	brcs	.+38     	; 0x796 <__fp_cmp+0x46>
 770:	62 1b       	sub	r22, r18
 772:	73 0b       	sbc	r23, r19
 774:	84 0b       	sbc	r24, r20
 776:	95 0b       	sbc	r25, r21
 778:	39 f4       	brne	.+14     	; 0x788 <__fp_cmp+0x38>
 77a:	0a 26       	eor	r0, r26
 77c:	61 f0       	breq	.+24     	; 0x796 <__fp_cmp+0x46>
 77e:	23 2b       	or	r18, r19
 780:	24 2b       	or	r18, r20
 782:	25 2b       	or	r18, r21
 784:	21 f4       	brne	.+8      	; 0x78e <__fp_cmp+0x3e>
 786:	08 95       	ret
 788:	0a 26       	eor	r0, r26
 78a:	09 f4       	brne	.+2      	; 0x78e <__fp_cmp+0x3e>
 78c:	a1 40       	sbci	r26, 0x01	; 1
 78e:	a6 95       	lsr	r26
 790:	8f ef       	ldi	r24, 0xFF	; 255
 792:	81 1d       	adc	r24, r1
 794:	81 1d       	adc	r24, r1
 796:	08 95       	ret

00000798 <__fp_inf>:
 798:	97 f9       	bld	r25, 7
 79a:	9f 67       	ori	r25, 0x7F	; 127
 79c:	80 e8       	ldi	r24, 0x80	; 128
 79e:	70 e0       	ldi	r23, 0x00	; 0
 7a0:	60 e0       	ldi	r22, 0x00	; 0
 7a2:	08 95       	ret

000007a4 <__fp_nan>:
 7a4:	9f ef       	ldi	r25, 0xFF	; 255
 7a6:	80 ec       	ldi	r24, 0xC0	; 192
 7a8:	08 95       	ret

000007aa <__fp_pscA>:
 7aa:	00 24       	eor	r0, r0
 7ac:	0a 94       	dec	r0
 7ae:	16 16       	cp	r1, r22
 7b0:	17 06       	cpc	r1, r23
 7b2:	18 06       	cpc	r1, r24
 7b4:	09 06       	cpc	r0, r25
 7b6:	08 95       	ret

000007b8 <__fp_pscB>:
 7b8:	00 24       	eor	r0, r0
 7ba:	0a 94       	dec	r0
 7bc:	12 16       	cp	r1, r18
 7be:	13 06       	cpc	r1, r19
 7c0:	14 06       	cpc	r1, r20
 7c2:	05 06       	cpc	r0, r21
 7c4:	08 95       	ret

000007c6 <__fp_round>:
 7c6:	09 2e       	mov	r0, r25
 7c8:	03 94       	inc	r0
 7ca:	00 0c       	add	r0, r0
 7cc:	11 f4       	brne	.+4      	; 0x7d2 <__fp_round+0xc>
 7ce:	88 23       	and	r24, r24
 7d0:	52 f0       	brmi	.+20     	; 0x7e6 <__fp_round+0x20>
 7d2:	bb 0f       	add	r27, r27
 7d4:	40 f4       	brcc	.+16     	; 0x7e6 <__fp_round+0x20>
 7d6:	bf 2b       	or	r27, r31
 7d8:	11 f4       	brne	.+4      	; 0x7de <__fp_round+0x18>
 7da:	60 ff       	sbrs	r22, 0
 7dc:	04 c0       	rjmp	.+8      	; 0x7e6 <__fp_round+0x20>
 7de:	6f 5f       	subi	r22, 0xFF	; 255
 7e0:	7f 4f       	sbci	r23, 0xFF	; 255
 7e2:	8f 4f       	sbci	r24, 0xFF	; 255
 7e4:	9f 4f       	sbci	r25, 0xFF	; 255
 7e6:	08 95       	ret

000007e8 <__fp_split3>:
 7e8:	57 fd       	sbrc	r21, 7
 7ea:	90 58       	subi	r25, 0x80	; 128
 7ec:	44 0f       	add	r20, r20
 7ee:	55 1f       	adc	r21, r21
 7f0:	59 f0       	breq	.+22     	; 0x808 <__fp_splitA+0x10>
 7f2:	5f 3f       	cpi	r21, 0xFF	; 255
 7f4:	71 f0       	breq	.+28     	; 0x812 <__fp_splitA+0x1a>
 7f6:	47 95       	ror	r20

000007f8 <__fp_splitA>:
 7f8:	88 0f       	add	r24, r24
 7fa:	97 fb       	bst	r25, 7
 7fc:	99 1f       	adc	r25, r25
 7fe:	61 f0       	breq	.+24     	; 0x818 <__fp_splitA+0x20>
 800:	9f 3f       	cpi	r25, 0xFF	; 255
 802:	79 f0       	breq	.+30     	; 0x822 <__fp_splitA+0x2a>
 804:	87 95       	ror	r24
 806:	08 95       	ret
 808:	12 16       	cp	r1, r18
 80a:	13 06       	cpc	r1, r19
 80c:	14 06       	cpc	r1, r20
 80e:	55 1f       	adc	r21, r21
 810:	f2 cf       	rjmp	.-28     	; 0x7f6 <__fp_split3+0xe>
 812:	46 95       	lsr	r20
 814:	f1 df       	rcall	.-30     	; 0x7f8 <__fp_splitA>
 816:	08 c0       	rjmp	.+16     	; 0x828 <__fp_splitA+0x30>
 818:	16 16       	cp	r1, r22
 81a:	17 06       	cpc	r1, r23
 81c:	18 06       	cpc	r1, r24
 81e:	99 1f       	adc	r25, r25
 820:	f1 cf       	rjmp	.-30     	; 0x804 <__fp_splitA+0xc>
 822:	86 95       	lsr	r24
 824:	71 05       	cpc	r23, r1
 826:	61 05       	cpc	r22, r1
 828:	08 94       	sec
 82a:	08 95       	ret

0000082c <__fp_zero>:
 82c:	e8 94       	clt

0000082e <__fp_szero>:
 82e:	bb 27       	eor	r27, r27
 830:	66 27       	eor	r22, r22
 832:	77 27       	eor	r23, r23
 834:	cb 01       	movw	r24, r22
 836:	97 f9       	bld	r25, 7
 838:	08 95       	ret

0000083a <__gesf2>:
 83a:	8a df       	rcall	.-236    	; 0x750 <__fp_cmp>
 83c:	08 f4       	brcc	.+2      	; 0x840 <__gesf2+0x6>
 83e:	8f ef       	ldi	r24, 0xFF	; 255
 840:	08 95       	ret

00000842 <__mulsf3>:
 842:	0b d0       	rcall	.+22     	; 0x85a <__mulsf3x>
 844:	c0 cf       	rjmp	.-128    	; 0x7c6 <__fp_round>
 846:	b1 df       	rcall	.-158    	; 0x7aa <__fp_pscA>
 848:	28 f0       	brcs	.+10     	; 0x854 <__mulsf3+0x12>
 84a:	b6 df       	rcall	.-148    	; 0x7b8 <__fp_pscB>
 84c:	18 f0       	brcs	.+6      	; 0x854 <__mulsf3+0x12>
 84e:	95 23       	and	r25, r21
 850:	09 f0       	breq	.+2      	; 0x854 <__mulsf3+0x12>
 852:	a2 cf       	rjmp	.-188    	; 0x798 <__fp_inf>
 854:	a7 cf       	rjmp	.-178    	; 0x7a4 <__fp_nan>
 856:	11 24       	eor	r1, r1
 858:	ea cf       	rjmp	.-44     	; 0x82e <__fp_szero>

0000085a <__mulsf3x>:
 85a:	c6 df       	rcall	.-116    	; 0x7e8 <__fp_split3>
 85c:	a0 f3       	brcs	.-24     	; 0x846 <__mulsf3+0x4>

0000085e <__mulsf3_pse>:
 85e:	95 9f       	mul	r25, r21
 860:	d1 f3       	breq	.-12     	; 0x856 <__mulsf3+0x14>
 862:	95 0f       	add	r25, r21
 864:	50 e0       	ldi	r21, 0x00	; 0
 866:	55 1f       	adc	r21, r21
 868:	62 9f       	mul	r22, r18
 86a:	f0 01       	movw	r30, r0
 86c:	72 9f       	mul	r23, r18
 86e:	bb 27       	eor	r27, r27
 870:	f0 0d       	add	r31, r0
 872:	b1 1d       	adc	r27, r1
 874:	63 9f       	mul	r22, r19
 876:	aa 27       	eor	r26, r26
 878:	f0 0d       	add	r31, r0
 87a:	b1 1d       	adc	r27, r1
 87c:	aa 1f       	adc	r26, r26
 87e:	64 9f       	mul	r22, r20
 880:	66 27       	eor	r22, r22
 882:	b0 0d       	add	r27, r0
 884:	a1 1d       	adc	r26, r1
 886:	66 1f       	adc	r22, r22
 888:	82 9f       	mul	r24, r18
 88a:	22 27       	eor	r18, r18
 88c:	b0 0d       	add	r27, r0
 88e:	a1 1d       	adc	r26, r1
 890:	62 1f       	adc	r22, r18
 892:	73 9f       	mul	r23, r19
 894:	b0 0d       	add	r27, r0
 896:	a1 1d       	adc	r26, r1
 898:	62 1f       	adc	r22, r18
 89a:	83 9f       	mul	r24, r19
 89c:	a0 0d       	add	r26, r0
 89e:	61 1d       	adc	r22, r1
 8a0:	22 1f       	adc	r18, r18
 8a2:	74 9f       	mul	r23, r20
 8a4:	33 27       	eor	r19, r19
 8a6:	a0 0d       	add	r26, r0
 8a8:	61 1d       	adc	r22, r1
 8aa:	23 1f       	adc	r18, r19
 8ac:	84 9f       	mul	r24, r20
 8ae:	60 0d       	add	r22, r0
 8b0:	21 1d       	adc	r18, r1
 8b2:	82 2f       	mov	r24, r18
 8b4:	76 2f       	mov	r23, r22
 8b6:	6a 2f       	mov	r22, r26
 8b8:	11 24       	eor	r1, r1
 8ba:	9f 57       	subi	r25, 0x7F	; 127
 8bc:	50 40       	sbci	r21, 0x00	; 0
 8be:	8a f0       	brmi	.+34     	; 0x8e2 <__mulsf3_pse+0x84>
 8c0:	e1 f0       	breq	.+56     	; 0x8fa <__mulsf3_pse+0x9c>
 8c2:	88 23       	and	r24, r24
 8c4:	4a f0       	brmi	.+18     	; 0x8d8 <__mulsf3_pse+0x7a>
 8c6:	ee 0f       	add	r30, r30
 8c8:	ff 1f       	adc	r31, r31
 8ca:	bb 1f       	adc	r27, r27
 8cc:	66 1f       	adc	r22, r22
 8ce:	77 1f       	adc	r23, r23
 8d0:	88 1f       	adc	r24, r24
 8d2:	91 50       	subi	r25, 0x01	; 1
 8d4:	50 40       	sbci	r21, 0x00	; 0
 8d6:	a9 f7       	brne	.-22     	; 0x8c2 <__mulsf3_pse+0x64>
 8d8:	9e 3f       	cpi	r25, 0xFE	; 254
 8da:	51 05       	cpc	r21, r1
 8dc:	70 f0       	brcs	.+28     	; 0x8fa <__mulsf3_pse+0x9c>
 8de:	5c cf       	rjmp	.-328    	; 0x798 <__fp_inf>
 8e0:	a6 cf       	rjmp	.-180    	; 0x82e <__fp_szero>
 8e2:	5f 3f       	cpi	r21, 0xFF	; 255
 8e4:	ec f3       	brlt	.-6      	; 0x8e0 <__mulsf3_pse+0x82>
 8e6:	98 3e       	cpi	r25, 0xE8	; 232
 8e8:	dc f3       	brlt	.-10     	; 0x8e0 <__mulsf3_pse+0x82>
 8ea:	86 95       	lsr	r24
 8ec:	77 95       	ror	r23
 8ee:	67 95       	ror	r22
 8f0:	b7 95       	ror	r27
 8f2:	f7 95       	ror	r31
 8f4:	e7 95       	ror	r30
 8f6:	9f 5f       	subi	r25, 0xFF	; 255
 8f8:	c1 f7       	brne	.-16     	; 0x8ea <__mulsf3_pse+0x8c>
 8fa:	fe 2b       	or	r31, r30
 8fc:	88 0f       	add	r24, r24
 8fe:	91 1d       	adc	r25, r1
 900:	96 95       	lsr	r25
 902:	87 95       	ror	r24
 904:	97 f9       	bld	r25, 7
 906:	08 95       	ret

00000908 <fdevopen>:
 908:	0f 93       	push	r16
 90a:	1f 93       	push	r17
 90c:	cf 93       	push	r28
 90e:	df 93       	push	r29
 910:	ec 01       	movw	r28, r24
 912:	8b 01       	movw	r16, r22
 914:	00 97       	sbiw	r24, 0x00	; 0
 916:	31 f4       	brne	.+12     	; 0x924 <fdevopen+0x1c>
 918:	61 15       	cp	r22, r1
 91a:	71 05       	cpc	r23, r1
 91c:	19 f4       	brne	.+6      	; 0x924 <fdevopen+0x1c>
 91e:	80 e0       	ldi	r24, 0x00	; 0
 920:	90 e0       	ldi	r25, 0x00	; 0
 922:	37 c0       	rjmp	.+110    	; 0x992 <fdevopen+0x8a>
 924:	6e e0       	ldi	r22, 0x0E	; 14
 926:	70 e0       	ldi	r23, 0x00	; 0
 928:	81 e0       	ldi	r24, 0x01	; 1
 92a:	90 e0       	ldi	r25, 0x00	; 0
 92c:	64 d0       	rcall	.+200    	; 0x9f6 <calloc>
 92e:	fc 01       	movw	r30, r24
 930:	00 97       	sbiw	r24, 0x00	; 0
 932:	a9 f3       	breq	.-22     	; 0x91e <fdevopen+0x16>
 934:	80 e8       	ldi	r24, 0x80	; 128
 936:	83 83       	std	Z+3, r24	; 0x03
 938:	01 15       	cp	r16, r1
 93a:	11 05       	cpc	r17, r1
 93c:	71 f0       	breq	.+28     	; 0x95a <fdevopen+0x52>
 93e:	13 87       	std	Z+11, r17	; 0x0b
 940:	02 87       	std	Z+10, r16	; 0x0a
 942:	81 e8       	ldi	r24, 0x81	; 129
 944:	83 83       	std	Z+3, r24	; 0x03
 946:	80 91 0e 02 	lds	r24, 0x020E
 94a:	90 91 0f 02 	lds	r25, 0x020F
 94e:	89 2b       	or	r24, r25
 950:	21 f4       	brne	.+8      	; 0x95a <fdevopen+0x52>
 952:	f0 93 0f 02 	sts	0x020F, r31
 956:	e0 93 0e 02 	sts	0x020E, r30
 95a:	20 97       	sbiw	r28, 0x00	; 0
 95c:	c9 f0       	breq	.+50     	; 0x990 <fdevopen+0x88>
 95e:	d1 87       	std	Z+9, r29	; 0x09
 960:	c0 87       	std	Z+8, r28	; 0x08
 962:	83 81       	ldd	r24, Z+3	; 0x03
 964:	82 60       	ori	r24, 0x02	; 2
 966:	83 83       	std	Z+3, r24	; 0x03
 968:	80 91 10 02 	lds	r24, 0x0210
 96c:	90 91 11 02 	lds	r25, 0x0211
 970:	89 2b       	or	r24, r25
 972:	71 f4       	brne	.+28     	; 0x990 <fdevopen+0x88>
 974:	f0 93 11 02 	sts	0x0211, r31
 978:	e0 93 10 02 	sts	0x0210, r30
 97c:	80 91 12 02 	lds	r24, 0x0212
 980:	90 91 13 02 	lds	r25, 0x0213
 984:	89 2b       	or	r24, r25
 986:	21 f4       	brne	.+8      	; 0x990 <fdevopen+0x88>
 988:	f0 93 13 02 	sts	0x0213, r31
 98c:	e0 93 12 02 	sts	0x0212, r30
 990:	cf 01       	movw	r24, r30
 992:	df 91       	pop	r29
 994:	cf 91       	pop	r28
 996:	1f 91       	pop	r17
 998:	0f 91       	pop	r16
 99a:	08 95       	ret

0000099c <puts>:
 99c:	0f 93       	push	r16
 99e:	1f 93       	push	r17
 9a0:	cf 93       	push	r28
 9a2:	df 93       	push	r29
 9a4:	e0 91 10 02 	lds	r30, 0x0210
 9a8:	f0 91 11 02 	lds	r31, 0x0211
 9ac:	23 81       	ldd	r18, Z+3	; 0x03
 9ae:	21 ff       	sbrs	r18, 1
 9b0:	1b c0       	rjmp	.+54     	; 0x9e8 <puts+0x4c>
 9b2:	ec 01       	movw	r28, r24
 9b4:	00 e0       	ldi	r16, 0x00	; 0
 9b6:	10 e0       	ldi	r17, 0x00	; 0
 9b8:	89 91       	ld	r24, Y+
 9ba:	60 91 10 02 	lds	r22, 0x0210
 9be:	70 91 11 02 	lds	r23, 0x0211
 9c2:	db 01       	movw	r26, r22
 9c4:	18 96       	adiw	r26, 0x08	; 8
 9c6:	ed 91       	ld	r30, X+
 9c8:	fc 91       	ld	r31, X
 9ca:	19 97       	sbiw	r26, 0x09	; 9
 9cc:	88 23       	and	r24, r24
 9ce:	31 f0       	breq	.+12     	; 0x9dc <puts+0x40>
 9d0:	19 95       	eicall
 9d2:	89 2b       	or	r24, r25
 9d4:	89 f3       	breq	.-30     	; 0x9b8 <puts+0x1c>
 9d6:	0f ef       	ldi	r16, 0xFF	; 255
 9d8:	1f ef       	ldi	r17, 0xFF	; 255
 9da:	ee cf       	rjmp	.-36     	; 0x9b8 <puts+0x1c>
 9dc:	8a e0       	ldi	r24, 0x0A	; 10
 9de:	19 95       	eicall
 9e0:	89 2b       	or	r24, r25
 9e2:	11 f4       	brne	.+4      	; 0x9e8 <puts+0x4c>
 9e4:	c8 01       	movw	r24, r16
 9e6:	02 c0       	rjmp	.+4      	; 0x9ec <puts+0x50>
 9e8:	8f ef       	ldi	r24, 0xFF	; 255
 9ea:	9f ef       	ldi	r25, 0xFF	; 255
 9ec:	df 91       	pop	r29
 9ee:	cf 91       	pop	r28
 9f0:	1f 91       	pop	r17
 9f2:	0f 91       	pop	r16
 9f4:	08 95       	ret

000009f6 <calloc>:
 9f6:	0f 93       	push	r16
 9f8:	1f 93       	push	r17
 9fa:	cf 93       	push	r28
 9fc:	df 93       	push	r29
 9fe:	86 9f       	mul	r24, r22
 a00:	80 01       	movw	r16, r0
 a02:	87 9f       	mul	r24, r23
 a04:	10 0d       	add	r17, r0
 a06:	96 9f       	mul	r25, r22
 a08:	10 0d       	add	r17, r0
 a0a:	11 24       	eor	r1, r1
 a0c:	c8 01       	movw	r24, r16
 a0e:	0d d0       	rcall	.+26     	; 0xa2a <malloc>
 a10:	ec 01       	movw	r28, r24
 a12:	00 97       	sbiw	r24, 0x00	; 0
 a14:	21 f0       	breq	.+8      	; 0xa1e <calloc+0x28>
 a16:	a8 01       	movw	r20, r16
 a18:	60 e0       	ldi	r22, 0x00	; 0
 a1a:	70 e0       	ldi	r23, 0x00	; 0
 a1c:	2d d1       	rcall	.+602    	; 0xc78 <memset>
 a1e:	ce 01       	movw	r24, r28
 a20:	df 91       	pop	r29
 a22:	cf 91       	pop	r28
 a24:	1f 91       	pop	r17
 a26:	0f 91       	pop	r16
 a28:	08 95       	ret

00000a2a <malloc>:
 a2a:	cf 93       	push	r28
 a2c:	df 93       	push	r29
 a2e:	82 30       	cpi	r24, 0x02	; 2
 a30:	91 05       	cpc	r25, r1
 a32:	10 f4       	brcc	.+4      	; 0xa38 <malloc+0xe>
 a34:	82 e0       	ldi	r24, 0x02	; 2
 a36:	90 e0       	ldi	r25, 0x00	; 0
 a38:	e0 91 16 02 	lds	r30, 0x0216
 a3c:	f0 91 17 02 	lds	r31, 0x0217
 a40:	20 e0       	ldi	r18, 0x00	; 0
 a42:	30 e0       	ldi	r19, 0x00	; 0
 a44:	a0 e0       	ldi	r26, 0x00	; 0
 a46:	b0 e0       	ldi	r27, 0x00	; 0
 a48:	30 97       	sbiw	r30, 0x00	; 0
 a4a:	39 f1       	breq	.+78     	; 0xa9a <malloc+0x70>
 a4c:	40 81       	ld	r20, Z
 a4e:	51 81       	ldd	r21, Z+1	; 0x01
 a50:	48 17       	cp	r20, r24
 a52:	59 07       	cpc	r21, r25
 a54:	b8 f0       	brcs	.+46     	; 0xa84 <malloc+0x5a>
 a56:	48 17       	cp	r20, r24
 a58:	59 07       	cpc	r21, r25
 a5a:	71 f4       	brne	.+28     	; 0xa78 <malloc+0x4e>
 a5c:	82 81       	ldd	r24, Z+2	; 0x02
 a5e:	93 81       	ldd	r25, Z+3	; 0x03
 a60:	10 97       	sbiw	r26, 0x00	; 0
 a62:	29 f0       	breq	.+10     	; 0xa6e <malloc+0x44>
 a64:	13 96       	adiw	r26, 0x03	; 3
 a66:	9c 93       	st	X, r25
 a68:	8e 93       	st	-X, r24
 a6a:	12 97       	sbiw	r26, 0x02	; 2
 a6c:	2c c0       	rjmp	.+88     	; 0xac6 <malloc+0x9c>
 a6e:	90 93 17 02 	sts	0x0217, r25
 a72:	80 93 16 02 	sts	0x0216, r24
 a76:	27 c0       	rjmp	.+78     	; 0xac6 <malloc+0x9c>
 a78:	21 15       	cp	r18, r1
 a7a:	31 05       	cpc	r19, r1
 a7c:	31 f0       	breq	.+12     	; 0xa8a <malloc+0x60>
 a7e:	42 17       	cp	r20, r18
 a80:	53 07       	cpc	r21, r19
 a82:	18 f0       	brcs	.+6      	; 0xa8a <malloc+0x60>
 a84:	a9 01       	movw	r20, r18
 a86:	db 01       	movw	r26, r22
 a88:	01 c0       	rjmp	.+2      	; 0xa8c <malloc+0x62>
 a8a:	ef 01       	movw	r28, r30
 a8c:	9a 01       	movw	r18, r20
 a8e:	bd 01       	movw	r22, r26
 a90:	df 01       	movw	r26, r30
 a92:	02 80       	ldd	r0, Z+2	; 0x02
 a94:	f3 81       	ldd	r31, Z+3	; 0x03
 a96:	e0 2d       	mov	r30, r0
 a98:	d7 cf       	rjmp	.-82     	; 0xa48 <malloc+0x1e>
 a9a:	21 15       	cp	r18, r1
 a9c:	31 05       	cpc	r19, r1
 a9e:	f9 f0       	breq	.+62     	; 0xade <malloc+0xb4>
 aa0:	28 1b       	sub	r18, r24
 aa2:	39 0b       	sbc	r19, r25
 aa4:	24 30       	cpi	r18, 0x04	; 4
 aa6:	31 05       	cpc	r19, r1
 aa8:	80 f4       	brcc	.+32     	; 0xaca <malloc+0xa0>
 aaa:	8a 81       	ldd	r24, Y+2	; 0x02
 aac:	9b 81       	ldd	r25, Y+3	; 0x03
 aae:	61 15       	cp	r22, r1
 ab0:	71 05       	cpc	r23, r1
 ab2:	21 f0       	breq	.+8      	; 0xabc <malloc+0x92>
 ab4:	fb 01       	movw	r30, r22
 ab6:	93 83       	std	Z+3, r25	; 0x03
 ab8:	82 83       	std	Z+2, r24	; 0x02
 aba:	04 c0       	rjmp	.+8      	; 0xac4 <malloc+0x9a>
 abc:	90 93 17 02 	sts	0x0217, r25
 ac0:	80 93 16 02 	sts	0x0216, r24
 ac4:	fe 01       	movw	r30, r28
 ac6:	32 96       	adiw	r30, 0x02	; 2
 ac8:	44 c0       	rjmp	.+136    	; 0xb52 <malloc+0x128>
 aca:	fe 01       	movw	r30, r28
 acc:	e2 0f       	add	r30, r18
 ace:	f3 1f       	adc	r31, r19
 ad0:	81 93       	st	Z+, r24
 ad2:	91 93       	st	Z+, r25
 ad4:	22 50       	subi	r18, 0x02	; 2
 ad6:	31 09       	sbc	r19, r1
 ad8:	39 83       	std	Y+1, r19	; 0x01
 ada:	28 83       	st	Y, r18
 adc:	3a c0       	rjmp	.+116    	; 0xb52 <malloc+0x128>
 ade:	20 91 14 02 	lds	r18, 0x0214
 ae2:	30 91 15 02 	lds	r19, 0x0215
 ae6:	23 2b       	or	r18, r19
 ae8:	41 f4       	brne	.+16     	; 0xafa <malloc+0xd0>
 aea:	20 91 02 02 	lds	r18, 0x0202
 aee:	30 91 03 02 	lds	r19, 0x0203
 af2:	30 93 15 02 	sts	0x0215, r19
 af6:	20 93 14 02 	sts	0x0214, r18
 afa:	20 91 00 02 	lds	r18, 0x0200
 afe:	30 91 01 02 	lds	r19, 0x0201
 b02:	21 15       	cp	r18, r1
 b04:	31 05       	cpc	r19, r1
 b06:	41 f4       	brne	.+16     	; 0xb18 <malloc+0xee>
 b08:	2d b7       	in	r18, 0x3d	; 61
 b0a:	3e b7       	in	r19, 0x3e	; 62
 b0c:	40 91 04 02 	lds	r20, 0x0204
 b10:	50 91 05 02 	lds	r21, 0x0205
 b14:	24 1b       	sub	r18, r20
 b16:	35 0b       	sbc	r19, r21
 b18:	e0 91 14 02 	lds	r30, 0x0214
 b1c:	f0 91 15 02 	lds	r31, 0x0215
 b20:	e2 17       	cp	r30, r18
 b22:	f3 07       	cpc	r31, r19
 b24:	a0 f4       	brcc	.+40     	; 0xb4e <malloc+0x124>
 b26:	2e 1b       	sub	r18, r30
 b28:	3f 0b       	sbc	r19, r31
 b2a:	28 17       	cp	r18, r24
 b2c:	39 07       	cpc	r19, r25
 b2e:	78 f0       	brcs	.+30     	; 0xb4e <malloc+0x124>
 b30:	ac 01       	movw	r20, r24
 b32:	4e 5f       	subi	r20, 0xFE	; 254
 b34:	5f 4f       	sbci	r21, 0xFF	; 255
 b36:	24 17       	cp	r18, r20
 b38:	35 07       	cpc	r19, r21
 b3a:	48 f0       	brcs	.+18     	; 0xb4e <malloc+0x124>
 b3c:	4e 0f       	add	r20, r30
 b3e:	5f 1f       	adc	r21, r31
 b40:	50 93 15 02 	sts	0x0215, r21
 b44:	40 93 14 02 	sts	0x0214, r20
 b48:	81 93       	st	Z+, r24
 b4a:	91 93       	st	Z+, r25
 b4c:	02 c0       	rjmp	.+4      	; 0xb52 <malloc+0x128>
 b4e:	e0 e0       	ldi	r30, 0x00	; 0
 b50:	f0 e0       	ldi	r31, 0x00	; 0
 b52:	cf 01       	movw	r24, r30
 b54:	df 91       	pop	r29
 b56:	cf 91       	pop	r28
 b58:	08 95       	ret

00000b5a <free>:
 b5a:	cf 93       	push	r28
 b5c:	df 93       	push	r29
 b5e:	00 97       	sbiw	r24, 0x00	; 0
 b60:	09 f4       	brne	.+2      	; 0xb64 <free+0xa>
 b62:	87 c0       	rjmp	.+270    	; 0xc72 <free+0x118>
 b64:	fc 01       	movw	r30, r24
 b66:	32 97       	sbiw	r30, 0x02	; 2
 b68:	13 82       	std	Z+3, r1	; 0x03
 b6a:	12 82       	std	Z+2, r1	; 0x02
 b6c:	c0 91 16 02 	lds	r28, 0x0216
 b70:	d0 91 17 02 	lds	r29, 0x0217
 b74:	20 97       	sbiw	r28, 0x00	; 0
 b76:	81 f4       	brne	.+32     	; 0xb98 <free+0x3e>
 b78:	20 81       	ld	r18, Z
 b7a:	31 81       	ldd	r19, Z+1	; 0x01
 b7c:	28 0f       	add	r18, r24
 b7e:	39 1f       	adc	r19, r25
 b80:	80 91 14 02 	lds	r24, 0x0214
 b84:	90 91 15 02 	lds	r25, 0x0215
 b88:	82 17       	cp	r24, r18
 b8a:	93 07       	cpc	r25, r19
 b8c:	79 f5       	brne	.+94     	; 0xbec <free+0x92>
 b8e:	f0 93 15 02 	sts	0x0215, r31
 b92:	e0 93 14 02 	sts	0x0214, r30
 b96:	6d c0       	rjmp	.+218    	; 0xc72 <free+0x118>
 b98:	de 01       	movw	r26, r28
 b9a:	20 e0       	ldi	r18, 0x00	; 0
 b9c:	30 e0       	ldi	r19, 0x00	; 0
 b9e:	ae 17       	cp	r26, r30
 ba0:	bf 07       	cpc	r27, r31
 ba2:	50 f4       	brcc	.+20     	; 0xbb8 <free+0x5e>
 ba4:	12 96       	adiw	r26, 0x02	; 2
 ba6:	4d 91       	ld	r20, X+
 ba8:	5c 91       	ld	r21, X
 baa:	13 97       	sbiw	r26, 0x03	; 3
 bac:	9d 01       	movw	r18, r26
 bae:	41 15       	cp	r20, r1
 bb0:	51 05       	cpc	r21, r1
 bb2:	09 f1       	breq	.+66     	; 0xbf6 <free+0x9c>
 bb4:	da 01       	movw	r26, r20
 bb6:	f3 cf       	rjmp	.-26     	; 0xb9e <free+0x44>
 bb8:	b3 83       	std	Z+3, r27	; 0x03
 bba:	a2 83       	std	Z+2, r26	; 0x02
 bbc:	40 81       	ld	r20, Z
 bbe:	51 81       	ldd	r21, Z+1	; 0x01
 bc0:	84 0f       	add	r24, r20
 bc2:	95 1f       	adc	r25, r21
 bc4:	8a 17       	cp	r24, r26
 bc6:	9b 07       	cpc	r25, r27
 bc8:	71 f4       	brne	.+28     	; 0xbe6 <free+0x8c>
 bca:	8d 91       	ld	r24, X+
 bcc:	9c 91       	ld	r25, X
 bce:	11 97       	sbiw	r26, 0x01	; 1
 bd0:	84 0f       	add	r24, r20
 bd2:	95 1f       	adc	r25, r21
 bd4:	02 96       	adiw	r24, 0x02	; 2
 bd6:	91 83       	std	Z+1, r25	; 0x01
 bd8:	80 83       	st	Z, r24
 bda:	12 96       	adiw	r26, 0x02	; 2
 bdc:	8d 91       	ld	r24, X+
 bde:	9c 91       	ld	r25, X
 be0:	13 97       	sbiw	r26, 0x03	; 3
 be2:	93 83       	std	Z+3, r25	; 0x03
 be4:	82 83       	std	Z+2, r24	; 0x02
 be6:	21 15       	cp	r18, r1
 be8:	31 05       	cpc	r19, r1
 bea:	29 f4       	brne	.+10     	; 0xbf6 <free+0x9c>
 bec:	f0 93 17 02 	sts	0x0217, r31
 bf0:	e0 93 16 02 	sts	0x0216, r30
 bf4:	3e c0       	rjmp	.+124    	; 0xc72 <free+0x118>
 bf6:	d9 01       	movw	r26, r18
 bf8:	13 96       	adiw	r26, 0x03	; 3
 bfa:	fc 93       	st	X, r31
 bfc:	ee 93       	st	-X, r30
 bfe:	12 97       	sbiw	r26, 0x02	; 2
 c00:	4d 91       	ld	r20, X+
 c02:	5d 91       	ld	r21, X+
 c04:	a4 0f       	add	r26, r20
 c06:	b5 1f       	adc	r27, r21
 c08:	ea 17       	cp	r30, r26
 c0a:	fb 07       	cpc	r31, r27
 c0c:	79 f4       	brne	.+30     	; 0xc2c <free+0xd2>
 c0e:	80 81       	ld	r24, Z
 c10:	91 81       	ldd	r25, Z+1	; 0x01
 c12:	84 0f       	add	r24, r20
 c14:	95 1f       	adc	r25, r21
 c16:	02 96       	adiw	r24, 0x02	; 2
 c18:	d9 01       	movw	r26, r18
 c1a:	11 96       	adiw	r26, 0x01	; 1
 c1c:	9c 93       	st	X, r25
 c1e:	8e 93       	st	-X, r24
 c20:	82 81       	ldd	r24, Z+2	; 0x02
 c22:	93 81       	ldd	r25, Z+3	; 0x03
 c24:	13 96       	adiw	r26, 0x03	; 3
 c26:	9c 93       	st	X, r25
 c28:	8e 93       	st	-X, r24
 c2a:	12 97       	sbiw	r26, 0x02	; 2
 c2c:	e0 e0       	ldi	r30, 0x00	; 0
 c2e:	f0 e0       	ldi	r31, 0x00	; 0
 c30:	8a 81       	ldd	r24, Y+2	; 0x02
 c32:	9b 81       	ldd	r25, Y+3	; 0x03
 c34:	00 97       	sbiw	r24, 0x00	; 0
 c36:	19 f0       	breq	.+6      	; 0xc3e <free+0xe4>
 c38:	fe 01       	movw	r30, r28
 c3a:	ec 01       	movw	r28, r24
 c3c:	f9 cf       	rjmp	.-14     	; 0xc30 <free+0xd6>
 c3e:	ce 01       	movw	r24, r28
 c40:	02 96       	adiw	r24, 0x02	; 2
 c42:	28 81       	ld	r18, Y
 c44:	39 81       	ldd	r19, Y+1	; 0x01
 c46:	82 0f       	add	r24, r18
 c48:	93 1f       	adc	r25, r19
 c4a:	20 91 14 02 	lds	r18, 0x0214
 c4e:	30 91 15 02 	lds	r19, 0x0215
 c52:	28 17       	cp	r18, r24
 c54:	39 07       	cpc	r19, r25
 c56:	69 f4       	brne	.+26     	; 0xc72 <free+0x118>
 c58:	30 97       	sbiw	r30, 0x00	; 0
 c5a:	29 f4       	brne	.+10     	; 0xc66 <free+0x10c>
 c5c:	10 92 17 02 	sts	0x0217, r1
 c60:	10 92 16 02 	sts	0x0216, r1
 c64:	02 c0       	rjmp	.+4      	; 0xc6a <free+0x110>
 c66:	13 82       	std	Z+3, r1	; 0x03
 c68:	12 82       	std	Z+2, r1	; 0x02
 c6a:	d0 93 15 02 	sts	0x0215, r29
 c6e:	c0 93 14 02 	sts	0x0214, r28
 c72:	df 91       	pop	r29
 c74:	cf 91       	pop	r28
 c76:	08 95       	ret

00000c78 <memset>:
 c78:	dc 01       	movw	r26, r24
 c7a:	01 c0       	rjmp	.+2      	; 0xc7e <memset+0x6>
 c7c:	6d 93       	st	X+, r22
 c7e:	41 50       	subi	r20, 0x01	; 1
 c80:	50 40       	sbci	r21, 0x00	; 0
 c82:	e0 f7       	brcc	.-8      	; 0xc7c <memset+0x4>
 c84:	08 95       	ret

00000c86 <_exit>:
 c86:	f8 94       	cli

00000c88 <__stop_program>:
 c88:	ff cf       	rjmp	.-2      	; 0xc88 <__stop_program>
